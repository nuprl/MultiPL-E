language: jl
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppawg6mvg.jl:5\nin expression starting at /tmp/tmppawg6mvg.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpivik6qbh.jl:5\nin expression starting at /tmp/tmpivik6qbh.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        return a \n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time \nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdhg7bk0j.jl:9\nin expression starting at /tmp/tmpdhg7bk0j.jl:9\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</code>\n<|/ a tags=julia,recursion,greatest-common-divisor |>\n\
    <| c |>\nThis doesn't work if `a` is negative.\n<|/ c |>\n<| c |>\nYes, I forgot\
    \ that case. Thanks for pointing it out.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpba6r00vj.jl:5\nin expression starting at /tmp/tmpba6r00vj.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp7kzluxf.jl:5\nin expression starting at /tmp/tmpp7kzluxf.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,6)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbj2ok2fl.jl:5\nin expression starting at /tmp/tmpbj2ok2fl.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(8, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(8, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(8, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(8, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(8, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(8, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(8, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(8, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(8, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(8, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(8, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(8, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6yfk93xk.jl:5\nin expression starting at /tmp/tmp6yfk93xk.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    greatest_common_divisor = a % b\n    return greatest_common_divisor\nend\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpka0ibuxc.jl:9

    '
  stdout: "test set: Test Failed at /tmp/tmpka0ibuxc.jl:12\n  Expression: candidate(3,\
    \ 7) == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\ntest set: Test\
    \ Failed at /tmp/tmpka0ibuxc.jl:13\n  Expression: candidate(10, 15) == 5\n   Evaluated:\
    \ 10 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\ntest set: Test\
    \ Failed at /tmp/tmpka0ibuxc.jl:15\n  Expression: candidate(144, 60) == 12\n \
    \  Evaluated: 24 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659747700
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^8)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^7)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^6)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^5)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^4)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^3)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^2)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^1)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 8)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 7)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 6)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 5)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 3)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 2)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 0)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf9n_6vim.jl:9\nin expression starting at /tmp/tmpf9n_6vim.jl:9\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu4x109bh.jl:5\nin expression starting at /tmp/tmpu4x109bh.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the greatest common\
    \ divisor of three integers a and b and c.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpruvmsj4c.jl:5\nin expression starting at /tmp/tmpruvmsj4c.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,gcd,recursion |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc_g43j2o.jl:5\nin expression starting at /tmp/tmpc_g43j2o.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,3)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,0)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,6)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,4)\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyss1f0xz.jl:5\nin expression starting at /tmp/tmpyss1f0xz.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b\nWrite a function that returns the least common multiple\
    \ of a and b\nWrite a function that returns the least common multiple of a and\
    \ b\nWrite a function that returns the least common multiple of a and b\nWrite\
    \ a function that returns the least common multiple of a and b\nWrite a function\
    \ that returns the least common multiple of a and b\nWrite a function that returns\
    \ the least common multiple of a and b\nWrite a function that returns the least\
    \ common multiple of a and b\nWrite a function that returns the least common multiple\
    \ of a and b\nWrite a function that returns the least common multiple of a and\
    \ b\nWrite a function that returns the least common multiple of a and b\nWrite\
    \ a function that returns the least common multiple of a and b\nWrite a function\
    \ that returns the least common multiple of a and b\nWrite a function that returns\
    \ the least common multiple of a and b\nWrite a function that returns the least\
    \ common multiple of a and b\nWrite a function that returns the least common multiple\
    \ of a and b\nWrite a function that returns the least common multiple of a and\
    \ b\nWrite a function that returns the least common multiple of a and b\nWrite\
    \ a function that returns the least common multiple of a and b\nWrite a function\
    \ that returns the least common multiple of a and b\nWrite a function that returns\
    \ the least common multiple of a and b\nWrite a function that returns the least\
    \ common multiple of a and b\nWrite a function that returns the least common multiple\
    \ of a and b\nWrite a function that returns the least common multiple of a and\
    \ b\nWrite a function that returns the least common multiple of a and b\nWrite\
    \ a function that returns the least common multiple of a and b\nWrite a function\
    \ that returns the least common multiple of a and b\nWrite a function that returns\
    \ the least common multiple of a and b\nWrite a function that returns the least\
    \ common multiple of a and b\nWrite a function that returns the least common multiple\
    \ of a and b\nWrite a function that returns the least common multiple of a and\
    \ b\nWrite a function that returns the least common multiple of a and b\nWrite\
    \ a function that returns the least common multiple of a and b\nWrite a function\
    \ that returns the least common multiple of a and b\nWrite a function that returns\
    \ the least common multiple of a and b\nWrite a function that returns the least\
    \ common multiple of a and b\nWrite a function that returns the least common multiple\
    \ of a and b\nWrite a function that returns the least common multiple of a and\
    \ b\nWrite a function that returns the least common multiple of a and b\nWrite\
    \ a function that returns the least common multiple of a and b\nWrite a function\
    \ that returns the least common multiple of a and b\nWrite a \nusing Test\n\n\
    @testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7)\
    \ == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t\
    @test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjjiseg90.jl:5\nin expression starting at /tmp/tmpjjiseg90.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjnng81ca.jl:5\nin expression starting at /tmp/tmpjnng81ca.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 137)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 138)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 139)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 140)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 141)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 142)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 143)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 144)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 145)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 146)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 147)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 148)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 149)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 150)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 151)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 152)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 153)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 154)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 155)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 156)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(137,\
    \ 157)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprtqut6m9.jl:5\nin expression starting at /tmp/tmprtqut6m9.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,6)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,0)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(4,1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(4,2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,3)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,4)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(4,5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(4,6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,7)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,8)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(4,9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(4,10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,11)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,12)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(4,13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(4,14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,15)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,16)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(4,17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(4,18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,19)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,20)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(4,21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(4,22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,23)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6y9l876r.jl:5\nin expression starting at /tmp/tmp6y9l876r.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwreslf_a.jl:5\nin expression starting at /tmp/tmpwreslf_a.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(8, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(8, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8, 5)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(8, 6)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(8, 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8, 9)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(8, 10)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(8, 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 12)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8, 13)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(8, 14)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(8, 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 16)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8, 17)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(8, 18)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(8, 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 20)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8, 21)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(8, 22)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(8, 23)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(8,\
    \ 24)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7r2ipqzf.jl:5\nin expression starting at /tmp/tmp7r2ipqzf.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if a == 0 || b == 0 \n        then return 0\n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(100,\
    \ 200)\n</cell>\n<text>\nGreatest common divisor of negative numbers\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptduyxiw1.jl:5\nin expression starting at /tmp/tmptduyxiw1.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 5)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 7)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 17)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 19)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 23)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 29)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 31)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 37)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 41)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 43)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 47)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 53)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 59)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 61)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 67)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 71)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 73)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 79)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 83)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 89)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 97)\n</cell>\n<code language=julia-1.5>\ngreate\nusing\
    \ Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvedc73jo.jl:5\nin expression starting at /tmp/tmpvedc73jo.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.3>\n@time greatest_common_divisor(1000000000,\
    \ 1000000000)\n</cell>\n<text>\nExercise 2\nWrite a recursive function called\
    \ factorial that computes the factorial of a given number. Test it on $n = 1$.\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppd40j4gu.jl:5\nin expression starting at /tmp/tmppd40j4gu.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(12,\
    \ 6)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.3>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.3>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.3>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.3>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.3>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.3>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf7mvw068.jl:5\nin expression starting at /tmp/tmpf7mvw068.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 3)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 7)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 11)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 15)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 19)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 23)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 24)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 25)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 26)\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmputialzpv.jl:5\nin expression starting at /tmp/tmputialzpv.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwreslf_a.jl:5\nin expression starting at /tmp/tmpwreslf_a.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,2)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp962km_px.jl:5\nin expression starting at /tmp/tmp962km_px.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,5)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppvu5vtfr.jl:5\nin expression starting at /tmp/tmppvu5vtfr.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n    else greatest_common_divisor(b, a % b) \n\
    end\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis is not the greatest\
    \ common divisor of 2 integers, it is the greatest common divisor of 2 integers\
    \ modulo another integer.\n<|/ c |>\n<| c |>\nThe question asks for the greatest\
    \ common divisor of two integers, not two integers modulo another.\n<|/ c |>\n\
    <| a tags=julia,recursion |>\nThe function greatest_common_divisor is defined\
    \ in the package GreatestCommonDivisors.jl. \n<code>\njulia> using GreatestCommonDivisors\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr4914d6d.jl:5\nin expression starting at /tmp/tmpr4914d6d.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<text>\nExercise 4\nWrite a function that returns the greatest\
    \ common divisor of three integers a and b and c.\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgrdqq3qp.jl:5\nin expression starting at /tmp/tmpgrdqq3qp.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0ah5v1hr.jl:5\nin expression starting at /tmp/tmp0ah5v1hr.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,3)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0tjzw01h.jl:5\nin expression starting at /tmp/tmp0tjzw01h.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n        else greatest_common_divisor(b, a %\
    \ b) \n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 200)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7zqccspr.jl:5\nin expression starting at /tmp/tmp7zqccspr.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm1r1r8xt.jl:5\nin expression starting at /tmp/tmpm1r1r8xt.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9i44c435.jl:5\nin expression starting at /tmp/tmp9i44c435.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000000)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ greatest common divisor of three integers a and b and c.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplwykpu8x.jl:5\nin expression starting at /tmp/tmplwykpu8x.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        return a \n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000,\
    \ 2000000)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given integer.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74rhx9e2.jl:9\nin expression starting at /tmp/tmp74rhx9e2.jl:9\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,6)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7cn0o0f7.jl:5\nin expression starting at /tmp/tmp7cn0o0f7.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    greatest_common_divisor = if b == 0 then a else greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion,greatest-common-divisor |>\n\
    <| a dscore=2 |>\nHere's a recursive solution that uses no loops and no conditionals:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6qqh6nxk.jl:4\nin expression starting at /tmp/tmp6qqh6nxk.jl:4\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(20,\
    \ 10)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppinqxlhk.jl:5\nin expression starting at /tmp/tmppinqxlhk.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,6)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgu2qjyeu.jl:5\nin expression starting at /tmp/tmpgu2qjyeu.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as:\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvafpb0cz.jl:5\nin expression starting at /tmp/tmpvafpb0cz.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nThe function should accept a number as an argument. \nThe function\
    \ should return an Int64 number. \nThe function should raise an error if the argument\
    \ is not an Int64 number.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzcdn_l3p.jl:5\nin expression starting at /tmp/tmpzcdn_l3p.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,10)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,0)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,3)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,4)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,7)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,8)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,11)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,12)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,15)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,16)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,19)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,20)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,23)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps_ezv4be.jl:5\nin expression starting at /tmp/tmps_ezv4be.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n        else greatest_common_divisor(b, a %\
    \ b) \n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nThe code below\
    \ is for Julia 0.6.1\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf_2nqelr.jl:5\nin expression starting at /tmp/tmpf_2nqelr.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000,\
    \ 2000)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times a given number appears in a given array.\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsj6vxzrh.jl:5\nin expression starting at /tmp/tmpsj6vxzrh.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,2)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,3)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,4)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,5)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,6)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,7)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,8)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,9)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,10)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,11)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,12)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,13)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,14)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,15)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,16)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,17)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,18)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,19)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,20)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,21)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,22)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,23)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,24)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,25)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,26)\n\
    </cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpprr802_m.jl:6\nin expression starting at /tmp/tmpprr802_m.jl:6\n"
  stdout: ''
  timestamp: 1659747702
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as:\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpge79365n.jl:5\nin expression starting at /tmp/tmpge79365n.jl:5\n"
  stdout: ''
  timestamp: 1659747702
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph_jo98we.jl:6\nin expression starting at /tmp/tmph_jo98we.jl:6\n"
  stdout: ''
  timestamp: 1659747702
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp43zv33tl.jl:5\nin expression starting at /tmp/tmp43zv33tl.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9i44c435.jl:5\nin expression starting at /tmp/tmp9i44c435.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^8)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^7)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^6)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^5)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^4)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^3)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^2)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^1)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 8)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 7)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 6)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 5)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 3)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 2)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 0)\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvkhse9mw.jl:5\nin expression starting at /tmp/tmpvkhse9mw.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if a == 0 || b == 0 \n        then return 0\n    else \n        greatest_common_divisor(a\
    \ / b, b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,10)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,5)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwn964rp1.jl:5\nin expression starting at /tmp/tmpwn964rp1.jl:5\n"
  stdout: ''
  timestamp: 1659747702
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n        else greatest_common_divisor(b, a %\
    \ b) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 2)\n</cell>\n<text>\nExercise 4\nWrite a function that returns the greatest\
    \ common divisor of two integers a and b\nusing recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvv121m5b.jl:5\nin expression starting at /tmp/tmpvv121m5b.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwreslf_a.jl:5\nin expression starting at /tmp/tmpwreslf_a.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 0
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    greatest_common_divisor = gcd(a,b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747702
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,3)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0tjzw01h.jl:5\nin expression starting at /tmp/tmp0tjzw01h.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyl0wnmlt.jl:5\nin expression starting at /tmp/tmpyl0wnmlt.jl:5\n"
  stdout: ''
  timestamp: 1659747702
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,2)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,0)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,4)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,5)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,6)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,8)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,9)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,10)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,12)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,13)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,14)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,16)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,17)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,18)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,20)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,21)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,22)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,23)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,24)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphuyflbv1.jl:5\nin expression starting at /tmp/tmphuyflbv1.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer. \nFor instance, for the number $10^9$, the function\
    \ should return $9$.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm2d7nqun.jl:5\nin expression starting at /tmp/tmpm2d7nqun.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpivik6qbh.jl:5\nin expression starting at /tmp/tmpivik6qbh.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        return a \n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\n\
    candidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxic3ebqz.jl:9\nin expression starting at /tmp/tmpxic3ebqz.jl:9\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp31ygf0yq.jl:5\nin expression starting at /tmp/tmp31ygf0yq.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.4>\n@time greatest_common_divisor(100,\
    \ 200)\n</cell>\n<code language=julia-1.4>\n@time greatest_common_divisor(100,\
    \ 0)\n</cell>\n<code language=julia-1.4>\n@time greatest_common_divisor(100, 1)\n\
    </cell>\n<code language=julia-1.4>\n@time greatest_common_divisor(100, 2)\n</cell>\n\
    <code language=julia-1.4>\n@time greatest_common_divisor(100, 3)\n</cell>\n<code\
    \ language=julia-1.4>\n@time greatest_common_divisor(100, 4)\n</cell>\n<code language=julia-1.4>\n\
    @time greatest_common_divisor(100, 5)\n</cell>\n<code language=julia-1.4>\n@time\
    \ greatest_common_divisor(100, 6)\n</cell>\n<code language=julia-1.4>\n@time greatest_common_divisor(100,\
    \ 7)\n</cell>\n<code language=julia-1.4>\n@time greatest_common_divisor(100, 8)\n\
    </cell>\n<code language=julia-1.4>\n@time greatest_common_divisor(100, 9)\n</cell>\n\
    <code language=julia-1.4>\n@time greatest_common_divisor(100, 10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time greatest_common_divisor(100, 11)\n</cell>\n<code\
    \ language=julia-1.4>\n@time greatest_common_divisor(100, 12)\n</cell>\n<code\
    \ language=julia-1.4>\n@time greatest_common_divisor(100, 13)\n</cell>\n<code\
    \ language=julia-1.4>\n@time greatest_common_divisor(100, 14)\n</cell>\n<code\
    \ language=julia-1.4>\n@time greatest_common_divisor(100, 15)\n</cell>\n<code\
    \ language=julia-1.4>\n@time greatest_common_divisor(100, 16)\n</cell>\n<code\
    \ language=julia-1.4>\n@time greatest_common_divisor(100, 17)\n</cell>\n<code\
    \ language=julia-1.4>\n@time greatest_common_divisor(100, 18)\n</cell>\n<code\
    \ language=julia-1.4>\n@time greatest_common_divisor(100, 19)\n</cell>\n<code\
    \ language=julia-1.4>\n@time greatest_common_divisor(100, 20)\n</cell>\n<code\
    \ language=julia-1.4>\n@time greatest_common_divisor(100, 21)\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6s65aroc.jl:5\nin expression starting at /tmp/tmp6s65aroc.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,3)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0tjzw01h.jl:5\nin expression starting at /tmp/tmp0tjzw01h.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,4)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,0)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(3,1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(3,2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,3)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,4)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(3,5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(3,6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,7)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,8)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(3,9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(3,10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,11)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,12)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(3,13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(3,14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,15)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,16)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(3,17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(3,18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,19)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,20)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(3,21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(3,22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,23)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdli01ec7.jl:5\nin expression starting at /tmp/tmpdli01ec7.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of three integers a and b and c.\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf4us89uj.jl:5\nin expression starting at /tmp/tmpf4us89uj.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n        else greatest_common_divisor(b, a %\
    \ b) \n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,recursion |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfokftr8w.jl:5\nin expression starting at /tmp/tmpfokftr8w.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<text>\nExercise 2\nWrite a recursive function which computes\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as $n! = n * (n - 1)!$. \nThe factorial of 0 is 1. \nThe factorial of negative\
    \ numbers is undefined.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp83p4e87v.jl:5\nin expression starting at /tmp/tmp83p4e87v.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b\nWrite a function that returns the greatest common\
    \ divisor of a and b\nWrite a function that returns the greatest common divisor\
    \ of a and b\nWrite a function that returns the greatest common divisor of a and\
    \ b\nWrite a function that returns the greatest common divisor of a and b\nWrite\
    \ a function that returns the greatest common divisor of a and b\nWrite a function\
    \ that returns the greatest common divisor of a and b\nWrite a function that returns\
    \ the greatest common divisor of a and b\nWrite a function that returns the greatest\
    \ common divisor of a and b\nWrite a function that returns the greatest common\
    \ divisor of a and b\nWrite a function that returns the greatest common divisor\
    \ of a and b\nWrite a function that returns the greatest common divisor of a and\
    \ b\nWrite a function that returns the greatest common divisor of a and b\nWrite\
    \ a function that returns the greatest common divisor of a and b\nWrite a function\
    \ that returns the greatest common divisor of a and b\nWrite a function that returns\
    \ the greatest common divisor of a and b\nWrite a function that returns the greatest\
    \ common divisor of a and b\nWrite a function that returns the greatest common\
    \ divisor of a and b\nWrite a function that returns the greatest common divisor\
    \ of a and b\nWrite a function that returns the greatest common divisor of a and\
    \ b\nWrite a function that returns the greatest common divisor of a and b\nWrite\
    \ a function that returns the greatest common divisor of a and b\nWrite a function\
    \ that returns the greatest common divisor of a and b\nWrite a function that returns\
    \ the greatest common divisor of a and b\nWrite a function that returns the greatest\
    \ common divisor of a and b\nWrite a function that returns the greatest common\
    \ divisor of a and b\nWrite a function that returns the greatest common divisor\
    \ of a and b\nWrite a function that returns the greatest common divisor of a and\
    \ b\nWrite a function that returns the greatest common divisor of a and b\nWrite\
    \ a function that returns the greatest common divisor of a and b\nWrite a function\
    \ that returns the greatest common divisor of a and b\nWrite a function that returns\
    \ the greatest common divisor of a and b\nWrite a function that \nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfe9qh50v.jl:5\nin expression starting at /tmp/tmpfe9qh50v.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9i44c435.jl:5\nin expression starting at /tmp/tmp9i44c435.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</code>\n<|/ a tags=julia,recursion,greatest-common-divisor\
    \ |>\n<| a dscore=0 |>\nI wrote a recursive function which returns the GCD of\
    \ two numbers. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9tbbuwfp.jl:5\nin expression starting at /tmp/tmp9tbbuwfp.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    greatest_common_divisor = if b == 0 then a else greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `greatest_common_divisor(3,4)`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nI didn't realize that `greatest_common_divisor`\
    \ was recursive. I've edited my answer to fix the problem.\n<|/ c |>\n<| c |>\n\
    This still doesn't work. `greatest_common_divisor(3,4)` returns `3` instead of\
    \ `2`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Are you sure you copied\
    \ it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running Julia\
    \ 1.5.1. Maybe it's an issue with my version of Julia?\n<|/ c |>\n<| a dscore=0\
    \ |>\nThe recursive solution is very elegant, but Julia has a built-in function\
    \ gcd that does exactly what you want.\n<code>\njulia> gcd(3,4)\n2\n</code>\n\
    <|/ a tags=julia,greatest-common-divisor |>\n<| c |>\nThis doesn't work. `gcd(3,4)`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nI tested it and it works fine.\
    \ Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly.\
    \ I'm running Julia 1.5.1. Maybe it's an issue with my version of Julia?\n<|/\
    \ c |>\n<| c |>\nYes, it looks like a bug in Julia 1.5. I've reported it here:\
    \ https://github.com/JuliaLang/julia/issues/10841\n<|/ c |>\n<| a tags=julia,greatest-common-divisor\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj00_1m9w.jl:4\nin expression starting at /tmp/tmpj00_1m9w.jl:4\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n        else greatest_common_divisor(b, a %\
    \ b) \n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,5)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg7atozv1.jl:5\nin expression starting at /tmp/tmpg7atozv1.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm1r1r8xt.jl:5\nin expression starting at /tmp/tmpm1r1r8xt.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    greatest_common_divisor = a % b\n    return greatest_common_divisor\nend\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpka0ibuxc.jl:9

    '
  stdout: "test set: Test Failed at /tmp/tmpka0ibuxc.jl:12\n  Expression: candidate(3,\
    \ 7) == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\ntest set: Test\
    \ Failed at /tmp/tmpka0ibuxc.jl:13\n  Expression: candidate(10, 15) == 5\n   Evaluated:\
    \ 10 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\ntest set: Test\
    \ Failed at /tmp/tmpka0ibuxc.jl:15\n  Expression: candidate(144, 60) == 12\n \
    \  Evaluated: 24 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659747700
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        return a \n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsty0nogu.jl:9\nin expression starting at /tmp/tmpsty0nogu.jl:9\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if a == 0 || b == 0 \n        then return 0\n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 200)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as:\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3_ihtqau.jl:5\nin expression starting at /tmp/tmp3_ihtqau.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,3)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,0)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,4)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,5)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,6)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,8)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,9)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,10)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,12)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,13)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,14)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,16)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,17)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,18)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,20)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,21)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,22)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,23)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,24)\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6mgv7lr5.jl:5\nin expression starting at /tmp/tmp6mgv7lr5.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if a == 0 || b == 0 \n        then return 0\n    else \n        gcd = greatest_common_divisor(b,\
    \ a % b) \n        if gcd == 0 \n            then gcd = a \n            else gcd\
    \ = greatest_common_divisor(a, b % gcd)\n        return gcd\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(20, 10)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(20, 5)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(20,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(20, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(20, 25)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(20, 30)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(20,\
    \ 35)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(20, 40)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(20, 45)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(20, 50)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(20,\
    \ 55)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(20, 60)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(20, 65)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(20, 70)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(20,\
    \ 75)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(20, 80)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(20, 85)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(20, 90)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(20,\
    \ 95)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(20, 100)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(20, 105)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(20, 110)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(20, 115)\n</cell>\n<code language=juli\nusing Test\n\n\
    @testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7)\
    \ == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t\
    @test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmmqjrw5n.jl:5\nin expression starting at /tmp/tmpmmqjrw5n.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nThe answer by\
    \ is correct, but I thought I'd add some explanation as to why it works.\nThe\
    \ recursive function greatest_common_divisor is called with two arguments a and\
    \ b. a and b are both Int64s. When you call greatest_common_divisor with two Int64s,\
    \ Julia will automatically convert them to Int64s. So when you call greatest_common_divisor(7,\
    \ 4), Julia will convert 7 and 4 to Int64s and then call greatest_common_divisor\
    \ with those two Int64s as arguments.\nThe function greatest_common_divisor is\
    \ recursive. It calls itself with two Int64s as arguments. When it calls itself\
    \ with two Int64s as arguments, Julia will automatically convert them to Int64s.\
    \ So when you call greatest_common_divisor(7, 4), Julia will convert 7 and 4 to\
    \ Int64s and then call greatest_common_divisor with those two Int64s as arguments.\n\
    The function greatest_common_divisor is recursive. It calls itself with two Int64s\
    \ as arguments. When it calls itself with two Int64s as arguments, Julia will\
    \ automatically convert them to Int64s. So when you call greatest_common_divisor(7,\
    \ 4), Julia will convert 7 and 4 to Int64s and then call greatest_common_divisor\
    \ with those two Int64s as arguments.\nThe function greatest_common_divisor is\
    \ recursive. It calls itself with two Int64s as arguments. When it calls itself\
    \ with two Int64s as arguments, Julia will automatically convert them to Int64s.\
    \ So when you call greatest_common_divisor(7, 4), Julia will convert 7 and 4 to\
    \ Int64s and then call greatest_common_divisor with those two Int64s as arguments.\n\
    The function greatest_common_divisor is recursive. It calls itself with two Int64s\
    \ as arguments. When it calls itself with two Int64s as arguments, Julia will\
    \ automatically convert them to Int64s. So when you call greatest_common_divisor(7,\
    \ 4), Julia will convert 7 and 4 to Int64s and then call greatest_common_divisor\
    \ with those two Int64s as arguments.\nThe function greatest_common_divisor is\
    \ recursive. It calls itself with two Int64s as arguments. When it calls itself\
    \ with two Int64s as arguments, Julia will automatically convert them to Int64s.\
    \ So when you call greatest_common_divisor(7, 4), Julia will convert \nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_jh1ksp0.jl:5\nin expression starting at /tmp/tmp_jh1ksp0.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    greatest_common_divisor = a % b\n    return greatest_common_divisor\nend\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpka0ibuxc.jl:9

    '
  stdout: "test set: Test Failed at /tmp/tmpka0ibuxc.jl:12\n  Expression: candidate(3,\
    \ 7) == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\ntest set: Test\
    \ Failed at /tmp/tmpka0ibuxc.jl:13\n  Expression: candidate(10, 15) == 5\n   Evaluated:\
    \ 10 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\ntest set: Test\
    \ Failed at /tmp/tmpka0ibuxc.jl:15\n  Expression: candidate(144, 60) == 12\n \
    \  Evaluated: 24 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659747700
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but\
    \ I wonder if there is a way to avoid the recursion. Maybe with some kind of iterative\
    \ solution?\n<|/ c |>\n<| c |>\nI added an iterative solution. Not sure if this\
    \ is more efficient though.\n<|/ c |>\n<| c |>\nI added a recursive solution that\
    \ is more efficient than my iterative solution. Not sure if this is more efficient\
    \ though.\n<|/ c |>\n<| a tags=julia,recursion |>\nI like your solution, but I\
    \ wonder if there is a way to avoid the recursion. Maybe with some kind of iterative\
    \ solution?\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3rdycgd9.jl:5\nin expression starting at /tmp/tmp3rdycgd9.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,3)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the greatest common\
    \ divisor of a and b\nWrite a function that returns the least common multiple\
    \ of a and b\nWrite a function that returns the least common multiple of a, b,\
    \ and c\nWrite a function that returns the least common multiple of a, b, c, and\
    \ d\nWrite a function that returns the least common multiple of a, b, c, d, and\
    \ e\nWrite a function that returns the least common multiple of a, b, c, d, e,\
    \ and f\nWrite a function that returns the least common multiple of a, b, c, d,\
    \ e, and f, and g\nWrite a function that returns the least common multiple of\
    \ a, b, c, d, e, and f, and g, and h\nWrite a function that returns the least\
    \ common multiple of a, b, c, d, e, and f, and g, and h, and i\nWrite a function\
    \ that returns the least common multiple of a, b, c, d, e, and f, and g, and h,\
    \ and i\nWrite a function that returns the least common multiple of a, b, c, d,\
    \ e, and f, and g, and h, and i\nWrite a function that returns the least common\
    \ multiple of a, b, c, d, e, and f, and g, and h, and i\nWrite a function that\
    \ returns the least common multiple of a, b, c, d, e, and f, and g, and h, and\
    \ i\nWrite a function that returns the least common multiple of a, b, c, d, e,\
    \ and f, and g, and h, and i\nWrite a function that returns the least common multiple\
    \ of a, b, c, d, e, and f, and g, and h, and i\nWrite a function that returns\
    \ the least common multiple of a, b, c, d, e, and f, and g, and h, and i\nWrite\
    \ a function that returns the least common multiple of a, b, c, d, e, and f, and\
    \ g, and h, and i\nWrite a function that returns the least common multiple of\
    \ a, b, c, d, e, and f, and g, and h, and i\nWrite a function that returns the\
    \ least common multiple of a, b, c, d, e, and f, and g, and h, and i\nWrite a\
    \ function that returns the least common multiple of a, b, c, d, e, and f, and\
    \ g, and h, and i\nWrite a function that returns the least common multiple of\
    \ a, b, c, d, e, and f, and g, and h, and i\nWrite a function that returns the\
    \ least common multiple of a, b, c, d, e, and f, and g, and h, and i\nWrite a\
    \ function that returns the least common multiple of a, b, c, d, e, and f, and\
    \ g, and h, and i\nWrite a function that returns the least common multiple of\
    \ a, b, c, d, e, and f, and g, and h, and i\nWrite a function that returns the\
    \ least common multiple of a, b, c, d, e, and f, and g, and h, and i\nWrite a\
    \ function that returns the least common multiple of a, b, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9psq0rcd.jl:5\nin expression starting at /tmp/tmp9psq0rcd.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.4>\ngreatest_common_divisor(6,\
    \ 4)\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph60p8372.jl:5\nin expression starting at /tmp/tmph60p8372.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n        else greatest_common_divisor(b, a %\
    \ b) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ times a given element appears in a given array.\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_spdu0so.jl:5\nin expression starting at /tmp/tmp_spdu0so.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9i44c435.jl:5\nin expression starting at /tmp/tmp9i44c435.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm1r1r8xt.jl:5\nin expression starting at /tmp/tmpm1r1r8xt.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,recursion |>\nI believe\
    \ that your problem is that you do not have a base case for your recursive function.\
    \  In your code, you have a recursive function called greatest_common_divisor\
    \ that calls itself recursively until it reaches the base case where it returns\
    \ a.  However, you do not have a base case that returns a.  Therefore, your function\
    \ will never terminate.\n<|/ a dscore=0 |>\n<| c |>\nI believe that my base case\
    \ is `if b == 0 then return a` which should return `a` when `b` is 0. I am not\
    \ sure why it isn't returning `a`.\n<|/ c |>\n<| c |>\nI believe that your base\
    \ case is `if b == 0 then return a` which should return `a` when `b` is 0. I am\
    \ not sure why it isn't returning `a`.\n<|/ c |>\n<| c |>\nI believe that your\
    \ base case is `if b == 0 then return a` which should return `a` when `b` is 0.\
    \ I am not sure why it isn't returning `a`.\n<|/ c |>\n<| c |>\nI believe that\
    \ your base case is `if b == 0 then return a` which should return `a` when `b`\
    \ is 0. I am not sure why it isn't returning `a`.\n<|/ c |>\n<| c |>\nI believe\
    \ that your base case is `if b == 0 then return a` which should return `a` when\
    \ `b` is 0. I am not sure why it isn't returning `a`.\n<|/ c |>\n<| a tags=julia,recursion\
    \ |>\nThe issue is that your base case is if b == 0 then return a. This means\
    \ that if b is 0, then return a. Since a is never 0, the function will never terminate.\
    \ \nTo fix this, you need to change your base case to return a. \n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd6rb74jl.jl:5\nin expression starting at /tmp/tmpd6rb74jl.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq7sqqnoz.jl:5\nin expression starting at /tmp/tmpq7sqqnoz.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if a == 0 || b == 0\n        0\n    else\n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 3)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 0)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 2)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 3)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 6)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 7)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 8)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 9)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 10)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 11)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 12)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 13)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 14)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 16)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 17)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 18)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 19)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 20)\n</\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5q0176oj.jl:10\nin expression starting at\
    \ /tmp/tmp5q0176oj.jl:10\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 10)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 11)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 12)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 14)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 15)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 16)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 18)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 19)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 20)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 22)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 23)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 24)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 26)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 27)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 28)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 29)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 30)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 31)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 32)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 33)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpslvl9405.jl:5\nin expression starting at /tmp/tmpslvl9405.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,5)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,0)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(10,1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(10,2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,3)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,4)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(10,5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(10,6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,7)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,8)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(10,9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(10,10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,11)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(10,13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(10,14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,15)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(10,17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(10,18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,19)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(10,21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(10,22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,23)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxkmsi0t_.jl:5\nin expression starting at /tmp/tmpxkmsi0t_.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if a == 0 || b == 0 \n        then return 0\n    else if b == 0 \n      \
    \  then return a\n    else if b > a \n        then return greatest_common_divisor(b,\
    \ a % b)\n    else \n        then return greatest_common_divisor(a, b % a)\nend\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,6)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the greatest common divisor of a and\
    \ b if they are both positive.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptko5svg1.jl:5\nin expression starting at /tmp/tmptko5svg1.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as:\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprgibzste.jl:5\nin expression starting at /tmp/tmprgibzste.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz4sm_xzb.jl:5\nin expression starting at /tmp/tmpz4sm_xzb.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if a == 0 || b == 0 \n        then return 0\n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<text>\nExercise 2\nWrite a recursive function which takes in\
    \ two integers a and b and returns the greatest common divisor of a and b. \n\
    The function should return the greatest common divisor of a and b if they are\
    \ both divisible by each other. \nIf they are not, then it should return the greatest\
    \ common divisor of a and b if a is divisible by b and b is divisible by a. \n\
    If neither is divisible by each other, then it should return 0.\nusing Test\n\n\
    @testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7)\
    \ == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t\
    @test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpawqkwakq.jl:5\nin expression starting at /tmp/tmpawqkwakq.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9i44c435.jl:5\nin expression starting at /tmp/tmp9i44c435.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm1r1r8xt.jl:5\nin expression starting at /tmp/tmpm1r1r8xt.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        return a \n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5yp6ywq9.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5yp6ywq9.jl:1\n\
    in expression starting at /tmp/tmp5yp6ywq9.jl:1\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. `greatest_common_divisor(7,\
    \ 3)` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1q92k8u3.jl:5\nin expression starting at /tmp/tmp1q92k8u3.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n        else greatest_common_divisor(b, a %\
    \ b) \n    else greatest_common_divisor(b, a % b) \nend\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(4,5)\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmwpieenw.jl:5\nin expression starting at /tmp/tmpmwpieenw.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    else return greatest_common_divisor(b, a % b)\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(4,2)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(4,3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,4)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,5)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(4,6)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(4,7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,8)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,9)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(4,10)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(4,11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,12)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,13)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(4,14)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(4,15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,16)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,17)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(4,18)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(4,19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,20)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,21)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(4,22)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(4,23)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,24)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,25)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(4,\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptwwjvh61.jl:5\nin expression starting at /tmp/tmptwwjvh61.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,10)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,0)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,3)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,4)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,7)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,8)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,11)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,12)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,15)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,16)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,19)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,20)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,23)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps_ezv4be.jl:5\nin expression starting at /tmp/tmps_ezv4be.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(100,\
    \ 200)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of a and b if b is even, otherwise returns the least common multiple\
    \ of a and b. Test it on $a$ and $b$ from Exercise 1.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz6wpospc.jl:5\nin expression starting at /tmp/tmpz6wpospc.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3aai96hh.jl:5\nin expression starting at /tmp/tmp3aai96hh.jl:5\n"
  stdout: ''
  timestamp: 1659747704
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,6)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwqa47tk5.jl:5\nin expression starting at /tmp/tmpwqa47tk5.jl:5\n"
  stdout: ''
  timestamp: 1659747705
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    greatest_common_divisor = gcd(a,b)\n    return greatest_common_divisor\n\
    end\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(4,5)\n\
    </cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(4,5)\n</cell>\n\
    <code language=julia-1.5>\n@time greatest_common_divisor(4,5)\n</cell>\n<code\
    \ language=julia-1.5>\n@time greatest_common_divisor(4,5)\n</cell>\n<code language=julia-1.5>\n\
    @time greatest_common_divisor(4,5)\n</cell>\n<code language=julia-1.5>\n@time\
    \ greatest_common_divisor(4,5)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(4,5)\n\
    </cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(4,5)\n</cell>\n\
    <code language=julia-1.5>\n@time greatest_common_divisor(4,5)\n</cell>\n<code\
    \ language=julia-1.5>\n@time greatest_common_divisor(4,5)\n</cell>\n<code language=julia-1.5>\n\
    @time greatest_common_divisor(4,5)\n</cell>\n<code language=julia-1.5>\n@time\
    \ greatest_common_divisor(4,5)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(4,5)\n\
    </cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(4,5)\n</cell>\n\
    <code language=julia-1.5>\n@time greatest_common_divisor(4,5)\n</cell>\n<code\
    \ language=julia-1.5>\n@time greatest_common_divisor(4,5)\n</cell>\n<code language=julia-1.5>\n\
    @time greatest_common_divisor(4,5)\n</cell>\n<code language=julia-1.5>\n@time\
    \ greatest_common_divisor(4,5)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(4,5)\n\
    </cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(4,5)\n</cell>\n\
    <code language=julia-1.5>\n@time greatest_common_divisor(4,5)\n</cell>\n<code\
    \ language=julia-1.5>\n@time greatest_common_divisor(4,5)\n</cell>\n<code language=julia-1.5>\n\
    @time greatest_common_divisor(4,5)\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mell8_6.jl:7\nin expression starting at /tmp/tmp5mell8_6.jl:7\n"
  stdout: ''
  timestamp: 1659747705
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if a == 0 || b == 0\n        0\n    else\n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</code>\n<|/ a tags=julia,gcd,greatest-common-divisor\
    \ |>\n<| c |>\nThis code doesn't work. `greatest_common_divisor(4,2)` returns\
    \ `2` instead of `1`.\n<|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing\
    \ it out\n<|/ c |>\n<| a dscore=4 |>\nThe accepted answer does not work for negative\
    \ numbers. Here is a version that does:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpec84webx.jl:10\nin expression starting at\
    \ /tmp/tmpec84webx.jl:10\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    else return greatest_common_divisor(b, a % b)\nend\n</cell>\n<code\
    \ language=julia-1.4>\ngreatest_common_divisor(7, 3)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer. \nFor instance,\
    \ for the number 123, the function should return 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjyvh33jt.jl:5\nin expression starting at /tmp/tmpjyvh33jt.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n        else greatest_common_divisor(b, a %\
    \ b) \n    else greatest_common_divisor(b, a % b) \nend\n</cell>\n<code language=julia-1.5>\n\
    @time greatest_common_divisor(10^9, 10^9)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of times a given value appears in a given\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc9drzp19.jl:5\nin expression starting at /tmp/tmpc9drzp19.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n        else greatest_common_divisor(b, a %\
    \ b) \n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 200)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7zqccspr.jl:5\nin expression starting at /tmp/tmp7zqccspr.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b if b is greater than or equal to a. \nWrite a function\
    \ that returns the greatest common divisor of a and b if b is less than or equal\
    \ to a. \nWrite a function that returns the greatest common divisor of a and b\
    \ if b is equal to a. \nWrite a function that returns the greatest common divisor\
    \ of a and b if b is less than a. \nWrite a function that returns the greatest\
    \ common divisor of a and b if b is greater than a. \nWrite a function that returns\
    \ the greatest common divisor of a and b if b is equal to 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc62m_7tv.jl:5\nin expression starting at /tmp/tmpc62m_7tv.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,6)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgu2qjyeu.jl:5\nin expression starting at /tmp/tmpgu2qjyeu.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 8)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given integer. \nThe factorial of a number $n$ is defined as:\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm4w3c966.jl:5\nin expression starting at /tmp/tmpm4w3c966.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 12)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 13)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 14)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 16)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 17)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 18)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 19)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 20)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 22)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 23)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeqple268.jl:5\nin expression starting at /tmp/tmpeqple268.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(2000000,\
    \ 2000000)\n</cell>\n<code language=julia-1.5>\n@\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgt5mzic9.jl:5\nin expression starting at /tmp/tmpgt5mzic9.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp15a2wpzy.jl:5\nin expression starting at /tmp/tmp15a2wpzy.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4kfb2ddg.jl:6\nin expression starting at /tmp/tmp4kfb2ddg.jl:6\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 200)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 0)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 1)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 2)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 5)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 6)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 9)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 10)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 12)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 13)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 14)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 15)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 16)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 18)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 19)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 20)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 21)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 23)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr4iefsj3.jl:5\nin expression starting at /tmp/tmpr4iefsj3.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion,greatest-common-divisor |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppwafck4x.jl:5\nin expression starting at /tmp/tmppwafck4x.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiatkci_6.jl:5\nin expression starting at /tmp/tmpiatkci_6.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(7,\
    \ 5)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(7, 0)\n</cell>\n\
    <code language=julia-1.3>\ngreatest_common_divisor(7, 1)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(7, 2)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(7,\
    \ 3)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(7, 4)\n</cell>\n\
    <code language=julia-1.3>\ngreatest_common_divisor(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(7, 6)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(7,\
    \ 7)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(7, 8)\n</cell>\n\
    <code language=julia-1.3>\ngreatest_common_divisor(7, 9)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(7, 10)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(7,\
    \ 11)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(7, 12)\n</cell>\n\
    <code language=julia-1.3>\ngreatest_common_divisor(7, 13)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(7, 14)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(7,\
    \ 15)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(7, 16)\n</cell>\n\
    <code language=julia-1.3>\ngreatest_common_divisor(7, 17)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(7, 18)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(7,\
    \ 19)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(7, 20)\n</cell>\n\
    <code language=julia-1.3>\ngreatest_common_divisor(7, 21)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(7, 22)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(7,\
    \ 23)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk14w3r4o.jl:5\nin expression starting at /tmp/tmpk14w3r4o.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n        else greatest_common_divisor(b, a %\
    \ b) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(4,5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as:\nusing Test\n\n\
    @testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7)\
    \ == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t\
    @test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphk8dd9dc.jl:5\nin expression starting at /tmp/tmphk8dd9dc.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,10)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,0)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,3)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,4)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,7)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,8)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,11)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,12)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,15)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,16)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,19)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,20)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,23)\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2_zy08tx.jl:5\nin expression starting at /tmp/tmp2_zy08tx.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26547884)\n\
    <|/ c |>\n<| c |>\nI agree with you, but I thought this was a good way to solve\
    \ the problem and I wanted to share it with the community. Maybe I should have\
    \ added some explanation to the code. I'll edit my answer with some explanation.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I thought this was a good way to solve\
    \ the problem and I wanted to share it with the community. Maybe I should have\
    \ added some explanation to the code. I'll edit my answer with some explanation.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I thought this was a good way to solve\
    \ the problem and I wanted to share it with the community. Maybe I should have\
    \ added some explanation to the code. I'll edit my answer with some explanation.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I thought this was a good way to solve\
    \ the problem and I wanted to share it with the community. Maybe I should have\
    \ added some explanation to the code. I'll edit my answer with some explanation.\n\
    <|/ c |>\n<| a tags=julia,recursion,greatest-common-divisor |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1o9k4hpu.jl:5\nin expression starting at /tmp/tmp1o9k4hpu.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,5)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk847xgz2.jl:5\nin expression starting at /tmp/tmpk847xgz2.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 0
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    greatest_common_divisor = gcd(a,b) \n    return greatest_common_divisor \n\
    end\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t\
    @test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747705
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm1r1r8xt.jl:5\nin expression starting at /tmp/tmpm1r1r8xt.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp31ygf0yq.jl:5\nin expression starting at /tmp/tmp31ygf0yq.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9661wf68.jl:5\nin expression starting at /tmp/tmp9661wf68.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThanks for your\
    \ answer! I didn't know that Julia had a built-in function for this.\n<|/ c |>\n\
    <| c |>\nNo problem! I added a more efficient version to my answer that uses `divrem`\
    \ instead of `div`.\n<|/ c |>\n<| c |>\nI added a more efficient version to my\
    \ answer that uses `divrem` instead of `div`.\n<|/ c |>\n<| c |>\nI added a more\
    \ efficient version to my answer that uses `divrem` instead of `div`.\n<|/ c |>\n\
    <| a dscore=2 |>\nHere's a recursive solution that uses divrem instead of div:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0k3d3rbe.jl:5\nin expression starting at /tmp/tmp0k3d3rbe.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26547294)\n\
    <|/ c |>\n<| c |>\nI added a code example to my answer. Hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/26547294)\n<|/ c |>\n<| c |>\nI added a code\
    \ example to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/26547294)\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgo54k6ip.jl:5\nin expression starting at /tmp/tmpgo54k6ip.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</code>\n<|/ a tags=julia,recursion,greatest-common-divisor |>\n\
    <| c |>\nThis does not answer the question. OP wants to know how to implement\
    \ the recursive function `greatest_common_divisor`.\n<|/ c |>\n<| c |>\nThe question\
    \ was how to implement the recursive function `greatest_common_divisor`.  I answered\
    \ that in the first paragraph.  I then added a link to an implementation that\
    \ does exactly that.  I didn't want to copy the code from the link into this answer\
    \ because I wanted to show how to implement the recursive function `greatest_common_divisor`.\
    \  I didn't want to copy the code from the link into this answer because I wanted\
    \ to show how to implement the recursive function `greatest_common_divisor`. \
    \ I didn't want to copy the code from the link into this answer because I wanted\
    \ to show how to implement the recursive function `greatest_common_divisor`. \
    \ I didn't want to copy the code from the link into this answer because I wanted\
    \ to show how to implement the recursive function `greatest_common_divisor`. \
    \ I didn't want to copy the code from the link into this answer because I wanted\
    \ to show how to implement the recursive function `greatest_common_divisor`. \
    \ I didn't want to copy the code from the link into this answer because I wanted\
    \ to show how to implement the recursive function `greatest_common_divisor`. \
    \ I didn't want to copy the code from the link into this answer because I wanted\
    \ to show how to implement the recursive function `greatest_common_divisor`. \
    \ I didn't want to copy the code from the link into this answer because I wanted\
    \ to show how to implement the recursive function `greatest_common_divisor`. \
    \ I didn't want to copy the code from the link into this answer because I wanted\
    \ to show how to implement the recursive function `greatest_common_divisor`. \
    \ I didn't want to copy the code from the link into this answer because I wanted\
    \ to show how to implement the recursive function `greatest_common_divisor`. \
    \ I didn't want to copy the code from the link into this answer because I wanted\
    \ to show how to implement the recursive function `greatest_common_divisor`. \
    \ I didn't want to copy the code from the link into this answer because I wanted\
    \ to show how to implement the recursive function `greatest_common_divisor`. \
    \ I didn't want to copy the code from the link into this answer because I wanted\
    \ to show how to implement the recursive function `greatest_common_divisor`. \
    \ I didn't want to copy the code from the link into this answer because I wanted\
    \ to show how to implement the recursive function `greatest_common_\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9xy_ysgx.jl:5\nin expression starting at /tmp/tmp9xy_ysgx.jl:5\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        return a \n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer. \nFor example, if the input is 123, the function should return\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t\
    @test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0i09nboq.jl:9\nin expression starting at /tmp/tmp0i09nboq.jl:9\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 12)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 13)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 14)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 16)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 17)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 18)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(100, 19)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(100, 20)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 22)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100, 23)\n</cell>\n\
    <code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2v7r8w75.jl:5\nin expression starting at /tmp/tmp2v7r8w75.jl:5\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp15a2wpzy.jl:5\nin expression starting at /tmp/tmp15a2wpzy.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp15a2wpzy.jl:5\nin expression starting at /tmp/tmp15a2wpzy.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,2)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,0)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,4)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,5)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,6)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,8)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,9)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,10)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,12)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,13)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,14)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,16)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,17)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,18)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,20)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,21)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,22)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,23)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,24)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphuyflbv1.jl:5\nin expression starting at /tmp/tmphuyflbv1.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if a == 0 || b == 0 \n        then return 0\n    else \n        greatest_common_divisor(a\
    \ / b, b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 3)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 2)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 6)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 7)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 8)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 9)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 10)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 11)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 12)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 13)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 14)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 16)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 17)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 18)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor(7,\
    \ 19)\n</cell>\n<code language=julia-1.5>\n@code_warntype greatest_common_divisor\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9wrxf_j8.jl:5\nin expression starting at /tmp/tmp9wrxf_j8.jl:5\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0kouoy5s.jl:5\nin expression starting at /tmp/tmp0kouoy5s.jl:5\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 4)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b if a > b and a % b == 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp90tlwlpr.jl:5\nin expression starting at /tmp/tmp90tlwlpr.jl:5\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(100,\
    \ 200)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9n91vkcd.jl:5\nin expression starting at /tmp/tmp9n91vkcd.jl:5\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,2)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,0)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,4)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,5)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,6)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,8)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,9)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,10)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,12)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,13)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,14)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,16)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,17)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,18)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,20)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,21)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(5,22)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(5,23)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,24)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphuyflbv1.jl:5\nin expression starting at /tmp/tmphuyflbv1.jl:5\n"
  stdout: ''
  timestamp: 1659747703
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n        else greatest_common_divisor(b, a %\
    \ b) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000000);\n</cell>\n<text>\nExercise\nWrite a function that returns the greatest\
    \ common divisor of a and b. Test it on $a$ and $b$ of different sizes.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb20v5ywn.jl:5\nin expression starting at /tmp/tmpb20v5ywn.jl:5\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 5)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 6)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 9)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 10)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 12)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 13)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 14)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 16)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 17)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 18)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 20)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 21)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 22)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 23)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 24)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjsnteie_.jl:5\nin expression starting at /tmp/tmpjsnteie_.jl:5\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 3)\n</cell>\n<text>\nExercise\nWrite a function that returns the greatest common\
    \ divisor of a and b without using recursion.\nusing Test\n\n@testset begin\n\n\
    candidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_fv51zx1.jl:5\nin expression starting at /tmp/tmp_fv51zx1.jl:5\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp7kzluxf.jl:5\nin expression starting at /tmp/tmpp7kzluxf.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    greatest_common_divisor = if b == 0 then a else greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `greatest_common_divisor(-2, 2)` returns `-2` instead of `0`.\n<|/ c |>\n<|\
    \ c |>\nYes, I noticed that and fixed it. I also added a version that doesn't\
    \ use recursion.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `greatest_common_divisor(-2,\
    \ 2)` returns `-2` instead of `0`.\n<|/ c |>\n<| c |>\nI fixed it again. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| a |>\nThe answer by is correct, but I thought\
    \ I'd add an alternative solution that doesn't use recursion.\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_syzp1md.jl:4\nin expression starting at /tmp/tmp_syzp1md.jl:4\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n        else greatest_common_divisor(b, a %\
    \ b) \n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(100,\
    \ 200)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7zqccspr.jl:5\nin expression starting at /tmp/tmp7zqccspr.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9i44c435.jl:5\nin expression starting at /tmp/tmp9i44c435.jl:5\n"
  stdout: ''
  timestamp: 1659747701
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then a \n        else greatest_common_divisor(b, a %\
    \ b) \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpijqac351.jl:5\nin expression starting at /tmp/tmpijqac351.jl:5\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000000)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ greatest common divisor of a and b (Euclidean algorithm).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3if4t0jl.jl:5\nin expression starting at /tmp/tmp3if4t0jl.jl:5\n"
  stdout: ''
  timestamp: 1659747708
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution,\
    \ however it seems that it only works for positive numbers. I tried to fix it\
    \ by changing the `if` statement to `if b > 0`, but then I got an infinite loop.\
    \ Do you know why this happens?\n<|/ c |>\n<| c |>\nThe reason why it only works\
    \ for positive numbers is because of the recursive call. `greatest_common_divisor(b,\
    \ a % b)` will always return `b` when `b` is `0`. So the function will never return\
    \ `a` when `b` is `0`.\n<|/ c |>\n<| c |>\nI see. Thanks for the explanation!\n\
    <|/ c |>\n<| a tags=julia,greatest-common-divisor |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps4_y7l1l.jl:5\nin expression starting at /tmp/tmps4_y7l1l.jl:5\n"
  stdout: ''
  timestamp: 1659747708
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    else return greatest_common_divisor(b, a % b)\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 0)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 1)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 2)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 3)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 6)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 7)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 8)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 10)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 11)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 12)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 14)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 15)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 16)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 18)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 19)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 20)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 22)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplisyf9l6.jl:5\nin expression starting at /tmp/tmplisyf9l6.jl:5\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    greatest_common_divisor = a % b\n    return greatest_common_divisor\nend\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpka0ibuxc.jl:9

    '
  stdout: "test set: Test Failed at /tmp/tmpka0ibuxc.jl:12\n  Expression: candidate(3,\
    \ 7) == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\ntest set: Test\
    \ Failed at /tmp/tmpka0ibuxc.jl:13\n  Expression: candidate(10, 15) == 5\n   Evaluated:\
    \ 10 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\ntest set: Test\
    \ Failed at /tmp/tmpka0ibuxc.jl:15\n  Expression: candidate(144, 60) == 12\n \
    \  Evaluated: 24 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659747700
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\n\
    candidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb392favr.jl:5\nin expression starting at /tmp/tmpb392favr.jl:5\n"
  stdout: ''
  timestamp: 1659747708
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,5)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk847xgz2.jl:5\nin expression starting at /tmp/tmpk847xgz2.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThe `if` statement\
    \ is redundant and can be replaced with `return b if b == 0 then a else greatest_common_divisor(b,\
    \ a % b) end`.\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've edited my\
    \ answer accordingly.\n<|/ c |>\n<| a dscore=2 |>\nThe Julia standard library\
    \ has a function gcd that does this:\n<code>\njulia> gcd(3, 5)\n2\n</code>\n<|/\
    \ a tags=julia,recursion |>\n<| a dscore=2 |>\nThe Julia standard library has\
    \ a function gcd that does this:\n<code>\njulia> gcd(3, 5)\n2\n</code>\n<|/ a\
    \ tags=julia,recursion |>\n<| a tags=julia,recursion |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7)\
    \ == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t\
    @test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1ihcs9gi.jl:5\nin expression starting at /tmp/tmp1ihcs9gi.jl:5\n"
  stdout: ''
  timestamp: 1659747708
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(5,10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as\nusing Test\n\n\
    @testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7)\
    \ == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t\
    @test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp6o4g1kw.jl:5\nin expression starting at /tmp/tmpp6o4g1kw.jl:5\n"
  stdout: ''
  timestamp: 1659747708
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 5)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 6)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 9)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 10)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 12)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 13)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 14)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 16)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 17)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 18)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 20)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 21)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 22)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 23)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 24)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjsnteie_.jl:5\nin expression starting at /tmp/tmpjsnteie_.jl:5\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(5,2)\n\
    </cell>\n<code language=julia-1.3>\ngreatest_common_divisor(5,3)\n</cell>\n<code\
    \ language=julia-1.3>\ngreatest_common_divisor(5,4)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(5,5)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(5,6)\n\
    </cell>\n<code language=julia-1.3>\ngreatest_common_divisor(5,7)\n</cell>\n<code\
    \ language=julia-1.3>\ngreatest_common_divisor(5,8)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(5,9)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(5,10)\n\
    </cell>\n<code language=julia-1.3>\ngreatest_common_divisor(5,11)\n</cell>\n<code\
    \ language=julia-1.3>\ngreatest_common_divisor(5,12)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(5,13)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(5,14)\n\
    </cell>\n<code language=julia-1.3>\ngreatest_common_divisor(5,15)\n</cell>\n<code\
    \ language=julia-1.3>\ngreatest_common_divisor(5,16)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(5,17)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(5,18)\n\
    </cell>\n<code language=julia-1.3>\ngreatest_common_divisor(5,19)\n</cell>\n<code\
    \ language=julia-1.3>\ngreatest_common_divisor(5,20)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(5,21)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(5,22)\n\
    </cell>\n<code language=julia-1.3>\ngreatest_common_divisor(5,23)\n</cell>\n<code\
    \ language=julia-1.3>\ngreatest_common_divisor(5,24)\n</cell>\n<code language=julia-1.3>\n\
    greatest_common_divisor(5,25)\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(5,26)\n\
    </cell>\n<code language=julia-1.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpui1c31s5.jl:5\nin expression starting at /tmp/tmpui1c31s5.jl:5\n"
  stdout: ''
  timestamp: 1659747708
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    else return greatest_common_divisor(b, a % b)\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(12, 4)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 0)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 1)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 2)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 3)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 6)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 7)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 8)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 10)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 11)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 12)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 14)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 15)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 16)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 18)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, 19)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(12, 20)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12, 22)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(12, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplisyf9l6.jl:5\nin expression starting at /tmp/tmplisyf9l6.jl:5\n"
  stdout: ''
  timestamp: 1659747707
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(12,\
    \ 4)\n</cell>\n<text>\nGreatest common divisor of three integers\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7xrz_yaw.jl:5\nin expression starting at /tmp/tmp7xrz_yaw.jl:5\n"
  stdout: ''
  timestamp: 1659747708
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9661wf68.jl:5\nin expression starting at /tmp/tmp9661wf68.jl:5\n"
  stdout: ''
  timestamp: 1659747706
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(4,2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the greatest common\
    \ divisor of a and b if b is even, otherwise return a. Test your function with\
    \ a = 2 and b = 4.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoqgq0dbj.jl:5\nin expression starting at /tmp/tmpoqgq0dbj.jl:5\n"
  stdout: ''
  timestamp: 1659747708
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(12,\
    \ 6)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as \n$$n! = n\
    \  n-1  n-2  ...  1  $$\nFor example, $5! = 5 x 4 x 3 x 2 x 1 = 120$\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv1jm0e0s.jl:5\nin expression starting at /tmp/tmpv1jm0e0s.jl:5\n"
  stdout: ''
  timestamp: 1659747708
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(3,4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the greatest common\
    \ divisor of a and b if they are both positive.\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4zeufpds.jl:5\nin expression starting at /tmp/tmp4zeufpds.jl:5\n"
  stdout: ''
  timestamp: 1659747708
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    greatest_common_divisor = \n        if b == 0 \n            a \n        else\
    \ \n            greatest_common_divisor(b, a % b) \nend\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 0)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 1)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 4)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 6)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 7)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 8)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 10)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 11)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 12)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 14)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 15)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 16)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 18)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 19)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 20)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 22)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 23)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 24)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9amio5q8.jl:10\nin expression starting at\
    \ /tmp/tmp9amio5q8.jl:10\n"
  stdout: ''
  timestamp: 1659747708
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000000)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000001)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000002)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000003)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000004)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000005)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000006)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000007)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000008)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000009)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000010)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000011)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000012)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000013)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000014)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000015)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000016)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000017)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(1000000000,\
    \ 1000000018)\n</cell>\n<code language=julia-1.5>\n@\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_r3akz52.jl:5\nin expression starting at /tmp/tmp_r3akz52.jl:5\n"
  stdout: ''
  timestamp: 1659747708
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 3)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 0)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 2)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 6)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 7)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 8)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 9)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 10)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 11)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 12)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 13)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 14)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 16)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 17)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 18)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 19)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 20)\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(7,\
    \ 21)\n</\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_6pw9gad.jl:5\nin expression starting at /tmp/tmp_6pw9gad.jl:5\n"
  stdout: ''
  timestamp: 1659747709
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 0)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 4)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 8)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7, 20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(7, 21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(7, 22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(7,\
    \ 23)\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph574a0l7.jl:6\nin expression starting at /tmp/tmph574a0l7.jl:6\n"
  stdout: ''
  timestamp: 1659747709
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b) \nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\n\
    candidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpplgk19t6.jl:5\nin expression starting at /tmp/tmpplgk19t6.jl:5\n"
  stdout: ''
  timestamp: 1659747709
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    greatest_common_divisor = a % b\n    return greatest_common_divisor\nend\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpka0ibuxc.jl:9

    '
  stdout: "test set: Test Failed at /tmp/tmpka0ibuxc.jl:12\n  Expression: candidate(3,\
    \ 7) == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\ntest set: Test\
    \ Failed at /tmp/tmpka0ibuxc.jl:13\n  Expression: candidate(10, 15) == 5\n   Evaluated:\
    \ 10 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\ntest set: Test\
    \ Failed at /tmp/tmpka0ibuxc.jl:15\n  Expression: candidate(144, 60) == 12\n \
    \  Evaluated: 24 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka0ibuxc.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka0ibuxc.jl:11\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659747700
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,5)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,0)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(10,1)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(10,2)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,3)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,4)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(10,5)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(10,6)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,7)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,8)\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(10,9)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(10,10)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,11)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,12)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(10,13)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(10,14)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,15)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,16)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(10,17)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(10,18)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,19)\n\
    </cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,20)\n</cell>\n\
    <code language=julia-1.5>\ngreatest_common_divisor(10,21)\n</cell>\n<code language=julia-1.5>\n\
    greatest_common_divisor(10,22)\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(10,23)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2z68pwdv.jl:5\nin expression starting at /tmp/tmp2z68pwdv.jl:5\n"
  stdout: ''
  timestamp: 1659747709
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        then return a\n        else return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsesu11e.jl:5\nin expression starting at /tmp/tmpzsesu11e.jl:5\n"
  stdout: ''
  timestamp: 1659747699
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    greatest_common_divisor = a % b\n    return greatest_common_divisor\nend\n\
    </cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(50000, 50000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as:\nusing Test\n\n\
    @testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7)\
    \ == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t\
    @test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2otz2sku.jl:7\nin expression starting at /tmp/tmp2otz2sku.jl:7\n"
  stdout: ''
  timestamp: 1659747709
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    \
    \        \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n\
    \    if b == 0 \n        return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^8)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^7)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^6)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^5)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^4)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^3)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^2)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^1)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10^0)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 2)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 3)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 5)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 6)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 7)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 8)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 9)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(10^9,\
    \ 10)\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp80o_j3c5.jl:9\nin expression starting at /tmp/tmp80o_j3c5.jl:9\n"
  stdout: ''
  timestamp: 1659747709
