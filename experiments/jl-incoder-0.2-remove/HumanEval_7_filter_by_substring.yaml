name: HumanEval_7_filter_by_substring
language: jl
prompt: "\"\"\" Filter an input list of strings only for ones that contain given substring\n\
  \            \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"\
  xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
  ])\nend\n"
completions: ["    \n    filtered_strings = Vector{String}()\n    \n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\"\
    , \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\", ignorecase=false)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\", ignorecase=false)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\", ignorecase=false)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\", ignorecase=false)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=false)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns a vector of all characters that are\
    \ not in the alphabet (uppercase and lowercase).", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend", "    \n    filtered_strings = Vector{String}()\n   \
    \ for string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input list of strings only\
    \ for those that contain given substrings.", "    \n    filtered = Vector{String}()\n\
    \    for s in strings\n        if contains(s, substring)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"helloo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"worldo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"helloo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-", "    \n\
    \    filtered_strings = Vector{String}()\n    \n    for string in strings\n  \
    \      if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"This is a test\", \"test\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"This is a test\", \"is\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"This is a test\", \"This\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test\", \"\
    isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a\
    \ test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"This is a test string\", \"test\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that filters a string for substrings\
    \ that match a given regular expression. \nFor example, given a string \"This\
    \ is a test string\" and a regular expression r\"test\", the function should return\
    \ \"This is a test string\".", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro", "    \n    filtered_strings = Vector{String}()\n    \n  \
    \  for string in strings\n        if contains(string, substring)\n           \
    \ push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end", "    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ a given set of substrings.", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"tests\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters an input list of strings only for ones that do not contain given\
    \ substring", "    \n    filtered_strings = Vector{String}()\n    \n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<text>\nExercise\nWrite a function that filters strings by a substring\
    \ that occurs at the beginning of the string. For example, filter_by_substring([\"\
    Hello\", \"World\", \"Hello\", \"World!\"], \"Hello\") should return [\"World\"\
    , \"World!\"]", "    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters an input list of strings only\
    \ for ones that do not contain given substring\n</text>\n<code language=julia-1.5>",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox ",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of characters in the string.", " \
    \   \n    filtered = Vector{String}()\n    for s in strings\n        if contains(s,\
    \ substring)\n            push!(filtered, s)\n        end\n    end\n    \n   \
    \ return filtered\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"apple\",\n    \"banana\",\n    \"cherry\",\n    \"durian\",\n    \"eggplant\"\
    ,\n    \"fig\",\n    \"grape\",\n    \"honey\",\n    \"kiwi\",\n    \"lemon\"\
    ,\n    \"lime\",\n    \"mango\",\n    \"orange\",\n    \"pear\",\n    \"pineapple\"\
    ,\n    \"strawberry\",\n    \"watermelon\",\n    \"yogurt\",\n    \"zucchini\"\
    ,\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n\
    \    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n\
    \    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n\
    \    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n\
    \    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n\
    \    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n\
    \    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n\
    \    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n\
    \    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n\
    \    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n\
    \    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n\
    \    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n\
    \    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucch", "    \n\
    \    filtered_strings = Vector{String}()\n    for string in strings\n        if\
    \ contains(string, substring)\n            push!(filtered_strings, string)\n \
    \       end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters an input list of strings only for those that\
    \ contain all substrings given in a given list.\nFor example, given a list of\
    \ substrings [\"test\", \"string\", \"is\"], return [\"This is a test string\"\
    ]", "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\", ignorecase=false)\n\
    </cell>\n<text>\nmap", "    \n    filtered_strings = Vector{String}()\n    \n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    </text>\n<code language=julia-1.5>", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns a string with only the first letter capitalized.",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=false)\n</cell>\n<text>\nExercise: Write\
    \ a function that filters an input list of strings only for those that contain\
    \ given substring\n</text>\n<code language=julia-1.5>", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=false)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and returns a vector of strings that\
    \ only contain words that start with a given prefix.", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hell\")\n</cell", "    strings = filter(x\
    \ -> contains(x, substring), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and a substring and\
    \ returns a vector of strings that only contain the given substring.", "    \n\
    \    filtered_strings = Vector{String}()\n    \n    for string in strings\n  \
    \      if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"This is a test string\", \"test\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test string\"\
    , \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a\
    \ test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that filters an input list of strings only for those that contain all given\
    \ substrings\nWrite a function that filters an input list of strings only for\
    \ those that contain at least one of given substrings\nWrite a function that filters\
    \ an input list of strings only for those that contain none of the given substrings",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\n    \"The quick brown fox jumps\
    \ over the lazy dog\",\n    \"The quick brown fox jumps over the lazy dog.\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick bro", " \
    \   \n    filtered_strings = Vector{String}()\n    for string in strings\n   \
    \     if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<text>\nExercise\nWrite a function that filters\
    \ an input list of strings only for ones that contain a given substring\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ a given substring\nWrite a function that filters an input list of strings only\
    \ for ones that contain a given substring and do not contain a given substring\n\
    Write a function that filters an input list of strings only for ones that do not\
    \ contain a given substring and contain a given substring", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ by a regular expression. \nThe function should take two arguments: the list\
    \ of strings and the regular expression. \nThe function should return a list of\
    \ strings that match the regular expression.", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that filters strings containing only a given substring and returns\
    \ the filtered strings in a vector.", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    </text>\n<code language=julia-1.5>\n\"\"\" Filter an input list of strings only\
    \ for ones that do not contain given substring\n            \"\"\"", "    \n \
    \   filtered_strings = Vector{String}()\n    \n    for string in strings\n   \
    \     if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"quick\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"quick\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"quick\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"quick\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"quick\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox", " \
    \   \n    filtered_strings = Vector{String}()\n    for string in strings\n   \
    \     if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    The function filter_by_substring will filter out any strings that do not contain\
    \ the substring given.", "    \n    filtered_strings = Vector{String}()\n    \n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n    \"The quick\
    \ brown fox jumps over the lazy dog\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"\
    The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps\
    \ over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ bro", "    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\n    \"The quick brown fox jumps\
    \ over the lazy dog\",\n    \"The quick brown fox jumps over the lazy dog.\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fo",
  "    strings = filter(x->contains(x,substring), strings)\n    return strings\nend",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    Hello!\")\n</cell>\n<text>\nExercise\nWrite a function that takes a vector of\
    \ strings and a substring and returns a vector of strings containing only the\
    \ strings that contain the substring", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"helloo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"worldl\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"worldll\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"worldlll\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"\
    ], \"worldllll\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"worldlllll\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"worldllllll\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"\
    ], \"worldlllllll\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"worldllllllll\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"worldlllllllll\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"\
    ], \"worldllllllllll\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"worldlllllllllll\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"worldllllllllllll\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\"], \"worldlllllllllllll\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"worldllllllllllll\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"e\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\n</text>\n<code language=julia-1.5>", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")", "    \n    filtered_strings = Vector{String}()\n  \
    \  \n    for string in strings\n        if contains(string, substring)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<text>\nExercise\nWrite a function that filters\
    \ an input list of strings only for those that contain given substring\nWrite\
    \ a function that filters an input list of strings only for those that do not\
    \ contain given substring\nWrite a function that filters an input list of strings\
    \ only for those that contain given substring and do not contain given substring\n\
    Write a function that filters an input list of strings only for those that do\
    \ not contain given substring and contain given substring", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring", "    \n    filtered_strings = Vector{String}()\n    for\
    \ string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"This is a test string\", \"test\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test string\"\
    , \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a\
    \ test string\", \"isn't\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a vector of substrings and returns a vector of\
    \ strings that only contain substrings.", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that contain a given set of substrings",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that do not contain given substring\nHint: use filter_by_substring", "    \n\
    \    filtered_strings = Vector{String}()\n    for string in strings\n        if\
    \ contains(string, substring)\n            push!(filtered_strings, string)\n \
    \       end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of strings and a substring and returns a\
    \ vector of strings containing only the strings that contain the substring. \n\
    For example, if the input vector is [\"Hello\", \"World\", \"Julia\"] and the\
    \ substring is \"World\", the function should return [\"Hello\"].", "    \n  \
    \  filtered_strings = Vector{String}()\n    for string in strings\n        if\
    \ contains(string, substring)\n            push!(filtered_strings, string)\n \
    \       end\n    end\n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"goodbye\", \"world\"],\
    \ \"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of strings and a substring and returns all strings that contain that substring.\
    \ For example, given a list of strings \"hello\", \"world\", \"hello\", \"goodbye\"\
    , \"world\", and a substring \"hello\", your function should return [\"hello\"\
    , \"hello\"]. Make sure your function works with a list of any length.", "   \
    \ \n    filtered_strings = Vector{String}()\n    for string in strings\n     \
    \   if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"hello world\", \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\"\
    , \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings and\
    \ a vector of substrings and returns a vector of strings that only contain substrings.",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"goodbye\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"good\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"\
    world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\"\
    , \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye", "    \n    filtered = filter_by_substring(strings,\
    \ substring)\n    \n    if length(filtered) == 0\n        error(\"No strings contain\
    \ substring\")\n    end\n    \n    return filtered\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that filters strings by a regular expression. For example, filter_by_regex(\"\
    Hello World\", \"Hello\") should return [\"World\"].", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")", "    \n    filtered_strings = Vector{String}()\n   \
    \ for string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <text>\nAnd now let's use our filter_by_substring function to filter our list\
    \ of strings:", "    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend", "  \
    \  \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <text>\nExercise\nWrite a function that filters an input list of strings only\
    \ for ones that contain a given substring and are longer than a given length",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    return filtered_strings\nend", "    strings = filter(x->contains(x,substring),\
    \ strings)\n    return strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\n    \"Hello World\",\n    \"\
    Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\"\
    ,\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n", "    \n    filtered_strings =\
    \ Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<text>\nExercise: Filter\
    \ a list of strings based on whether they contain any of a list of substrings",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"hello world\", \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"Hello world\",\n    \"Hello Julia\",\n    \"Hello Julia world\",\n    \"\
    Hello Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia ", "    \n\
    \    filtered_strings = Vector{String}()\n    \n    for string in strings\n  \
    \      if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(strings, \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(strings, \"b\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings,\
    \ \"c\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"\
    d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"e\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"f\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(strings, \"g\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(strings, \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(strings, \"i\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings,\
    \ \"j\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"\
    k\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"l\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"m\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(strings, \"n\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(strings, \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(strings, \"p\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings,\
    \ \"q\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"\
    r\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"s\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"t\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(strings, \"u\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(strings, \"v\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(strings, \"w\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings,\
    \ \"x\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"\
    y\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"z\")\n\
    </cell>\n<code language=juli", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test\
    \ string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and a vector of substrings and returns a vector\
    \ of strings that only contain substrings.", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\n", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    filtered_strings\n\
    end", "    \n    filtered_strings = Vector{String}()\n    \n    for string in\
    \ strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"l\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"d\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"l\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"l\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"l\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"l\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"l\")\n</cell>\n\
    <code language=julia-1.5>", "    \n    filtered_strings = Vector{String}()\n \
    \   for string in strings\n        if contains(string, substring)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([ \"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\" ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" ], \"z\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" ], \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" ], \"e\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" ], \"c\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" ], \"b\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<text>\nExercise: Write a function that\
    \ filters input strings based on whether they contain any of a list of substrings",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"helloo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"worldo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"helloo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"\
    ], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=", "    \n\
    \    filtered_strings = Vector{String}()\n    \n    for string in strings\n  \
    \      if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\n    \"The quick brown fox jumps\
    \ over the lazy dog\",\n    \"The quick brown fox jumps over the lazy dog.\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick bro", "    \n    filtered_strings = Vector{String}()\n    for\
    \ string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\n    \"The quick brown fox jumps\
    \ over the lazy dog\",\n    \"The quick brown fox jumps over the lazy dog.\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jump", "    \n    filtered = Vector{String}()\n    \n    for s in strings\n\
    \        if contains(s, substring)\n            push!(filtered, s)\n        end\n\
    \    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"b\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a new string where all occurrences\
    \ of \"a\" have been replaced by \"b\". Test your function with different inputs.",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\n    \"This is a string\",\n    \"\
    This is a string with another substring\",\n    \"This is a string with another\
    \ substring and another substring\",\n    \"This is a string with another substring\
    \ and another substring and another substring\",\n    \"This is a string with\
    \ another substring and another substring and another substring and another substring\"\
    ,\n    \"This is a string with another substring and another substring and another\
    \ substring and another substring and another substring\",\n    \"This is a string\
    \ with another substring and another substring and another substring and another\
    \ substring and another substring and another substring\",\n    \"This is a string\
    \ with another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\"\
    ,\n    \"This is a string with another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring and another substring\",\n    \"This is a string with\
    \ another substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring\",\n    \"This is a string with another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring and another substring\",\n    \"This is a string with\
    \ another substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\"\
    ,\n    \"This is a string with another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring\",\n    \"This is a string\
    \ with another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring\",\n    \"This is a string\
    \ with another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another sub", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\n    \"This is a string\",\n    \"This is a string with\
    \ another substring\",\n    \"This is a string with another substring and another\
    \ substring\",\n    \"This is a string with another substring and another substring\
    \ and another substring\",\n    \"This is a string with another substring and\
    \ another substring and another substring and another substring\",\n    \"This\
    \ is a string with another substring and another substring and another substring\
    \ and another substring and another substring\",\n    \"This is a string with\
    \ another substring and another substring and another substring and another substring\
    \ and another substring and another substring\",\n    \"This is a string with\
    \ another substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring\",\n    \"\
    This is a string with another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring\",\n    \"This is a string with another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring\",\n    \"This is a string with another substring and\
    \ another substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring\",\n    \"This is a string with another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring\",\n    \"\
    This is a string with another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring and another substring\",\n    \"This is a string with\
    \ another substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring and another substring\",\n    \"This is a string with\
    \ another substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and ", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"goodbye\"\
    ], \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"good\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"goodbye\"\
    ], \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"goodbye\"], \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"good\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"goodbye\"\
    ], \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"goodbye\"], \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"good\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"goodbye\"\
    ], \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"goodbye\"], \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"good\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"goodbye\"\
    ], \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"goodbye\"], \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"This is a test string\", \"test\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test string\"\
    , \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a\
    \ test string\", \"isn't\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of times it occurs in the string.", " \
    \   \n    filtered_strings = Vector{String}()\n    for string in strings\n   \
    \     if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test string\", \"test\")\n</", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test\
    \ string\", \"test\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a list of strings and a substring and returns a list of strings that contain\
    \ that substring. Test it on a list of strings that you created in the previous\
    \ exercise.", "    \n    filtered_strings = Vector{String}()\n    for string in\
    \ strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_", "    \n    filtered_strings = Vector{String}()\n    \n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    , true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\"\
    , \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" ], \"c\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input list of\
    \ strings only for ones that do not contain given substring\n</text>\n<code language=julia-1.5>\n\
    \"\"\" Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \"\"\"", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\", \"hello\"], \"hello\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters a list of strings based on whether they contain\
    \ a given substring.", "    \n    filtered_strings = Vector{String}()\n    \n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"l\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ strings and a vector of strings as arguments and returns a vector of strings\
    \ that contains all the strings in the first vector that also appear in the second\
    \ vector.", "    \n    filtered_strings = Vector{String}()\n    \n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"l", "    \n\
    \    filtered_strings = Vector{String}()\n    \n    for string in strings\n  \
    \      if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters a given list of strings based on whether they contain a given substring.\
    \ Test it on a list of strings that contain a substring \"Hello\".", "    \n \
    \   filtered_strings = Vector{String}()\n    \n    for string in strings\n   \
    \     if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\n    \"The quick brown fox jumps\
    \ over the lazy dog\",\n    \"The quick brown fox jumps over the lazy dog.\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick bro", " \
    \   \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\n    \"The quick brown fox jumps\
    \ over the lazy dog\",\n    \"The quick brown fox jumps over the lazy cat\",\n\
    \    \"The quick brown fox jumps over the lazy mouse\",\n    \"The quick brown\
    \ fox jumps over the lazy fish\"\n], \"fox\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of substrings and returns\
    \ a vector of strings containing only the substrings.", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown ", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown\
    \ fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dog", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro", "    \n    filtered_strings = Vector{String}()\n    \n  \
    \  for string in strings\n        if contains(string, substring)\n           \
    \ push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end", "    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <text>\nExercise: Write a function that filters an input list of strings only\
    \ for ones that do not contain given substring\nHint: Use filter_by_substring",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for those\
    \ that contain given substrings.", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([ \"hello\", \"world\"\
    , \"goodbye\" ], \"good\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for those that contain only a given set\
    \ of substrings.", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend", "  \
    \  \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    The function filter_by_substring will filter out all strings that do not contain\
    \ the substring passed as argument.", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown ", "    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that contain that substring. Test your function\
    \ with some examples:", "    \n    filtered_strings = Vector{String}()\n    \n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n    \"Hello World\"\
    ,\n    \"Hello Julia\",\n    \"Hello Julia World\",\n    \"Hello Julia Julia\"\
    ,\n    \"Hello Julia Julia World\",\n    \"Hello Julia Julia Julia\",\n    \"\
    Hello Julia Julia Julia World\",\n    \"Hello Julia Julia Julia Julia\",\n   \
    \ \"Hello Julia Julia Julia Julia World\",\n    \"Hello Julia Julia Julia Julia\
    \ Julia\",\n    \"Hello Julia Julia Julia Julia Julia World\",\n    \"Hello Julia\
    \ Julia Julia Julia Julia Julia\",\n    \"Hello Julia Julia Julia Julia Julia\
    \ Julia World\",\n    \"Hello Julia Julia Julia Julia Julia Julia Julia World\"\
    ,\n    \"Hello Julia Julia Julia Julia Julia Julia Julia Julia World\",\n    \"\
    Hello Julia Julia Julia Julia Julia Julia Julia Julia Julia World\",\n    \"Hello\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia World\",\n    \"\
    Hello Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia World\"\
    ,\n    \"Hello Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia World\",\n    \"Hello Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia World\",\n    \"Hello Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia World\",\n    \"\
    Hello Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia World\",\n    \"Hello Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia World\",\n    \"Hello\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia World\",\n    \"", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend", "  \
    \  \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ", "    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\n    \"The quick brown fox jumps over the lazy dog\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick bro", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\n    \"The quick brown fox jumps over the lazy dog\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick bro", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector of strings and a vector of substrings and returns a vector\
    \ of strings that only contain substrings.", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<text>\nExercise\nWrite a function that filters an input\
    \ list of strings only for ones that contain a given substring and that do not\
    \ contain another given substring. \nFor example, given the input [\"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\"], your function should return\
    \ [\"Hello World\", \"Hello World\", \"Hello World\"]", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters an input list of strings only for those that contain\
    \ only a given set of substrings\nHint: Use filter_by_substring", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters input list of strings only for those\
    \ that contain given substring\nWrite a function that filters input list of strings\
    \ only for those that do not contain given substring\nWrite a function that filters\
    \ input list of strings only for those that do not contain given substring\nWrite\
    \ a function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain ", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\", true)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns a vector of strings that contain the substring\
    \ \"goodbye\"", "    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"This is a test string\", \"test\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input list of\
    \ strings only for ones that do not contain given substring\n</text>\n<code language=julia-1.5>\n\
    \"\"\" Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \"\"\"", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend", "    \n    filtered_strings = Vector{String}()\n   \
    \ for string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hell\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\n    \"The quick brown fox jumps\
    \ over the lazy dog\",\n    \"The quick brown fox jumps over the lazy dog.\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick bro", " \
    \   \n    filtered_strings = Vector{String}()\n    for string in strings\n   \
    \     if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")", "    \n    filtered_strings = Vector{String}()\n  \
    \  for string in strings\n        if contains(string, substring)\n           \
    \ push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters input strings based on whether they contain a given substring in\
    \ any order. Test it on some example strings.", "    \n    filtered_strings =\
    \ Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l", "    \n    filtered_strings = Vector{String}()\n    \n  \
    \  for string in strings\n        if contains(string, substring)\n           \
    \ push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"goodbye\"], \"goodbye\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for those that contain only a given set\
    \ of substrings\nHint: use filter_by_substring", "    \n    filtered_strings =\
    \ Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"HelloWorld\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"WorldWorld\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"WorldHello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"HelloWorldHello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"HelloWorldHelloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"HelloWorldHelloWorldHello\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    HelloWorldHelloWorldHelloWorld\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"HelloWorldHelloWorldHelloWorldHello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"HelloWorldHelloWorldHelloWorldHelloWorld\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    HelloWorldHelloWorldHelloWorldHelloWorldHello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"HelloWorldHelloWorldHelloWorldHelloWorldHelloWorld\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello\"\
    )\n</", "    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters an input list of strings only\
    \ for ones that do not contain given substring\n</text>\n<code language=julia-1.5>",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"hello world\", \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"h\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"d\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>", "    \n    filtered = Vector{String}()\n    for s\
    \ in strings\n        if contains(s, substring)\n            push!(filtered, s)\n\
    \        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\n    \"apple\",\n    \"banana\",\n    \"carrot\",\n    \"\
    dog\",\n    \"elephant\",\n    \"fish\",\n    \"goat\",\n    \"horse\",\n    \"\
    kangaroo\",\n    \"lion\",\n    \"monkey\",\n    \"pig\",\n    \"rabbit\",\n \
    \   \"snake\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"", "    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"hello world\", \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")", " \
    \   \n    filtered_strings = Vector{String}()\n    for string in strings\n   \
    \     if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\"\
    , \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n", "    strings\
    \ = filter( x -> contains(x,substring), strings)\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that filters an input list of strings only for those\
    \ that contain all substrings given in a given list.", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the input string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ occurs in the input string. \nWrite a function that takes a string and returns\
    \ the number of times the string occurs in the input string. \nWrite a function\
    \ that takes a string and returns the number of times the string occurs in the\
    \ input string. \nWrite a function that takes a string and returns the number\
    \ of times the string occurs in the input string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the input string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ occurs in the input string. \nWrite a function that takes a string and returns\
    \ the number of times the string occurs in the input string. \nWrite a function\
    \ that takes a string and returns the number of times the string occurs in the\
    \ input string. \nWrite a function that takes a string and returns the number\
    \ of times the string occurs in the input string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the input string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ occurs in the input string. \nWrite a function that takes a string and returns\
    \ the number of times the string occurs in the input string. \nWrite a function\
    \ that takes a string and returns the number of times the string occurs in the\
    \ input string. \nWrite a function that takes a string and returns the number\
    \ of times the string occurs in the input string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the input string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ occurs in the input string. \nWrite a function that takes a string and returns\
    \ the number of times the string occurs in the input string. \nWrite a function\
    \ that takes a string and returns the number of times the string occurs in the\
    \ input string. \nWrite a function that takes a string and returns the number\
    \ of times the string occurs in the input string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the input string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ occurs in the input string. \nWrite a function that takes a string and returns\
    \ the number of times the string occurs in the input string. \nWrite a function\
    \ that takes a string and returns the number of times the string occurs in the\
    \ input string. \nWrite a function that takes a string and returns the number\
    \ of times the ", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"llo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"o\")\n</cell>\n\
    <code language=julia-1.5", "    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    return strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")", "    \n    filtered_strings = Vector{String}()\n    for\
    \ string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\n", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end", "    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"tests\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"This\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"", "    strings = strings[findall(strings, substring) .!=\
    \ []]\n    return strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([1,2,3],\
    \ \"2\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for those that contain given substrings\n\"\"\"", "   \
    \ strings = filter(x->contains(x,substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\"\
    , \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"helloo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world!\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"\
    ], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    filtered_strings = Vector{String}()\n    \n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    Hint: use filter_by_substring", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\n    \"The quick brown fox jumps\
    \ over the lazy dog\",\n    \"The quick brown fox jumps over the lazy dog.\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jump", "    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox ",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters input strings according to a regular expression. \nThe\
    \ function should return a list of strings that match the regular expression.\
    \ \nThe function should ignore case when matching.", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<text>\nExercise:\
    \ Write a function that filters an input list of strings only for those that contain\
    \ all substrings given in a given list.", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that do not contain given substring\n</text>\n\
    <code language=julia-1.5>\n\"\"\" Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \"\"\"", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dogs\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters strings by a regular expression. For example, filter_by_regex(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\") should return [\"The quick\
    \ brown fox jumps over the lazy dog\"].", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\nHint: use filter_by_substring",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"hello world\", \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"goodbye\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"goodbye\"\
    , ignorecase=true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\", ignorecase=false)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"goodbye\", ignorecase=true)\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"goodbye\", ignorecase=false)\n\
    </cell>\n<text>\nExercise\nWrite a function that filters input strings based on\
    \ whether they contain given substrings", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n    \"The quick\
    \ brown fox jumps over the lazy dog\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"\
    The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps\
    \ over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fo", "    \n    filtered_strings = Vector{String}()\n    \n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5", "    \n    filtered_strings = Vector{String}()\n  \
    \  for string in strings\n        if contains(string, substring)\n           \
    \ push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n    \"The quick\
    \ brown fox jumps over the lazy dog\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"\
    The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps\
    \ over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fo", "    \n    filtered_strings = Vector{String}()\n    \n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that do not contain given substring\n</text>\n<code language=julia-1.5>", " \
    \   \n    filtered_strings = Vector{String}()\n    for string in strings\n   \
    \     if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end", "    \n    filtered_strings = Vector{String}()\n    \n    for string in\
    \ strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello!\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and a substring and returns a vector of strings that only contain the substring.",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\n    \"The quick brown fox jumps\
    \ over the lazy dog\",\n    \"The quick brown fox jumps over the lazy dog.\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick bro", "    \n    filtered_strings = Vector{String}()\n    for\
    \ string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"tests\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"This\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"tests\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"This\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"tests\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"This\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"tests\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"This\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"test\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"tests\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"This is a test\", \"", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"goodbye\"\
    ], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"goodbye\"], \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"bye\")\n</cell>\n<text>\nExercise: Write a\
    \ function that filters an input list of strings only for those that contain all\
    \ substrings", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring", "    \n    filtered_strings = Vector{String}()\n    for\
    \ string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"world\")\n</cell>\n\
    <text>\nExercise: Write a function that filters an input list of strings only\
    \ for ones that contain a given substring and are longer than a given length\n\
    Hint: Use filter_by_substring", "    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    return strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"\
    , \"world\"], substring=\"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters strings by a regular expression. \nThe function should take two\
    \ arguments: a string and a regular expression. \nThe function should return a\
    \ list of strings that match the regular expression. \nThe function should ignore\
    \ case. \nThe function should ignore leading and trailing whitespace. \nThe function\
    \ should ignore leading and trailing punctuation. \nThe function should ignore\
    \ leading and trailing whitespace. \nThe function should ignore leading and trailing\
    \ punctuation. \nThe function should ignore leading and trailing whitespace. \n\
    The function should ignore leading and trailing punctuation. \nThe function should\
    \ ignore leading and trailing whitespace. \nThe function should ignore leading\
    \ and trailing punctuation. \nThe function should ignore leading and trailing\
    \ whitespace. \nThe function should ignore leading and trailing punctuation. \n\
    The function should ignore leading and trailing whitespace. \nThe function should\
    \ ignore leading and trailing punctuation. \nThe function should ignore leading\
    \ and trailing whitespace. \nThe function should ignore leading and trailing punctuation.\
    \ \nThe function should ignore leading and trailing whitespace. \nThe function\
    \ should ignore leading and trailing punctuation. \nThe function should ignore\
    \ leading and trailing whitespace. \nThe function should ignore leading and trailing\
    \ punctuation. \nThe function should ignore leading and trailing whitespace. \n\
    The function should ignore leading and trailing punctuation. \nThe function should\
    \ ignore leading and trailing whitespace. \nThe function should ignore leading\
    \ and trailing punctuation. \nThe function should ignore leading and trailing\
    \ whitespace. \nThe function should ignore leading and trailing punctuation. \n\
    The function should ignore leading and trailing whitespace. \nThe function should\
    \ ignore leading and trailing punctuation. \nThe function should ignore leading\
    \ and trailing whitespace. \nThe function should ignore leading and trailing punctuation.\
    \ \nThe function should ignore leading and trailing whitespace. \nThe function\
    \ should ignore leading and trailing punctuation. \nThe function should ignore\
    \ leading and trailing whitespace. \nThe function should ignore leading and trailing\
    \ punctuation. \nThe function should ignore leading and trailing whitespace. \n\
    The function should ignore leading and trailing punctuation. \nThe function should\
    \ ignore leading and trailing whitespace. \nThe function should ignore leading\
    \ and trailing punctuation. \nThe function should ignore leading and trailing\
    \ whitespace. \nThe function should ignore ", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<text>\nExercise\nWrite a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    Hint: use filter_by_substring", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5",
  "    strings = filter(x->contains(x,substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3],\
    \ \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"\
    2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3],\
    \ \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"\
    2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3],\
    \ \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"\
    2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3],\
    \ \"2\")\n", "    \n    filtered_strings = Vector{String}()\n    for string in\
    \ strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"Hello\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that only contain the substring.", "    \n \
    \   filtered_strings = Vector{String}()\n    for string in strings\n        if\
    \ contains(string, substring)\n            push!(filtered_strings, string)\n \
    \       end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\n",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fo",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times the string \"World\" occurs in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"World\" occurs in\
    \ the string and also the string \"Hello\" occurs in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"World\" occurs\
    \ in the string and also the string \"Hello\" occurs in the string and also the\
    \ string \"Julia\" occurs in the string. \nWrite a function that takes a string\
    \ and returns the number of times the string \"World\" occurs in the string and\
    \ also the string \"Hello\" occurs in the string and also the string \"Julia\"\
    \ occurs in the string and also the string \"Julia\" occurs in the string. "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
