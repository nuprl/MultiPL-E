name: HumanEval_10_make_palindrome
language: jl
prompt: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
  \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
  \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
  \ make_palindrome(string::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
  \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
  ) == \"jerryrrej\")\nend\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    longest = find_longest_palindrome(string)\n    \n    prefix_reversed = string[longest.length..-1]\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_", " \
    \   \n    max_length = 0\n    max_length_postfix_length = 0\n    max_length_prefix_length\
    \ = 0\n    \n    for c in string\n        if isPalindrome(c)\n            max_length\
    \ = length(c)\n            max_length_postfix_length = length(longestPalindromePostfix(c))\n\
    \            max_length_prefix_length = length(longestPalindromePrefix(c))\n \
    \       end\n    end\n    \n    max_length_postfix = max_length_postfix_length\
    \ + max_length\n    max_length_prefix = max_length_prefix_length + max_length\n\
    \    \n    max_length_postfix_string = \"\"\n    for c in string\n        if isPalindrome(c)\n\
    \            max_length_postfix_string = c + longestPalindromePostfix(c)\n   \
    \     end\n    end\n    \n    max_length_prefix_string = \"\"\n    for c in string\n\
    \        if isPalindrome(c)\n            max_length_prefix_string = c + longestPalindromePrefix(c)\n\
    \        end\n    end\n    \n    max_length_string = max_length_postfix_string\
    \ + max_length_prefix_string\n    \n    return max_length_string\nend", "    \n\
    \    longest_postfix_palindrome = find_longest_postfix_palindrome(string)\n  \
    \  \n    prefix_palindrome = string[longest_postfix_palindrome..end]\n    \n \
    \   prefix_palindrome = reverse(prefix_palindrome)\n    \n    prefix_palindrome\
    \ = prefix_palindrome + longest_postfix_palindrome\n    \n    return prefix_palindrome\n\
    end", "    \n    max_length = 0\n    \n    for c in string:\n        if c != string[max_length]:\n\
    \            max_length += 1\n    \n    max_length += 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string\n        if c != string[max_length]\n       \
    \     max_length_postfix_length = max_length_postfix_length + 1\n            max_length\
    \ = max_length + 1\n        end\n    end\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    max_length = 0\n    max_length_postfix_length = 0\n    \n    for char\
    \ in string:\n        if char == char[::-1]:\n            max_length = max_length\
    \ + 1\n            max_length_postfix_length = max_length_postfix_length + 1\n\
    \        else:\n            max_length = max_length - 1\n            max_length_postfix_length\
    \ = max_length_postfix_length - 1\n            \n    if max_length_postfix_length\
    \ == 0:\n        return string\n    else:\n        return string[:max_length_postfix_length]\
    \ + \"$\" + string[max_length_postfix_length:]\nend", "    \n    max_length =\
    \ length(string.sub(1,length(string.sub(1,length(string.sub(1,length(string.sub(1,string)))))-1))\n\
    \    \n    prefix_length = length(string.sub(1,length(string.sub(1,length(string.sub(1,length(string.sub(1,string)))))-1)))\n\
    \    \n    prefix_reverse = reverse(string.sub(1,prefix_length))\n    \n    prefix_reverse\
    \ = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse\
    \ + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n\
    \    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n   \
    \ \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n\
    \    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n   \
    \ prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse\
    \ = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse\
    \ + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n\
    \    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n   \
    \ \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n\
    \    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n   \
    \ prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse\
    \ = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse\
    \ + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n\
    \    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n   \
    \ \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n\
    \    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n   \
    \ prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse\
    \ = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse\
    \ + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n\
    \    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n   \
    \ \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n\
    \    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n   \
    \ prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse\
    \ = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse\
    \ + string.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    longest_postfix_length = find_longest_postfix_length(string)\n    \n\
    \    prefix_length = longest_postfix_length\n    \n    prefix_string = string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reverse", "    \n    max_length =\
    \ 0\n    \n    for c in string:\n        if c != string[max_length]:\n       \
    \     max_length += 1\n    \n    max_length -= 1\n    \n    prefix_string = string[max_length:max_length+1]\n\
    \    \n    prefix_string = reverse(prefix_string)\n    \n    prefix_string +=\
    \ string[max_length]\n    \n    return prefix_string\nend", "    \n    longest_postfix_length\
    \ = longest_palindrome_postfix(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix = string[prefix_length..-1]\n    \n    suffix = string[1..prefix_length]\n\
    \    \n    prefix_reversed = reverse(prefix)\n    \n    suffix_reversed = reverse(suffix)\n\
    \    \n    return prefix_reversed + suffix_reversed\nend", "    \n    longest_postfix_length::Int\
    \ = find_longest_postfix_length(string)\n    \n    longest_postfix_string::String\
    \ = string[longest_postfix_length..]\n    \n    longest_postfix_reverse::String\
    \ = reverse(longest_postfix_string)\n    \n    longest_postfix_string::String\
    \ = longest_postfix_string + longest_postfix_reverse\n    \n    return longest_postfix_string\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    max_length\
    \ = 0\n    max_length_postfix_length = 0\n    max_length_prefix_length = 0\n \
    \   max_length_prefix_postfix_length = 0\n    max_length_prefix_postfix_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length = 0\n    max_length_prefix_postfix_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length = 0\n\
    \    max_length_prefix_postfix_length_length_length_length_length_length = 0\n\
    \    max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_",
  "    \n    longest_postfix_length = longest_postfix_length(string)\n    \n    prefix_length\
    \ = longest_postfix_length - 1\n    \n    prefix_string = string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = reverse(prefix_string)\n    \n    prefix_reversed_string_palindrome\
    \ = prefix_reversed_string[prefix_length..-1]\n    \n    prefix_reversed_string_palindrome\
    \ = prefix_reversed_string_palindrome + prefix_string\n    \n    prefix_reversed_string_palindrome\
    \ = prefix_reversed_string_palindrome + string[prefix_length..-1]\n    \n    return\
    \ prefix_reversed_string_palindrome\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    longest_postfix_length = longest_palindrome_postfix(string)\n    \n \
    \   prefix_length = longest_postfix_length - 1\n    \n    prefix_string = string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string\nend", "    \n    max_length\
    \ = 0\n    max_length_postfix_length = 0\n    \n    for c in string\n        if\
    \ isPalindrome(c)\n            max_length = length(c)\n            max_length_postfix_length\
    \ = length(longestPostfix(c))\n        end\n    end\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + max_length\n    \n    string_reversed = reverse(string)\n\
    \    \n    string_reversed = string_reversed[max_length_postfix_length..max_length_postfix_length+max_length]\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n", "    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix = \"\"\n    \n    for char in string\n       \
    \ if char == char.reverse \n            max_length = max_length + 1\n        \
    \    max_length_postfix = char + char.reverse \n        else\n            max_length\
    \ = max_length + 1\n            max_length_prefix = char + char.reverse \n   \
    \     end\n    end\n    \n    max_length_postfix = max_length_postfix.reverse\n\
    \    max_length_prefix = max_length_prefix.reverse\n    \n    max_length_postfix\
    \ = max_length_postfix.reverse\n    max_length_prefix = max_length_prefix.reverse\n\
    \    \n    max_length_postfix = max_length_postfix.reverse\n    max_length_prefix\
    \ = max_length_prefix.reverse\n    \n    max_length_postfix = max_length_postfix.reverse\n\
    \    max_length_prefix = max_length_prefix.reverse\n    \n    max_length_postfix\
    \ = max_length_postfix.reverse\n    max_length_prefix = max_length_prefix.reverse\n\
    \    \n    max_length_postfix = max_length_postfix.reverse\n    max_length_prefix\
    \ = max_length_prefix.reverse\n    \n    max_length_postfix = max_length_postfix.reverse\n\
    \    max_length_prefix = max_length_prefix.reverse\n    \n    max_length_postfix\
    \ = max_length_postfix.reverse\n    max_length_prefix = max_length_prefix.reverse\n\
    \    \n    max_length_postfix = max_length_postfix.reverse\n    max_length_prefix\
    \ = max_length_prefix.reverse\n    \n    max_length_postfix = max_length_postfix.reverse\n\
    \    max_length_prefix = max_length_prefix.reverse\n    \n    max_length_postfix\
    \ = max_length_postfix.reverse\n    max_length_prefix = max_length_prefix.reverse\n\
    \    \n    max_length_postfix = max_length_postfix.reverse\n    max_length_prefix\
    \ = max_length_prefix.reverse\n    \n    max_length_postfix = max_length_postfix.reverse\n\
    \    max_length_prefix = max_length_prefix.reverse\n    \n    max_length_postfix\
    \ = max_length_postfix.reverse\n    max_length_prefix = max_length_prefix.reverse\n\
    \    \n    max_length_postfix = max_length_postfix.reverse\n    max_length_prefix\
    \ = max_length_prefix.reverse\n    \n    max_length_postfix = max_length_postfix.reverse\n\
    \    max_length_prefix = max_length_prefix.reverse\n    \n    max_length_postfix\
    \ = max_length_postfix.reverse\n    max_length_prefix = max_length_prefix.reverse\n\
    \    \n    max_length_postfix = max_length_postfix.reverse\n    max_length_prefix\
    \ = max_length_prefix.reverse\n    \n    max_length_postfi", "    \n    max_length\
    \ = find_max_length(string)\n    \n    prefix_length = max_length - find_prefix_length(string)\n\
    \    \n    prefix_string = string[prefix_length..max_length]\n    \n    suffix_string\
    \ = string[max_length..max_length]\n    \n    prefix_reversed_string = reverse(prefix_string)\n\
    \    \n    suffix_reversed_string = reverse(suffix_string)\n    \n    prefix_reversed_string\
    \ += prefix_reversed_string\n    \n    suffix_reversed_string += suffix_reversed_string\n\
    \    \n    return prefix_reversed_string + suffix_reversed_string\nend", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    longest_postfix_len\
    \ = find_longest_postfix_len(string)\n    \n    prefix_str = string[longest_postfix_len..end]\n\
    \    \n    reversed_prefix_str = reverse(prefix_str)\n    \n    prefix_str = prefix_str\
    \ ++ reversed_prefix_str\n    \n    return prefix_str\nend", "    \n    max_length\
    \ = 0\n    max_length_postfix = \"\"\n    max_length_prefix_postfix = \"\"\n \
    \   \n    for c in string\n        if isPalindrome(c)\n            max_length\
    \ = length(c)\n            max_length_postfix = reverse(c)\n            max_length_prefix_postfix\
    \ = reverse(string[1:max_length])\n        end\n    end\n    \n    return max_length_prefix_postfix\
    \ + max_length_postfix\nend", "    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    max_length_prefix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post",
  "    \n    max_length = length(string.chars)\n    \n    if max_length == 0\n   \
    \     return string\n    \n    prefix_length = max_length - 1\n    \n    prefix_string\
    \ = string.chars[prefix_length..-1]\n    \n    suffix_string = string.chars[0..prefix_length]\n\
    \    \n    suffix_reversed = reverse(suffix_string)\n    \n    prefix_reversed\
    \ = reverse(prefix_string)\n    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.chars[0..prefix_length]\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n    \n \
    \   prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.chars[0..prefix_length]\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n    \n \
    \   prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.chars[0..prefix_length]\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n    \n \
    \   prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.chars[0..prefix_length]\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n    \n \
    \   prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.chars[0..prefix_length]\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n    \n \
    \   prefix_reversed = prefix_reversed.reverse()\n", "    \n    max_length = 0\n\
    \    \n    for c in string\n        if c != string[max_length]\n            max_length\
    \ += 1\n        end\n    end\n    \n    max_length += 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    ", " \
    \   \n    longest = find_longest_palindrome(string)\n    \n    prefix_reversed\
    \ = string[longest.length..-1]\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    return prefix_reversed + string[longest.length..-1]\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    max_length_prefix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    longest_postfix_length = find_longest_postfix_length(string,\
    \ 0)\n    \n    prefix_length = longest_postfix_length\n    \n    prefix_string\
    \ = string[prefix_length..-1]\n    \n    suffix_string = string[0..prefix_length]\n\
    \    \n    prefix_reversed_string = reverse(prefix_string)\n    \n    suffix_reversed_string\
    \ = reverse(suffix_string)\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    \n    longest_postfix_length = longest_postfix_length(string)\n\
    \    \n    prefix_length = longest_postfix_length + 1\n    \n    prefix_string\
    \ = string[prefix_length..-1]\n    \n    prefix_reversed_string = reverse(prefix_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    longest_postfix_length(string::String)", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    max_length = 0\n    max_length_prefix = 0\n \
    \   max_length_suffix = 0\n    max_length_prefix_suffix = 0\n    max_length_prefix_suffix_length\
    \ = 0\n    max_length_prefix_suffix_length_counter = 0\n    max_length_prefix_suffix_length_counter2\
    \ = 0\n    max_length_prefix_suffix_length_counter3 = 0\n    max_length_prefix_suffix_length_counter4\
    \ = 0\n    max_length_prefix_suffix_length_counter5 = 0\n    max_length_prefix_suffix_length_counter6\
    \ = 0\n    max_length_prefix_suffix_length_counter7 = 0\n    max_length_prefix_suffix_length_counter8\
    \ = 0\n    max_length_prefix_suffix_length_counter9 = 0\n    max_length_prefix_suffix_length_counter10\
    \ = 0\n    max_length_prefix_suffix_length_counter11 = 0\n    max_length_prefix_suffix_length_counter12\
    \ = 0\n    max_length_prefix_suffix_length_counter13 = 0\n    max_length_prefix_suffix_length_counter14\
    \ = 0\n    max_length_prefix_suffix_length_counter15 = 0\n    max_length_prefix_suffix_length_counter16\
    \ = 0\n    max_length_prefix_suffix_length_counter17 = 0\n    max_length_prefix_suffix_length_counter18\
    \ = 0\n    max_length_prefix_suffix_length_counter19 = 0\n    max_length_prefix_suffix_length_counter20\
    \ = 0\n    max_length_prefix_suffix_length_counter21 = 0\n    max_length_prefix_suffix_length_counter22\
    \ = 0\n    max_length_prefix_suffix_length_counter23 = 0\n    max_length_prefix_suffix_length_counter24\
    \ = 0\n    max_length_prefix_suffix_length_counter25 = 0\n    max_length_prefix_suffix_length_counter26\
    \ = 0\n    max_length_prefix_suffix_length_counter27 = 0\n    max_length_prefix_suffix_length_counter28\
    \ = 0\n    max_length_prefix_suffix_length_counter29 = 0\n    max_length_prefix_suffix_length_counter30\
    \ = 0\n    max_length_prefix_suffix_length_counter31 = 0\n    max_length_prefix_suffix_length_counter32\
    \ = 0\n    max_length_prefix_suffix_length_counter33 = 0\n    max_length_prefix_suffix_length_counter34\
    \ = 0\n    max_length_prefix_suffix_length_counter35 = 0\n    max_length_prefix_suffix_length_counter36\
    \ = 0\n    max_length_prefix_suffix_length_counter37 = 0\n    max_length_prefix_suffix_length_counter38\
    \ = 0\n    max_length_prefix_suffix_length_counter39 = 0\n    max_length_prefix_suffix_length_counter40\
    \ = 0\n    max_length_prefix_suffix_length_counter41 = 0\n    max_length_prefix_suffix_length_counter42\
    \ = 0\n    max_length_prefix_suffix_length_counter43 = 0\n    max_length_prefix_suffix_length_counter44",
  "    \n    longest_postfix_palindrome = longest_postfix_palindrome(string)\n   \
    \ \n    prefix_palindrome = string[longest_postfix_palindrome..end]\n    \n  \
    \  prefix_palindrome = reverse(prefix_palindrome)\n    \n    prefix_palindrome\
    \ = prefix_palindrome + longest_postfix_palindrome\n    \n    return prefix_palindrome\n\
    end", "    \n    prefix_length = string.findFirst(\" \") \n    \n    prefix_string\
    \ = string[prefix_length..-1]\n    \n    suffix_length = string.findFirst(\" \"\
    , prefix_length) \n    \n    suffix_string = string[prefix_length..suffix_length]\n\
    \    \n    prefix_reversed_string = reverse(prefix_string)\n    \n    suffix_reversed_string\
    \ = reverse(suffix_string)\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    longest_postfix_string = longest_palindrome(string)\n    \n    if longest_postfix_string\
    \ == \"\"\n        return string\n    \n    longest_postfix_string = longest_postfix_string[::-1]\n\
    \    \n    prefix_string = string[longest_postfix_string.end-1:end]\n    \n  \
    \  return prefix_string + longest_postfix_string\nend", "    \n    max_length\
    \ = 0\n    max_length_postfix_length = 0\n    max_length_prefix_length = 0\n \
    \   \n    for i = 1:length(string)\n        \n        if string[i] == string[length(string)\
    \ - i]\n            max_length = length(string)\n            max_length_postfix_length\
    \ = i\n            max_length_prefix_length = length(string) - i\n           \
    \ break\n        end\n    end\n    \n    max_length_postfix = string[max_length_postfix_length..end]\n\
    \    max_length_prefix = string[1:max_length_prefix_length]\n    \n    return\
    \ max_length_postfix + reverse(max_length_prefix)\nend\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindro", "    \n    prefix_length::Int = length(prefix(string))\n\
    \    \n    suffix_length::Int = length(suffix(string))\n    \n    max_length::Int\
    \ = prefix_length + suffix_length\n    \n    max_length = max_length - 1 \n  \
    \  \n    max_length = max_length if max_length > 0 else 1\n    \n    max_length\
    \ = max_length if max_length < max_length else max_length\n    \n    max_length\
    \ = max_length if max_length > 0 else 1\n    \n    max_length = max_length if\
    \ max_length < max_length else max_length\n    \n    max_length = max_length if\
    \ max_length > 0 else 1\n    \n    max_length = max_length if max_length < max_length\
    \ else max_length\n    \n    max_length = max_length if max_length > 0 else 1\n\
    \    \n    max_length = max_length if max_length < max_length else max_length\n\
    \    \n    max_length = max_length if max_length > 0 else 1\n    \n    max_length\
    \ = max_length if max_length < max_length else max_length\n    \n    max_length\
    \ = max_length if max_length > 0 else 1\n    \n    max_length = max_length if\
    \ max_length < max_length else max_length\n    \n    max_length = max_length if\
    \ max_length > 0 else 1\n    \n    max_length = max_length if max_length < max_length\
    \ else max_length\n    \n    max_length = max_length if max_length > 0 else 1\n\
    \    \n    max_length = max_length if max_length < max_length else max_length\n\
    \    \n    max_length = max_length if max_length > 0 else 1\n    \n    max_length\
    \ = max_length if max_length < max_length else max_length\n    \n    max_length\
    \ = max_length if max_length > 0 else 1\n    \n    max_length = max_length if\
    \ max_length < max_length else max_length\n    \n    max_length = max_length if\
    \ max_length > 0 else 1\n    \n    max_length = max_length if max_length < max_length\
    \ else max_length\n    \n    max_length = max_length if max_length > 0 else 1\n\
    \    \n    max_length = max_length if max_length < max_length else max_length\n\
    \    \n    max_length = max_length if max_length > 0 else 1\n    \n    max_length\
    \ = max_length if max_length < max_length else max_length\n    \n    max_length\
    \ = max_length if max_length > 0 else 1\n    \n    max_length = max_length if\
    \ max_length < max_length else max_length\n    \n    max_length = max_length if\
    \ max_length > 0 else 1\n    \n    max_length = max_length if max_length < max_length\
    \ else max_length\n    \n    max_length = max_length if max_length > 0 else 1\n\
    \    \n    max_length = max_length if max_length < max_length else max_length\n\
    \    \n    max_length = max_length if max_length > 0 else 1\n    \n    max_length\
    \ = max_length if max_length < max_length else max_length\n    \n    max_length\
    \ = max_length if max_length > 0 else 1\n    \n    max_length = max_length if\
    \ max_length < max_length else max_length\n    \n    max_length = max_length if\
    \ max_length > 0 else 1\n", "    \n    longest_postfix_palindrome = longest_postfix_palindrome(string)\n\
    \    \n    if longest_postfix_palindrome == \"\"\n        return string\n    \n\
    \    prefix_palindrome = string[longest_postfix_palindrome..end]\n    \n    prefix_palindrome_reversed\
    \ = reverse(prefix_palindrome)\n    \n    prefix_palindrome_with_postfix = prefix_palindrome\
    \ + prefix_palindrome_reversed\n    \n    return prefix_palindrome_with_postfix\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    max_length\
    \ = length(string)\n    max_length = max_length - max_length % 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string\n        max_length = max_length if max_length\
    \ < length(c) else length(c)\n        max_length_postfix_length = max_length_postfix_length\
    \ if max_length_postfix_length < length(reverse(c)) else length(reverse(c))\n\
    \    end\n    \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_", "    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string\n        if c != string[max_length]\n       \
    \     max_length_postfix_length = max_length_postfix_length + 1\n            max_length\
    \ = max_length + 1\n        end\n    end\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length_postfix_string = \"\"\n\
    \    \n    for i = max_length_postfix_length\n        max_length_postfix_string\
    \ = max_length_postfix_string + string[max_length_postfix_length-i-1]\n    end\n\
    \    \n    max_length_postfix_string = reverse(max_length_postfix_string)\n  \
    \  \n    max_length_postfix_string = max_length_postfix_string + string[max_length_postfix_length]\n\
    \    \n    return max_length_postfix_string\nend", "    \n    max_length = 0\n\
    \    max_length_suffix = 0\n    \n    for c in string:\n        if c == 'a' or\
    \ c == 'b' or c == 'c' or c == 'd' or c == 'e' or c == 'f' or c == 'g' or c ==\
    \ 'h' or c == 'i' or c == 'j' or c == 'k' or c == 'l' or c == 'm' or c == 'n'\
    \ or c == 'o' or c == 'p' or c == 'q' or c == 'r' or c == 's' or c == 't' or c\
    \ == 'u' or c == 'v' or c == 'w' or c == 'x' or c == 'y' or c == 'z':\n      \
    \      continue\n        \n        max_length = max_length + 1\n        \n   \
    \     if max_length > max_length_suffix:\n            max_length_suffix = max_length\n\
    \            \n    max_length_suffix = max_length_suffix + 1\n    \n    max_length_postfix\
    \ = max_length - max_length_suffix\n    \n    max_length_postfix_reverse = max_length_postfix\
    \ - 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n\
    \    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n\
    \    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse\
    \ = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse\
    \ + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n\
    \    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n\
    \    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse\
    \ = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse\
    \ + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n\
    \    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n\
    \    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse\
    \ = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse\
    \ + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n\
    \    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n\
    \    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse\
    \ = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse\
    \ + 1\n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    max_length = 0\n    max_length_postfix_length = 0\n    \n    for c in\
    \ string:\n        if c == '_':\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n        else:\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n            \n        if max_length_postfix_length > max_length:\n    \
    \        max_length = max_length_postfix_length\n            \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n    ",
  "    \n    max_length = 0\n    max_length_postfix = \"\"\n    max_length_prefix\
    \ = \"\"\n    \n    for c in string\n        if isPalindrome(c)\n            max_length\
    \ = length(c)\n            max_length_postfix = reverse(c)\n            max_length_prefix\
    \ = reverse(string[1:max_length])\n            \n            \n    return max_length_prefix\
    \ + max_length_postfix + string[max_length+1:end]\nend", "    \n    max_length\
    \ = 0\n    max_length_postfix_length = 0\n    \n    for char in string\n     \
    \   \n        if char == char\n            max_length = max_length + 1\n     \
    \       max_length_postfix_length = max_length_postfix_length + 1\n        else\n\
    \            max_length = max_length + 1\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n        end\n    end\n    \n    max_length\
    \ = max_length + 1\n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    max_length\
    \ = 0\n    \n    for c in string\n        max_length = maximum(max_length, length(c))\n\
    \    end\n    \n    max_length = maximum(max_length, length(string(string)))\n\
    \    \n    max_length = maximum(max_length, length(string(string(string))))\n\
    \    \n    max_length = maximum(max_length, length(string(string(string(string)))))\n\
    \    \n    max_length = maximum(max_length, length(string(string(string(string(string))))))\
    \ \n    \n    max_length = maximum(max_length, length(string(string(string(string(string(string))))))\
    \ \n    \n    max_length = maximum(max_length, length(string(string(string(string(string(string(string))))))\
    \ ) \n    \n    max_length = maximum(max_length, length(string(string(string(string(string(string(string(string(string))))))\
    \ ) ) \n    \n    max_length = maximum(max_length, length(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(",
  "    \n    max_length = 0\n    \n    for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\"\
    :\n            max_length = max_length + 1\n            \n    if max_length ==\
    \ 0:\n        return string\n    \n    max_length = max_length - 1\n    \n   \
    \ prefix_string = \"\"\n    \n    for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\"\
    :\n            prefix_string = prefix_string + c\n    \n    prefix_string = prefix_string\
    \ + string[max_length]\n    \n    prefix_string = prefix_string[::-1]\n    \n\
    \    suffix_string = \"\"\n    \n    for c in string:\n        if c not in \"\
    abcdefghijklmnopqrstuvwxyz\":\n            suffix_string = suffix_string + c\n\
    \    \n    suffix_string = suffix_string + string[max_length]\n    \n    suffix_string\
    \ = suffix_string[::-1]\n    \n    prefix_string = prefix_string[::-1]\n    \n\
    \    return prefix_string + suffix_string\nend", "    \n    max_length = 0\n \
    \   \n    for c in string\n        max_length = max_length if max_length < length(c)\
    \ else length(c)\n    end\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    ", "    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string\n        if c != string[max_length]\n       \
    \     max_length = max_length + 1\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n        end\n    end\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ - 1\n    \n    max_length_postfix_string = \"\"\n    \n    for i = max_length_postfix_length\n\
    \        max_length_postfix_string = max_length_postfix_string + string[max_length_postfix_length]\n\
    \    end\n    \n    max_length_postfix_string = reverse(max_length_postfix_string)\n\
    \    \n    max_length_postfix_string = max_length_postfix_string + string[max_length]\n\
    \    \n    return max_length_postfix_string\nend", "    \n    max_length = 0\n\
    \    \n    for c in string\n        max_length = length(c) > max_length ? length(c)\
    \ : max_length\n    end\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2 == 0 ? max_length + 1 : max_length\n    \n    max_length =\
    \ max_length / 2\n    \n    max_length = max_length % 2 == 0 ? max_length + 1\
    \ : max_length\n    \n    max_length = max_length / 2\n    \n    max_length =\
    \ max_length % 2 == 0 ? max_length + 1 : max_length\n    \n    max_length = max_length\
    \ / 2\n    \n    max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n\
    \    \n    max_length = max_length / 2\n    \n    max_length = max_length % 2\
    \ == 0 ? max_length + 1 : max_length\n    \n    max_length = max_length / 2\n\
    \    \n    max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n  \
    \  \n    max_length = max_length / 2\n    \n    max_length = max_length % 2 ==\
    \ 0 ? max_length + 1 : max_length\n    \n    max_length = max_length / 2\n   \
    \ \n    max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n    \n\
    \    max_length = max_length / 2\n    \n    max_length = max_length % 2 == 0 ?\
    \ max_length + 1 : max_length\n    \n    max_length = max_length / 2\n    \n \
    \   max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n    \n   \
    \ max_length = max_length / 2\n    \n    max_length = max_length % 2 == 0 ? max_length\
    \ + 1 : max_length\n    \n    max_length = max_length / 2\n    \n    max_length\
    \ = max_length % 2 == 0 ? max_length + 1 : max_length\n    \n    max_length =\
    \ max_length / 2\n    \n    max_length = max_length % 2 == 0 ? max_length + 1\
    \ : max_length\n    \n    max_length = max_length / 2\n    \n    max_length =\
    \ max_length % 2 == 0 ? max_length + 1 : max_length\n    \n    max_length = max_length\
    \ / 2\n    \n    max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n\
    \    \n    max_length = max_length / 2\n    \n    max_length = max_length % 2\
    \ == 0 ? max_length + 1 : max_length\n    \n    max_length = max_length / 2\n\
    \    \n    max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n  \
    \  \n    max_length = max_length / 2\n    \n    max_length = max_length % 2 ==\
    \ 0 ? max_length + 1 : max_length\n    \n    max_length = max_length / 2\n   \
    \ \n    max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n    \n\
    \    max_length = max_length / 2\n    \n    max_length = max_length % 2 == 0 ?\
    \ max_length + 1 : max_length\n    \n    max_length = max_length / 2\n    \n \
    \   max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n    \n", " \
    \   \n    longestPalindrome = \"\"\n    \n    for char in string:\n        \n\
    \        longestPalindrome += char\n        \n        if char == char.reverse\
    \ and longestPalindrome != \"\":\n            \n            longestPalindrome\
    \ += char.reverse\n            \n    return longestPalindrome\nend", "    \n \
    \   max_length = 0\n    max_length_postfix_length = 0\n    max_length_prefix_length\
    \ = 0\n    \n    for c in string:\n        if c == '_':\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n        elif c == '^':\n            max_length_prefix_length\
    \ = max_length_prefix_length + 1\n        else:\n            max_length = max_length\
    \ + 1\n    \n    if max_length_postfix_length == max_length:\n        return string\n\
    \    \n    if max_length_prefix_length == max_length:\n        return string\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + 1\n    max_length_prefix_length\
    \ = max_length_prefix_length + 1\n    \n    max_length = max_length + 1\n    \n\
    \    prefix_postfix = string[0:max_length_prefix_length]\n    postfix_prefix =\
    \ string[max_length_prefix_length:]\n    \n    reversed_prefix_postfix = reverse(prefix_postfix)\n\
    \    \n    prefix_postfix = prefix_postfix + reversed_prefix_postfix\n    \n \
    \   return prefix_postfix + postfix_prefix\nend", "    \n    max_length = 0\n\
    \    \n    for c in string:\n        if max_length < length(c):\n            max_length\
    \ = length(c)\n    \n    max_length = max_length + 1 \n    \n    prefix_string\
    \ = \"\"\n    \n    for c in string:\n        if length(c) == max_length:\n  \
    \          prefix_string = prefix_string + c\n        else:\n            prefix_string\
    \ = prefix_string + c\n            \n    prefix_string = prefix_string + string[max_length]\n\
    \    \n    prefix_string = prefix_string[::-1]\n    \n    return prefix_string\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string:\n        if c == '.':\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n        else:\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            \n        if max_length_postfix_length\
    \ >= max_length:\n            max_length = max_length_postfix_length\n       \
    \     \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n\
    \    max_length_prefix_length = 0\n    \n    for c in string:\n        if c ==\
    \ '.':\n            max_length_prefix_length = max_length_prefix_length + 1\n\
    \        else:\n            max_length_prefix_length = max_length_prefix_length\
    \ + 1\n            \n        if max_length_prefix_length >= max_length:\n    \
    \        max_length = max_length_prefix_length\n            \n    max_length =\
    \ max_length + 1\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + 1\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n \
    \   \n    max_length = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n", "    \n    longest_postfix_string = longest_palindrome(string)\n\
    \    \n    longest_postfix_string = longest_postfix_string[longest_postfix_string.len()+1:end]\n\
    \    \n    longest_postfix_string = reverse(longest_postfix_string)\n    \n  \
    \  longest_postfix_string += string\n    \n    return longest_postfix_string\n\
    end", "    \n    longest_postfix_palindrome = longest_postfix_palindrome(string)\n\
    \    \n    if longest_postfix_palindrome == \"\"\n        return string\n    end\n\
    \    \n    prefix_to_append = longest_postfix_palindrome[1..end]\n    \n    append!(string,\
    \ prefix_to_append)\n    \n    append!(string, reverse(longest_postfix_palindrome[end..end-1]))\n\
    \    \n    return string\nend\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n", "    \n    longest_postfix_length\
    \ = longest_palindrome_postfix(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string\nend", "    \n    longest_postfix_palindrome\
    \ = find_longest_postfix_palindrome(string)\n    \n    prefix_palindrome = string[longest_postfix_palindrome..end]\n\
    \    \n    prefix_palindrome = reverse(prefix_palindrome)\n    \n    prefix_palindrome\
    \ = prefix_palindrome + longest_postfix_palindrome\n    \n    return prefix_palindrome\n\
    end", "    \n    longest_postfix_of_string = longest_postfix_of_string(string)\n\
    \    \n    prefix_of_longest_postfix = prefix_of_longest_postfix_of_string(longest_postfix_of_string)\n\
    \    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n   \
    \ \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n\
    \    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n   \
    \ prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix\
    \ = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n\
    \    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n   \
    \ \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n\
    \    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n   \
    \ prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix\
    \ = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n\
    \    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n   \
    \ \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n\
    \    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n   \
    \ prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix\
    \ = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n\
    \    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n   \
    \ \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n\
    \    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n   \
    \ prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix\
    \ = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n\
    \    \n    prefix_of_longest_postfix = prefix_of_longest_", "    \n    max_length\
    \ = length(string)\n    \n    if max_length == 0 \n        return string\n   \
    \ \n    prefix_length = max_length - 1\n    \n    prefix_string = string[1:prefix_length]\n\
    \    \n    suffix_string = string[prefix_length..-1]\n    \n    suffix_reverse\
    \ = reverse(suffix_string)\n    \n    prefix_reverse = reverse(prefix_string)\n\
    \    \n    \n    \n    return prefix_string + suffix_reverse + prefix_reverse\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    longest_postfix_palindrome\
    \ = find_longest_postfix_palindrome(string)\n    \n    longest_postfix_palindrome\
    \ = longest_postfix_palindrome + string[longest_postfix_palindrome.length..-1]\n\
    \    \n    return longest_postfix_palindrome\nend", "    \n    max_length = 0\n\
    \    \n    for c in string\n        max_length = max_length if max_length < length(c)\
    \ else length(c)\n    end\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = ", "    \n    max_length = 0\n \
    \   max_length_postfix_length = 0\n    \n    for c in string:\n        if c ==\
    \ '_':\n            max_length_postfix_length = max_length_postfix_length + 1\n\
    \        else:\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n            \n        if max_length_postfix_length > max_length:\n    \
    \        max_length = max_length_postfix_length\n            \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = 0\n    \n    for c in\
    \ string:\n        if c == '_':\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n        else:\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n            \n        if max_length_postfix_length == max_length:\n   \
    \         max_length_postfix_length = max_length_postfix_length + 1\n        \
    \    \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n \
    \   max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n \
    \   \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n  \
    \  max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n \
    \   \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n  \
    \  max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n \
    \   \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n  \
    \  max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n \
    \   \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n  \
    \  max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length_postfix_length = max_length_",
  "    \n    longestPalindrome = \"\"\n    \n    for char in string\n        \n  \
    \      if isPalindrome(char)\n            \n            longestPalindrome += char\n\
    \            \n            reversedChar = reverse(char)\n            \n      \
    \      longestPalindrome += reversedChar\n            \n        end\n    end\n\
    \    \n    return longestPalindrome\nend", "    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string\n        if c != string[max_length]\n       \
    \     max_length_postfix_length += 1\n            max_length = max_length_postfix_length\n\
    \        else\n            max_length_postfix_length = 0\n        end\n    end\n\
    \    \n    max_length_postfix_length\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    max_length = 0\n\
    \    \n    for c in string\n        max_length = maximum(max_length, length(c))\n\
    \    end\n    \n    max_length = maximum(max_length, length(string(string)))\n\
    \    \n    max_length = maximum(max_length, length(string(string, reverse(string))))\n\
    \    \n    return string(string, reverse(string))\nend", "    \n    max_length\
    \ = 0\n    \n    for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\"\
    :\n            continue\n        max_length = max_length if max_length < len(string)\
    \ else len(string)\n        \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    ", "    \n    prefix_length = string.length\n  \
    \  \n    if prefix_length == 0 \n        return string\n    \n    prefix_postfix\
    \ = string[prefix_length-1]\n    \n    suffix_length = prefix_length - 1\n   \
    \ \n    suffix_postfix = string[suffix_length]\n    \n    prefix_postfix = reverse(prefix_postfix)\n\
    \    \n    suffix_postfix = reverse(suffix_postfix)\n    \n    string = prefix_postfix\
    \ + suffix_postfix\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n",
  "    \n    prefix_length::Int = string.size - 1\n    \n    prefix_string::String\
    \ = string[prefix_length]\n    \n    suffix_string::String = string[prefix_length..-1]\n\
    \    \n    suffix_reverse::String = reverse(suffix_string)\n    \n    string::String\
    \ = prefix_string + suffix_reverse\n    \n    return string\nend", "    \n   \
    \ longest_postfix_palindrome = find_longest_postfix_palindrome(string)\n    \n\
    \    prefix_string = string[longest_postfix_palindrome..end]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string += longest_postfix_palindrome\n\
    \    \n    return prefix_reversed_string\nend", "    \n    max_length = 0\n  \
    \  max_length_postfix_length = 0\n    max_length_prefix_length = 0\n    \n   \
    \ for i = 1:length(string)\n        \n        postfix_length = length(string)\
    \ - i\n        prefix_length = i\n        \n        if postfix_length > max_length_postfix_length\n\
    \            max_length_postfix_length = postfix_length\n        end\n       \
    \ \n        if prefix_length > max_length_prefix_length\n            max_length_prefix_length\
    \ = prefix_length\n        end\n    end\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    longest_palindrome\
    \ = string\n    \n    for i = length(longest_palindrome)-1:-1:1\n        \n  \
    \      longest_palindrome = longest_palindrome[1:i] + longest_palindrome[i+1:length(longest_palindrome)]\
    \ + longest_palindrome[i]\n        \n    end\n    \n    return longest_palindrome\n\
    end", "    \n    longest_postfix_string = longest_postfix_string_helper(string)\n\
    \    \n    longest_postfix_string = longest_postfix_string[longest_postfix_string.len()+1:end]\n\
    \    \n    longest_postfix_string = longest_postfix_string.reverse()\n    \n \
    \   longest_postfix_string = longest_postfix_string + longest_postfix_string_helper(string)\n\
    \    \n    return longest_postfix_string\nend", "    \n    max_length = 0\n  \
    \  max_length_postfix_length = 0\n    max_length_prefix_length = 0\n    \n   \
    \ for c in string:\n        if c != string[max_length]:\n            max_length\
    \ += 1\n            max_length_postfix_length = max_length_postfix_length + 1\
    \ if string[max_length] == string[max_length_postfix_length] else 0\n        \
    \    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == string[max_length_prefix_length] else 0\n        else:\n            max_length_postfix_length\
    \ += 1\n            max_length_prefix_length += 1\n            \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1 if string[max_length] == string[max_length_postfix_length]\
    \ else 0\n    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == string[max_length_prefix_length] else 0\n    \n    max_length_postfix_length\
    \ -= 1\n    max_length_prefix_length -= 1\n    \n    max_length_prefix_length\
    \ += max_length_postfix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + 1 if string[max_length] == string[max_length_prefix_length] else 0\n    \n\
    \    max_length_prefix_length -= 1\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == string[max_length_prefix_length] else 0\n    \n    max_length_prefix_length\
    \ -= 1\n    \n    max_length_prefix_length += max_length_postfix_length\n    \n\
    \    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == string[max_length_prefix_length] else 0\n    \n    max_length_prefix_length\
    \ -= 1\n    \n    max_length_prefix_length += max_length_postfix_length\n    \n\
    \    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == string[max_length_prefix_length] else 0\n    \n    max_length_prefix_length\
    \ -= 1\n    \n    max_length_prefix_length += max_length_postfix_length\n    \n\
    \    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == string[max_length_prefix_length] else 0\n    \n    max_length_prefix_length\
    \ -= 1\n    \n    max_length_prefix_length += max_length_postfix_length\n    \n\
    \    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == string[max_length_prefix_length] else 0\n    \n    max_length_prefix_length\
    \ -= 1\n    \n    max_length_prefix_length += max_length_postfix_length\n    \n\
    \    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == ", "    \n    longest_postfix_palindrome = longest_postfix_palindrome(string)\n\
    \    \n    longest_postfix_palindrome += string[longest_postfix_palindrome.length..-1]\n\
    \    \n    return longest_postfix_palindrome\nend", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    max_length_prefix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post",
  "    \n    max_length = 0\n    max_length_postfix_length = 0\n    max_length_prefix_length\
    \ = 0\n    \n    for c in string:\n        if c == 'A'\n            max_length\
    \ = max_length + 1\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n            max_length_prefix_length = max_length_prefix_length + 1\n \
    \       elseif c == 'B'\n            max_length = max_length + 1\n           \
    \ max_length_postfix_length = max_length_postfix_length + 1\n            max_length_prefix_length\
    \ = max_length_prefix_length + 1\n        elseif c == 'C'\n            max_length\
    \ = max_length + 1\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n            max_length_prefix_length = max_length_prefix_length + 1\n \
    \       elseif c == 'D'\n            max_length = max_length + 1\n           \
    \ max_length_postfix_length = max_length_postfix_length + 1\n            max_length_prefix_length\
    \ = max_length_prefix_length + 1\n        elseif c == 'E'\n            max_length\
    \ = max_length + 1\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n            max_length_prefix_length = max_length_prefix_length + 1\n \
    \       elseif c == 'F'\n            max_length = max_length + 1\n           \
    \ max_length_postfix_length = max_length_postfix_length + 1\n            max_length_prefix_length\
    \ = max_length_prefix_length + 1\n        elseif c == 'G'\n            max_length\
    \ = max_length + 1\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n            max_length_prefix_length = max_length_prefix_length + 1\n \
    \       elseif c == 'H'\n            max_length = max_length + 1\n           \
    \ max_length_postfix_length = max_length_postfix_length + 1\n            max_length_prefix_length\
    \ = max_length_prefix_length + 1\n        elseif c == 'I'\n            max_length\
    \ = max_length + 1\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n            max_length_prefix_length = max_length_prefix_length + 1\n \
    \       elseif c == 'J'\n            max_length = max_length + 1\n           \
    \ max_length_postfix_length = max_length_postfix_length + 1\n            max_length_prefix_length\
    \ = max_length_prefix_length + 1\n        elseif c == 'K'\n            max_length\
    \ = max_length + 1\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n            max_length_prefix_length = max_length_prefix_length + 1\n \
    \       elseif c == 'L'\n            max_length = max_length + 1\n           \
    \ max_length_postfix_length = max_length_postfix_length + 1\n            max_length_prefix_length\
    \ = max_length_prefix_length + 1\n        elseif c == 'M'\n            max_length\
    \ = max_length + 1\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n            max_length_prefix_length = max_length_prefix_length + 1\n \
    \       elseif c == 'N'", "    max_length = 0\n    max_length_postfix = \"\"\n\
    \    max_length_prefix = \"\"\n    for c in string:\n        if c != string[max_length]:\n\
    \            max_length += 1\n            max_length_postfix += c\n          \
    \  max_length_prefix += string[max_length]\n        else:\n            max_length_postfix\
    \ += c\n            max_length_prefix += c\n    return max_length_prefix + string[max_length:max_length+max_length_postfix]\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    max_length\
    \ = length(string)\n    \n    if max_length < 2\n        return string\n    end\n\
    \    \n    prefix_length = 0\n    \n    for i = max_length downto 1 do\n     \
    \   prefix_length = prefix_length + length(string(i, 1))\n    end\n    \n    prefix_length\
    \ = prefix_length + length(string(max_length, 1))\n    \n    prefix_string = string(max_length\
    \ - prefix_length, 1)\n    \n    prefix_reverse = reverse(prefix_string)\n   \
    \ \n    prefix_reverse = prefix_reverse + string(prefix_length, 1)\n    \n   \
    \ prefix_reverse = prefix_reverse + string(max_length, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 1, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 2, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 3, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 4, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 5, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 6, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 7, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 8, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 9, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 10, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 11, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 12, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 13, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 14, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 15, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 16, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 17, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 18, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 19, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 20, 1)\n    \n    prefix_reverse\
    \ = prefix_reverse + string(max_length - prefix_length + 21, 1)\n    \n    prefix_",
  "    \n    max_length = 0\n    max_length_postfix_length = 0\n    max_length_prefix_length\
    \ = 0\n    \n    max_length_postfix = \"\"\n    max_length_postfix_postfix = \"\
    \"\n    \n    max_length_prefix = \"\"\n    max_length_prefix_prefix = \"\"\n\
    \    \n    max_length_postfix_length = 0\n    max_length_prefix_length = 0\n \
    \   \n    max_length_postfix_postfix = \"\"\n    max_length_prefix_postfix = \"\
    \"\n    \n    max_length_prefix_prefix = \"\"\n    max_length_postfix_prefix_prefix\
    \ = \"\"\n    \n    max_length_postfix_length = 0\n    max_length_prefix_length\
    \ = 0\n    \n    max_length_postfix_postfix = \"\"\n    max_length_prefix_postfix\
    \ = \"\"\n    \n    max_length_prefix_prefix = \"\"\n    max_length_postfix_prefix_prefix\
    \ = \"\"\n    \n    max_length_postfix_length = 0\n    max_length_prefix_length\
    \ = 0\n    \n    max_length_postfix_postfix = \"\"\n    max_length_prefix_postfix\
    \ = \"\"\n    \n    max_length_prefix_prefix = \"\"\n    max_length_postfix_prefix_prefix\
    \ = \"\"\n    \n    max_length_postfix_length = 0\n    max_length_prefix_length\
    \ = 0\n    \n    max_length_postfix_postfix = \"\"\n    max_length_prefix_postfix\
    \ = \"\"\n    \n    max_length_prefix_prefix = \"\"\n    max_length_postfix_prefix_prefix\
    \ = \"\"\n    \n    max_length_postfix_length = 0\n    max_length_prefix_length\
    \ = 0\n    \n    max_length_postfix_postfix = \"\"\n    max_length_prefix_postfix\
    \ = \"\"\n    \n    max_length_prefix_prefix = \"\"\n    max_length_postfix_prefix_prefix\
    \ = \"\"\n    \n    max_length_postfix_length = 0\n    max_length_prefix_length\
    \ = 0\n    \n    max_length_postfix_postfix = \"\"\n    max_length_prefix_postfix\
    \ = \"\"\n    \n    max_length_prefix_prefix = \"\"\n    max_length_postfix_prefix_prefix\
    \ = \"\"\n    \n    max_length_postfix_length = 0\n    max_length_prefix_length\
    \ = 0\n    \n    max_length_postfix_postfix = \"\"\n    max_length_prefix_postfix\
    \ = \"\"\n    \n    max_length_prefix_prefix = \"\"\n    max_length_postfix_prefix_prefix\
    \ = \"\"\n    \n    max_length_postfix_length = 0\n    max_length_prefix_length\
    \ = 0\n    \n    max_length_postfix_postfix = \"\"\n    max_length_prefix_postfix\
    \ = \"\"\n    \n    max_length_prefix_prefix = \"\"\n    max_length_postfix_prefix_prefix\
    \ = \"\"\n    \n    max_length_postfix_length", "    \n    longest_postfix_palindrome\
    \ = find_longest_postfix_palindrome(string)\n    \n    prefix_palindrome = string[longest_postfix_palindrome..end]\n\
    \    \n    return prefix_palindrome + reverse(prefix_palindrome)\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-", "    \n    max_length\
    \ = 0\n    \n    for c in string\n        if c != string[max_length]\n       \
    \     max_length += 1\n        end\n    end\n    \n    max_length += 1\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    ", "    \n    max_length = 0\n    \n   \
    \ for c in string:\n        if max_length < length(c):\n            max_length\
    \ = length(c)\n    \n    max_length += 1\n    \n    max_length = max_length -\
    \ 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    ", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    prefix_len = length(string.prefix(string))\n\
    \    suffix_len = length(string.suffix(string))\n    \n    if prefix_len > suffix_len\
    \ \n        return string\n    \n    prefix_postfix = string.prefix(string)\n\
    \    suffix_postfix = string.suffix(string)\n    \n    prefix_reverse = reverse(prefix_postfix)\n\
    \    suffix_reverse = reverse(suffix_postfix)\n    \n    prefix_postfix = prefix_postfix.append(prefix_reverse)\n\
    \    suffix_postfix = suffix_postfix.append(suffix_reverse)\n    \n    return\
    \ prefix_postfix.append(suffix_postfix)\nend", "    \n    longest_postfix_length\
    \ = find_longest_postfix_length(string, 0)\n    \n    if longest_postfix_length\
    \ == 0 \n        return string\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    reversed_prefix_string\
    \ = reverse(prefix_string)\n    \n    prefix_string = prefix_string + reversed_prefix_string\n\
    \    \n    return prefix_string\nend", "    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    max_length_prefix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    max_length\
    \ = length(string)\n    \n    prefix_length = 0\n    \n    for i = max_length\
    \ downto 1 do\n        \n        prefix_length = prefix_length + length(string(i,\
    \ string[i]))\n        \n    end\n    \n    prefix_length = prefix_length + length(string(max_length,\
    \ string[max_length]))\n    \n    prefix_string = string(max_length, string[max_length])\n\
    \    \n    suffix_length = 0\n    \n    for i = prefix_length downto 1 do\n  \
    \      \n        suffix_length = suffix_length + length(string(i, string[i]))\n\
    \        \n    end\n    \n    suffix_length = suffix_length + length(string(prefix_length,\
    \ string[prefix_length]))\n    \n    suffix_string = string(prefix_length, string[prefix_length])\n\
    \    \n    return string(prefix_string, string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(",
  "    \n    max_length = 0\n    max_length_postfix = \"\"\n    \n    for c in string\n\
    \        if isPalindrome(c)\n            max_length = length(c)\n            max_length_postfix\
    \ = reverse(c)\n        end\n    end\n    \n    return string + max_length_postfix\
    \ + max_length\nend\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake", "    \n    max_length = 0\n    \n    for c in\
    \ string:\n        if c != string[max_length]:\n            max_length += 1\n\
    \    \n    max_length += 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length - 1\n    \n    max_length\
    \ = max_length - 1\n    \n", "    \n    max_length = 0\n    \n    for c in string:\n\
    \        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n            continue\n \
    \       \n        max_length = max(max_length, length(c))\n        \n    max_length\
    \ = max_length + 2\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)", "    \n    max_length = 0\n    \n    for c in string\n  \
    \      max_length = max_length if max_length < length(c) else length(c)\n    end\n\
    \    \n    max_length = max_length + 1 \n    \n    max_length = max_length if\
    \ max_length < length(string) else length(string)\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length(string) else\
    \ length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    ", "    \n    longest_postfix_len = find_longest_postfix_len(string)\n\
    \    \n    prefix_len = longest_postfix_len - find_longest_postfix_len(reverse(string.substring(0,longest_postfix_len)))\n\
    \    \n    return string.substring(prefix_len,longest_postfix_len) + reverse(string.substring(prefix_len,longest_postfix_len))\n\
    end", "    \n    max_length = length(string.chars)\n    \n    if max_length ==\
    \ 0 \n        return string\n    \n    prefix_length = max_length - 1\n    \n\
    \    prefix_string = string.chars[prefix_length..-1]\n    \n    suffix_string\
    \ = string.chars[0..prefix_length]\n    \n    suffix_reversed = reverse(suffix_string)\n\
    \    \n    prefix_reversed = reverse(prefix_string)\n    \n    return prefix_string\
    \ + suffix_reversed + suffix_string\nend", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    max_length = 0\n    \n    for c in string:\n\
    \        if max_length < length(c):\n            max_length = length(c)\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length + 2\n    \n    max_length = max_length + 2\n    ",
  "    \n    max_length = 0\n    max_length_postfix = \"\"\n    \n    for c in string:\n\
    \        if max_length < length(c):\n            max_length = length(c)\n    \
    \        max_length_postfix = c\n        \n    max_length = max_length + 1\n \
    \   \n    max_length_postfix = reverse(max_length_postfix)\n    \n    return string\
    \ + max_length_postfix\nend\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    max_length = 0\n\
    \    max_length_postfix_length = 0\n    max_length_prefix_length = 0\n    \n \
    \   for c in string\n        if isPalindrome(c)\n            max_length = length(c)\n\
    \            max_length_postfix_length = length(reverse(c))\n            max_length_prefix_length\
    \ = length(prefix(c))\n        end\n    end\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + max_length\n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length\n    max_length_prefix_length = max_length_prefix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    max_length_prefix_length = max_length_prefix_length + max_length\n    \n\
    \    max_length_postfix_length = max_length_postfix_length + max_length\n    max_length_prefix_length\
    \ = max_length_prefix_length + max_length\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + max_length\n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length\n    max_length_prefix_length = max_length_prefix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    max_length_prefix_length = max_length_prefix_length + max_length\n    \n\
    \    max_length_postfix_length = max_length_postfix_length + max_length\n    max_length_prefix_length\
    \ = max_length_prefix_length + max_length\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + max_length\n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length\n    max_length_prefix_length = max_length_prefix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    max_length_prefix_length = max_length_prefix_length + max_length\n    \n\
    \    max_length_postfix_length = max_length_postfix_length + max_length\n    max_length_prefix_length\
    \ = max_length_prefix_length + max_length\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + max_length\n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length\n    max_length_prefix_length = max_length_prefix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    max_length_prefix_length = max_length_prefix_length + max_length\n    \n\
    \    max_length_postfix_length = max_length_postfix_length + max_length\n    max_length_prefix_length\
    \ = max_length_prefix_length", "    \n    max_length = length(string.chars)\n\
    \    \n    if max_length == 1\n        return string\n    end\n    \n    prefix_length\
    \ = max_length\n    \n    prefix_chars = string.chars[prefix_length..-1]\n   \
    \ \n    prefix_reverse = reverse(prefix_chars)\n    \n    prefix_palindrome =\
    \ prefix_reverse + string(prefix_length, prefix_reverse)\n    \n    suffix_chars\
    \ = string.chars[0..prefix_length-1]\n    \n    suffix_reverse = reverse(suffix_chars)\n\
    \    \n    suffix_palindrome = string(prefix_length, prefix_reverse) + suffix_reverse\n\
    \    \n    return prefix_palindrome + suffix_palindrome\nend\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palin", "    \n    max_length\
    \ = 0\n    \n    for c in string\n        if c != string[max_length]\n       \
    \     max_length += 1\n        end\n    end\n    \n    max_length += 1\n    \n\
    \    prefix_string = \"\"\n    \n    for i = max_length - 1\n        prefix_string\
    \ += string[i]\n    end\n    \n    prefix_string = reverse(prefix_string)\n  \
    \  \n    suffix_string = \"\"\n    \n    for i = max_length\n        suffix_string\
    \ += string[i]\n    end\n    \n    suffix_string = reverse(suffix_string)\n  \
    \  \n    return prefix_string + suffix_string\nend", "    max_length = 0\n   \
    \ max_length_postfix = \"\"\n    max_length_prefix_reverse = \"\"\n    max_length_prefix_reverse_index\
    \ = 0\n    max_length_prefix_reverse_index2 = 0\n    max_length_prefix_reverse_index3\
    \ = 0\n    max_length_prefix_reverse_index4 = 0\n    max_length_prefix_reverse_index5\
    \ = 0\n    max_length_prefix_reverse_index6 = 0\n    max_length_prefix_reverse_index7\
    \ = 0\n    max_length_prefix_reverse_index8 = 0\n    max_length_prefix_reverse_index9\
    \ = 0\n    max_length_prefix_reverse_index10 = 0\n    max_length_prefix_reverse_index11\
    \ = 0\n    max_length_prefix_reverse_index12 = 0\n    max_length_prefix_reverse_index13\
    \ = 0\n    max_length_prefix_reverse_index14 = 0\n    max_length_prefix_reverse_index15\
    \ = 0\n    max_length_prefix_reverse_index16 = 0\n    max_length_prefix_reverse_index17\
    \ = 0\n    max_length_prefix_reverse_index18 = 0\n    max_length_prefix_reverse_index19\
    \ = 0\n    max_length_prefix_reverse_index20 = 0\n    max_length_prefix_reverse_index21\
    \ = 0\n    max_length_prefix_reverse_index22 = 0\n    max_length_prefix_reverse_index23\
    \ = 0\n    max_length_prefix_reverse_index24 = 0\n    max_length_prefix_reverse_index25\
    \ = 0\n    max_length_prefix_reverse_index26 = 0\n    max_length_prefix_reverse_index27\
    \ = 0\n    max_length_prefix_reverse_index28 = 0\n    max_length_prefix_reverse_index29\
    \ = 0\n    max_length_prefix_reverse_index30 = 0\n    max_length_prefix_reverse_index31\
    \ = 0\n    max_length_prefix_reverse_index32 = 0\n    max_length_prefix_reverse_index33\
    \ = 0\n    max_length_prefix_reverse_index34 = 0\n    max_length_prefix_reverse_index35\
    \ = 0\n    max_length_prefix_reverse_index36 = 0\n    max_length_prefix_reverse_index37\
    \ = 0\n    max_length_prefix_reverse_index38 = 0\n    max_length_prefix_reverse_index39\
    \ = 0\n    max_length_prefix_reverse_index40 = 0\n    max_length_prefix_reverse_index41\
    \ = 0\n    max_length_prefix_reverse_index42 = 0\n    max_length_prefix_reverse_index43\
    \ = 0\n    max_length_prefix_reverse_index44 = 0\n    max_length_prefix_reverse_index45\
    \ = 0\n    max_length_prefix_reverse_index46 = 0\n    max_length_prefix_reverse_index47\
    \ = 0\n    max_length_prefix_reverse_index48 = 0\n    max_length_prefix_reverse_index49\
    \ = 0\n    max_length_prefix_reverse_index50 = 0\n    max_length_prefix_reverse_index51\
    \ = 0\n    max_length_prefix_reverse_index52 = 0\n    max_length_prefix_reverse_index53\
    \ = 0\n    max_length_prefix_reverse_index54 = 0\n    max_length_prefix_reverse_index55\
    \ = 0", "    \n    max_length = 0\n    \n    for s in string.split(\" \"):\n \
    \       max_length = max(max_length, length(s))\n    \n    max_length = max_length\
    \ + 2\n    \n    prefix_length = 0\n    \n    for s in string.split(\" \"):\n\
    \        prefix_length = prefix_length + length(s)\n    \n    prefix_length =\
    \ prefix_length - 1\n    \n    prefix_length = 0\n    \n    for s in string.split(\"\
    \ \"):\n        prefix_length = prefix_length + length(s)\n    \n    prefix_length\
    \ = prefix_length - 1\n    \n    prefix_length = 0\n    \n    for s in string.split(\"\
    \ \"):\n        prefix_length = prefix_length + length(s)\n    \n    prefix_length\
    \ = prefix_length - 1\n    \n    prefix_length = 0\n    \n    for s in string.split(\"\
    \ \"):\n        prefix_length = prefix_length + length(s)\n    \n    prefix_length\
    \ = prefix_length - 1\n    \n    prefix_length = 0\n    \n    for s in string.split(\"\
    \ \"):\n        prefix_length = prefix_length + length(s)\n    \n    prefix_length\
    \ = prefix_length - 1\n    \n    prefix_length = 0\n    \n    for s in string.split(\"\
    \ \"):\n        prefix_length = prefix_length + length(s)\n    \n    prefix_length\
    \ = prefix_length - 1\n    \n    prefix_length = 0\n    \n    for s in string.split(\"\
    \ \"):\n        prefix_length = prefix_length + length(s)\n    \n    prefix_length\
    \ = prefix_length - 1\n    \n    prefix_length = 0\n    \n    for s in string.split(\"\
    \ \"):\n        prefix_length = prefix_length + length(s)\n    \n    prefix_length\
    \ = prefix_length - 1\n    \n    prefix_length = 0\n    \n    for s in string.split(\"\
    \ \"):\n        prefix_length = prefix_length + length(s)\n    \n    prefix_length\
    \ = prefix_length - 1\n    \n    prefix_length = 0\n    \n    for s in string.split(\"\
    \ \"):\n        prefix_length = prefix_length + length(s)\n    \n    prefix_length\
    \ = prefix_length - 1\n    \n    prefix_length = 0\n    \n    for s in string.split(\"\
    \ \"):\n        prefix_length = prefix_length + length(s)\n    \n    prefix_length\
    \ = prefix_length - 1\n    \n    prefix_length = 0\n    \n    for s in string.split(\"\
    \ \"):\n        prefix_length = prefix_length + length(s)\n    \n    prefix_length\
    \ = prefix_length - 1\n    \n    prefix_length = 0\n    \n    for s in string.split(\"\
    \ \"):\n        prefix_length = prefix_length + length(s)\n    \n    prefix_length\
    \ = prefix_length - 1\n    \n    prefix_length = 0\n    \n    for s in string.split(\"\
    \ \"):\n        prefix_length = prefix_length + length(s)\n    \n    prefix_length\
    \ = prefix_length - 1\n    \n    prefix_", "    \n    max_length = 0\n    \n \
    \   for c in string:\n        if max_length < length(c):\n            max_length\
    \ = length(c)\n            \n    max_length = max_length + 1 \n    \n    string\
    \ = \"\"\n    \n    for c in string:\n        if length(c) == max_length:\n  \
    \          string += reverse(c)\n            \n    return string\nend", "    \n\
    \    max_length = 0\n    \n    for c in string:\n        if c == '.':\n      \
    \      max_length += 1\n        else:\n            max_length = max(max_length,\
    \ len(string) - max_length)\n    \n    max_length = min(max_length, len(string))\n\
    \    \n    string_reversed = string[max_length:] + string[:max_length]\n    \n\
    \    return string_reversed\n    \nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    max_length = 0\n    max_length_postfix = \"\"\n    \n    for c in string\n\
    \        max_length = max_length if max_length < length(c) else length(c)\n  \
    \      max_length_postfix = max_length_postfix if max_length_postfix < length(reverse(c))\
    \ else length(reverse(c))\n    end\n    \n    max_length = max_length if max_length\
    \ > 0 else 1\n    max_length_postfix = max_length_postfix if max_length_postfix\
    \ > 0 else 1\n    \n    max_length = max_length + max_length_postfix\n    \n \
    \   max_length = max_length if max_length < max_length else max_length\n    \n\
    \    max_length = max_length if max_length > 0 else 1\n    \n    max_length_postfix\
    \ = max_length_postfix if max_length_postfix > 0 else 1\n    \n    max_length\
    \ = max_length + max_length_postfix\n    \n    max_length = max_length if max_length\
    \ < max_length else max_length\n    \n    max_length = max_length if max_length\
    \ > 0 else 1\n    \n    max_length_postfix = max_length_postfix if max_length_postfix\
    \ > 0 else 1\n    \n    max_length = max_length + max_length_postfix\n    \n \
    \   max_length = max_length if max_length < max_length else max_length\n    \n\
    \    max_length = max_length if max_length > 0 else 1\n    \n    max_length_postfix\
    \ = max_length_postfix if max_length_postfix > 0 else 1\n    \n    max_length\
    \ = max_length + max_length_postfix\n    \n    max_length = max_length if max_length\
    \ < max_length else max_length\n    \n    max_length = max_length if max_length\
    \ > 0 else 1\n    \n    max_length_postfix = max_length_postfix if max_length_postfix\
    \ > 0 else 1\n    \n    max_length = max_length + max_length_postfix\n    \n \
    \   max_length = max_length if max_length < max_length else max_length\n    \n\
    \    max_length = max_length if max_length > 0 else 1\n    \n    max_length_postfix\
    \ = max_length_postfix if max_length_postfix > 0 else 1\n    \n    max_length\
    \ = max_length + max_length_postfix\n    \n    max_length = max_length if max_length\
    \ < max_length else max_length\n    \n    max_length = max_length if max_length\
    \ > 0 else 1\n    \n    max_length_postfix = max_length_postfix if max_length_postfix\
    \ > 0 else 1\n    \n    max_length = max_length + max_length_postfix\n    \n \
    \   max_length = max_length if max_length < max_length else max_length\n    \n\
    \    max_length = max_length if max_length > 0 else 1\n    \n    max_length_postfix\
    \ = max_length_postfix if max_length_postfix > 0 else 1\n    \n    max_length\
    \ = max_length + max_length_postfix\n    \n    max_length = max_length if max_length",
  "    \n    longest_postfix_length = longest_palindrome_postfix(string)\n    \n \
    \   prefix_length = longest_postfix_length - 1\n    \n    prefix_string = string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string\nend", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    longest_postfix_length = longest_palindrome(string)\n\
    \    \n    prefix_length = longest_postfix_length - 1\n    \n    prefix_string\
    \ = string[prefix_length..-1]\n    \n    suffix_string = string[1..prefix_length]\n\
    \    \n    suffix_reversed_string = reverse(suffix_string)\n    \n    suffix_reversed_string\
    \ += prefix_string\n    \n    return suffix_reversed_string\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    @time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    @time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    @time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    @time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n\
    </cell>", "    \n    max_length = 0\n    max_length_postfix_length = 0\n    max_length_prefix_length\
    \ = 0\n    \n    for c in string\n        \n        if isPalindrome(c)\n     \
    \       \n            max_length = length(c)\n            max_length_postfix_length\
    \ = length(reverse(c))\n            max_length_prefix_length = length(prefix(c))\n\
    \            \n        end\n    end\n    \n    max_length_postfix_length == max_length\
    \ ? return string : error(\"The supplied string is not a palindrome.\")\n    \n\
    \    max_length_prefix_length == max_length ? return string : error(\"The supplied\
    \ string is not a palindrome.\")\n    \n    max_length_postfix_length < max_length_prefix_length\
    \ ? return string : error(\"The supplied string is not a palindrome.\")\n    \n\
    \    max_length_postfix_length < max_length ? return string : error(\"The supplied\
    \ string is not a palindrome.\")\n    \n    max_length_postfix_length < max_length_prefix_length\
    \ + 1 ? return string : error(\"The supplied string is not a palindrome.\")\n\
    \    \n    max_length_prefix_length + 1 == max_length ? return string : error(\"\
    The supplied string is not a palindrome.\")\n    \n    max_length_prefix_length\
    \ + 1 == max_length_postfix_length ? return string : error(\"The supplied string\
    \ is not a palindrome.\")\n    \n    max_length_prefix_length + 1 == max_length_postfix_length\
    \ + 1 ? return string : error(\"The supplied string is not a palindrome.\")\n\
    \    \n    max_length_prefix_length + 1 == max_length_postfix_length + 2 ? return\
    \ string : error(\"The supplied string is not a palindrome.\")\n    \n    max_length_prefix_length\
    \ + 1 == max_length_postfix_length + 3 ? return string : error(\"The supplied\
    \ string is not a palindrome.\")\n    \n    max_length_prefix_length + 1 == max_length_postfix_length\
    \ + 4 ? return string : error(\"The supplied string is not a palindrome.\")\n\
    \    \n    max_length_prefix_length + 1 == max_length_postfix_length + 5 ? return\
    \ string : error(\"The supplied string is not a palindrome.\")\n    \n    max_length_prefix_length\
    \ + 1 == max_length_postfix_length + 6 ? return string : error(\"The supplied\
    \ string is not a palindrome.\")\n    \n    max_length_prefix_length + 1 == max_length_postfix_length\
    \ + 7 ? return string : error(\"The supplied string is not a palindrome.\")\n\
    \    \n    max_length_prefix_length + 1 == max_length_postfix_length + 8 ? return\
    \ string : error(\"The supplied string is not a palindrome.\")\n    \n    max_length_prefix_length",
  "    \n    longest_postfix_len = longest_palindrome_postfix(string)\n    \n    prefix_len\
    \ = longest_postfix_len - longest_palindrome_prefix(string)\n    \n    prefix_reversed\
    \ = string[prefix_len..-1]\n    \n    return prefix_reversed + string[..prefix_len]\
    \ + longest_palindrome_suffix(string)\nend", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    max_length = 0\n    max_length_suffix =\
    \ 0\n    \n    for c in string:\n        if c == 'A'\n            max_length =\
    \ max_length + 1\n            max_length_suffix = max_length_suffix + 1\n    \
    \    elseif c == 'Z'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == 'a'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == 'z'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '0'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '9'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '_'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '.'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '-'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '/'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '*'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '+'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '('\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == ')'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '#'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '%'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '&'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '$'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '\"'\n            max_length =\
    \ max_length + 1\n            max_length_suffix = max_length_suffix + 1\n    \
    \    elseif c == '%'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '!'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '?'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c", "    \n    longest_postfix_length\
    \ = longest_palindrome_postfix(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = string[prefix_length..-1]\n    \n    prefix_reversed_string\nend", "    max_length\
    \ = 0\n    max_length_postfix = \"\"\n    max_length_prefix = \"\"\n    for c\
    \ in string\n        if c != string[max_length]\n            max_length_postfix\
    \ = string[max_length]\n            max_length_prefix = string[max_length_postfix]\n\
    \            max_length = max_length + 1\n        end\n    end\n    max_length_postfix\
    \ = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n \
    \   max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length", "    \n    longest_palindrome = find_longest_palindrome(string)\n\
    \    \n    if longest_palindrome == \"\"\n        return string\n    \n    prefix_to_append\
    \ = longest_palindrome\n    \n    prefix_to_append = reverse(prefix_to_append)\n\
    \    \n    prefix_to_append = prefix_to_append + longest_palindrome\n    \n  \
    \  return prefix_to_append\nend", "    \n    max_length = length(string.split(\"\
    \ \"))\n    \n    prefix_length = 0\n    \n    for word in string.split(\" \"\
    )\n        if length(word) > prefix_length\n            prefix_length = length(word)\n\
    \        end\n    end\n    \n    prefix_length = prefix_length + max_length\n\
    \    \n    prefix_string = string.split(\" \")[prefix_length]\n    \n    suffix_length\
    \ = length(string.split(\" \")[prefix_length + 1])\n    \n    suffix_string =\
    \ string.split(\" \")[prefix_length + 1]\n    \n    suffix_reverse = reverse(suffix_string)\n\
    \    \n    suffix_reverse = suffix_reverse + suffix_string\n    \n    prefix_reverse\
    \ = reverse(prefix_string)\n    \n    prefix_reverse = prefix_reverse + prefix_string\n\
    \    \n    prefix_reverse = prefix_reverse + suffix_reverse\n    \n    return\
    \ prefix_reverse\nend", "    \n    max_length = 0\n    \n    for c in string:\n\
    \        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n            max_length =\
    \ max_length + 1\n    \n    if max_length == 0:\n        return \"\"\n    \n \
    \   max_length = max_length - 1\n    \n    prefix_length = max_length\n    \n\
    \    prefix_string = \"\"\n    \n    for c in string:\n        if c not in \"\
    abcdefghijklmnopqrstuvwxyz\":\n            prefix_string = prefix_string + c\n\
    \    \n    prefix_string = prefix_string + string[max_length]\n    \n    prefix_string\
    \ = prefix_string[::-1]\n    \n    suffix_string = \"\"\n    \n    for c in prefix_string:\n\
    \        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n            suffix_string\
    \ = suffix_string + c\n    \n    suffix_string = suffix_string + string[max_length]\n\
    \    \n    suffix_string = suffix_string[::-1]\n    \n    prefix_string = prefix_string[::-1]\n\
    \    \n    prefix_string = prefix_string[:prefix_length]\n    \n    suffix_string\
    \ = suffix_string[:suffix_length]\n    \n    prefix_string = prefix_string + suffix_string\n\
    \    \n    return prefix_string\nend", "    \n    longest_postfix_length = find_longest_postfix_length(string)\n\
    \    \n    prefix_length = longest_postfix_length - 1\n    \n    prefix_string\
    \ = string[prefix_length..-1]\n    \n    prefix_reversed_string = reverse(prefix_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   return prefix_reversed_string\nend", "    \n    longest_postfix_palindrome\
    \ = longest_palindrome(string)\n    \n    prefix_palindrome = string[longest_postfix_palindrome..end]\n\
    \    \n    return prefix_palindrome + reverse(longest_postfix_palindrome)\nend",
  "    \n    longest_postfix_length = find_longest_postfix_length(string, 0)\n   \
    \ \n    if longest_postfix_length == 0 \n        return string\n    \n    prefix_length\
    \ = longest_postfix_length - 1\n    \n    prefix_string = string[prefix_length..-1]\n\
    \    \n    reversed_prefix_string = reverse(prefix_string)\n    \n    return string[0..prefix_length]\
    \ + reversed_prefix_string + string[prefix_length..-1]\nend\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>", "    \n    longest_postfix_length = longest_postfix_length(string)\n\
    \    \n    prefix_length = longest_postfix_length - 1\n    \n    prefix_string\
    \ = string[prefix_length..-1]\n    \n    prefix_reversed_string = reverse(prefix_string)\n\
    \    \n    prefix_reversed_string_palindrome = prefix_reversed_string + string[1..prefix_length]\n\
    \    \n    return prefix_reversed_string_palindrome\nend\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are palindromes.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    max_length = 0\n    \n    for\
    \ c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n        \
    \    continue\n        max_length = max(max_length, length(string.substring(1,\
    \ max_length)))\n        \n    max_length = min(max_length, length(string.substring(1,\
    \ max_length)))\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = ", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    max_length = 0\n    \n    for c in string\n\
    \        if c != string[max_length]\n            max_length += 1\n        end\n\
    \    end\n    \n    max_length += 1\n    \n    max_length = max_length % 2\n \
    \   \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length % 2\n\
    \    ", "    \n    longest_postfix_length = longest_palindrome_postfix(string)\n\
    \    \n    prefix_length = longest_postfix_length - 1\n    \n    prefix_string\
    \ = string[prefix_length..-1]\n    \n    prefix_reversed_string = reverse(prefix_string)\n\
    \    \n    prefix_reversed_string += string[prefix_length..-1]\n    \n    return\
    \ prefix_reversed_string\nend", "    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    for c in string\n        if\
    \ c != string[max_length]\n            max_length += 1\n            max_length_postfix_length\
    \ += length(c)\n            max_length_prefix_length += length(string[max_length])\n\
    \        end\n    end\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ / 2\n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2", "    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    for c in string\n        \n\
    \        if isPalindrome(c)\n            \n            max_length = length(c)\n\
    \            max_length_postfix_length = length(reverse(c))\n            max_length_prefix_length\
    \ = length(prefix(c))\n            \n        end\n    end\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + max_length\n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    max_length = 0\n    \n    for c in string\n \
    \       max_length = max_length if max_length < length(c) else length(c)\n   \
    \ end\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = ", "    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string\n        \n        if isPalindrome(c)\n     \
    \       \n            max_length = length(c)\n            max_length_postfix_length\
    \ = length(postfix_string(c))\n            \n            if max_length > max_length_postfix_length\n\
    \                max_length = max_length_postfix_length\n            \n      \
    \      postfix_string(c) = reverse(c)\n            \n        end\n    end\n  \
    \  \n    return string(postfix_string(c) for c in string)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake", "    \n    max_length = 0\n    \n    for c in\
    \ string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n            max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = ", "    \n    max_length = 0\n    \n    for c in string:\n        if c not\
    \ in \"abcdefghijklmnopqrstuvwxyz\":\n            continue\n        \n       \
    \ max_length = max(max_length, len(c))\n        \n    max_length += 1\n    \n\
    \    max_length = max_length // 2\n    \n    max_length = max_length * 2\n   \
    \ \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = ", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string:\n        if c == \"A\" or c == \"a\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"B\" or c == \"b\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"C\" or c == \"c\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"D\" or c == \"d\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"E\" or c == \"e\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"F\" or c == \"f\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"G\" or c == \"g\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"H\" or c == \"h\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"I\" or c == \"i\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"J\" or c == \"j\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"K\" or c == \"k\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"L\" or c == \"l\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"M\" or c == \"m\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"N\" or c == \"n\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"O\" or c == \"o\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"P\" or c == \"p\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"Q\" or c == \"q\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif ", "    \n    longest_postfix_palindrome\
    \ = longest_palindrome(string)\n    \n    prefix_palindrome = string[longest_postfix_palindrome..end]\n\
    \    \n    prefix_palindrome_reversed = reverse(prefix_palindrome)\n    \n   \
    \ prefix_palindrome_with_postfix = prefix_palindrome + prefix_palindrome_reversed\n\
    \    \n    return prefix_palindrome_with_postfix\nend\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n",
  "    \n    max_length = 0\n    \n    for c in string\n        max_length = maximum(max_length,\
    \ length(c))\n    end\n    \n    max_length = maximum(max_length, length(string.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse))\n  \
    \  \n    max_length = maximum(max_length, length(string.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    longest_postfix_palindrome\
    \ = find_longest_postfix_palindrome(string)\n    \n    longest_postfix_palindrome\
    \ = longest_postfix_palindrome + string[longest_postfix_palindrome.length..-1]\n\
    \    \n    return longest_postfix_palindrome\nend", "    \n    longest_postfix_length::Int\
    \ = find_longest_postfix_length(string, 0)\n    \n    longest_postfix_length ==\
    \ 0 ? string : string ++ reverse_of_string_prefix(string, longest_postfix_length-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>", "    \n    longest_postfix_length = longest_palindrome_postfix_length(string(string))\n\
    \    \n    prefix_length = longest_postfix_length - 1\n    \n    prefix_string\
    \ = string(prefix_length..-1)\n    \n    prefix_reversed_string = reverse(prefix_string)\n\
    \    \n    prefix_reversed_string += string(longest_postfix_length..-1)\n    \n\
    \    return prefix_reversed_string\nend\n</cell>\n<code language=julia-1.5>\n\
    @time make_palindrome(\"abba\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are palindromes.", "    max_length = length(string)\n    prefix_length = 0\n\
    \    prefix_string = \"\"\n    suffix_length = 0\n    suffix_string = \"\"\n \
    \   \n    while prefix_length < max_length\n        prefix_string = string[prefix_length..-1]\n\
    \        suffix_string = string[..-suffix_length]\n        if prefix_string ==\
    \ suffix_string\n            return prefix_string + string[prefix_length..-suffix_length]\n\
    \        end\n        prefix_length = prefix_length + 1\n    end\n    return \"\
    \"\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    max_length = 0\n    \n    for c in string:\n\
    \        if c != string[max_length]:\n            max_length += 1\n    \n    max_length\
    \ = max_length - 1\n    \n    prefix_string = \"\"\n    \n    for c in string:\n\
    \        if c != string[max_length]:\n            prefix_string += c\n    \n \
    \   prefix_string = prefix_string[::-1]\n    \n    prefix_string = \"\"\n    \n\
    \    for c in prefix_string:\n        if c != prefix_string[max_length]:\n   \
    \         prefix_string += c\n    \n    return prefix_string + string[max_length]\n\
    end", "    \n    longest_postfix_length = find_longest_postfix_length(string)\n\
    \    \n    prefix_length = longest_postfix_length\n    \n    prefix_string = string[1:prefix_length]\n\
    \    \n    suffix_string = string[prefix_length:]\n    \n    suffix_reversed_string\
    \ = reverse(suffix_string)\n    \n    suffix_reversed_string += prefix_string\n\
    \    \n    return suffix_reversed_string\nend", "    \n    longest_postfix_of_string\
    \ = longest_postfix_of_string(string)\n    \n    if longest_postfix_of_string\
    \ == \"\"\n        return string\n    \n    longest_postfix_of_string = longest_postfix_of_string.reverse()\n\
    \    \n    prefix_of_longest_postfix_of_string = longest_postfix_of_string.slice(0,longest_postfix_of_string.index(longest_postfix_of_string))\n\
    \    \n    prefix_of_longest_postfix_of_string = prefix_of_longest_postfix_of_string.reverse()\n\
    \    \n    prefix_of_longest_postfix_of_string += longest_postfix_of_string\n\
    \    \n    return prefix_of_longest_postfix_of_string\nend", "    \n    longest_postfix_length\
    \ = longest_postfix_length(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string += string[prefix_length..-1]\n\
    \    \n    return prefix_reversed_string\nend", "    \n    longestPalindrome =\
    \ \"\"\n    \n    for c in string:\n        if isPalindrome(c):\n            longestPalindrome\
    \ += c\n            \n    longestPalindrome += string[string.index(c):]\n    \n\
    \    return longestPalindrome\nend", "    \n    longestPalindrome = \"\"\n   \
    \ \n    for c in string\n        if isPalindrome(c)\n            longestPalindrome\
    \ += c\n        end\n    end\n    \n    longestPalindrome += reverse(string.substring(longestPalindrome.size))\n\
    \    \n    return longestPalindrome\nend", "    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix = \"\"\n    \n    for c in string:\n        if\
    \ max_length < length(c):\n            max_length = length(c)\n            max_length_postfix\
    \ = postfix_length(c)\n            max_length_prefix = prefix_length(c)\n    \
    \    \n        if max_length == length(c):\n            if c != reverse(postfix_length(c)):\n\
    \                return \"\"\n    \n    return string[max_length_prefix:max_length_postfix]\n\
    end", "    \n    longestPalindrome = \"\"\n    \n    for c in string\n       \
    \ if isPalindrome(c)\n            longestPalindrome = longestPalindrome + c\n\
    \        end\n    end\n    \n    longestPalindrome = longestPalindrome + reverse(string[longestPalindrome.length..end])\n\
    \    \n    return longestPalindrome\nend", "    \n    max_length = length(string.chars)\n\
    \    \n    if max_length == 1\n        return string\n    \n    max_length = max_length\
    \ - 1\n    \n    prefix_length = max_length\n    \n    prefix_string = string[prefix_length..-1]\n\
    \    \n    prefix_reverse = reverse(prefix_string)\n    \n    suffix_length =\
    \ prefix_length\n    \n    suffix_string = string[suffix_length..-1]\n    \n \
    \   suffix_reverse = reverse(suffix_string)\n    \n    prefix_reverse = prefix_reverse\
    \ + prefix_string\n    \n    suffix_reverse = suffix_reverse + suffix_string\n\
    \    \n    prefix_reverse = prefix_reverse.reverse\n    \n    suffix_reverse =\
    \ suffix_reverse.reverse\n    \n    prefix_reverse = prefix_reverse + prefix_string\n\
    \    \n    suffix_reverse = suffix_reverse + suffix_string\n    \n    prefix_reverse\
    \ = prefix_reverse.reverse\n    \n    suffix_reverse = suffix_reverse.reverse\n\
    \    \n    prefix_reverse = prefix_reverse + prefix_string\n    \n    suffix_reverse\
    \ = suffix_reverse + suffix_string\n    \n    prefix_reverse = prefix_reverse.reverse\n\
    \    \n    suffix_reverse = suffix_reverse.reverse\n    \n    prefix_reverse =\
    \ prefix_reverse + prefix_string\n    \n    suffix_reverse = suffix_reverse +\
    \ suffix_string\n    \n    prefix_reverse = prefix_reverse.reverse\n    \n   \
    \ suffix_reverse = suffix_reverse.reverse\n    \n    prefix_reverse = prefix_reverse\
    \ + prefix_string\n    \n    suffix_reverse = suffix_reverse + suffix_string\n\
    \    \n    prefix_reverse = prefix_reverse.reverse\n    \n    suffix_reverse =\
    \ suffix_reverse.reverse\n    \n    prefix_reverse = prefix_reverse + prefix_string\n\
    \    \n    suffix_reverse = suffix_reverse + suffix_string\n    \n    prefix_reverse\
    \ = prefix_reverse.reverse\n    \n    suffix_reverse = suffix_reverse.reverse\n\
    \    \n    prefix_reverse = prefix_reverse + prefix_string\n    \n    suffix_reverse\
    \ = suffix_reverse + suffix_string\n    \n    prefix_reverse = prefix_reverse.reverse\n\
    \    \n    suffix_reverse = suffix_reverse.reverse\n    \n    prefix_reverse =\
    \ prefix_reverse + prefix_string\n    \n    suffix_reverse = suffix_reverse +\
    \ suffix_string\n    \n    prefix_reverse = prefix_reverse.reverse\n    \n   \
    \ suffix_reverse = suffix_reverse.reverse\n    \n    prefix_reverse = prefix_reverse\
    \ + prefix_string\n    \n    suffix_reverse = suffix_reverse + suffix_string\n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    longest_postfix_length = find_longest_postfix_length(string)\n    \n    prefix_length\
    \ = longest_postfix_length - 1\n    \n    prefix_string = string[1:prefix_length]\n\
    \    \n    suffix_string = string[prefix_length:]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    suffix_reversed_string = reverse(suffix_string)\n\
    \    \n    combined_string = prefix_reversed_string + suffix_reversed_string\n\
    \    \n    return combined_string\nend", "    \n    longest_postfix_length = longest_postfix_length(string.chars)\n\
    \    \n    prefix_length = longest_postfix_length - 1\n    \n    prefix_string\
    \ = string.chars[prefix_length..-1]\n    \n    prefix_reversed_string = reverse(prefix_string)\n\
    \    \n    prefix_reversed_string += string.chars[prefix_length..-1]\n    \n \
    \   prefix_reversed_string = prefix_reversed_string[prefix_length..-1]\n    \n\
    \    prefix_reversed_string = prefix_reversed_string.reverse()\n    \n    prefix_reversed_string\
    \ += string.chars[prefix_length..-1]\n    \n    prefix_reversed_string = prefix_reversed_string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string.reverse()\n    \n \
    \   prefix_reversed_string += string.chars[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string.reverse()\n    \n    prefix_reversed_string += string.chars[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string.reverse()\n    \n \
    \   prefix_reversed_string += string.chars[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string.reverse()\n    \n    prefix_reversed_string += string.chars[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string.reverse()\n    \n \
    \   prefix_reversed_string += string.chars[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string.reverse()\n    \n    prefix_reversed_string += string.chars[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string.reverse()\n    \n \
    \   prefix_reversed_string += string.chars[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string.reverse()\n    \n    prefix_reversed_string += string.chars[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string[prefix_length..-1]\n\
    \    \n    ", "    \n    max_length = 0\n    max_length_postfix = \"\"\n    max_length_prefix_reverse\
    \ = \"\"\n    \n    for c in string:\n        if isPalindrome(c):\n          \
    \  max_length = max_length + 1\n            max_length_postfix = max_length_postfix\
    \ + c\n            max_length_prefix_reverse = max_length_prefix_reverse + reverse(c)\n\
    \    \n    return max_length_postfix + reverse(string[max_length_prefix_reverse:end])\
    \ + string[max_length_prefix_reverse:end]\nend", "    \n    longest_postfix_length\
    \ = longest_postfix_length(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    suffix_string\
    \ = string[1..prefix_length]\n    \n    prefix_reversed_string = reverse(prefix_string)\n\
    \    \n    suffix_reversed_string = reverse(suffix_string)\n    \n    combined_string\
    \ = prefix_reversed_string + suffix_reversed_string\n    \n    return combined_string\n\
    end", "    \n    longestPalindrome = \"\"\n    \n    for char in string\n    \
    \    if char == reverse(char)\n            longestPalindrome += char\n       \
    \ end\n    end\n    \n    longestPalindrome += reverse(longestPalindrome)\n  \
    \  \n    return longestPalindrome\nend", "    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix_postfix = \"\"\n    \n    for c in string\n  \
    \      if isalnum(c)\n            max_length = max_length + 1\n            max_length_postfix\
    \ = max_length_postfix + c\n        else\n            if max_length > 0\n    \
    \            max_length_prefix_postfix = max_length_prefix_postfix + c\n     \
    \       else\n                max_length_prefix_postfix = c\n            end\n\
    \        end\n    end\n    \n    max_length_prefix_postfix = reverse(max_length_prefix_postfix)\n\
    \    \n    return max_length_prefix_postfix + max_length_postfix\nend", "    \n\
    \    max_length = 0\n    max_length_postfix_length = 0\n    max_length_prefix_length\
    \ = 0\n    \n    max_length_postfix = \"\"\n    max_length_postfix_postfix = \"\
    \"\n    max_length_postfix_prefix_length = 0\n    \n    max_length_prefix = \"\
    \"\n    max_length_prefix_postfix = \"\"\n    max_length_prefix_prefix_length\
    \ = 0\n    \n    max_length_postfix_postfix = \"\"\n    max_length_postfix_prefix_postfix\
    \ = \"\"\n    max_length_postfix_prefix_prefix_length = 0\n    \n    max_length_prefix_postfix\
    \ = \"\"\n    max_length_prefix_prefix_postfix = \"\"\n    max_length_prefix_prefix_prefix_length\
    \ = 0\n    \n    max_length_postfix_prefix_postfix = \"\"\n    max_length_postfix_prefix_prefix_postfix\
    \ = \"\"\n    max_length_postfix_prefix_prefix_prefix_length = 0\n    \n    max_length_prefix_prefix_postfix\
    \ = \"\"\n    max_length_prefix_prefix_prefix_postfix = \"\"\n    max_length_prefix_prefix_prefix_prefix_length\
    \ = 0\n    \n    max_length_postfix_prefix_prefix_postfix = \"\"\n    max_length_postfix_prefix_prefix_prefix_postfix\
    \ = \"\"\n    max_length_postfix_prefix_prefix_prefix_prefix_length = 0\n    \n\
    \    max_length_prefix_prefix_prefix_postfix = \"\"\n    max_length_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n    max_length_prefix_prefix_prefix_prefix_prefix_length = 0\n    \n\
    \    max_length_postfix_prefix_prefix_prefix_postfix = \"\"\n    max_length_postfix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n    max_length_postfix_prefix_prefix_prefix_prefix_prefix_length = 0\n\
    \    \n    max_length_prefix_prefix_prefix_prefix_postfix = \"\"\n    max_length_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n    max_length_prefix_prefix_prefix_prefix_prefix_prefix_length = 0\n\
    \    \n    max_length_postfix_prefix_prefix_prefix_prefix_postfix = \"\"\n   \
    \ max_length_postfix_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\n    max_length_postfix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_length\
    \ = 0\n    \n    max_length_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\n\
    \    max_length_prefix_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\n   \
    \ max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_length =\
    \ 0\n    \n    max_length_postfix_prefix_prefix_prefix_prefix_prefix_postfix =\
    \ \"\"\n    max_length_postfix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n    max_length_postfix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_length\
    \ = 0\n    \n    max_length_prefix_prefix_prefix_prefix_prefix_prefix_", "   \
    \ \n    max_length = 0\n    \n    for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\"\
    :\n            max_length = max_length + 1\n            \n    if max_length ==\
    \ 0:\n        return \"\"\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length", "    \n    max_length = 0\n    \n \
    \   for s in string.split(\" \"):\n        max_length = max(max_length, s.length)\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    longest_postfix_length = longest_palindrome_postfix(string)\n    \n\
    \    prefix_length = longest_postfix_length - 1\n    \n    prefix_string = string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = string[prefix_length..-1]\n    \n    prefix_reversed_string\nend", "    \n\
    \    longest_postfix_string = longest_palindrome_postfix(string)\n    \n    longest_postfix_string_reversed\
    \ = reverse(longest_postfix_string)\n    \n    longest_postfix_string_reversed_with_prefix\
    \ = longest_postfix_string_reversed + longest_postfix_string\n    \n    return\
    \ longest_postfix_string_reversed_with_prefix\nend", "    \n    longest_postfix_palindrome\
    \ = find_longest_postfix_palindrome(string)\n    \n    longest_postfix_palindrome\
    \ = longest_postfix_palindrome + string[longest_postfix_palindrome.length..-1]\n\
    \    \n    return longest_postfix_palindrome\nend", "    \n    max_length = length(string)\n\
    \    \n    if max_length <= 1\n        return string\n    end\n    \n    prefix_length\
    \ = 1\n    \n    while prefix_length <= max_length\n        \n        prefix_length\
    \ = prefix_length * 2\n        \n        if prefix_length > max_length\n     \
    \       prefix_length = max_length\n        end\n        \n        prefix_length\
    \ = prefix_length + 1\n        \n        postfix_length = max_length - prefix_length\n\
    \        \n        postfix = string[prefix_length..postfix_length]\n        \n\
    \        if reverse(postfix) == string\n            return string\n        end\n\
    \    end\n    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    max_length = 0\n    max_length_postfix = \"\"\n    max_length_prefix\
    \ = \"\"\n    \n    for c in string:\n        if c != string[max_length]:\n  \
    \          max_length += 1\n            max_length_postfix += c\n            max_length_prefix\
    \ += string[max_length]\n        else:\n            max_length_postfix += c\n\
    \            max_length_prefix += c\n            \n    return max_length_prefix\
    \ + string[max_length_postfix.length..-1]\nend", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    max_length = 0\n    max_length_postfix = \"\"\n   \
    \ max_length_prefix_postfix = \"\"\n    \n    for c in string\n        if isPalindrome(c)\n\
    \            max_length = length(c)\n            max_length_postfix = postfix_of_palindrome(c)\n\
    \            max_length_prefix_postfix = prefix_of_palindrome(max_length_postfix)\n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            ", "    \n    max_length = 0\n\
    \    max_length_postfix_length = 0\n    max_length_prefix_length = 0\n    \n \
    \   for c in string:\n        if c == \"a\" or c == \"b\" or c == \"c\" or c ==\
    \ \"d\" or c == \"e\" or c == \"f\" or c == \"g\" or c == \"h\" or c == \"i\"\
    \ or c == \"j\" or c == \"k\" or c == \"l\" or c == \"m\" or c == \"n\" or c ==\
    \ \"o\" or c == \"p\" or c == \"q\" or c == \"r\" or c == \"s\" or c == \"t\"\
    \ or c == \"u\" or c == \"v\" or c == \"w\" or c == \"x\" or c == \"y\" or c ==\
    \ \"z\":\n            max_length = max_length + 1\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            max_length_prefix_length = max_length_prefix_length\
    \ + 1\n        else:\n            max_length = max_length - 1\n            max_length_postfix_length\
    \ = max_length_postfix_length - 1\n            max_length_prefix_length = max_length_prefix_length\
    \ - 1\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n \
    \   max_length_prefix_length = max_length_prefix_length + 1\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length + 1\n    \n    max_length = max_length + 1\n    \n\
    \    max_length_postfix_length = max_length_postfix_length + 1\n    max_length_prefix_length\
    \ = max_length_prefix_length + 1\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length_prefix_length = max_length_prefix_length\
    \ + 1\n    \n    max_length_prefix_length = max_length_prefix_length + 1\n   \
    \ \n    max_length = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length_prefix_length = max_length_prefix_length + 1\n    \n   \
    \ max_length_prefix_length = max_length_prefix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length_prefix_length = max_length_prefix_length + 1\n    \n   \
    \ max_length_prefix_length = max_length_prefix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length_prefix_length = max_length_prefix_length + 1\n    \n   \
    \ max_length_prefix_length = max_length_prefix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length_prefix_length = max_length_prefix_length + 1\n    \n   \
    \ max_length_prefix_length = max_length_", "    \n    longest_postfix_length =\
    \ longest_postfix_length(string, 0)\n    \n    if longest_postfix_length == 0\n\
    \        return string\n    \n    prefix_length = longest_postfix_length - 1\n\
    \    \n    prefix = string[prefix_length..-1]\n    \n    suffix = string[0..prefix_length]\n\
    \    \n    prefix_reverse = reverse(prefix)\n    suffix_reverse = reverse(suffix)\n\
    \    \n    prefix_reverse = prefix_reverse + suffix_reverse\n    \n    return\
    \ prefix + prefix_reverse\nend", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    max_length = 0\n    \n    for c in string:\n      \
    \  if max_length < length(c):\n            max_length = length(c)\n    \n    max_length\
    \ = max_length + 2\n    \n    string = \"\"\n    \n    for c in string:\n    \
    \    string = string + c\n    \n    string = string + string[max_length:end]\n\
    \    \n    return string\nend\n</cell>\n<code language=julia-1.4>", "    \n  \
    \  max_length = 0\n    max_length_postfix_length = 0\n    \n    for i = 1:length(string)\n\
    \        \n        postfix_string = string[max_length:end]\n        \n       \
    \ if postfix_string == reverse(postfix_string)\n            max_length_postfix_length\
    \ = max_length\n        else\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n        end\n        \n        if max_length_postfix_length == length(postfix_string)\n\
    \            max_length = max_length + 1\n        end\n    end\n    \n    return\
    \ string[max_length:end]\nend\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=juli", "    \n    max_length\
    \ = 0\n    \n    for c in string\n        if c != string[max_length]\n       \
    \     max_length += 1\n        end\n    end\n    \n    max_length += 1\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length % 2\n    ", "    \n    longest_postfix_length = find_longest_postfix_length(string,\
    \ 0)\n    \n    if longest_postfix_length == 0\n        return string\n    end\n\
    \    \n    prefix_length = longest_postfix_length - 1\n    \n    prefix_string\
    \ = string[prefix_length..end]\n    \n    reversed_prefix_string = reverse(prefix_string)\n\
    \    \n    prefix_string += reversed_prefix_string\n    \n    return prefix_string\n\
    end", "    \n    max_length = 0\n    max_length_postfix = \"\"\n    \n    for\
    \ c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n        \
    \    max_length = max_length + 1\n            max_length_postfix = c + max_length_postfix\n\
    \    \n    max_length_postfix = reverse(max_length_postfix)\n    \n    return\
    \ max_length_postfix + string\nend", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
