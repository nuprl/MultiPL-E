language: jl
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2tyup_wp.jl:15\nin expression starting at\
    \ /tmp/tmp2tyup_wp.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2uh40c0.jl:15\nin expression starting at\
    \ /tmp/tmpe2uh40c0.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\", ignorecase=false)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    , ignorecase=false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\", ignorecase=false)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    , ignorecase=false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\", ignorecase=false)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    , ignorecase=false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\", ignorecase=false)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    , ignorecase=false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpop749o83.jl:14\nin expression starting at\
    \ /tmp/tmpop749o83.jl:14\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a vector\
    \ of all characters that are not in the alphabet (uppercase and lowercase).\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzps2tbdg.jl:14\nin expression starting at\
    \ /tmp/tmpzps2tbdg.jl:14\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for those that contain given substrings.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxz0alod7.jl:14\nin expression starting at\
    \ /tmp/tmpxz0alod7.jl:14\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered = Vector{String}()\n\
    \    for s in strings\n        if contains(s, substring)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"helloo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"\
    ], \"worldo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"helloo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplneex9ds.jl:14\nin expression starting at\
    \ /tmp/tmplneex9ds.jl:14\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"This\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe1zbkxd0.jl:15\nin expression starting at\
    \ /tmp/tmpe1zbkxd0.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test\
    \ string\", \"test\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ a string for substrings that match a given regular expression. \nFor example,\
    \ given a string \"This is a test string\" and a regular expression r\"test\"\
    , the function should return \"This is a test string\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi20nx348.jl:14\nin expression starting at\
    \ /tmp/tmpi20nx348.jl:14\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaynf9e73.jl:15\nin expression starting at\
    \ /tmp/tmpaynf9e73.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that contain a given set of substrings.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkan8vjd_.jl:15\nin expression starting at\
    \ /tmp/tmpkan8vjd_.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"tests\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters an input list of strings only for ones that do not contain given\
    \ substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp489dxk87.jl:15\nin expression starting at\
    \ /tmp/tmp489dxk87.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<text>\nExercise\nWrite a function that filters\
    \ strings by a substring that occurs at the beginning of the string. For example,\
    \ filter_by_substring([\"Hello\", \"World\", \"Hello\", \"World!\"], \"Hello\"\
    ) should return [\"World\", \"World!\"]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2g0ybwtz.jl:15\nin expression starting at\
    \ /tmp/tmp2g0ybwtz.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    </text>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0rvtu3xh.jl:15\nin expression starting at\
    \ /tmp/tmp0rvtu3xh.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown\
    \ fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpds4qam14.jl:14\nin expression starting at\
    \ /tmp/tmpds4qam14.jl:14\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2o6aq3vw.jl:14\nin expression starting at\
    \ /tmp/tmp2o6aq3vw.jl:14\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered = Vector{String}()\n\
    \    for s in strings\n        if contains(s, substring)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\n    \"apple\",\n    \"banana\",\n    \"cherry\",\n    \"\
    durian\",\n    \"eggplant\",\n    \"fig\",\n    \"grape\",\n    \"honey\",\n \
    \   \"kiwi\",\n    \"lemon\",\n    \"lime\",\n    \"mango\",\n    \"orange\",\n\
    \    \"pear\",\n    \"pineapple\",\n    \"strawberry\",\n    \"watermelon\",\n\
    \    \"yogurt\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n  \
    \  \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n  \
    \  \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n  \
    \  \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n  \
    \  \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n  \
    \  \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n  \
    \  \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n  \
    \  \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n  \
    \  \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n  \
    \  \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n  \
    \  \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n  \
    \  \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n  \
    \  \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n    \"zucchini\",\n  \
    \  \"zucchini\",\n    \"zucch\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgp0fepcv.jl:14\nin expression starting at\
    \ /tmp/tmpgp0fepcv.jl:14\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test\
    \ string\", \"test\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ an input list of strings only for those that contain all substrings given in\
    \ a given list.\nFor example, given a list of substrings [\"test\", \"string\"\
    , \"is\"], return [\"This is a test string\"]\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_v4609tr.jl:14\nin expression starting at\
    \ /tmp/tmp_v4609tr.jl:14\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World\", ignorecase=false)\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World\"\
    , ignorecase=false)\n</cell>\n<text>\nmap\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1287pcas.jl:15\nin expression starting at\
    \ /tmp/tmp1287pcas.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    </text>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_znu8z9.jl:15\nin expression starting at\
    \ /tmp/tmp9_znu8z9.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpadpcmw6_.jl:13\nin expression starting at\
    \ /tmp/tmpadpcmw6_.jl:13\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns a string with only the first letter capitalized.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpimriwkh7.jl:15\nin expression starting at\
    \ /tmp/tmpimriwkh7.jl:15\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n</cell>\n\
    <text>\nExercise: Write a function that filters an input list of strings only\
    \ for those that contain given substring\n</text>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupevkpqx.jl:14\nin expression starting at\
    \ /tmp/tmpupevkpqx.jl:14\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp24_e9w0c.jl:15\nin expression starting at\
    \ /tmp/tmp24_e9w0c.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings that only contain words that start with a given prefix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvv6zf7c.jl:15\nin expression starting at\
    \ /tmp/tmpxvv6zf7c.jl:15\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6zf4t3mi.jl:15\nin expression starting at\
    \ /tmp/tmp6zf4t3mi.jl:15\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    strings = filter(x -> contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3],\
    \ \"2\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ strings and a substring and returns a vector of strings that only contain the\
    \ given substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqy7i1qt.jl:7\nin expression starting at /tmp/tmphqy7i1qt.jl:7\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that filters an input list of strings only for those that contain all given\
    \ substrings\nWrite a function that filters an input list of strings only for\
    \ those that contain at least one of given substrings\nWrite a function that filters\
    \ an input list of strings only for those that contain none of the given substrings\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmoa1wtzg.jl:15\nin expression starting at\
    \ /tmp/tmpmoa1wtzg.jl:15\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaynf9e73.jl:15\nin expression starting at\
    \ /tmp/tmpaynf9e73.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown\
    \ fox jumps over the lazy dog\", \"fox\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function that filters an input list of strings only for ones that contain a\
    \ given substring\nWrite a function that filters an input list of strings only\
    \ for ones that do not contain a given substring\nWrite a function that filters\
    \ an input list of strings only for ones that contain a given substring and do\
    \ not contain a given substring\nWrite a function that filters an input list of\
    \ strings only for ones that do not contain a given substring and contain a given\
    \ substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp8tpcv_g.jl:14\nin expression starting at\
    \ /tmp/tmpp8tpcv_g.jl:14\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr8ccjq58.jl:14\nin expression starting at\
    \ /tmp/tmpr8ccjq58.jl:14\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ by a regular expression. \nThe function should take two arguments: the list\
    \ of strings and the regular expression. \nThe function should return a list of\
    \ strings that match the regular expression.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpql6ucl10.jl:14\nin expression starting at\
    \ /tmp/tmpql6ucl10.jl:14\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that filters strings containing only a given substring and returns\
    \ the filtered strings in a vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3h77qmp.jl:15\nin expression starting at\
    \ /tmp/tmpj3h77qmp.jl:15\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    </text>\n<code language=julia-1.5>\n\"\"\" Filter an input list of strings only\
    \ for ones that do not contain given substring\n            \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz5_sw838.jl:15\nin expression starting at\
    \ /tmp/tmpz5_sw838.jl:15\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"quick\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"quick\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"quick\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"quick\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"quick\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpci99vk6u.jl:15\nin expression starting at\
    \ /tmp/tmpci99vk6u.jl:15\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nThe function filter_by_substring will filter out any strings\
    \ that do not contain the substring given.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpngnjptdi.jl:14\nin expression starting at\
    \ /tmp/tmpngnjptdi.jl:14\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaynf9e73.jl:15\nin expression starting at\
    \ /tmp/tmpaynf9e73.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n    \"The quick\
    \ brown fox jumps over the lazy dog\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"\
    The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps\
    \ over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fo\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqhdoj16.jl:14\nin expression starting at\
    \ /tmp/tmpsqhdoj16.jl:14\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    strings = filter(x->contains(x,substring),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvdpkrqt1.jl:15\nin expression starting at\
    \ /tmp/tmpvdpkrqt1.jl:15\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector of strings and a substring and returns a vector of strings containing\
    \ only the strings that contain the substring\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe4bjw1n1.jl:15\nin expression starting at\
    \ /tmp/tmpe4bjw1n1.jl:15\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"helloo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"worldl\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"worldll\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"worldlll\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"\
    ], \"worldllll\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"worldlllll\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"worldllllll\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"\
    ], \"worldlllllll\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"worldllllllll\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"worldlllllllll\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"\
    ], \"worldllllllllll\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"worldlllllllllll\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"worldllllllllllll\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\"], \"worldlllllllllllll\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"worldllllllllllll\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp19c7k4mn.jl:15\nin expression starting at\
    \ /tmp/tmp19c7k4mn.jl:15\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"e\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    </text>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zbh9bmw.jl:15\nin expression starting at\
    \ /tmp/tmp0zbh9bmw.jl:15\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmky_ydhs.jl:14\nin expression starting at\
    \ /tmp/tmpmky_ydhs.jl:14\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<text>\nExercise\nWrite a function that filters\
    \ an input list of strings only for those that contain given substring\nWrite\
    \ a function that filters an input list of strings only for those that do not\
    \ contain given substring\nWrite a function that filters an input list of strings\
    \ only for those that contain given substring and do not contain given substring\n\
    Write a function that filters an input list of strings only for those that do\
    \ not contain given substring and contain given substring\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_fh3atv.jl:15\nin expression starting at\
    \ /tmp/tmpu_fh3atv.jl:15\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkkwh1jcp.jl:15\nin expression starting at\
    \ /tmp/tmpkkwh1jcp.jl:15\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test\
    \ string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and a vector of substrings and returns a vector\
    \ of strings that only contain substrings.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7cuuoo0l.jl:14\nin expression starting at\
    \ /tmp/tmp7cuuoo0l.jl:14\n"
  stdout: ''
  timestamp: 1659748466
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that contain a given set of substrings\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7e2hyn4i.jl:15\nin expression starting at\
    \ /tmp/tmp7e2hyn4i.jl:15\n"
  stdout: ''
  timestamp: 1659748466
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\nHint: use filter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppufftn5n.jl:14\nin expression starting at\
    \ /tmp/tmppufftn5n.jl:14\n"
  stdout: ''
  timestamp: 1659748466
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings containing\
    \ only the strings that contain the substring. \nFor example, if the input vector\
    \ is [\"Hello\", \"World\", \"Julia\"] and the substring is \"World\", the function\
    \ should return [\"Hello\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncy8ujod.jl:14\nin expression starting at\
    \ /tmp/tmpncy8ujod.jl:14\n"
  stdout: ''
  timestamp: 1659748466
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"goodbye\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of strings and a substring and returns all\
    \ strings that contain that substring. For example, given a list of strings \"\
    hello\", \"world\", \"hello\", \"goodbye\", \"world\", and a substring \"hello\"\
    , your function should return [\"hello\", \"hello\"]. Make sure your function\
    \ works with a list of any length.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpokgk87wa.jl:13\nin expression starting at\
    \ /tmp/tmpokgk87wa.jl:13\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpth8kzpws.jl:14\nin expression starting at\
    \ /tmp/tmpth8kzpws.jl:14\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprurj8am6.jl:15\nin expression starting at\
    \ /tmp/tmprurj8am6.jl:15\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and a vector of substrings\
    \ and returns a vector of strings that only contain substrings.\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70iu5cln.jl:15\nin expression starting at\
    \ /tmp/tmp70iu5cln.jl:15\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj67fo98s.jl:14\nin expression starting at\
    \ /tmp/tmpj67fo98s.jl:14\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered = filter_by_substring(strings,\
    \ substring)\n    \n    if length(filtered) == 0\n        error(\"No strings contain\
    \ substring\")\n    end\n    \n    return filtered\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659748471
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by a regular expression. For example, filter_by_regex(\"Hello\
    \ World\", \"Hello\") should return [\"World\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbauymy3h.jl:15\nin expression starting at\
    \ /tmp/tmpbauymy3h.jl:15\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8funxii3.jl:14\nin expression starting at\
    \ /tmp/tmp8funxii3.jl:14\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nAnd now let's use our filter_by_substring function to filter\
    \ our list of strings:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpov536cis.jl:14\nin expression starting at\
    \ /tmp/tmpov536cis.jl:14\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"World\")\n</cell>\n<text>\nExercise\nWrite a function that filters\
    \ an input list of strings only for ones that contain a given substring and are\
    \ longer than a given length\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1fw9q63a.jl:14\nin expression starting at\
    \ /tmp/tmp1fw9q63a.jl:14\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748466
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    strings = filter(x->contains(x,substring),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaynf9e73.jl:15\nin expression starting at\
    \ /tmp/tmpaynf9e73.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n    \"Hello World\"\
    ,\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n\
    \    \"Hello World\",\n    \"Hello World\",\n    \"Hello World\",\n    \"Hello\
    \ World\",\n    \"Hello World\",\n    \"Hello World\",\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bgayuyb.jl:14\nin expression starting at\
    \ /tmp/tmp0bgayuyb.jl:14\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<text>\nExercise: Filter a list of strings\
    \ based on whether they contain any of a list of substrings\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjku2nqz1.jl:15\nin expression starting at\
    \ /tmp/tmpjku2nqz1.jl:15\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpth8kzpws.jl:14\nin expression starting at\
    \ /tmp/tmpth8kzpws.jl:14\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n    \"Hello world\"\
    ,\n    \"Hello Julia\",\n    \"Hello Julia world\",\n    \"Hello Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia \nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9b2pjlr5.jl:14\nin expression starting at\
    \ /tmp/tmp9b2pjlr5.jl:14\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings,\
    \ \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"\
    b\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"c\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"d\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(strings, \"e\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(strings, \"f\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(strings, \"g\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings,\
    \ \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"\
    i\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"j\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"k\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(strings, \"l\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(strings, \"m\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(strings, \"n\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings,\
    \ \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"\
    p\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"q\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"r\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(strings, \"s\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(strings, \"t\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(strings, \"u\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings,\
    \ \"v\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"\
    w\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"x\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"y\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(strings, \"z\")\n</cell>\n<code\
    \ language=juli\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9bgp9ej.jl:15\nin expression starting at\
    \ /tmp/tmps9bgp9ej.jl:15\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test\
    \ string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and a vector of substrings and returns a vector\
    \ of strings that only contain substrings.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxls57gss.jl:14\nin expression starting at\
    \ /tmp/tmpxls57gss.jl:14\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaynf9e73.jl:15\nin expression starting at\
    \ /tmp/tmpaynf9e73.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjc6qx5z.jl:14\nin expression starting at\
    \ /tmp/tmptjc6qx5z.jl:14\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748466
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1tfwyk_h.jl:15\nin expression starting at\
    \ /tmp/tmp1tfwyk_h.jl:15\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([ \"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\" ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" ], \"z\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" ], \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" ], \"e\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" ], \"c\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" ], \"b\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkq28qu0s.jl:14\nin expression starting at\
    \ /tmp/tmpkq28qu0s.jl:14\n"
  stdout: ''
  timestamp: 1659748468
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test\"\
    , \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is\
    \ a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<text>\nExercise: Write a function that\
    \ filters input strings based on whether they contain any of a list of substrings\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ni18jbx.jl:14\nin expression starting at\
    \ /tmp/tmp4ni18jbx.jl:14\n"
  stdout: ''
  timestamp: 1659748468
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"helloo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"worldo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"helloo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw94kohia.jl:15\nin expression starting at\
    \ /tmp/tmpw94kohia.jl:15\n"
  stdout: ''
  timestamp: 1659748468
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\\\
    n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphf68lnv7.jl:15\nin expression starting at\
    \ /tmp/tmphf68lnv7.jl:15\n"
  stdout: ''
  timestamp: 1659748468
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n    \"The quick\
    \ brown fox jumps over the lazy dog\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"\
    The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps\
    \ over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jump\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq39blwt5.jl:13\nin expression starting at\
    \ /tmp/tmpq39blwt5.jl:13\n"
  stdout: ''
  timestamp: 1659748468
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered = Vector{String}()\n\
    \    \n    for s in strings\n        if contains(s, substring)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"b\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a new string where all occurrences\
    \ of \"a\" have been replaced by \"b\". Test your function with different inputs.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2p68rpxs.jl:15\nin expression starting at\
    \ /tmp/tmp2p68rpxs.jl:15\n"
  stdout: ''
  timestamp: 1659748468
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n    \"This is\
    \ a string\",\n    \"This is a string with another substring\",\n    \"This is\
    \ a string with another substring and another substring\",\n    \"This is a string\
    \ with another substring and another substring and another substring\",\n    \"\
    This is a string with another substring and another substring and another substring\
    \ and another substring\",\n    \"This is a string with another substring and\
    \ another substring and another substring and another substring and another substring\"\
    ,\n    \"This is a string with another substring and another substring and another\
    \ substring and another substring and another substring and another substring\"\
    ,\n    \"This is a string with another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring\",\n    \"This is a string with another substring and\
    \ another substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring\",\n    \"\
    This is a string with another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring\",\n    \"This is a string\
    \ with another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring\",\n    \"\
    This is a string with another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring\",\n    \"This is a string with another substring and\
    \ another substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\"\
    ,\n    \"This is a string with another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\"\
    ,\n    \"This is a string with another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring and another sub\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphz4vg23r.jl:14\nin expression starting at\
    \ /tmp/tmphz4vg23r.jl:14\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n    \"This is\
    \ a string\",\n    \"This is a string with another substring\",\n    \"This is\
    \ a string with another substring and another substring\",\n    \"This is a string\
    \ with another substring and another substring and another substring\",\n    \"\
    This is a string with another substring and another substring and another substring\
    \ and another substring\",\n    \"This is a string with another substring and\
    \ another substring and another substring and another substring and another substring\"\
    ,\n    \"This is a string with another substring and another substring and another\
    \ substring and another substring and another substring and another substring\"\
    ,\n    \"This is a string with another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring\",\n    \"This is a string with another substring and\
    \ another substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring\",\n    \"\
    This is a string with another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring\",\n    \"This is a string\
    \ with another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring\",\n    \"\
    This is a string with another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring\",\n    \"This is a string with another substring and\
    \ another substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\"\
    ,\n    \"This is a string with another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring and another substring and another substring and another\
    \ substring and another substring and another substring and another substring\"\
    ,\n    \"This is a string with another substring and another substring and another\
    \ substring and another substring and another substring and another substring\
    \ and another substring and another substring and \nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr8y13xhm.jl:13\nin expression starting at\
    \ /tmp/tmpr8y13xhm.jl:13\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"goodbye\"], \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"good\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"goodbye\"\
    ], \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"goodbye\"], \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"good\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"goodbye\"\
    ], \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"goodbye\"], \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"good\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"goodbye\"\
    ], \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"goodbye\"], \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"good\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"goodbye\"\
    ], \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"goodbye\"], \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpys_4sk6b.jl:14\nin expression starting at\
    \ /tmp/tmpys_4sk6b.jl:14\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1ntw6mj.jl:14\nin expression starting at\
    \ /tmp/tmpc1ntw6mj.jl:14\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdzmyov1.jl:15\nin expression starting at\
    \ /tmp/tmpfdzmyov1.jl:15\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"isn't\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times it occurs in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipwvu6o4.jl:15\nin expression starting at\
    \ /tmp/tmpipwvu6o4.jl:15\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test\
    \ string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5r0wf_6.jl:13\nin expression starting at\
    \ /tmp/tmpv5r0wf_6.jl:13\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test\
    \ string\", \"test\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a list of strings and a substring and returns a list of strings that contain\
    \ that substring. Test it on a list of strings that you created in the previous\
    \ exercise.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjg4o4mr.jl:13\nin expression starting at\
    \ /tmp/tmpcjg4o4mr.jl:13\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppiaej6eb.jl:13\nin expression starting at\
    \ /tmp/tmppiaej6eb.jl:13\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo1q54g33.jl:15\nin expression starting at\
    \ /tmp/tmpo1q54g33.jl:15\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" ], \"c\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input list of\
    \ strings only for ones that do not contain given substring\n</text>\n<code language=julia-1.5>\n\
    \"\"\" Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeu9i1mrl.jl:15\nin expression starting at\
    \ /tmp/tmpeu9i1mrl.jl:15\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\", \"hello\"], \"hello\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters a list of strings based on whether they contain\
    \ a given substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkv4veugj.jl:15\nin expression starting at\
    \ /tmp/tmpkv4veugj.jl:15\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and a vector of strings as arguments and returns a vector\
    \ of strings that contains all the strings in the first vector that also appear\
    \ in the second vector.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthne7le0.jl:15\nin expression starting at\
    \ /tmp/tmpthne7le0.jl:15\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkb18ny3e.jl:15\nin expression starting at\
    \ /tmp/tmpkb18ny3e.jl:15\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters a given\
    \ list of strings based on whether they contain a given substring. Test it on\
    \ a list of strings that contain a substring \"Hello\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7tmxiyfb.jl:14\nin expression starting at\
    \ /tmp/tmp7tmxiyfb.jl:14\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaynf9e73.jl:15\nin expression starting at\
    \ /tmp/tmpaynf9e73.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy cat\",\n    \"The quick brown fox jumps over the lazy mouse\"\
    ,\n    \"The quick brown fox jumps over the lazy fish\"\n], \"fox\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a vector\
    \ of substrings and returns a vector of strings containing only the substrings.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn932ilg1.jl:15\nin expression starting at\
    \ /tmp/tmpn932ilg1.jl:15\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbpfc9shy.jl:15\nin expression starting at\
    \ /tmp/tmpbpfc9shy.jl:15\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown\
    \ fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dog\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqieignr.jl:14\nin expression starting at\
    \ /tmp/tmphqieignr.jl:14\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaynf9e73.jl:15\nin expression starting at\
    \ /tmp/tmpaynf9e73.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    Hint: Use filter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ekb1_hl.jl:14\nin expression starting at\
    \ /tmp/tmp_ekb1_hl.jl:14\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=false)\n\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppdvv96c8.jl:15\nin expression starting at\
    \ /tmp/tmppdvv96c8.jl:15\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ an input list of strings only for those that contain given substrings.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf7gq3g7p.jl:15\nin expression starting at\
    \ /tmp/tmpf7gq3g7p.jl:15\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([ \"hello\", \"world\"\
    , \"goodbye\" ], \"good\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for those that contain only a given set\
    \ of substrings.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ybzaon1.jl:14\nin expression starting at\
    \ /tmp/tmp8ybzaon1.jl:14\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nThe function filter_by_substring will filter out all strings\
    \ that do not contain the substring passed as argument.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn0m_f5yz.jl:14\nin expression starting at\
    \ /tmp/tmpn0m_f5yz.jl:14\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbpfc9shy.jl:15\nin expression starting at\
    \ /tmp/tmpbpfc9shy.jl:15\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and a substring and returns a vector of strings that contain\
    \ that substring. Test your function with some examples:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpng6egguq.jl:15\nin expression starting at\
    \ /tmp/tmpng6egguq.jl:15\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"Hello World\",\n    \"Hello Julia\",\n    \"Hello Julia World\",\n    \"\
    Hello Julia Julia\",\n    \"Hello Julia Julia World\",\n    \"Hello Julia Julia\
    \ Julia\",\n    \"Hello Julia Julia Julia World\",\n    \"Hello Julia Julia Julia\
    \ Julia\",\n    \"Hello Julia Julia Julia Julia World\",\n    \"Hello Julia Julia\
    \ Julia Julia Julia\",\n    \"Hello Julia Julia Julia Julia Julia World\",\n \
    \   \"Hello Julia Julia Julia Julia Julia Julia\",\n    \"Hello Julia Julia Julia\
    \ Julia Julia Julia World\",\n    \"Hello Julia Julia Julia Julia Julia Julia\
    \ Julia World\",\n    \"Hello Julia Julia Julia Julia Julia Julia Julia Julia\
    \ World\",\n    \"Hello Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ World\",\n    \"Hello Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia World\",\n    \"Hello Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia World\",\n    \"Hello Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia World\",\n    \"Hello Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia World\",\n    \"\
    Hello Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia World\",\n    \"Hello Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia World\",\n    \"Hello Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia World\",\n    \"Hello Julia Julia Julia Julia Julia Julia Julia Julia\
    \ Julia Julia Julia Julia Julia Julia Julia Julia World\",\n    \"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpek_fz9rt.jl:15\nin expression starting at\
    \ /tmp/tmpek_fz9rt.jl:15\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaynf9e73.jl:15\nin expression starting at\
    \ /tmp/tmpaynf9e73.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"World!\", ignorecase=false)\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"World!\"\
    , ignorecase=false)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\", \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ddy03ug.jl:15\nin expression starting at\
    \ /tmp/tmp3ddy03ug.jl:15\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaynf9e73.jl:15\nin expression starting at\
    \ /tmp/tmpaynf9e73.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaynf9e73.jl:15\nin expression starting at\
    \ /tmp/tmpaynf9e73.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", true)\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\", false)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector of strings and a vector of substrings and returns a vector\
    \ of strings that only contain substrings.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98j5u1gz.jl:14\nin expression starting at\
    \ /tmp/tmp98j5u1gz.jl:14\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<text>\nExercise\nWrite a function that filters an input\
    \ list of strings only for ones that contain a given substring and that do not\
    \ contain another given substring. \nFor example, given the input [\"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\"], your function should return\
    \ [\"Hello World\", \"Hello World\", \"Hello World\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpir5xjb0l.jl:14\nin expression starting at\
    \ /tmp/tmpir5xjb0l.jl:14\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input list of strings only for those that contain only a given set of substrings\n\
    Hint: Use filter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfkd6u3rg.jl:15\nin expression starting at\
    \ /tmp/tmpfkd6u3rg.jl:15\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp83l5i1f1.jl:15\nin expression starting at\
    \ /tmp/tmp83l5i1f1.jl:15\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters input list of\
    \ strings only for those that contain given substring\nWrite a function that filters\
    \ input list of strings only for those that do not contain given substring\nWrite\
    \ a function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain given substring\nWrite a\
    \ function that filters input list of strings only for those that do not contain\
    \ given substring\nWrite a function that filters input list of strings only for\
    \ those that do not contain given substring\nWrite a function that filters input\
    \ list of strings only for those that do not contain \nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfaw3ifc_.jl:14\nin expression starting at\
    \ /tmp/tmpfaw3ifc_.jl:14\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\", true)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns a vector of strings that contain the substring\
    \ \"goodbye\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2pnfm9wm.jl:14\nin expression starting at\
    \ /tmp/tmp2pnfm9wm.jl:14\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test string\", \"test\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an input list of strings only for ones that do not contain given\
    \ substring\n</text>\n<code language=julia-1.5>\n\"\"\" Filter an input list of\
    \ strings only for ones that do not contain given substring\n            \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppub3f03s.jl:15\nin expression starting at\
    \ /tmp/tmppub3f03s.jl:15\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzpvtfzmr.jl:14\nin expression starting at\
    \ /tmp/tmpzpvtfzmr.jl:14\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaynf9e73.jl:15\nin expression starting at\
    \ /tmp/tmpaynf9e73.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"ello\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgvik0o7s.jl:14\nin expression starting at\
    \ /tmp/tmpgvik0o7s.jl:14\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqsym2g4r.jl:14\nin expression starting at\
    \ /tmp/tmpqsym2g4r.jl:14\n"
  stdout: ''
  timestamp: 1659748470
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters input strings\
    \ based on whether they contain a given substring in any order. Test it on some\
    \ example strings.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pbeo2z2.jl:14\nin expression starting at\
    \ /tmp/tmp7pbeo2z2.jl:14\n"
  stdout: ''
  timestamp: 1659748471
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkb18ny3e.jl:15\nin expression starting at\
    \ /tmp/tmpkb18ny3e.jl:15\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that filters an input list of strings only for those that contain\
    \ only a given set of substrings\nHint: use filter_by_substring\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5u1fdjz.jl:15\nin expression starting at\
    \ /tmp/tmpm5u1fdjz.jl:15\n"
  stdout: ''
  timestamp: 1659748471
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"HelloWorld\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"WorldWorld\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"WorldHello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"HelloWorldHello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"HelloWorldHelloWorld\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"HelloWorldHelloWorldHello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"HelloWorldHelloWorldHelloWorld\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    HelloWorldHelloWorldHelloWorldHello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"HelloWorldHelloWorldHelloWorldHelloWorld\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"HelloWorldHelloWorldHelloWorldHelloWorldHello\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    HelloWorldHelloWorldHelloWorldHelloWorldHelloWorld\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"Hello World\", \"HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"\
    HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"Hello World\", \"HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello\"\
    )\n</\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfdfl78a.jl:15\nin expression starting at\
    \ /tmp/tmpdfdfl78a.jl:15\n"
  stdout: ''
  timestamp: 1659748471
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that do not contain given substring\n</text>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5uv5pj7.jl:14\nin expression starting at\
    \ /tmp/tmpy5uv5pj7.jl:14\n"
  stdout: ''
  timestamp: 1659748471
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnz_l6v0d.jl:15\nin expression starting at\
    \ /tmp/tmpnz_l6v0d.jl:15\n"
  stdout: ''
  timestamp: 1659748471
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered = Vector{String}()\n\
    \    for s in strings\n        if contains(s, substring)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\n    \"apple\",\n    \"banana\",\n    \"carrot\",\n    \"\
    dog\",\n    \"elephant\",\n    \"fish\",\n    \"goat\",\n    \"horse\",\n    \"\
    kangaroo\",\n    \"lion\",\n    \"monkey\",\n    \"pig\",\n    \"rabbit\",\n \
    \   \"snake\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuu6l1j12.jl:14\nin expression starting at\
    \ /tmp/tmpuu6l1j12.jl:14\n"
  stdout: ''
  timestamp: 1659748471
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8funxii3.jl:14\nin expression starting at\
    \ /tmp/tmp8funxii3.jl:14\n"
  stdout: ''
  timestamp: 1659748467
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf7xfht23.jl:14\nin expression starting at\
    \ /tmp/tmpf7xfht23.jl:14\n"
  stdout: ''
  timestamp: 1659748471
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    strings = filter( x -> contains(x,substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3],\
    \ \"2\")\n</cell>\n<text>\nExercise\nWrite a function that filters an input list\
    \ of strings only for those that contain all substrings given in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2h2oorzy.jl:7\nin expression starting at /tmp/tmp2h2oorzy.jl:7\n"
  stdout: ''
  timestamp: 1659748471
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the input string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ occurs in the input string. \nWrite a function that takes a string and returns\
    \ the number of times the string occurs in the input string. \nWrite a function\
    \ that takes a string and returns the number of times the string occurs in the\
    \ input string. \nWrite a function that takes a string and returns the number\
    \ of times the string occurs in the input string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the input string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ occurs in the input string. \nWrite a function that takes a string and returns\
    \ the number of times the string occurs in the input string. \nWrite a function\
    \ that takes a string and returns the number of times the string occurs in the\
    \ input string. \nWrite a function that takes a string and returns the number\
    \ of times the string occurs in the input string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the input string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ occurs in the input string. \nWrite a function that takes a string and returns\
    \ the number of times the string occurs in the input string. \nWrite a function\
    \ that takes a string and returns the number of times the string occurs in the\
    \ input string. \nWrite a function that takes a string and returns the number\
    \ of times the string occurs in the input string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the input string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ occurs in the input string. \nWrite a function that takes a string and returns\
    \ the number of times the string occurs in the input string. \nWrite a function\
    \ that takes a string and returns the number of times the string occurs in the\
    \ input string. \nWrite a function that takes a string and returns the number\
    \ of times the string occurs in the input string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the input string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ occurs in the input string. \nWrite a function that takes a string and returns\
    \ the number of times the string occurs in the input string. \nWrite a function\
    \ that takes a string and returns the number of times the string occurs in the\
    \ input string. \nWrite a function that takes a string and returns the number\
    \ of times the \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1m770ovy.jl:15\nin expression starting at\
    \ /tmp/tmp1m770ovy.jl:15\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkcmmfe04.jl:14\nin expression starting at\
    \ /tmp/tmpkcmmfe04.jl:14\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748471
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"d\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ndxbdxv.jl:13\nin expression starting at\
    \ /tmp/tmp0ndxbdxv.jl:13\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1ntw6mj.jl:14\nin expression starting at\
    \ /tmp/tmpc1ntw6mj.jl:14\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test\"\
    , \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is\
    \ a test\", \"tests\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"This\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"isn't\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3qrtm8wg.jl:14\nin expression starting at\
    \ /tmp/tmp3qrtm8wg.jl:14\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    strings = strings[findall(strings,\
    \ substring) .!= []]\n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_substring([1,2,3], \"2\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an input list of strings only for those that contain given substrings\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvzyzy1ra.jl:7\nin expression starting at /tmp/tmpvzyzy1ra.jl:7\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    strings = filter(x->contains(x,substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2oc760ws.jl:7\nin expression starting at /tmp/tmp2oc760ws.jl:7\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"helloo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"\
    ], \"world!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"hello\"], \"world\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"hello\"],\
    \ \"world\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5x23jm1.jl:14\nin expression starting at\
    \ /tmp/tmpa5x23jm1.jl:14\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    Hint: use filter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0h_we3zq.jl:15\nin expression starting at\
    \ /tmp/tmp0h_we3zq.jl:15\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"llo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"l\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkb18ny3e.jl:15\nin expression starting at\
    \ /tmp/tmpkb18ny3e.jl:15\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n    \"The quick\
    \ brown fox jumps over the lazy dog\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"\
    The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps\
    \ over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jump\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq39blwt5.jl:13\nin expression starting at\
    \ /tmp/tmpq39blwt5.jl:13\n"
  stdout: ''
  timestamp: 1659748468
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown\
    \ fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpds4qam14.jl:14\nin expression starting at\
    \ /tmp/tmpds4qam14.jl:14\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ input strings according to a regular expression. \nThe function should return\
    \ a list of strings that match the regular expression. \nThe function should ignore\
    \ case when matching.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxy2o5qj.jl:15\nin expression starting at\
    \ /tmp/tmplxy2o5qj.jl:15\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown\
    \ fox jumps over the lazy dog\", \"fox\")\n</cell>\n<text>\nExercise: Write a\
    \ function that filters an input list of strings only for those that contain all\
    \ substrings given in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpci116_gh.jl:14\nin expression starting at\
    \ /tmp/tmpci116_gh.jl:14\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that do not contain given substring\n</text>\n\
    <code language=julia-1.5>\n\"\"\" Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxrpmueu.jl:14\nin expression starting at\
    \ /tmp/tmpfxrpmueu.jl:14\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown\
    \ fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"dogs\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters strings by a regular expression. For example, filter_by_regex(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\") should return [\"The quick\
    \ brown fox jumps over the lazy dog\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppvxbgpjl.jl:14\nin expression starting at\
    \ /tmp/tmppvxbgpjl.jl:14\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\nHint: use filter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpctvei53l.jl:14\nin expression starting at\
    \ /tmp/tmpctvei53l.jl:14\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"goodbye\", ignorecase=true)\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"hello world\", \"goodbye\", ignorecase=false)\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"goodbye\", ignorecase=true)\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\", \"goodbye\"\
    , ignorecase=false)\n</cell>\n<text>\nExercise\nWrite a function that filters\
    \ input strings based on whether they contain given substrings\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk37gvyhl.jl:15\nin expression starting at\
    \ /tmp/tmpk37gvyhl.jl:15\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n    \"The quick\
    \ brown fox jumps over the lazy dog\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"\
    The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps\
    \ over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fo\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqhdoj16.jl:14\nin expression starting at\
    \ /tmp/tmpsqhdoj16.jl:14\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4mphq_9t.jl:15\nin expression starting at\
    \ /tmp/tmp4mphq_9t.jl:15\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n    \"The quick\
    \ brown fox jumps over the lazy dog\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"\
    The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps\
    \ over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fo\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqhdoj16.jl:14\nin expression starting at\
    \ /tmp/tmpsqhdoj16.jl:14\n"
  stdout: ''
  timestamp: 1659748465
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3],\
    \ \"2\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for ones that do not contain given substring\n</text>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6l1eqxa.jl:15\nin expression starting at\
    \ /tmp/tmpx6l1eqxa.jl:15\n"
  stdout: ''
  timestamp: 1659748472
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748466
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748463
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World!\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"Hello!\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfb4b_0hb.jl:15\nin expression starting at\
    \ /tmp/tmpfb4b_0hb.jl:15\n"
  stdout: ''
  timestamp: 1659748473
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\\\
    n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick brown fox jumps over the lazy dog.\\n\",\n\
    \    \"The quick brown fox jumps over the lazy dog.\\n\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\\n\",\n    \"The quick brown fox jumps over the\
    \ lazy dog.\\n\",\n    \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphf68lnv7.jl:15\nin expression starting at\
    \ /tmp/tmphf68lnv7.jl:15\n"
  stdout: ''
  timestamp: 1659748468
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is a test\"\
    , \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"This is\
    \ a test\", \"tests\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"This\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"tests\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"This\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"tests\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"This\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"tests\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"This\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"test\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"tests\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"is\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    This is a test\", \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcb0nu92j.jl:13\nin expression starting at\
    \ /tmp/tmpcb0nu92j.jl:13\n"
  stdout: ''
  timestamp: 1659748473
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\", \"goodbye\"\
    ], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\"\
    , \"world\", \"goodbye\"], \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    hello\", \"world\", \"goodbye\"], \"bye\")\n</cell>\n<text>\nExercise: Write a\
    \ function that filters an input list of strings only for those that contain all\
    \ substrings\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgb214j4u.jl:15\nin expression starting at\
    \ /tmp/tmpgb214j4u.jl:15\n"
  stdout: ''
  timestamp: 1659748473
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\"\
    , \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\"\
    , \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\"\
    , \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6l44gn2.jl:13\nin expression starting at\
    \ /tmp/tmp_6l44gn2.jl:13\n"
  stdout: ''
  timestamp: 1659748473
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"world\")\n</cell>\n<text>\nExercise: Write a function that filters an input\
    \ list of strings only for ones that contain a given substring and are longer\
    \ than a given length\nHint: Use filter_by_substring\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_x7pf1e.jl:14\nin expression starting at\
    \ /tmp/tmpg_x7pf1e.jl:14\n"
  stdout: ''
  timestamp: 1659748473
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659748471
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\n\
    \    \"The quick brown fox jumps over the lazy dog\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown fox\
    \ jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\"\
    ,\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick brown\
    \ fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over the lazy\
    \ dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"The quick\
    \ brown fox jumps over the lazy dog.\",\n    \"The quick brown fox jumps over\
    \ the lazy dog.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n  \
    \  \"The quick bro\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaynf9e73.jl:15\nin expression starting at\
    \ /tmp/tmpaynf9e73.jl:15\n"
  stdout: ''
  timestamp: 1659748464
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"hello\", \"world\"\
    , \"hello\", \"world\"], substring=\"hello\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters strings by a regular expression. \nThe function should\
    \ take two arguments: a string and a regular expression. \nThe function should\
    \ return a list of strings that match the regular expression. \nThe function should\
    \ ignore case. \nThe function should ignore leading and trailing whitespace. \n\
    The function should ignore leading and trailing punctuation. \nThe function should\
    \ ignore leading and trailing whitespace. \nThe function should ignore leading\
    \ and trailing punctuation. \nThe function should ignore leading and trailing\
    \ whitespace. \nThe function should ignore leading and trailing punctuation. \n\
    The function should ignore leading and trailing whitespace. \nThe function should\
    \ ignore leading and trailing punctuation. \nThe function should ignore leading\
    \ and trailing whitespace. \nThe function should ignore leading and trailing punctuation.\
    \ \nThe function should ignore leading and trailing whitespace. \nThe function\
    \ should ignore leading and trailing punctuation. \nThe function should ignore\
    \ leading and trailing whitespace. \nThe function should ignore leading and trailing\
    \ punctuation. \nThe function should ignore leading and trailing whitespace. \n\
    The function should ignore leading and trailing punctuation. \nThe function should\
    \ ignore leading and trailing whitespace. \nThe function should ignore leading\
    \ and trailing punctuation. \nThe function should ignore leading and trailing\
    \ whitespace. \nThe function should ignore leading and trailing punctuation. \n\
    The function should ignore leading and trailing whitespace. \nThe function should\
    \ ignore leading and trailing punctuation. \nThe function should ignore leading\
    \ and trailing whitespace. \nThe function should ignore leading and trailing punctuation.\
    \ \nThe function should ignore leading and trailing whitespace. \nThe function\
    \ should ignore leading and trailing punctuation. \nThe function should ignore\
    \ leading and trailing whitespace. \nThe function should ignore leading and trailing\
    \ punctuation. \nThe function should ignore leading and trailing whitespace. \n\
    The function should ignore leading and trailing punctuation. \nThe function should\
    \ ignore leading and trailing whitespace. \nThe function should ignore leading\
    \ and trailing punctuation. \nThe function should ignore leading and trailing\
    \ whitespace. \nThe function should ignore leading and trailing punctuation. \n\
    The function should ignore leading and trailing whitespace. \nThe function should\
    \ ignore leading and trailing punctuation. \nThe function should ignore leading\
    \ and trailing whitespace. \nThe function should ignore \nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkt0zdz0r.jl:14\nin expression starting at\
    \ /tmp/tmpkt0zdz0r.jl:14\n"
  stdout: ''
  timestamp: 1659748473
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<text>\nExercise\nWrite a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    Hint: use filter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdchd13jm.jl:14\nin expression starting at\
    \ /tmp/tmpdchd13jm.jl:14\n"
  stdout: ''
  timestamp: 1659748473
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1ntw6mj.jl:14\nin expression starting at\
    \ /tmp/tmpc1ntw6mj.jl:14\n"
  stdout: ''
  timestamp: 1659748469
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipce3u88.jl:15\nin expression starting at\
    \ /tmp/tmpipce3u88.jl:15\n"
  stdout: ''
  timestamp: 1659748473
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    strings = filter(x->contains(x,substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3],\
    \ \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"\
    2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3],\
    \ \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"\
    2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3],\
    \ \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"\
    2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([1,2,3], \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3],\
    \ \"2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"\
    2\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([1,2,3], \"2\")\n\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp39jkqlgg.jl:7\nin expression starting at /tmp/tmp39jkqlgg.jl:7\n"
  stdout: ''
  timestamp: 1659748473
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello World\",\
    \ \"World\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"Hello\
    \ World\", \"Hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and a substring and returns a vector of strings that only\
    \ contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg9e8u66t.jl:14\nin expression starting at\
    \ /tmp/tmpg9e8u66t.jl:14\n"
  stdout: ''
  timestamp: 1659748473
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello world\",\
    \ \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"hello\
    \ world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    hello world\", \"he\")\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj63b0qgm.jl:14\nin expression starting at\
    \ /tmp/tmpj63b0qgm.jl:14\n"
  stdout: ''
  timestamp: 1659748473
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring(\"The quick brown fox\
    \ jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    The quick brown fo\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6xt0r1i.jl:15\nin expression starting at\
    \ /tmp/tmpn6xt0r1i.jl:15\n"
  stdout: ''
  timestamp: 1659748473
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n            \"\"\"\nfunction filter_by_substring(strings::Vector{String},\
    \ substring::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"\
    Hello World\", \"World\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of times the string \"World\" occurs in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ times the string \"World\" occurs in the string and also the string \"Hello\"\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string \"World\" occurs in the string and also the string\
    \ \"Hello\" occurs in the string and also the string \"Julia\" occurs in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \"World\" occurs in the string and also the string \"Hello\" occurs in the string\
    \ and also the string \"Julia\" occurs in the string and also the string \"Julia\"\
    \ occurs in the string. \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyqtl86hh.jl:15\nin expression starting at\
    \ /tmp/tmpyqtl86hh.jl:15\n"
  stdout: ''
  timestamp: 1659748474
