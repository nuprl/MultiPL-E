language: jl
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpninm5ekp.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpninm5ekp.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpninm5ekp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpninm5ekp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747870
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(one\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj8jsnwoo.jl:103\nin expression starting at\
    \ /tmp/tmpj8jsnwoo.jl:103\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n  \
    \      ones[i] = sum(arr[i] .== 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb1fcejy6.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb1fcejy6.jl:1\n\
    in expression starting at /tmp/tmpb1fcejy6.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoo7fwygi.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoo7fwygi.jl:1\n\
    in expression starting at /tmp/tmpoo7fwygi.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    sorted_arr .= arr\n    \n    ones_sorted =\
    \ sort(ones)\n    \n    sorted_arr .= ones_sorted\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpqdhou3fw.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpqdhou3fw.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpqdhou3fw.jl:10\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpqdhou3fw.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpqdhou3fw.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpqdhou3fw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpqdhou3fw.jl:10\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpqdhou3fw.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747870
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(one\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpujby85ns.jl:103\nin expression starting at\
    \ /tmp/tmpujby85ns.jl:103\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpninm5ekp.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpninm5ekp.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpninm5ekp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpninm5ekp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747870
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 0] = 0\n    ones[ones == 0] = -1\n    ones[ones == 1] = 0\n    ones[ones\
    \ == -1] = 1\n    ones[ones == 2] = 1\n    ones[ones == -2] = 1\n    ones[ones\
    \ == -3] = 1\n    ones[ones == -4] = 1\n    ones[ones == -5] = 1\n    ones[ones\
    \ == -6] = 1\n    ones[ones == -7] = 1\n    ones[ones == -8] = 1\n    ones[ones\
    \ == -9] = 1\n    ones[ones == -10] = 1\n    ones[ones == -11] = 1\n    ones[ones\
    \ == -12] = 1\n    ones[ones == -13] = 1\n    ones[ones == -14] = 1\n    ones[ones\
    \ == -15] = 1\n    ones[ones == -16] = 1\n    ones[ones == -17] = 1\n    ones[ones\
    \ == -18] = 1\n    ones[ones == -19] = 1\n    ones[ones == -20] = 1\n    ones[ones\
    \ == -21] = 1\n    ones[ones == -22] = 1\n    ones[ones == -23] = 1\n    ones[ones\
    \ == -24] = 1\n    ones[ones == -25] = 1\n    ones[ones == -26] = 1\n    ones[ones\
    \ == -27] = 1\n    ones[ones == -28] = 1\n    ones[ones == -29] = 1\n    ones[ones\
    \ == -30] = 1\n    ones[ones == -31] = 1\n    ones[ones == -32] = 1\n    ones[ones\
    \ == -33] = 1\n    ones[ones == -34] = 1\n    ones[ones == -35] = 1\n    ones[ones\
    \ == -36] = 1\n    ones[ones == -37] = 1\n    ones[ones == -38] = 1\n    ones[ones\
    \ == -39] = 1\n    ones[ones == -40] = 1\n    ones[ones == -41] = 1\n    ones[ones\
    \ == -42] = 1\n    ones[ones == -43] = 1\n    ones[ones == -44] = 1\n    ones[ones\
    \ == -45] = 1\n    ones[ones == -46] = 1\n    ones[ones == -47] = 1\n    ones[ones\
    \ == -48] = 1\n    ones[ones == -49] = 1\n    ones[ones == -50] = 1\n    ones[ones\
    \ == -51] = 1\n    ones[ones == -52] = 1\n    ones[ones == -53] = 1\n    ones[\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjj7knnyq.jl:1\nin expression starting at /tmp/tmpjj7knnyq.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones =\
    \ ones ./ sum(ones)\n    ones = sort(ones)\n    ones = ones[2:end]\n    ones =\
    \ ones[ones .> 0]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .<= \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmsnq3k20.jl:1\nin expression starting at /tmp/tmpmsnq3k20.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    one\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzqgxnmk7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzqgxnmk7.jl:1\n\
    in expression starting at /tmp/tmpzqgxnmk7.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(one\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj8jsnwoo.jl:103\nin expression starting at\
    \ /tmp/tmpj8jsnwoo.jl:103\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6nlo1evc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nlo1evc.jl:1\n\
    in expression starting at /tmp/tmp6nlo1evc.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(one\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj8jsnwoo.jl:103\nin expression starting at\
    \ /tmp/tmpj8jsnwoo.jl:103\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n  \
    \      ones[i] = sum(arr[i]==1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,0,1,1,0,1]\n</cell>\n<code language=julia-1.5>\nsort_array(arr)\n</cell>\n\
    <text>\nPart 2\nImplement the function count_ones(arr::Vector{Int64})::Int64 that\
    \ returns the number of ones in arr in ascending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyb9mfba6.jl:23\nin expression starting at\
    \ /tmp/tmpyb9mfba6.jl:23\n"
  stdout: ''
  timestamp: 1659747868
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    sorted_arr .= ones\n  \
    \  \n    sorted_arr .= sort(ones)\n    \n    sorted_arr .= sort(arr)\n    \n \
    \   return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 0, 1, 0]) == [1, 0, 1, 0]\n@test sort_array([1, 0, 1, 1]) == [1, 0, 1, 1]\n\
    @test sort_array([1, 1, 0, 0]) == [1, 1, 0, 0]\n@test sort_array([1, 1, 0, 1])\
    \ == [1, 1, 0, 1]\n@test sort_array([1, 1, 1, 0]) == [1, 1, 1, 0]\n@test sort_array([1,\
    \ 1, 1, 1]) == [1, 1, 1, 1]\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an array of integers and returns the number of ones in each position.\
    \ For example, given [1, 1, 0, 1] it should return [2, 2, 2, 1].\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptc8d8pr1.jl:23\nin expression starting at\
    \ /tmp/tmptc8d8pr1.jl:23\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 0] = 0\n    \n    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[ones\
    \ .== 1] = arr[ones .== 1]\n    sorted_arr[ones .== 0] = arr[ones .== 0]\n   \
    \ \n    sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpvltf6jqy.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpvltf6jqy.jl:24\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpvltf6jqy.jl:10\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpvltf6jqy.jl:24 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpvltf6jqy.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpvltf6jqy.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpvltf6jqy.jl:10\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpvltf6jqy.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 2] = 2\n    ones[arr .== 4] = 4\n    ones[arr .== 8] = 8\n    ones[arr .==\
    \ 16] = 16\n    ones[arr .== 32] = 32\n    ones[arr .== 64] = 64\n    ones[arr\
    \ .== 128] = 128\n    ones[arr .== 256] = 256\n    ones[arr .== 512] = 512\n \
    \   ones[arr .== 1024] = 1024\n    ones[arr .== 2048] = 2048\n    ones[arr .==\
    \ 4096] = 4096\n    ones[arr .== 8192] = 8192\n    ones[arr .== 16384] = 16384\n\
    \    ones[arr .== 32768] = 32768\n    ones[arr .== 65536] = 65536\n    ones[arr\
    \ .== 131072] = 32768\n    ones[arr .== 262144] = 131072\n    ones[arr .== 524288]\
    \ = 262144\n    ones[arr .== 1048576] = 524288\n    ones[arr .== 2097152] = 1048576\n\
    \    ones[arr .== 4194304] = 32768\n    ones[arr .== 8388608] = 4194304\n    ones[arr\
    \ .== 16777216] = 8388608\n    ones[arr .== 33554432] = 16777216\n    ones[arr\
    \ .== 67108864] = 33554432\n    ones[arr .== 134217728] = 67108864\n    ones[arr\
    \ .== 268435456] = 134217728\n    ones[arr .== 536870912] = 268435456\n    ones[arr\
    \ .== 1073741824] = 536870912\n    ones[arr .== 2147483648] = 1073741824\n   \
    \ ones[arr .== 4294967296] = 2147483648\n    ones[arr .== 8589934592] = 4294967296\n\
    \    ones[arr .== 17179869184] = 8589934592\n    ones[arr .== 34359738368] = 17179869184\n\
    \    ones[arr .== 68719476736] = 34359738368\n    ones[arr .== 137438953472] =\
    \ 68719\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwyywh0nx.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwyywh0nx.jl:1\n\
    in expression starting at /tmp/tmpwyywh0nx.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n  \
    \      ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp71w_lsjr.jl:23\nin expression starting at\
    \ /tmp/tmp71w_lsjr.jl:23\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(one\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj8jsnwoo.jl:103\nin expression starting at\
    \ /tmp/tmpj8jsnwoo.jl:103\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpchhqxgdy.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpchhqxgdy.jl:1\n\
    in expression starting at /tmp/tmpchhqxgdy.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = ones[arr[i]]\n    end\n    \n    sorted_arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpq8177f62.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpq8177f62.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpq8177f62.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpq8177f62.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpq8177f62.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpq8177f62.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpq8177f62.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpq8177f62.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted[i] = arr[findall(ones\
    \ == i)[1]]\n    end\n    \n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpyekz7r48.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpyekz7r48.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpyekz7r48.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyekz7r48.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyekz7r48.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyekz7r48.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpyekz7r48.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyekz7r48.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyekz7r48.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyekz7r48.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpyekz7r48.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyekz7r48.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6fqcbp_a.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6fqcbp_a.jl:1\n\
    in expression starting at /tmp/tmp6fqcbp_a.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n  \
    \      ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones\
    \ == i]\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr9u8y4xi.jl:23\nin expression starting at\
    \ /tmp/tmpr9u8y4xi.jl:23\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    decimals = zeros(Int64, length(ones))\n    \n    for i = 1:length(ones)\n\
    \        decimals[i] = ones[i] - 1\n    end\n    \n    decimals = sort(decimals)\n\
    \    \n    arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        arr[i] = arr[decimals[i]]\n    end\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [1, 3, 10, 2, 5, 7, 4, 6, 8, 9]\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array(arr)\n</cell>\n<text>\nPart III: Binary Search\
    \ Algorithm\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj16dyk5_.jl:34\nin expression starting at\
    \ /tmp/tmpj16dyk5_.jl:34\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpninm5ekp.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpninm5ekp.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpninm5ekp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpninm5ekp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747870
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 0] = 0\n    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones\
    \ .== 1]\n    ones = ones[ones .!= 0]\n    \nusing Test\n\n@testset begin\n\n\
    candidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    \t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfxpr6wbz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfxpr6wbz.jl:1\n\
    in expression starting at /tmp/tmpfxpr6wbz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 0] = 0\n    ones = ones ./ sum(ones)\n    ones = sort(ones)\n    ones =\
    \ ones[2:end]\n    ones = ones[ones .> 0]\n    ones = ones[ones .<= 1]\n    ones\
    \ = ones[ones .>= 0]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .>= 0]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .>= 0]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .>= 0]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .>= 0]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .>= 0]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .>= 0]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .>= 0]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .>= 0]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .>= 0]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .>= 0]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .>= 0]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .>= 0]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .>= 0]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .>= 0]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .>= 0]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .>= 0]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .>= 0]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .>= 0]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .>= 0]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .>= 0]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .>= 0]\n\
    \    ones = ones[ones .<= 1]\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpikg4vyy5.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpikg4vyy5.jl:1\n\
    in expression starting at /tmp/tmpikg4vyy5.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1,0,1,1,0,1,1,1,0,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglvjagg9.jl:21\nin expression starting at\
    \ /tmp/tmpglvjagg9.jl:21\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_ones = zeros(Int64,\
    \ length(ones))\n    \n    for i = 1:length(ones)\n        sorted_ones[i] = ones[i]\n\
    \    end\n    \n    sorted_ones = sort(sorted_ones)\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[sorted_ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmplglwsd10.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmplglwsd10.jl:37\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmplglwsd10.jl:27\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplglwsd10.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplglwsd10.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplglwsd10.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmplglwsd10.jl:27\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplglwsd10.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplglwsd10.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplglwsd10.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmplglwsd10.jl:27\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplglwsd10.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqm8_f5or.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqm8_f5or.jl:1\n\
    in expression starting at /tmp/tmpqm8_f5or.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 0] = 0\n    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n    ones = ones[ones .!= 0]\n\
    \    \n    ones = ones[ones .!= 1]\n    \n    ones = ones[ones .!= 0]\n    \n\
    \    ones = ones[ones .!= 1]\n    \n    ones = ones[ones .!= 0]\n    \n    ones\
    \ = ones[ones .!= 1]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[ones\
    \ .!= 1]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n\
    \    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n\
    \    ones = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n    ones = ones[ones .!= 0]\n\
    \    \n    ones = ones[ones .!= 1]\n    \n    ones = ones[ones .!= 0]\n    \n\
    \    ones = ones[ones .!= 1]\n    \n    ones = ones[ones .!= 0]\n    \n    ones\
    \ = ones[ones .!= 1]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[ones\
    \ .!= 1]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n\
    \    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n\
    \    ones = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n    ones\
    \ = ones[ones .\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"ones .\"\
    \ at /tmp/tmpbi9uvcpy.jl:93\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbi9uvcpy.jl:93\n\
    in expression starting at /tmp/tmpbi9uvcpy.jl:93\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpninm5ekp.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpninm5ekp.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpninm5ekp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpninm5ekp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747870
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmqb2ud7m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmqb2ud7m.jl:1\n\
    in expression starting at /tmp/tmpmqb2ud7m.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = ones[arr[i]]\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4, 2, 6, 1, 3, 5]\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array(arr)\n</cell>\n<text>\nPart 2\nImplement a function\
    \ that finds the longest substring with given length in an array. \nFor example\
    \ for the array [4, 2, 6, 1, 3, 5] the longest substring with length 3 is \"11\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgz0buh86.jl:21\nin expression starting at\
    \ /tmp/tmpgz0buh86.jl:21\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i]==1)\n    end\n    \n    ones = sort(ones)\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = arr[ones[i]]\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwy7p2w9c.jl:26\nin expression starting at\
    \ /tmp/tmpwy7p2w9c.jl:26\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted = zeros(Int64, length(arr))\n    sorted[ones .== 1] = arr[ones .==\
    \ 1]\n    \n    sorted[ones .!= 1] .= sorted[ones .!= 1] .+ ones[ones .!= 1]\n\
    \    \n    sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpgayp7gsh.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpgayp7gsh.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpgayp7gsh.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpgayp7gsh.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpgayp7gsh.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpgayp7gsh.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpgayp7gsh.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpgayp7gsh.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6nlo1evc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nlo1evc.jl:1\n\
    in expression starting at /tmp/tmp6nlo1evc.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted = zeros(Int64, length(arr))\n    sorted[arr .== 1] = 1\n    \n   \
    \ sorted[ones .== 1] .= sort(ones[ones .== 1])\n    \n    return sorted\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprfrkxo76.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmprfrkxo76.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmprfrkxo76.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmprfrkxo76.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmprfrkxo76.jl:24\ntest set:\
    \ Error During Test at /tmp/tmprfrkxo76.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmprfrkxo76.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmprfrkxo76.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqm8_f5or.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqm8_f5or.jl:1\n\
    in expression starting at /tmp/tmpqm8_f5or.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoo7fwygi.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoo7fwygi.jl:1\n\
    in expression starting at /tmp/tmpoo7fwygi.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqm8_f5or.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqm8_f5or.jl:1\n\
    in expression starting at /tmp/tmpqm8_f5or.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppwyglobo.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppwyglobo.jl:1\n\
    in expression starting at /tmp/tmppwyglobo.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    ones_sorted = sort(ones)\n    \n    decimals = zeros(Int64, length(arr))\n\
    \    decimals[ones_sorted .== 1] = 1\n    \n    decimals_sorted = sort(decimals)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprxakw2ja.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprxakw2ja.jl:1\n\
    in expression starting at /tmp/tmprxakw2ja.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    return ones\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0w4nz9oo.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp0w4nz9oo.jl:27\n  Expression: candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n   Evaluated: [0, 0, 0, 0, 1] == [1, 2, 4,\
    \ 3, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0w4nz9oo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0w4nz9oo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0w4nz9oo.jl:28\n  Expression: candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n   Evaluated: [0, 0, 0, 0, 0] == [-4, -2, -6, -5, -3]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0w4nz9oo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0w4nz9oo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0w4nz9oo.jl:29\n  Expression: candidate([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 4, 3]\n   Evaluated: [0, 0, 0, 0, 1] == [0, 1, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0w4nz9oo.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0w4nz9oo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0w4nz9oo.jl:31\n  Expression: candidate([2, 5, 77, 4, 5, 3,\
    \ 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n   Evaluated: [0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0] == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0w4nz9oo.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n  "
  timestamp: 1659747870
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 0] = 0\n    ones = ones ./ sum(ones)\n    ones = sort(ones)\n    ones =\
    \ ones[2:end]\n    ones = ones .* 10\n    ones = ones[2:end]\n    ones = ones\
    \ .+ ones[1]\n    ones = ones[2:end]\n    ones = ones ./ sum(ones)\n    ones =\
    \ sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10\n    ones = ones[2:end]\n\
    \    ones = ones .+ ones[1]\n    ones = ones[2:end]\n    ones = ones ./ sum(ones)\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10\n    ones\
    \ = ones[2:end]\n    ones = ones .+ ones[1]\n    ones = ones[2:end]\n    ones\
    \ = ones ./ sum(ones)\n    ones = sort(ones)\n    ones = ones[2:end]\n    ones\
    \ = ones .* 10\n    ones = ones[2:end]\n    ones = ones .+ ones[1]\n    ones =\
    \ ones[2:end]\n    ones = ones ./ sum(ones)\n    ones = sort(ones)\n    ones =\
    \ ones[2:end]\n    ones = ones .* 10\n    ones = ones[2:end]\n    ones = ones\
    \ .+ ones[1]\n    ones = ones[2:end]\n    ones = ones ./ sum(ones)\n    ones =\
    \ sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10\n    ones = ones[2:end]\n\
    \    ones = ones .+ ones[1]\n    ones = ones[2:end]\n    ones = ones ./ sum(ones)\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10\n    ones\
    \ = ones[2:end]\n    ones = ones .+ ones[1]\n    ones = ones[2:end]\n    ones\
    \ = ones ./ sum(ones)\n    ones = sort(ones)\n    ones = ones[2:end]\n    ones\
    \ = ones .* 10\n    ones = ones[2:end]\n    ones = ones .+ ones[1]\n    ones =\
    \ ones[2:end]\n    ones = ones ./ sum(ones)\n    ones = sort(ones)\n    ones =\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6gm7gxpy.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6gm7gxpy.jl:1\n\
    in expression starting at /tmp/tmp6gm7gxpy.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpninm5ekp.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpninm5ekp.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpninm5ekp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpninm5ekp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747870
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = ones[arr[i]]\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmptn3c7ob1.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmptn3c7ob1.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmptn3c7ob1.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmptn3c7ob1.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmptn3c7ob1.jl:25\ntest set:\
    \ Error During Test at /tmp/tmptn3c7ob1.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmptn3c7ob1.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmptn3c7ob1.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    ones_sorted = sort(ones)\n    \n    decimals = zeros(Int64, length(ones_sorted))\n\
    \    decimals[ones_sorted .== 1] = 1\n    \n    decimals_sorted = sort(decimals)\n\
    \    \n    \n    \n    \n    return ones_sorted .+ decimals_sorted\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [1, 3, 7, 9, 10, 4, 6, 8, 2, 5]\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array(arr)\n</cell>\n<text>\nPart 2\nNow implement\
    \ the function count_ones(arr::Vector{Int64})::Int64 that returns the number of\
    \ ones in arr in ascending order.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3etqdr34.jl:25\nin expression starting at\
    \ /tmp/tmp3etqdr34.jl:25\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpninm5ekp.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpninm5ekp.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpninm5ekp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpninm5ekp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747870
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_git_e2v.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_git_e2v.jl:1\n\
    in expression starting at /tmp/tmp_git_e2v.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6nlo1evc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nlo1evc.jl:1\n\
    in expression starting at /tmp/tmp6nlo1evc.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzgcg1ywq.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzgcg1ywq.jl:1\n\
    in expression starting at /tmp/tmpzgcg1ywq.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    ones_sorted = sort(ones)\n    \n    ones_sorted_decimal = zeros(Int64, length(ones_sorted))\n\
    \    for i = 1:length(ones_sorted)\n        ones_sorted_decimal[i] = ones_sorted[i]\
    \ * 10^floor(log10(ones_sorted[i]))\n    end\n    \n    ones_sorted_decimal_sorted\
    \ = sort(ones_sorted_decimal)\n    \n    ones_sorted_decimal_sorted_reversed =\
    \ reverse(ones_sorted_decimal_sorted)\n    \n    ones_sorted_decimal_sorted_reversed_sorted\
    \ = sort(ones_sorted_decimal_sorted_reversed)\n    \n    ones_sorted_decimal_sorted_reversed_sorted_reversed\
    \ = reverse(ones_sorted_decimal_sorted_reversed_sorted)\n    \n    ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted\
    \ = sort(ones_sorted_decimal_sorted_reversed_sorted_reversed)\n    \n    ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = reverse(ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted)\n    \n\
    \    ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed)\n\
    \    \n    ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = reverse(ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed_sorted)\n\
    \    \n    ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed)\n\
    \    \n    ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = reverse(ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted)\n\
    \    \n    ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed)\n\
    \    \n    ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = reverse(ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted)\n\
    \    \n    ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(ones_sorted_decimal_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqv5voscg.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqv5voscg.jl:1\n\
    in expression starting at /tmp/tmpqv5voscg.jl:1\n"
  stdout: ''
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones <= length(ones)]\n    \n    ones = ones[ones != length(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0f97c3gw.jl:1\nin expression starting at /tmp/tmp0f97c3gw.jl:1\n"
  stdout: ''
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr .= arr\n    \n   \
    \ ones_count = zeros(Int64, length(arr))\n    ones_count[ones .== 1] = 1\n   \
    \ \n    sorted_arr .= ones_count .* sorted_arr\n    \n    sorted_arr .= sort(sorted_arr)\n\
    \    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp3rek9qvo.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp3rek9qvo.jl:30\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmp3rek9qvo.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp3rek9qvo.jl:30 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp3rek9qvo.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp3rek9qvo.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmp3rek9qvo.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp3rek9qvo.jl:31 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747873
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    arr = sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n  \
    \  \n    for i in 1:length(arr)\n        ones[i] = sum(arr & ones(Int64, i))\n\
    \    end\n    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n  \
    \  ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7_jq2mk0.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7_jq2mk0.jl:1\n\
    in expression starting at /tmp/tmp7_jq2mk0.jl:1\n"
  stdout: ''
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqm8_f5or.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqm8_f5or.jl:1\n\
    in expression starting at /tmp/tmpqm8_f5or.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    sorted_arr[arr .== 1] = 1\n    \n    sorted_arr\
    \ .= sort(ones)\n    \n    sorted_arr .= sort(arr)\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpzwix4xkq.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpzwix4xkq.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpzwix4xkq.jl:10\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpzwix4xkq.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpzwix4xkq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzwix4xkq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpzwix4xkq.jl:10\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpzwix4xkq.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747873
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6fqcbp_a.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6fqcbp_a.jl:1\n\
    in expression starting at /tmp/tmp6fqcbp_a.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    sorted_arr[ones .== 1] = sort(ones[ones .==\
    \ 1])\n    \n    sorted_arr[ones .!= 1] .= sort(arr[ones .!= 1])\n    \n    return\
    \ sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_aq9anpv.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp_aq9anpv.jl:24\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmp_aq9anpv.jl:10\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_aq9anpv.jl:24 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp_aq9anpv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp_aq9anpv.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmp_aq9anpv.jl:10\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_aq9anpv.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747873
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpm6uyb4j6.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpm6uyb4j6.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm6uyb4j6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm6uyb4j6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm6uyb4j6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm6uyb4j6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747873
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    ones_sorted = sort(ones)\n    \n    decimals = zeros(Int64, length(ones_sorted))\n\
    \    decimals[ones_sorted .== 1] = 1\n    \n    decimals_sorted = sort(decimals)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa3er7cd9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa3er7cd9.jl:1\n\
    in expression starting at /tmp/tmpa3er7cd9.jl:1\n"
  stdout: ''
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6nlo1evc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nlo1evc.jl:1\n\
    in expression starting at /tmp/tmp6nlo1evc.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6nlo1evc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nlo1evc.jl:1\n\
    in expression starting at /tmp/tmp6nlo1evc.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    arr = arr .- 1 \n    \n    ones = zeros(Int64, length(arr))\n  \
    \  \n    for i = 1:length(arr)\n        ones[i] = sum(arr .== i)\n    end\n  \
    \  \n    ones = ones ./ length(arr)\n    \n    ones = sort(ones)\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones .+ 1 \n    \n    ones = ones ./ length(arr)\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones .+ 1 \n    \n    ones = ones\
    \ ./ length(arr)\n    \n    ones = ones[2:end]\n    \n    ones = ones .+ 1 \n\
    \    \n    ones = ones ./ length(arr)\n    \n    ones = ones[2:end]\n    \n  \
    \  ones = ones .+ 1 \n    \n    ones = ones ./ length(arr)\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones .+ 1 \n    \n    ones = ones ./ length(arr)\n    \n   \
    \ ones = ones[2:end]\n    \n    ones = ones .+ 1 \n    \n    ones = ones ./ length(arr)\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones .+ 1 \n    \n    ones = ones\
    \ ./ length(arr)\n    \n    ones = ones[2:end]\n    \n    ones = ones .+ 1 \n\
    \    \n    ones = ones ./ length(arr)\n    \n    ones = ones[2:end]\n    \n  \
    \  ones = ones .+ 1 \n    \n    ones = ones ./ length(arr)\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones .+ 1 \n    \n    ones = ones ./ length(arr)\n    \n   \
    \ ones = ones[2:end]\n    \n    ones = ones .+ 1 \n    \n    ones = ones ./ length(arr)\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones .+ 1 \n    \n    ones = ones\
    \ ./ length(arr)\n    \n    ones = ones[2:end]\n    \n    ones = ones .+ 1 \n\
    \    \n    ones = ones ./ length(arr)\n    \n    ones = ones[2:end]\n    \n  \
    \  ones = ones .+ 1 \n    \n    ones = ones ./ length(arr)\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones .+ \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ee9e0j_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ee9e0j_.jl:1\n\
    in expression starting at /tmp/tmp9ee9e0j_.jl:1\n"
  stdout: ''
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6nlo1evc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nlo1evc.jl:1\n\
    in expression starting at /tmp/tmp6nlo1evc.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sort([1,1,2,3]) == [1,2,3]\n\
    @assert sort([1,2,1,3]) == [1,2,3]\n@assert sort([1,1,2,3,3]) == [1,2,3]\n@assert\
    \ sort([1,1,2,3,3,3]) == [1,2,3]\n@assert sort([1,1,2,3,3,3,3]) == [1,2,3]\n@assert\
    \ sort([1,1,2,3,3,3,3,3]) == [1,2,3]\n@assert sort([1,1,2,3,3,3,3,3,3]) == [1,2,3]\n\
    @assert sort([1,1,2,3,3,3,3,3,3,3]) == [1,2,3]\n@assert sort([1,1,2,3,3,3,3,3,3,3,3])\
    \ == [1,2,3]\n@assert sort([1,1,2,3,3,3,3,3,3,3,3,3]) == [1,2,3]\n@assert sort([1,1,2,3,3,3,3,3,3,3,3,3,3])\
    \ == [1,2,3]\n@assert sort([1,1,2,3,3,3,3,3,3,3,3,3,3]) == [1,2,3]\n@assert sort([1,1,2,3,3,3,3,3,3,3,3,3,3,3])\
    \ == [1,2,3]\n@assert sort([1,1,2,3,3,3,3,3,3,3,3,3,3,3,3]) == [1,2,3]\n@assert\
    \ sort([1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3]) == [1,2,3]\n@assert sort([1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3])\
    \ == [1,2,3]\n@assert sort([1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3]) == [1,2,3]\n@assert\
    \ sort([1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3]) == [1,2,3]\n@assert sort([1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\
    \ == [1,2,3]\n@assert sort([1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]) == [1,2,3]\n\
    @assert sort([1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]) == [1,2,3]\n@assert\
    \ sort([1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]) == [1,2,3]\n@assert sort([1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\
    \ == [1,2,3]\n@assert sort([1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\
    \ == [1,2,\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcs0xxnmp.jl:21\nin expression starting at\
    \ /tmp/tmpcs0xxnmp.jl:21\n"
  stdout: ''
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    ones_sorted = sort(ones)\n    \n    ones_sorted_sorted = zeros(Int64, length(ones_sorted))\n\
    \    ones_sorted_sorted[ones_sorted .== 1] = 1\n    \n    ones_sorted_sorted_sorted\
    \ = sort(ones_sorted_sorted)\n    \n    ones_sorted_sorted_sorted_sorted = sort(ones_sorted_sorted_sorted)\n\
    \    \n    ones_sorted_sorted_sorted_sorted_sorted = sort(ones_sorted_sorted_sorted_sorted)\n\
    \    \n    ones_sorted_sorted_sorted_sorted_sorted_sorted = sort(ones_sorted_sorted_sorted_sorted_sorted)\n\
    \    \n    ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted = sort(ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n\
    \    \n    ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = sort(ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n\
    \    \n    ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sort(ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n\
    \    \n    ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sort(ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n\
    \    \n    ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sort(ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n\
    \    \n    ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sort(ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n\
    \    \n    ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sort(ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n\
    \    \n    ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sort(ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n\
    \    \n    ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sort(ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n\
    \    \n    ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sort(ones_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\n\
    \    \n    ones_sorted_sorted_sorted_sorted_sorted_sorted_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpss9la2b2.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpss9la2b2.jl:1\n\
    in expression starting at /tmp/tmpss9la2b2.jl:1\n"
  stdout: ''
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(bitget(arr, i))\n    end\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n \
    \   \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22jycyyv.jl:105\nin expression starting at\
    \ /tmp/tmp22jycyyv.jl:105\n"
  stdout: ''
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n  \
    \      ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[findall(ones\
    \ == i)[1]]\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmpcglza.jl:23\nin expression starting at\
    \ /tmp/tmpjmpcglza.jl:23\n"
  stdout: ''
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6nlo1evc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nlo1evc.jl:1\n\
    in expression starting at /tmp/tmp6nlo1evc.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr .= arr\n    \n   \
    \ sorted_arr .= ones\n    \n    sorted_arr .= sort(sorted_arr)\n    \n    return\
    \ sorted_arr\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 2]\n</cell>\n\
    <code language=julia-1.5>\nsort_array(arr)\n</cell>\n<text>\nPart III: Binary\
    \ Search Algorithm\nIn this Kata, you have to implement binary search algorithm\
    \ for searching elements in sorted array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph3c3e9es.jl:22\nin expression starting at\
    \ /tmp/tmph3c3e9es.jl:22\n"
  stdout: ''
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1, 4, 3, 2]\n</cell>\n<code language=julia-1.5>\n\
    sort_array(arr)\n</cell>\n<text>\nPart 2\nNow let's implement the function count_ones\
    \ that counts the number of ones in an array:\nusing Test\n\n@testset begin\n\n\
    candidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    \t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjb1xlw82.jl:21\nin expression starting at\
    \ /tmp/tmpjb1xlw82.jl:21\n"
  stdout: ''
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n  \
    \      ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n     \
    \   sorted_arr[i] = arr[ones[i]]\n    end\n    \n    return sorted_arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpi9nzzx0e.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpi9nzzx0e.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpi9nzzx0e.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi9nzzx0e.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi9nzzx0e.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpi9nzzx0e.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpi9nzzx0e.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi9nzzx0e.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi9nzzx0e.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpi9nzzx0e.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpi9nzzx0e.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi9nzzx0e.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747873
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones != 0]\n   \
    \ \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones != 0]\n    \n   \
    \ ones = ones[sortperm(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[sortperm(ones)]\n   \
    \ \n    ones = ones[ones != 0]\n    \n    ones = ones[sortperm(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[sortperm(ones)]\n    \n   \
    \ ones = ones[ones != 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones != 0]\n   \
    \ \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones != 0]\n    \n   \
    \ ones = ones[sortperm(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[sortperm(ones)]\n   \
    \ \n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplmapwnpj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplmapwnpj.jl:1\n\
    in expression starting at /tmp/tmplmapwnpj.jl:1\n"
  stdout: ''
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 0] = 0\n    ones = ones ./ sum(ones)\n    ones = sort(ones)\n    ones =\
    \ ones[2:end]\n    ones = ones[ones .> 0]\n    ones = ones[ones .<= 1]\n    ones\
    \ = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n\
    \    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones\
    \ .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones =\
    \ ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n    ones = ones[ones .<= 1]\n\
    \    ones = ones[ones .<= 1]\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4ht52oyc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4ht52oyc.jl:1\n\
    in expression starting at /tmp/tmp4ht52oyc.jl:1\n"
  stdout: ''
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp79ed1osp.jl:24\nin expression starting at\
    \ /tmp/tmp79ed1osp.jl:24\n"
  stdout: ''
  timestamp: 1659747872
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[ones\
    \ == 0] = -1\n    ones = ones ./ sum(ones)\n    ones = sort(ones)\n    ones =\
    \ ones[2:end]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones =\
    \ ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones .!= 0]\n    ones\
    \ = ones[2:end]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones\
    \ = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones .!= 0]\n  \
    \  ones = ones[2:end]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n \
    \   ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones .!=\
    \ 0]\n    ones = ones[2:end]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n\
    \    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones .!=\
    \ 0]\n    ones = ones[2:end]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n\
    \    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones .!=\
    \ 0]\n    ones = ones[2:end]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n\
    \    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones .!=\
    \ 0]\n    ones = ones[2:end]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n\
    \    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones .!=\
    \ 0]\n    ones = ones[2:end]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n\
    \    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n    ones = ones[ones .!=\
    \ 0]\n    ones = ones[2:end]\n    ones = ones[ones .!= 0]\n    ones = ones[2:end]\n\
    \    ones = ones[ones .!= 0]\n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp673ljbk_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp673ljbk_.jl:1\n\
    in expression starting at /tmp/tmp673ljbk_.jl:1\n"
  stdout: ''
  timestamp: 1659747872
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpninm5ekp.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpninm5ekp.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpninm5ekp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpninm5ekp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747870
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjd12pgaa.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjd12pgaa.jl:1\n\
    in expression starting at /tmp/tmpjd12pgaa.jl:1\n"
  stdout: ''
  timestamp: 1659747872
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpninm5ekp.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpninm5ekp.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpninm5ekp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpninm5ekp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747870
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoo7fwygi.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoo7fwygi.jl:1\n\
    in expression starting at /tmp/tmpoo7fwygi.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [3, 1, 2, 0, 4, 5]\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array(arr)\n</cell>\n<text>\nPart 2\nIn this Kata,\
    \ you have to implement a function that counts the number of 1's in an array of\
    \ integers. \nIt must be implemented like this:\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpznvd8al6.jl:21\nin expression starting at\
    \ /tmp/tmpznvd8al6.jl:21\n"
  stdout: ''
  timestamp: 1659747872
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpninm5ekp.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpninm5ekp.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpninm5ekp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpninm5ekp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747870
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoo7fwygi.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoo7fwygi.jl:1\n\
    in expression starting at /tmp/tmpoo7fwygi.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    ones_count = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        ones_count[i] = sum(ones[arr\
    \ .== i])\n    end\n    \n    sorted_arr .= ones_count.argsort\n    \n    return\
    \ sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpd_njl0i5.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpd_njl0i5.jl:30\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpd_njl0i5.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpd_njl0i5.jl:30 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpd_njl0i5.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpd_njl0i5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpd_njl0i5.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpd_njl0i5.jl:31 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747874
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7tmz0fq9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7tmz0fq9.jl:1\n\
    in expression starting at /tmp/tmp7tmz0fq9.jl:1\n"
  stdout: ''
  timestamp: 1659747872
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n  \
    \      ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp3gny9ot0.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp3gny9ot0.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmp3gny9ot0.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3gny9ot0.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3gny9ot0.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3gny9ot0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmp3gny9ot0.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3gny9ot0.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3gny9ot0.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3gny9ot0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3gny9ot0.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3gny9ot0.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747874
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5dba42r.jl:21\nin expression starting at\
    \ /tmp/tmpv5dba42r.jl:21\n"
  stdout: ''
  timestamp: 1659747872
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[arr .== 1] = sort(ones[arr\
    \ .== 1])\n    \n    sorted_arr[arr .!= 1] = (arr .- sorted_arr[arr .!= 1]) .*\
    \ 10^9\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpde1xezme.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpde1xezme.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpde1xezme.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpde1xezme.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpde1xezme.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpde1xezme.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpde1xezme.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpde1xezme.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747875
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5_8g5ppd.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5_8g5ppd.jl:1\n\
    in expression starting at /tmp/tmp5_8g5ppd.jl:1\n"
  stdout: ''
  timestamp: 1659747872
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpm6uyb4j6.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpm6uyb4j6.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm6uyb4j6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm6uyb4j6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm6uyb4j6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm6uyb4j6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747873
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones =\
    \ ones ./ sum(ones)\n    ones = sort(ones)\n    ones = ones .* 10\n    ones =\
    \ ones .+ ones(Int64, length(ones))\n    ones = ones ./ sum(ones)\n    ones =\
    \ ones .* 10\n    ones = ones .+ ones(Int64, length(ones))\n    ones = ones ./\
    \ sum(ones)\n    ones = ones .* 10\n    ones = ones .+ ones(Int64, length(ones))\n\
    \    ones = ones ./ sum(ones)\n    ones = ones .* 10\n    ones = ones .+ ones(Int64,\
    \ length(ones))\n    ones = ones ./ sum(ones)\n    ones = ones .* 10\n    ones\
    \ = ones .+ ones(Int64, length(ones))\n    ones = ones ./ sum(ones)\n    ones\
    \ = ones .* 10\n    ones = ones .+ ones(Int64, length(ones))\n    ones = ones\
    \ ./ sum(ones)\n    ones = ones .* 10\n    ones = ones .+ ones(Int64, length(ones))\n\
    \    ones = ones ./ sum(ones)\n    ones = ones .* 10\n    ones = ones .+ ones(Int64,\
    \ length(ones))\n    ones = ones ./ sum(ones)\n    ones = ones .* 10\n    ones\
    \ = ones .+ ones(Int64, length(ones))\n    ones = ones ./ sum(ones)\n    ones\
    \ = ones .* 10\n    ones = ones .+ ones(Int64, length(ones))\n    ones = ones\
    \ ./ sum(ones)\n    ones = ones .* 10\n    ones = ones .+ ones(Int64, length(ones))\n\
    \    ones = ones ./ sum(ones)\n    ones = ones .* 10\n    ones = ones .+ ones(Int64,\
    \ length(ones))\n    ones = ones ./ sum(ones)\n    ones = ones .* 10\n    ones\
    \ = ones .+ ones(Int64, length(ones))\n    ones = ones ./ sum(ones)\n    ones\
    \ = ones .* 10\n    ones = ones .+ ones(Int64, length(ones))\n    ones = ones\
    \ ./ sum(ones)\n    ones = ones .* 10\n    ones = ones .+ ones(Int64, length(ones))\n\
    \    ones = ones ./ sum(ones)\n    ones = ones .* 10\n    ones = \nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplxk3qsqi.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplxk3qsqi.jl:1\n\
    in expression starting at /tmp/tmplxk3qsqi.jl:1\n"
  stdout: ''
  timestamp: 1659747873
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n  \
    \      ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 1, 0, 1, 1, 1, 0, 1, 1]\n</cell>\n<code language=julia-1.5>\nsort_array(arr)\n\
    </cell>\n<text>\nPart 2\nImplement a function that returns an array of integers\
    \ such that each element of the array is less than or equal to the previous element\
    \ in the array. \nFor example, if the input array is [4, 3, 2], the output should\
    \ be [4, 3, 2, 4, 3, 2]. \nThe input array is sorted in ascending order.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpklw87v8b.jl:23\nin expression starting at\
    \ /tmp/tmpklw87v8b.jl:23\n"
  stdout: ''
  timestamp: 1659747873
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6nlo1evc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nlo1evc.jl:1\n\
    in expression starting at /tmp/tmp6nlo1evc.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted = zeros(Int64, length(arr))\n    sorted[ones .== 1] .= sort(ones[ones\
    \ .== 1])\n    sorted[ones .== 0] .= sort(arr[ones .== 0])\n    \n    return sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6xx2irpa.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp6xx2irpa.jl:24\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmp6xx2irpa.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6xx2irpa.jl:24 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp6xx2irpa.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6xx2irpa.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmp6xx2irpa.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6xx2irpa.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747875
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpninm5ekp.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpninm5ekp.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpninm5ekp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpninm5ekp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747870
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted\
    \ = sort(ones)\n    \n    sorted[sorted .== 0] = -1\n    \n    return sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpgvr8blli.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpgvr8blli.jl:23\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpgvr8blli.jl:10\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpgvr8blli.jl:23 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpgvr8blli.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgvr8blli.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpgvr8blli.jl:10\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpgvr8blli.jl:24 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747875
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i]==1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmplx2asfb4.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmplx2asfb4.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmplx2asfb4.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplx2asfb4.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplx2asfb4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmplx2asfb4.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmplx2asfb4.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplx2asfb4.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplx2asfb4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmplx2asfb4.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmplx2asfb4.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplx2asfb4.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747875
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n  \
    \      ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[findall(ones\
    \ == i)[1]]\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 3, 10, 4, 2]\n</cell>\n<code language=julia-1.5>\nsort_array(arr)\n\
    </cell>\n<text>\nPart 2\nImplement the function count_ones(arr::Vector{Int64})::Int64\
    \ that returns the number of ones in arr in ascending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_o018mt3.jl:23\nin expression starting at\
    \ /tmp/tmp_o018mt3.jl:23\n"
  stdout: ''
  timestamp: 1659747873
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        sorted_arr[i] = arr[ones[i]]\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp2spaz1k5.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp2spaz1k5.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmp2spaz1k5.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2spaz1k5.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2spaz1k5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2spaz1k5.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmp2spaz1k5.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2spaz1k5.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2spaz1k5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2spaz1k5.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2spaz1k5.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2spaz1k5.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747875
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i]==1)\n    end\n    \n    ones = ones[ones!=0]\n \
    \   \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones!=0]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[ones!=0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones!=0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones!=0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones!=0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones!=0]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[ones!=0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones!=0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones!=0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones!=0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones!=0]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[ones!=0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones!=0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones!=0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones!=0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones!=0]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[ones!=0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones!=0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones!=0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones!=0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones!=\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3hfvs96h.jl:1\nin expression starting at /tmp/tmp3hfvs96h.jl:1\n"
  stdout: ''
  timestamp: 1659747873
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    decimals = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        decimals[i] = ones[i] - ones[i - 1]\n    end\n    \n    decimals = sort(decimals)\n\
    \    \n    return arr[decimals]\nend\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcs88b97x.jl:28\nin expression starting at\
    \ /tmp/tmpcs88b97x.jl:28\n"
  stdout: ''
  timestamp: 1659747874
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] .== 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp7mdrr8kd.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp7mdrr8kd.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmp7mdrr8kd.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7mdrr8kd.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7mdrr8kd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp7mdrr8kd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmp7mdrr8kd.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7mdrr8kd.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7mdrr8kd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp7mdrr8kd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7mdrr8kd.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7mdrr8kd.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6nlo1evc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nlo1evc.jl:1\n\
    in expression starting at /tmp/tmp6nlo1evc.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n  \
    \      ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi7i_846u.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi7i_846u.jl:1\n\
    in expression starting at /tmp/tmpi7i_846u.jl:1\n"
  stdout: ''
  timestamp: 1659747874
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4jpt4jcx.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4jpt4jcx.jl:1\n\
    in expression starting at /tmp/tmp4jpt4jcx.jl:1\n"
  stdout: ''
  timestamp: 1659747874
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpm6uyb4j6.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpm6uyb4j6.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm6uyb4j6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm6uyb4j6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm6uyb4j6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm6uyb4j6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747873
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr .= arr\n    \n   \
    \ sorted_arr .= ones\n    \n    sorted_arr .= sort(sorted_arr)\n    \n    return\
    \ sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp5lh8ccsl.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp5lh8ccsl.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmp5lh8ccsl.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp5lh8ccsl.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp5lh8ccsl.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5lh8ccsl.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmp5lh8ccsl.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp5lh8ccsl.jl:28 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    ones_sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = ones_sorted[i]\n   \
    \ end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpo_g58bey.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpo_g58bey.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpo_g58bey.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpo_g58bey.jl:28 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpo_g58bey.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpo_g58bey.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpo_g58bey.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpo_g58bey.jl:29 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = ones[arr[i]]\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmptn3c7ob1.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmptn3c7ob1.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmptn3c7ob1.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmptn3c7ob1.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmptn3c7ob1.jl:25\ntest set:\
    \ Error During Test at /tmp/tmptn3c7ob1.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmptn3c7ob1.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmptn3c7ob1.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[ones\
    \ .== 0] = -1\n    ones = ones ./ sum(ones)\n    ones = sort(ones)\n    ones =\
    \ ones[2:end]\n    ones = ones .* 10\n    ones = ones .+ ones(Int64, length(ones))\n\
    \    ones = ones[2:end]\n    ones = ones ./ sum(ones)\n    ones = sort(ones)\n\
    \    ones = ones[2:end]\n    ones = ones .* 10\n    ones = ones .+ ones(Int64,\
    \ length(ones))\n    ones = ones[2:end]\n    ones = ones ./ sum(ones)\n    ones\
    \ = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10\n    ones = ones\
    \ .+ ones(Int64, length(ones))\n    ones = ones[2:end]\n    ones = ones ./ sum(ones)\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10\n    ones\
    \ = ones .+ ones(Int64, length(ones))\n    ones = ones[2:end]\n    ones = ones\
    \ ./ sum(ones)\n    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones\
    \ .* 10\n    ones = ones .+ ones(Int64, length(ones))\n    ones = ones[2:end]\n\
    \    ones = ones ./ sum(ones)\n    ones = sort(ones)\n    ones = ones[2:end]\n\
    \    ones = ones .* 10\n    ones = ones .+ ones(Int64, length(ones))\n    ones\
    \ = ones[2:end]\n    ones = ones ./ sum(ones)\n    ones = sort(ones)\n    ones\
    \ = ones[2:end]\n    ones = ones .* 10\n    ones = ones .+ ones(Int64, length(ones))\n\
    \    ones = ones[2:end]\n    ones = ones ./ sum(ones)\n    ones = sort(ones)\n\
    \    ones = ones[2:end]\n    ones = ones .* 10\n    ones = ones .+ ones(Int64,\
    \ length(ones))\n    ones = ones[2:end]\n    ones = ones ./ sum(ones)\n    ones\
    \ = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10\n    ones = ones\
    \ .+ ones(Int64, length(ones))\n    ones = ones[2:\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprrmugahs.jl:66\nin expression starting at\
    \ /tmp/tmprrmugahs.jl:66\n"
  stdout: ''
  timestamp: 1659747874
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5b59a71s.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5b59a71s.jl:1\n\
    in expression starting at /tmp/tmp5b59a71s.jl:1\n"
  stdout: ''
  timestamp: 1659747874
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_git_e2v.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_git_e2v.jl:1\n\
    in expression starting at /tmp/tmp_git_e2v.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(one\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj8jsnwoo.jl:103\nin expression starting at\
    \ /tmp/tmpj8jsnwoo.jl:103\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 2] = 2\n    ones[arr .== 4] = 4\n    ones[arr .== 8] = 8\n    ones[arr .==\
    \ 16] = 16\n    ones[arr .== 32] = 32\n    ones[arr .== 64] = 64\n    ones[arr\
    \ .== 128] = 128\n    ones[arr .== 256] = 256\n    ones[arr .== 512] = 512\n \
    \   ones[arr .== 1024] = 1024\n    ones[arr .== 2048] = 2048\n    ones[arr .==\
    \ 4096] = 4096\n    ones[arr .== 8192] = 8192\n    ones[arr .== 16384] = 16384\n\
    \    ones[arr .== 32768] = 32768\n    ones[arr .== 65536] = 65536\n    ones[arr\
    \ .== 131072] = 32768\n    ones[arr .== 262144] = 262144\n    ones[arr .== 524288]\
    \ = 524288\n    ones[arr .== 1048576] = 1048576\n    ones[arr .== 2097152] = 2097152\n\
    \    ones[arr .== 4194304] = 32768\n    ones[arr .== 8388608] = 8388608\n    ones[arr\
    \ .== 16777216] = 8388608\n    ones[arr .== 33554432] = 8388608\n    ones[arr\
    \ .== 67108864] = 8388608\n    ones[arr .== 134217728] = 8388608\n    ones[arr\
    \ .== 268435456] = 8388608\n    ones[arr .== 536870912] = 8388608\n    ones[arr\
    \ .== 1073741824] = 8388608\n    ones[arr .== 2147483648] = 8388608\n    ones[arr\
    \ .== 4294967296] = 8388608\n    ones[arr .== 8589934592] = 8388608\n    ones[arr\
    \ .== 17179869184] = 8388608\n    ones[arr .== 34359738368] = 8388608\n    ones[arr\
    \ .== 68719476736] = 8388608\n    ones[arr .== 137438953472] = 838860\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx2x59lgi.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx2x59lgi.jl:1\n\
    in expression starting at /tmp/tmpx2x59lgi.jl:1\n"
  stdout: ''
  timestamp: 1659747874
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n  \
    \      ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp3gny9ot0.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp3gny9ot0.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmp3gny9ot0.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3gny9ot0.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3gny9ot0.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3gny9ot0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmp3gny9ot0.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3gny9ot0.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3gny9ot0.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3gny9ot0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3gny9ot0.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3gny9ot0.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747874
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0prkdvdi.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0prkdvdi.jl:1\n\
    in expression starting at /tmp/tmp0prkdvdi.jl:1\n"
  stdout: ''
  timestamp: 1659747874
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones =\
    \ ones ./ sum(ones)\n    ones = sort(ones)\n    ones = ones[2:end]\n    ones =\
    \ ones .* 10\n    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .*\
    \ 100\n    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 1000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10000\n   \
    \ ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 100000\n    ones\
    \ = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 1000000\n    ones =\
    \ sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10000000\n    ones =\
    \ sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 100000000\n    ones =\
    \ sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 1000000000\n    ones\
    \ = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10000000000\n    ones\
    \ = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 100000000000\n    ones\
    \ = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 1000000000000\n   \
    \ ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 100000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 1000000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10000000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 100000000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 1000000000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10000000000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 100000000000000000000\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwd2zq0mh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwd2zq0mh.jl:1\n\
    in expression starting at /tmp/tmpwd2zq0mh.jl:1\n"
  stdout: ''
  timestamp: 1659747875
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppwyglobo.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppwyglobo.jl:1\n\
    in expression starting at /tmp/tmppwyglobo.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    arr = sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n  \
    \  \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i]==1)\n    end\n  \
    \  \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    arr = arr[ones]\n\
    \    \n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp3qdev0lc.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp3qdev0lc.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [[0, 0, 0, 1]]\n  Stacktrace:\n \
    \  [1] throw_boundserror(A::Vector{Int64}, I::Tuple{Vector{Int64}})\n     @ Base\
    \ ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n\
    \   [3] _getindex\n     @ ./multidimensional.jl:838 [inlined]\n   [4] getindex\n\
    \     @ ./abstractarray.jl:1218 [inlined]\n   [5] sort_array(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp3qdev0lc.jl:22\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp3qdev0lc.jl:31 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp3qdev0lc.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp3qdev0lc.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [[0, 0, 0, 0]]\n  Stacktrace:\n \
    \  [1] throw_boundserror(A::Vector{Int64}, I::Tuple{Vector{Int64}})\n     @ Base\
    \ ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n\
    \   [3] _getindex\n     @ ./multidimensional.jl:838 [inlined]\n   [4] getindex\n\
    \     @ ./abstractarray.jl:1218 [inlined]\n   [5] sort_array(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp3qdev0lc.jl:22\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp3qdev0lc.jl:32 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp3qdev0lc.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp3qdev0lc.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vect"
  timestamp: 1659747877
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 0] = 0\n    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[ones\
    \ .!= 1]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n  \
    \  \n    ones = ones[ones .!= 1]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[ones\
    \ .!= 1]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n  \
    \  \n    ones = ones[ones .!= 1]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[ones\
    \ .!= 1]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n  \
    \  \n    ones = ones[ones .!= 1]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[ones\
    \ .!= 1]\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2zo9krbg.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2zo9krbg.jl:1\n\
    in expression starting at /tmp/tmp2zo9krbg.jl:1\n"
  stdout: ''
  timestamp: 1659747874
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = ones[arr[i]]\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmptn3c7ob1.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmptn3c7ob1.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmptn3c7ob1.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmptn3c7ob1.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmptn3c7ob1.jl:25\ntest set:\
    \ Error During Test at /tmp/tmptn3c7ob1.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmptn3c7ob1.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmptn3c7ob1.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747871
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] .== 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvcgkcll7.jl:107\nin expression starting at\
    \ /tmp/tmpvcgkcll7.jl:107\n"
  stdout: ''
  timestamp: 1659747874
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr .= arr\n    \n   \
    \ ones_sorted = sort(ones)\n    \n    sorted_arr .= ones_sorted\n    \n    sorted_arr\
    \ .= sort(sorted_arr)\n    \n    return sorted_arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpvjq4xxhm.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpvjq4xxhm.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpvjq4xxhm.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpvjq4xxhm.jl:29 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpvjq4xxhm.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpvjq4xxhm.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpvjq4xxhm.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpvjq4xxhm.jl:30 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747877
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n \
    \   ones = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\n    \n \
    \   ones = ones[ones > 0]\n    \n    ones = ones[order(ones)]\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqm8_f5or.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqm8_f5or.jl:1\n\
    in expression starting at /tmp/tmpqm8_f5or.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n        ones[i]\
    \ = sum(arr[i]==1)\n    end\n    \n    ones = ones[ones!=0]\n    \n    ones =\
    \ ones[order(ones)]\n    \n    ones = ones[ones!=0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones!=0]\n    \n    ones = ones[order(ones)]\n    \n  \
    \  ones = ones[ones!=0]\n    \n    ones = ones[order(ones)]\n    \n    ones =\
    \ ones[ones!=0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones!=0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones!=0]\n    \n  \
    \  ones = ones[order(ones)]\n    \n    ones = ones[ones!=0]\n    \n    ones =\
    \ ones[order(ones)]\n    \n    ones = ones[ones!=0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones!=0]\n    \n    ones = ones[order(ones)]\n    \n  \
    \  ones = ones[ones!=0]\n    \n    ones = ones[order(ones)]\n    \n    ones =\
    \ ones[ones!=0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones!=0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones!=0]\n    \n  \
    \  ones = ones[order(ones)]\n    \n    ones = ones[ones!=0]\n    \n    ones =\
    \ ones[order(ones)]\n    \n    ones = ones[ones!=0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones!=0]\n    \n    ones = ones[order(ones)]\n    \n  \
    \  ones = ones[ones!=0]\n    \n    ones = ones[order(ones)]\n    \n    ones =\
    \ ones[ones!=0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones!=0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones!=0]\n    \n  \
    \  ones = ones[order(ones)]\n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfk87btxu.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfk87btxu.jl:1\n\
    in expression starting at /tmp/tmpfk87btxu.jl:1\n"
  stdout: ''
  timestamp: 1659747875
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3rbevsz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3rbevsz.jl:1\n\
    in expression starting at /tmp/tmpp3rbevsz.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpninm5ekp.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpninm5ekp.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpninm5ekp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpninm5ekp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpninm5ekp.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpninm5ekp.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747870
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    return ones\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3i6419u_.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp3i6419u_.jl:27\n  Expression: candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n   Evaluated: [0, 0, 0, 0, 1] == [1, 2, 4,\
    \ 3, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3i6419u_.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3i6419u_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3i6419u_.jl:28\n  Expression: candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n   Evaluated: [0, 0, 0, 0, 0] == [-4, -2, -6, -5, -3]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3i6419u_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3i6419u_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3i6419u_.jl:29\n  Expression: candidate([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 4, 3]\n   Evaluated: [0, 0, 0, 0, 1] == [0, 1, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3i6419u_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3i6419u_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3i6419u_.jl:31\n  Expression: candidate([2, 5, 77, 4, 5, 3,\
    \ 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n   Evaluated: [0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0] == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3i6419u_.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n  "
  timestamp: 1659747877
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    ones_sorted = sort(ones)\n    \n    ones_sorted_dec = zeros(Int64, length(ones_sorted))\n\
    \    for i = 1:length(ones_sorted)\n        ones_sorted_dec[i] = ones_sorted[i]\
    \ * 10^length(ones_sorted[i] - 1)\n    end\n    \n    ones_sorted_dec = sort(ones_sorted_dec)\n\
    \    \n    return ones_sorted_dec\nend\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1, 3, 10, 2, 5, 7, 4, 6, 8, 9]\nsort_array(arr)\n</cell>\n<text>\nPart III.\
    \ Sort array in descending order\nIn this Kata, you have to sort an array of non-negative\
    \ integers according to\nnumber of ones in their binary representation in descending\
    \ order.\nFor similar number of ones, sort based on decimal value.\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61l92vxk.jl:24\nin expression starting at\
    \ /tmp/tmp61l92vxk.jl:24\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    sorted_arr .= sort(ones)\n\
    \    \n    sorted_arr .= sort(arr)\n    \n    return sorted_arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp4ie7imdb.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp4ie7imdb.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmp4ie7imdb.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp4ie7imdb.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp4ie7imdb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4ie7imdb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmp4ie7imdb.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp4ie7imdb.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747878
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 0] = 0\n    ones = ones ./ sum(ones)\n    ones = sort(ones)\n    ones =\
    \ ones[2:end]\n    ones = ones .* 10\n    ones = ones .+ ones[1]\n    ones = ones\
    \ ./ 10\n    ones = ones[2:end]\n    ones = ones .+ ones[1]\n    ones = ones ./\
    \ 10\n    ones = ones[2:end]\n    ones = ones .+ ones[1]\n    ones = ones ./ 10\n\
    \    ones = ones[2:end]\n    ones = ones .+ ones[1]\n    ones = ones ./ 10\n \
    \   ones = ones[2:end]\n    ones = ones .+ ones[1]\n    ones = ones ./ 10\n  \
    \  ones = ones[2:end]\n    ones = ones .+ ones[1]\n    ones = ones ./ 10\n   \
    \ ones = ones[2:end]\n    ones = ones .+ ones[1]\n    ones = ones ./ 10\n    ones\
    \ = ones[2:end]\n    ones = ones .+ ones[1]\n    ones = ones ./ 10\n    ones =\
    \ ones[2:end]\n    ones = ones .+ ones[1]\n    ones = ones ./ 10\n    ones = ones[2:end]\n\
    \    ones = ones .+ ones[1]\n    ones = ones ./ 10\n    ones = ones[2:end]\n \
    \   ones = ones .+ ones[1]\n    ones = ones ./ 10\n    ones = ones[2:end]\n  \
    \  ones = ones .+ ones[1]\n    ones = ones ./ 10\n    ones = ones[2:end]\n   \
    \ ones = ones .+ ones[1]\n    ones = ones ./ 10\n    ones = ones[2:end]\n    ones\
    \ = ones .+ ones[1]\n    ones = ones ./ 10\n    ones = ones[2:end]\n    ones =\
    \ ones .+ ones[1]\n    ones = ones ./ 10\n    ones = ones[2:end]\n    ones = ones\
    \ .+ ones[1]\n    ones = ones ./ 10\n    ones = ones[2:end]\n    ones = ones .+\
    \ ones[1]\n    ones = ones ./ 10\n    ones = ones[2:end]\n    ones = ones .+ ones[1]\n\
    \    ones = ones ./ 10\n    ones = ones[2:end]\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppyuk3s7x.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppyuk3s7x.jl:1\n\
    in expression starting at /tmp/tmppyuk3s7x.jl:1\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxux6lqhm.jl:1\nin expression starting at /tmp/tmpxux6lqhm.jl:1\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1, 3, 7, 9, 11, 13, 15]\n</cell>\n\
    <code language=julia-1.5>\nsort_array(arr)\n</cell>\n<text>\nPart 2\nImplement\
    \ a function that sorts array of non-negative integers according to their binary\
    \ representation in descending order.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpri9nn9nj.jl:21\nin expression starting at\
    \ /tmp/tmpri9nn9nj.jl:21\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(arr)]\n    \n    ones = ones[\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2__e4suk.jl:1\nin expression starting at /tmp/tmp2__e4suk.jl:1\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzx3yiske.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzx3yiske.jl:1\n\
    in expression starting at /tmp/tmpzx3yiske.jl:1\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoo7fwygi.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoo7fwygi.jl:1\n\
    in expression starting at /tmp/tmpoo7fwygi.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6fqcbp_a.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6fqcbp_a.jl:1\n\
    in expression starting at /tmp/tmp6fqcbp_a.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp4iff_p4g.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp4iff_p4g.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmp4iff_p4g.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4iff_p4g.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4iff_p4g.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp4iff_p4g.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmp4iff_p4g.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4iff_p4g.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4iff_p4g.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp4iff_p4g.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp4iff_p4g.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4iff_p4g.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747878
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 0] = 0\n    ones = ones ./ sum(ones)\n    ones = sort(ones)\n    ones =\
    \ ones[2:end]\n    ones = ones .* 10\n    ones = sort(ones)\n    ones = ones[2:end]\n\
    \    ones = ones .* 100\n    ones = sort(ones)\n    ones = ones[2:end]\n    ones\
    \ = ones .* 1000\n    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones\
    \ .* 10000\n    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .*\
    \ 100000\n    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 1000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 100000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 1000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 100000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 1000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 100000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 1000000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10000000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 100000000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 1000000000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    ones = ones .* 10000000000000000000\n\
    \    ones = sort(ones)\n    ones = ones[2:end]\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv39elrbp.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv39elrbp.jl:1\n\
    in expression starting at /tmp/tmpv39elrbp.jl:1\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    ones_sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = ones_sorted[i]\n   \
    \ end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpo_g58bey.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpo_g58bey.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpo_g58bey.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpo_g58bey.jl:28 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpo_g58bey.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpo_g58bey.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpo_g58bey.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpo_g58bey.jl:29 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6fqcbp_a.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6fqcbp_a.jl:1\n\
    in expression starting at /tmp/tmp6fqcbp_a.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 0] = 0\n    ones[ones == 0] = -1\n    ones[ones == 1] = 1\n    ones = ones[ones\
    \ != 0]\n    ones = ones[ones != -1]\n    ones = ones[ones != 1]\n    ones = ones[ones\
    \ != -2]\n    ones = ones[ones != -3]\n    ones = ones[ones != -4]\n    ones =\
    \ ones[ones != -5]\n    ones = ones[ones != -6]\n    ones = ones[ones != -7]\n\
    \    ones = ones[ones != -8]\n    ones = ones[ones != -9]\n    ones = ones[ones\
    \ != -10]\n    ones = ones[ones != -11]\n    ones = ones[ones != -12]\n    ones\
    \ = ones[ones != -13]\n    ones = ones[ones != -14]\n    ones = ones[ones != -15]\n\
    \    ones = ones[ones != -16]\n    ones = ones[ones != -17]\n    ones = ones[ones\
    \ != -18]\n    ones = ones[ones != -19]\n    ones = ones[ones != -20]\n    ones\
    \ = ones[ones != -21]\n    ones = ones[ones != -22]\n    ones = ones[ones != -23]\n\
    \    ones = ones[ones != -24]\n    ones = ones[ones != -25]\n    ones = ones[ones\
    \ != -26]\n    ones = ones[ones != -27]\n    ones = ones[ones != -28]\n    ones\
    \ = ones[ones != -29]\n    ones = ones[ones != -30]\n    ones = ones[ones != -31]\n\
    \    ones = ones[ones != -32]\n    ones = ones[ones != -33]\n    ones = ones[ones\
    \ != -34]\n    ones = ones[ones != -35]\n    ones = ones[ones != -36]\n    ones\
    \ = ones[ones != -37]\n    ones = ones[ones != -38]\n    ones = ones[ones != -39]\n\
    \    ones = ones[ones != -40]\n    ones = ones[ones != -41]\n    ones = ones[ones\
    \ != -42]\n    ones = ones[ones != -43]\n    ones = ones[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4b9iig6o.jl:1\nin expression starting at /tmp/tmp4b9iig6o.jl:1\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphk_n_u4o.jl:24\nin expression starting at\
    \ /tmp/tmphk_n_u4o.jl:24\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        sorted_arr[i] = arr[findall(ones\
    \ == i)[1]]\n    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpy6k67mst.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpy6k67mst.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpy6k67mst.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy6k67mst.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy6k67mst.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy6k67mst.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpy6k67mst.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy6k67mst.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy6k67mst.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy6k67mst.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy6k67mst.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy6k67mst.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747878
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1]\n</cell>\n<code language=julia-1.5>\n\
    sort_array(arr)\n</cell>\n<text>\nPart 2\nImplement a function that counts how\
    \ many times a given number appears in an array.\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyc1s846e.jl:24\nin expression starting at\
    \ /tmp/tmpyc1s846e.jl:24\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[end-1:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[end-1:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[end-1:end]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[end-1:end]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[end-1:end]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[end-1:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[end-1:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[end-1:end]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[end-1:end]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[end-1:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[end-1:end]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[end-1:end]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[end-1:end]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[end-1:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[end-1:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[end-1:end]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[end-1:end]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[end-1:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[end-1:end]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[end-1:end]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[end-1:end]\n    \n    ones = ones[ones != 0]\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqw0y82y7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqw0y82y7.jl:1\n\
    in expression starting at /tmp/tmpqw0y82y7.jl:1\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_ones = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_ones[i] = ones[i]\n\
    \    end\n    \n    sorted_ones = sort(sorted_ones)\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[sorted_ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, \n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph757aqrl.jl:32\nin expression starting at\
    \ /tmp/tmph757aqrl.jl:32\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppwyglobo.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppwyglobo.jl:1\n\
    in expression starting at /tmp/tmppwyglobo.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5_8g5ppd.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5_8g5ppd.jl:1\n\
    in expression starting at /tmp/tmp5_8g5ppd.jl:1\n"
  stdout: ''
  timestamp: 1659747872
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    one\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzqgxnmk7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzqgxnmk7.jl:1\n\
    in expression starting at /tmp/tmpzqgxnmk7.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv7sasf00.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv7sasf00.jl:1\n\
    in expression starting at /tmp/tmpv7sasf00.jl:1\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnn6rbma_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnn6rbma_.jl:1\n\
    in expression starting at /tmp/tmpnn6rbma_.jl:1\n"
  stdout: ''
  timestamp: 1659747877
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    sorted_arr .= 0\n    \n\
    \    for i = 1:length(arr)\n        sorted_arr .= sorted_arr .+ ones[i]\n    end\n\
    \    \n    sorted_arr .= sort(sorted_arr)\n    \n    return sorted_arr\nend\n\
    </cell>\n<code language=julia-1.5>\n@test sort_array([1, 0, 1, 0]) == [0, 0, 1,\
    \ 1]\n@test sort_array([1, 0, 1, 1]) == [0, 0, 1, 0]\n@test sort_array([1, 1,\
    \ 0, 0]) == [0, 0, 1, 0]\n@test sort_array([1, 1, 0, 1]) == [0, 0, 1, 0]\n@test\
    \ sort_array([1, 1, 1, 0]) == [0, 0, 1, 0]\n@test sort_array([1, 1, 1, 1]) ==\
    \ [0, 0, 1, 0]\n</cell>\n<text>\nPart III. Sort by number of ones\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0cx_vfd.jl:25\nin expression starting at\
    \ /tmp/tmpw0cx_vfd.jl:25\n"
  stdout: ''
  timestamp: 1659747877
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n  \
    \      ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones_sorted = sort(ones)\n\
    \    \n    decimals = zeros(Int64, length(ones_sorted))\n    for i = 1:length(ones_sorted)\n\
    \        decimals[i] = ones_sorted[i] * 10^floor(log10(ones_sorted[i]))\n    end\n\
    \    \n    decimal_sorted = sort(decimals)\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    for i = 1:length(arr)\n        sorted_arr[i] = decimal_sorted[ones_sorted[i]]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,0,1,0,1,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4fuvd16j.jl:31\nin expression starting at\
    \ /tmp/tmp4fuvd16j.jl:31\n"
  stdout: ''
  timestamp: 1659747877
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    one\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzqgxnmk7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzqgxnmk7.jl:1\n\
    in expression starting at /tmp/tmpzqgxnmk7.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted = zeros(Int64, length(arr))\n    sorted[ones .== 1] = arr[ones .==\
    \ 1]\n    \n    sorted[ones .!= 1] .= sort(arr[ones .!= 1])\n    \n    return\
    \ sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpz039kyj1.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpz039kyj1.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpz039kyj1.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpz039kyj1.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpz039kyj1.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpz039kyj1.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpz039kyj1.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpz039kyj1.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747879
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpm6uyb4j6.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpm6uyb4j6.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm6uyb4j6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm6uyb4j6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm6uyb4j6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm6uyb4j6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747873
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones =\
    \ ones[ones < length(ones)]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones < length(ones)]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones < length(ones)]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[ones > 0]\n    \n    ones = ones[ones < length(ones)]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones < length(ones)]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[ones > 0]\n    \n    ones = ones[ones < length(ones)]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones < length(ones)]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[ones > 0]\n    \n    ones = ones[ones < length(ones)]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones < length(ones)]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = ones[ones < length(ones)]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[ones > 0]\n    \n    ones = ones[ones < length(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp728r3q82.jl:103\nin expression starting at\
    \ /tmp/tmp728r3q82.jl:103\n"
  stdout: ''
  timestamp: 1659747878
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpm6uyb4j6.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpm6uyb4j6.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm6uyb4j6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm6uyb4j6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm6uyb4j6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm6uyb4j6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpm6uyb4j6.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6uyb4j6.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747873
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[1:end-1]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[1:end-1]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[1:end-1]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[1:end-1]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[1:end-1]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[1:end-1]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[1:end-1]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[1:end-1]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[1:end-1]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[1:end-1]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[1:end-1]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmzz_kem5.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmzz_kem5.jl:1\n\
    in expression starting at /tmp/tmpmzz_kem5.jl:1\n"
  stdout: ''
  timestamp: 1659747878
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[ones .== 1] = arr[ones\
    \ .== 1]\n    \n    sorted_arr .= sort(arr)\n    \n    return sorted_arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpvhupwttb.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpvhupwttb.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpvhupwttb.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpvhupwttb.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpvhupwttb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpvhupwttb.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpvhupwttb.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpvhupwttb.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747880
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    one\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzqgxnmk7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzqgxnmk7.jl:1\n\
    in expression starting at /tmp/tmpzqgxnmk7.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    ones_sorted = sort(ones)\n    \n    decimals = zeros(Int64, length(ones_sorted))\n\
    \    decimals[ones_sorted .== 1] = 1\n    \n    decimals_sorted = sort(decimals)\n\
    \    \n    \n    return ones_sorted .+ decimals_sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpocsdjx2v.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpocsdjx2v.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpocsdjx2v.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpocsdjx2v.jl:28 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpocsdjx2v.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpocsdjx2v.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpocsdjx2v.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpocsdjx2v.jl:29 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747880
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4jpt4jcx.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4jpt4jcx.jl:1\n\
    in expression starting at /tmp/tmp4jpt4jcx.jl:1\n"
  stdout: ''
  timestamp: 1659747874
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    ones[arr\
    \ .== 0] = 0\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for\
    \ i = 1:length(arr)\n        sorted_arr[i] = sum(ones[arr .== i])\n    end\n \
    \   \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpaqq9voj0.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpaqq9voj0.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpaqq9voj0.jl:10\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpaqq9voj0.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpaqq9voj0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpaqq9voj0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpaqq9voj0.jl:10\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpaqq9voj0.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747880
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1, 3, 7, 9, 10, 2, 5, 6, 8, 4,\
    \ 1]\n</cell>\n<code language=julia-1.5>\nsort_array(arr)\n</cell>\n<text>\nPart\
    \ 2: Binary Search Algorithm\nIn this Kata, you have to implement binary search\
    \ algorithm to find if an element exists in an array. \nThe algorithm should return\
    \ true if it finds the element and false if it doesn't.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    \t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu2fuxxkx.jl:21\nin expression starting at\
    \ /tmp/tmpu2fuxxkx.jl:21\n"
  stdout: ''
  timestamp: 1659747878
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv7sasf00.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv7sasf00.jl:1\n\
    in expression starting at /tmp/tmpv7sasf00.jl:1\n"
  stdout: ''
  timestamp: 1659747876
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    ones_sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(ones_sorted)\n        sorted_arr[ones_sorted == i]\
    \ = i\n    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppyl09sxs.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmppyl09sxs.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmppyl09sxs.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmppyl09sxs.jl:28 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmppyl09sxs.jl:27\ntest set:\
    \ Error During Test at /tmp/tmppyl09sxs.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmppyl09sxs.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmppyl09sxs.jl:29 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747880
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted = zeros(Int64, length(arr))\n    sorted[arr .== 1] = 1\n    sorted[ones\
    \ .== 1] .= 2\n    \n    sorted[ones .== 2] .= 1\n    sorted[ones .== 3] .= 2\n\
    \    \n    sorted[ones .== 4] .= 1\n    sorted[ones .== 5] .= 2\n    \n    sorted[ones\
    \ .== 6] .= 1\n    sorted[ones .== 7] .= 2\n    \n    sorted[ones .== 8] .= 1\n\
    \    sorted[ones .== 9] .= 2\n    \n    sorted[ones .== 10] .= 1\n    sorted[ones\
    \ .== 11] .= 2\n    \n    sorted[ones .== 12] .= 1\n    sorted[ones .== 13] .=\
    \ 2\n    \n    sorted[ones .== 14] .= 1\n    sorted[ones .== 15] .= 2\n    \n\
    \    sorted[ones .== 16] .= 1\n    sorted[ones .== 17] .= 2\n    \n    sorted[ones\
    \ .== 18] .= 1\n    sorted[ones .== 19] .= 2\n    \n    sorted[ones .== 20] .=\
    \ 1\n    sorted[ones .== 21] .= 2\n    \n    sorted[ones .== 22] .= 1\n    sorted[ones\
    \ .== 23] .= 2\n    \n    sorted[ones .== 24] .= 1\n    sorted[ones .== 25] .=\
    \ 2\n    \n    sorted[ones .== 26] .= 1\n    sorted[ones .== 27] .= 2\n    \n\
    \    sorted[ones .== 28] .= 1\n    sorted[ones .== 29] .= 2\n    \n    sorted[ones\
    \ .== 30] .= 1\n    sorted[ones .== 31] .= 2\n    \n    sorted[ones .== 32] .=\
    \ 1\n    sorted[ones .== 33] .= 2\n    \n    sorted[ones .== 34] .= 1\n    sorted[ones\
    \ .== 35] .= 2\n    \n    sorted[ones .== 36] .= 1\n    sorted[ones .\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"ones .\"\
    \ at /tmp/tmpclwkiuwy.jl:69\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpclwkiuwy.jl:69\n\
    in expression starting at /tmp/tmpclwkiuwy.jl:69\n"
  stdout: ''
  timestamp: 1659747878
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[arr .== 1] = sort(ones[arr\
    \ .== 1])\n    \n    sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpjd9q2a29.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpjd9q2a29.jl:23\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpjd9q2a29.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpjd9q2a29.jl:23 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpjd9q2a29.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpjd9q2a29.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmpjd9q2a29.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpjd9q2a29.jl:24 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747880
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n\
    \    sorted_arr = zeros(Int64, length(arr))\n    \n    sorted_arr .= sort(ones)\n\
    \    \n    sorted_arr .= sort(arr)\n    \n    return sorted_arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp4ie7imdb.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp4ie7imdb.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmp4ie7imdb.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp4ie7imdb.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp4ie7imdb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4ie7imdb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ sort_array(arr::Vector{Int64})\n     @ Main /tmp/tmp4ie7imdb.jl:11\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp4ie7imdb.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1659747878
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_ones = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_ones[i] = ones[i]\n\
    \    end\n    \n    sorted_ones = sort(sorted_ones)\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[sorted_ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5,\
    \ 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12,\
    \ 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpgud4er14.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpgud4er14.jl:37\n  Test threw exception\n\
    \  Expression: candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpgud4er14.jl:27\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgud4er14.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgud4er14.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpgud4er14.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n    \
    \ @ Main /tmp/tmpgud4er14.jl:27\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgud4er14.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgud4er14.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpgud4er14.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] sort_array(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgud4er14.jl:27\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgud4er14.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/t"
  timestamp: 1659747880
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6nlo1evc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nlo1evc.jl:1\n\
    in expression starting at /tmp/tmp6nlo1evc.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] .== 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones .!= 0]\n    \n    ones\
    \ = ones[ones .!= length(ones)]\n    \n    ones = ones[ones .!= 1]\n    \n   \
    \ ones = ones[ones .!= length(ones)]\n    \n    ones = ones[ones .!= length(ones)]\n\
    \    \n    ones = ones[ones .!= length(ones)]\n    \n    ones = ones[ones .!=\
    \ length(ones)]\n    \n    ones = ones[ones .!= length(ones)]\n    \n    ones\
    \ = ones[ones .!= length(ones)]\n    \n    ones = ones[ones .!= length(ones)]\n\
    \    \n    ones = ones[ones .!= length(ones)]\n    \n    ones = ones[ones .!=\
    \ length(ones)]\n    \n    ones = ones[ones .!= length(ones)]\n    \n    ones\
    \ = ones[ones .!= length(ones)]\n    \n    ones = ones[ones .!= length(ones)]\n\
    \    \n    ones = ones[ones .!= length(ones)]\n    \n    ones = ones[ones .!=\
    \ length(ones)]\n    \n    ones = ones[ones .!= length(ones)]\n    \n    ones\
    \ = ones[ones .!= length(ones)]\n    \n    ones = ones[ones .!= length(ones)]\n\
    \    \n    ones = ones[ones .!= length(ones)]\n    \n    ones = ones[ones .!=\
    \ length(ones)]\n    \n    ones = ones[ones .!= length(ones)]\n    \n    ones\
    \ = ones[ones .!= length(ones)]\n    \n    ones = ones[ones .!= length(ones)]\n\
    \    \n    ones = ones[ones .!= length(ones)]\n    \n    ones = ones[ones .!=\
    \ length(ones)]\n    \n    ones = ones[ones .!= length(ones)]\n    \n    ones\
    \ = ones[ones .!= length(ones)]\n    \n    ones = ones[ones .!= length(ones)]\n\
    \    \n    ones = ones[ones .!= length(ones)]\n    \n    ones = ones[ones .!=\
    \ length(ones)]\n    \n    ones = ones[ones .!= length(ones)]\n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2w7gvzo9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2w7gvzo9.jl:1\n\
    in expression starting at /tmp/tmp2w7gvzo9.jl:1\n"
  stdout: ''
  timestamp: 1659747878
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzgcg1ywq.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzgcg1ywq.jl:1\n\
    in expression starting at /tmp/tmpzgcg1ywq.jl:1\n"
  stdout: ''
  timestamp: 1659747869
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones != 0]\n    \n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoo7fwygi.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoo7fwygi.jl:1\n\
    in expression starting at /tmp/tmpoo7fwygi.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6nlo1evc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nlo1evc.jl:1\n\
    in expression starting at /tmp/tmp6nlo1evc.jl:1\n"
  stdout: ''
  timestamp: 1659747867
- exit_code: 1
  program: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[ones != 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones\
    \ != \nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8,\
    \ 16, 32])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkzu8y53y.jl:1\nin expression starting at /tmp/tmpkzu8y53y.jl:1\n"
  stdout: ''
  timestamp: 1659747878
