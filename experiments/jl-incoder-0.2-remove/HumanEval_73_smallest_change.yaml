name: HumanEval_73_smallest_change
language: jl
prompt: "\"\"\"\n    Given an array arr of integers, find the minimum number of elements\
  \ that\n    need to be changed to make the array palindromic. A palindromic array\
  \ is an array that\n    is read the same backwards and forwards. In one change,\
  \ you can change one element to any other element.\n\n    For example:\n       \
  \         \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
  \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t\
  @test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1,\
  \ 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
  \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
completions: ["    smallest_change = 0\n    \n    for i = length(arr):-1:1\n     \
    \   if arr[i] != reverse(arr[i])\n            smallest_change = i\n          \
    \  break\n        end\n    end\n    \n    return smallest_change\nend\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that takes an array of integers and\
    \ returns the number of palindromic subarrays within that array. For example,\
    \ if the input was [1,2,3,4,5,6,7,8,9,10], the output should be 3.", "    \n \
    \   smallest_change = 0\n    \n    for i = length(arr)-1 downto 1 \n        smallest_change\
    \ = smallest_change + 1 if arr[i] != reverse(arr[i]) \n    end\n    \n    return\
    \ smallest_change\nend\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ the number of elements in the array that are evenly divisible by 3.", "    \n\
    \    smallest_change = Inf \n    \n    for i = length(arr) downto 1 \n       \
    \ \n        if arr[i] > arr[i-1] \n            \n            smallest_change =\
    \ i \n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the number of elements in the array that are less than the previous\
    \ element in the array. For example, if the array is [1,2,3,4,5,6,7,8,9,10], the\
    \ function should return 2 because there are two elements that are less than the\
    \ previous element in the array.", "    smallest_change = 0\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-length(arr))\n    for i = 1:length(arr)\n\
    \        if arr[i] != reverse(arr[i])\n            smallest_change = minimum(smallest_change,\
    \ length(arr)-i)\n        end\n    end\n    return smallest_change\nend\nsmallest_change([1,2,3])\n\
    smallest_change([1,2,3,4,5])\nsmallest_change([1,2,3,4,5,6])\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,",
  "    \n    smallest_change = 0\n    \n    for i = length(arr):-1:1\n        if arr[i]\
    \ > arr[i+1]\n            smallest_change = smallest_change + 1\n        elseif\
    \ arr[i] < arr[i+1]\n            smallest_change = smallest_change - 1\n     \
    \   end\n    end\n    \n    return smallest_change\nend", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    smallest_change = Inf \n    \n    for i = length(arr)-1\
    \ downto 1 \n        \n        if arr[i] != reverse(arr[i]) \n            \n \
    \           smallest_change = i \n            break \n        end \n    end \n\
    \    \n    return smallest_change \nend \n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmalle", "    smallest_change = Inf \n   \
    \ for i = length(arr) downto 1 \n        if arr[i] != reverse(arr[i]) \n     \
    \       smallest_change = i \n            break \n        end \n    end \n   \
    \ return smallest_change \nend ", "    smallest_change = 0\n    \n    for i =\
    \ length(arr):-1:1\n        if arr[i] > arr[i+1]\n            smallest_change\
    \ = smallest_change + 1\n        elseif arr[i] < arr[i+1]\n            smallest_change\
    \ = smallest_change - 1\n        end\n    end\n    return smallest_change\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = Inf \n    \n    for i = length(arr)-1 downto 1 \n        \n        if arr[i]\
    \ > arr[i-1] \n            \n            smallest_change = min( smallest_change,\
    \ arr[i] - arr[i-1] ) \n            \n        else \n            \n          \
    \  smallest_change = min( smallest_change, arr[i-1] - arr[i] ) \n            \n\
    \        end\n        \n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmalle", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 to 1 \n        smallest_change = smallest_change\
    \ + 1 if arr[i] != arr[i+1] \n    end \n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmalle", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    smallest_change = 0\n    \n    for i =\
    \ length(arr) downto 1 do\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = i\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>", "    largest = maximum(arr)\n    smallest\
    \ = minimum(arr)\n    \n    if largest == smallest\n        return largest\n \
    \   end\n    \n    change = largest - smallest\n    \n    if change == 0\n   \
    \     return largest\n    end\n    \n    change = change / 2\n    \n    if change\
    \ == 0\n        return largest\n    end\n    \n    change = change / 2\n    \n\
    \    if change == 0\n        return largest\n    end\n    \n    change = change\
    \ / 2\n    \n    if change == 0\n        return largest\n    end\n    \n    change\
    \ = change / 2\n    \n    if change == 0\n        return largest\n    end\n  \
    \  \n    change = change / 2\n    \n    if change == 0\n        return largest\n\
    \    end\n    \n    change = change / 2\n    \n    if change == 0\n        return\
    \ largest\n    end\n    \n    change = change / 2\n    \n    if change == 0\n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0\n        return largest\n    end\n    \n    change = change / 2\n\
    \    \n    if change == 0\n        return largest\n    end\n    \n    change =\
    \ change / 2\n    \n    if change == 0\n        return largest\n    end\n    \n\
    \    change = change / 2\n    \n    if change == 0\n        return largest\n \
    \   end\n    \n    change = change / 2\n    \n    if change == 0\n        return\
    \ largest\n    end\n    \n    change = change / 2\n    \n    if change == 0\n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0\n        return largest\n    end\n    \n    change = change / 2\n\
    \    \n    if change == 0\n        return largest\n    end\n    \n    change =\
    \ change / 2\n    \n    if change == 0\n        return largest\n    end\n    \n\
    \    change = change / 2\n    \n    if change == 0\n        return largest\n \
    \   end\n    \n    change = change / 2\n    \n    if change == 0\n        return\
    \ largest\n    end\n    \n    change = change / 2\n    \n    if change == 0\n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0\n        return largest\n    end\n    \n    change = change / 2\n\
    \    \n    if change == 0\n        return largest\n    end", "    \n    minimum\
    \ = Int.Max\n    \n    for i in 1:length(arr)\n        if arr[i] < minimum\n \
    \           minimum = arr[i]\n        end\n    end\n    \n    return minimum\n\
    end", "    smallest_change = 0\n    smallest_change = smallest_change + length(arr)\n\
    \    smallest_change = smallest_change + length(arr) / 2\n    smallest_change\
    \ = smallest_change + length(arr) / 2\n    smallest_change = smallest_change +\
    \ length(arr) / 2\n    smallest_change = smallest_change + length(arr) / 2\n \
    \   smallest_change = smallest_change + length(arr) / 2\n    smallest_change =\
    \ smallest_change + length(arr) / 2\n    smallest_change = smallest_change + length(arr)\
    \ / 2\n    smallest_change = smallest_change + length(arr) / 2\n    smallest_change\
    \ = smallest_change + length(arr) / 2\n    smallest_change = smallest_change +\
    \ length(arr) / 2\n    smallest_change = smallest_change + length(arr) / 2\n \
    \   smallest_change = smallest_change + length(arr) / 2\n    smallest_change =\
    \ smallest_change + length(arr) / 2\n    smallest_change = smallest_change + length(arr)\
    \ / 2\n    smallest_change = smallest_change + length(arr) / 2\n    smallest_change\
    \ = smallest_change + length(arr) / 2\n    smallest_change = smallest_change +\
    \ length(arr) / 2\n    smallest_change = smallest_change + length(arr) / 2\n \
    \   smallest_change = smallest_change + length(arr) / 2\n    smallest_change =\
    \ smallest_change + length(arr) / 2\n    smallest_change = smallest_change + length(arr)\
    \ / 2\n    smallest_change = smallest_change + length(arr) / 2\n    smallest_change\
    \ = smallest_change + length(arr) / 2\n    smallest_change = smallest_change +\
    \ length(arr) / 2\n    smallest_change = smallest_change + length(arr) / 2\n \
    \   smallest_change = smallest_change + length(arr) / 2\n    smallest_change =\
    \ smallest_change + length(arr) / 2\n    smallest_change = smallest_change + length(arr)\
    \ / 2\n    smallest_change = smallest_change + length(arr) / 2\n    smallest_change\
    \ = smallest_change + length(arr) / 2\n    smallest_change = smallest_change +\
    \ length(arr) / 2\n    smallest_change = smallest_change + length(arr) / 2\n \
    \   smallest_change = smallest_change + length(arr) / 2\n    smallest_change =\
    \ smallest_change + length(arr) / 2\n    smallest_change = smallest_change + length(arr)\
    \ / 2\n    smallest_change = smallest_change + length(arr) / 2\n    smallest_change\
    \ = smallest_change + length(arr) / 2\n    smallest_change = smallest_change +\
    \ length(arr) / 2\n", "    \n    smallest_change = 0\n    \n    for i = length(arr):-1:1\n\
    \        smallest_change = smallest_change + arr[i]\n    end\n    \n    return\
    \ smallest_change\nend\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\n\
    Problem 8\nWrite a function that returns true if the given string is a palindrome\
    \ (that is, a word or phrase that is the same forwards and backwards).", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr):-1:1\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=", "    smallest_change = Inf\
    \ \n    for x in arr \n        if x == reverse(arr) \n            smallest_change\
    \ = min(smallest_change, x - 1) \n        else \n            smallest_change =\
    \ min(smallest_change, x - 1) \n        end \n    end \n    return smallest_change\
    \ \nend \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    change = largest\
    \ - smallest\n    \n    if change == 0 \n        return 0 \n    else \n      \
    \  return change \n    end\nend", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    smallest_change = Inf \n    \n    for i = length(arr)\
    \ - 2 to 1 \n        \n        if arr[i] > arr[i + 1] \n            \n       \
    \     smallest_change = i \n            break \n        end \n    end \n    \n\
    \    return smallest_change \nend ", "    \n    largest = maximum(arr)\n    smallest\
    \ = minimum(arr)\n    \n    change = largest - smallest\n    \n    if change ==\
    \ 0 \n        return 0 \n    else \n        return change \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns an array of all possible palindromic\
    \ permutations of an input array. For example, if the input array is [1,2,3],\
    \ the output should be [1,2,3,2,1,3,2,1,3].", "    smallest_change = 0\n    \n\
    \    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end", "    \n    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n \
    \   if largest == smallest\n        return largest\n    end\n    \n    change\
    \ = largest - smallest\n    \n    if change == 0\n        return largest\n   \
    \ end\n    \n    change = change / 2\n    \n    change = smallest * change\n \
    \   \n    return change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,5,6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4,5,6,7])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,",
  "    \n    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    largest\
    \ = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n  \
    \  largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10", " \
    \   \n    smallest_change = 0\n    \n    for i = length(arr) downto 1 \n     \
    \   smallest_change = smallest_change + 1 \n        \n        if arr[i] != reverse(arr[i])\
    \ \n            smallest_change = smallest_change - 1 \n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr):-1:1\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n",
  "    \n    smallest_change = Inf \n    \n    for i = length(arr) downto 1 \n   \
    \     \n        if arr[i] > arr[i-1] \n            \n            smallest_change\
    \ = i \n            \n            break \n            \n        end \n       \
    \ \n    end \n    \n    return smallest_change \nend ", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr)-1 downto 1 \n        smallest_change = smallest_change\
    \ + 1 if arr[i] != reverse(arr[i]) \n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given element appears in an array. For example, given [1,2,3,4,5,6,7,8,9,10],\
    \ the function should return 3 because 3 appears 3 times in the array.", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 \n        smallest_change = smallest_change\
    \ + 1 \n        if arr[i] != reverse(arr[i]) \n            smallest_change = smallest_change\
    \ - 1 \n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\nsmallest_change([1,2,3])\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes an array arr of integers and an integer k, and returns the number of ways\
    \ to choose k elements from arr in such a way that they form a palindrome.", " \
    \   \n    smallest_change = 0\n    \n    for i = length(arr)-1 downto 1 \n   \
    \     smallest_change = smallest_change + 1 \n        if arr[i] != reverse(arr[i])\
    \ \n            smallest_change = smallest_change - 1 \n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n</cell>\n\
    <text>\nProblem 7", "    smallest_change = 0\n    for i = length(arr) - 2 ; i\
    \ >= 0 ; i-- \n        smallest_change = smallest_change + arr[i]\n    end\n \
    \   return smallest_change\nend", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    smallest_change = Inf \n    \n    for i = length(arr)\
    \ - 1 downto 1 \n        smallest_change = min(smallest_change, arr[i] + arr[-i-1])\
    \ \n    end \n    \n    return smallest_change \nend ", "    \n    smallest_change\
    \ = Inf \n    \n    for i = length(arr) - 2 to 1 \n        \n        if arr[i]\
    \ > arr[i+1] \n            \n            smallest_change = i \n            break\
    \ \n            \n        end \n        \n    end \n    \n    return smallest_change\
    \ \nend ", "    smallest_change = Int64(0)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-1)\n    smallest_change = minimum(smallest_change, length(arr)-2)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-3)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-4)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-5)\n    smallest_change = minimum(smallest_change, length(arr)-6)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-7)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-8)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-9)\n    smallest_change = minimum(smallest_change, length(arr)-10)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-11)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-12)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-13)\n    smallest_change = minimum(smallest_change, length(arr)-14)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-15)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-16)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-17)\n    smallest_change = minimum(smallest_change, length(arr)-18)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-19)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-20)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-21)\n    smallest_change = minimum(smallest_change, length(arr)-22)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-23)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-24)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-25)\n    smallest_change = minimum(smallest_change, length(arr)-26)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-27)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-28)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-29)\n    smallest_change = minimum(smallest_change, length(arr)-30)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-31)\n    smallest_",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = Inf \n    \n    for i = length(arr)-1 downto 1 \n        smallest_change =\
    \ min(smallest_change, length(arr)-i)\n        \n        if arr[i] != reverse(arr[i])\
    \ \n            smallest_change = Inf \n            break\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,24",
  "    \n    smallest_change = 0\n    \n    for i = length(arr):-1:1\n        if arr[i]\
    \ != reverse(arr[i])\n            smallest_change = i\n        end\n    end\n\
    \    \n    return smallest_change\nend", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    largest = maximum(arr)\n    smallest = minimum(arr)\n\
    \    \n    if largest == smallest\n        return largest\n    end\n    \n   \
    \ change = largest - smallest\n    \n    if change == 0\n        return largest\n\
    \    end\n    \n    change = change / 2\n    \n    change = change + smallest\n\
    \    \n    return change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,",
  "    \n    minimum = Inf \n    \n    for x in arr \n        minimum = min(minimum,\
    \ x-1)\n    end\n    \n    return minimum\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,2",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = length(arr):-1:1\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,3,5])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4,3,5,6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = Inf \n    \n    for i = length(arr) downto 1 \n        \n        if arr[i]\
    \ != reverse(arr[i]) \n            \n            smallest_change = i \n      \
    \      \n            break \n            \n        end \n        \n    end \n\
    \    \n    return smallest_change \nend ", "    \n    smallest_change = 0\n  \
    \  \n    for i = length(arr) downto 1 \n        smallest_change = smallest_change\
    \ + 1 \n        if arr[i] != reverse(arr[i]) \n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    smallest_change = 0\n    \n    for\
    \ i = length(arr) - 2 to -1 \n        \n        if arr[i] > arr[i+1] \n      \
    \      \n            smallest_change = smallest_change + 1\n            \n   \
    \     else \n            \n            smallest_change = smallest_change + 1\n\
    \            \n        end\n        \n    end\n    \n    return smallest_change\n\
    end", "    smallest_change = Inf \n    for x in arr \n        if x == reverse(arr[x])\
    \ \n            smallest_change = min(smallest_change, x-1)\n        end\n   \
    \ end\n    return smallest_change\nend", "    smallest_change = Inf \n    for\
    \ x in arr \n        if x == reverse(arr) \n            smallest_change = min(smallest_change,\
    \ x - 1) \n        else \n            smallest_change = min(smallest_change, x\
    \ - 1) \n    end \n    return smallest_change \nend ", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    \n    if largest == smallest \n        return\
    \ largest\n    end\n    \n    change = largest - smallest\n    \n    if change\
    \ == 0 \n        return largest\n    end\n    \n    change = change / 2\n    \n\
    \    if change == 0 \n        return largest\n    end\n    \n    change = change\
    \ / 2\n    \n    if change == 0 \n        return largest\n    end\n    \n    change\
    \ = change / 2\n    \n    if change == 0 \n        return largest\n    end\n \
    \   \n    change = change / 2\n    \n    if change == 0 \n        return largest\n\
    \    end\n    \n    change = change / 2\n    \n    if change == 0 \n        return\
    \ largest\n    end\n    \n    change = change / 2\n    \n    if change == 0 \n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0 \n        return largest\n    end\n    \n    change = change / 2\n\
    \    \n    if change == 0 \n        return largest\n    end\n    \n    change\
    \ = change / 2\n    \n    if change == 0 \n        return largest\n    end\n \
    \   \n    change = change / 2\n    \n    if change == 0 \n        return largest\n\
    \    end\n    \n    change = change / 2\n    \n    if change == 0 \n        return\
    \ largest\n    end\n    \n    change = change / 2\n    \n    if change == 0 \n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0 \n        return largest\n    end\n    \n    change = change / 2\n\
    \    \n    if change == 0 \n        return largest\n    end\n    \n    change\
    \ = change / 2\n    \n    if change == 0 \n        return largest\n    end\n \
    \   \n    change = change / 2\n    \n    if change == 0 \n        return largest\n\
    \    end\n    \n    change = change / 2\n    \n    if change == 0 \n        return\
    \ largest\n    end\n    \n    change = change / 2\n    \n    if change == 0 \n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0 \n        return largest\n    end\n    \n    change = change / 2\n\
    \    \n    if change == 0 \n        return largest\n    end\n    \n    change\
    \ = change / 2\n    \n    if change == 0 \n        return largest\n    end\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    smallest_change\
    \ = Inf \n    for i = length(arr)-1 downto 1 \n        if arr[i] > arr[i+1] \n\
    \            smallest_change = i \n            break \n        end \n    end \n\
    \    return smallest_change \nend \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255])\n",
  "    \n    smallest_change = Inf \n    \n    for x in arr \n        if x == reverse(arr[x])\
    \ \n            smallest_change = min(smallest_change, x-1)\n        end\n   \
    \ end\n    \n    return smallest_change\nend", "    smallest_change = Inf \n \
    \   for i = length(arr) - 1 downto 1 \n        if arr[i] > arr[i+1] \n       \
    \     smallest_change = min(smallest_change, length(arr) - i) \n        else \n\
    \            smallest_change = min(smallest_change, length(arr) - i + 1) \n  \
    \      end \n    end \n    return smallest_change \nend \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,",
  "    \n    smallest_change = Inf \n    \n    for i = length(arr)-1 downto 1 \n \
    \       \n        if arr[i] > arr[i+1] \n            \n            smallest_change\
    \ = i \n            break \n            \n        else \n            \n      \
    \      smallest_change = Inf \n            \n        end\n        \n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </", "    smallest_change = Int64(0)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = minimum(smallest_change, length(arr)-i)\n     \
    \   end\n    end\n    return smallest_change\nend\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    smallest_change([1,2,3,4,5,6,", "    smallest_change = 0\n    for i = length(arr):-1:1\n\
    \        if arr[i] != reverse(arr[i])\n            smallest_change = i\n     \
    \   end\n    end\n    return smallest_change\nend\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    smallest_change", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    smallest_change = 0\n    \n    for i = length(arr) - 2 to 1 \n     \
    \   if arr[i] != arr[i+1] \n            smallest_change = smallest_change + 1\n\
    \        end\n    end\n    \n    return smallest_change\nend\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes an array of integers and\
    \ returns the number of elements in the array that are less than the average of\
    \ the array. For example, if the array is [1,2,3,4,5,6,7,8,9,10], the average\
    \ is 6. The function should return 3.", "    \n    smallest_change = 0\n    \n\
    \    for i = length(arr) - 2 to 1 \n        \n        if arr[i] > arr[i+1] \n\
    \            \n            smallest_change = smallest_change + 1\n           \
    \ \n        else \n            \n            smallest_change = smallest_change\
    \ + 1\n            \n            if smallest_change > length(arr) - 1 \n     \
    \           \n                smallest_change = length(arr) - 1\n            \n\
    \            end\n            \n        end\n        \n    end\n    \n    return\
    \ smallest_change\nend", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    smallest_change = 0\n    \n    for i = length(arr):-1:1\n        smallest_change\
    \ = smallest_change if arr[i] != reverse(arr[i])\n    end\n    \n    return smallest_change\n\
    end\nsmallest_change(arr)\n</cell>\n<text>\nProblem 3\nWrite a function that checks\
    \ if a number is palindrome or not. You may assume that the number passed is a\
    \ positive integer.", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 2 to 1 \n        \n        if arr[i] > arr[i+1] \n            smallest_change\
    \ = smallest_change + 1\n            arr[i] = arr[i+1]\n            arr[i+1] =\
    \ arr[i]\n        end\n    end\n    \n    return smallest_change\nend\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,24",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = Inf \n    \n    for x in arr \n        if x == reverse(arr[x]) \n        \
    \    smallest_change = min(smallest_change, x - 1) \n        else \n         \
    \   smallest_change = min(smallest_change, x - 1) \n        end \n    end \n \
    \   \n    return smallest_change\nend", "    largest = maximum(arr)\n    smallest\
    \ = minimum(arr)\n    \n    \n    if largest == smallest\n        return largest\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 to -1 \n        smallest_change = min(smallest_change,\
    \ length(arr) - i)\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <text>\nThe function smallest_change returns the minimum number of elements needed\
    \ to make the array palindromic. For example, smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ returns 4 because there are 4 elements that need to be changed to make the array\
    \ palindromic. smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13]) returns 3 because\
    \ there are 3 elements that need to be changed to make the array palindromic.\
    \ smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) returns 2 because there\
    \ are 2 elements that need to be changed to make the array palindromic. smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ returns 1 because there is 1 element that needs to be changed to make the array\
    \ palindromic.", "    smallest_change = 0\n    for i = length(arr) - 2 ; i >=\
    \ 0 ; i-- \n        if arr[i] != reverse(arr[i+1])\n            smallest_change\
    \ = i\n            break\n        end\n    end\n    return smallest_change\nend\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,",
  "    \n    smallest_change = 0\n    \n    for i = length(arr)-1 downto 1 \n    \
    \    smallest_change = smallest_change + 1 if arr[i] != reverse(arr[i]) \n   \
    \ end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,", " \
    \   \n    smallest_change = 0\n    \n    for i = length(arr):-1:1\n        if\
    \ arr[i] != reverse(arr[i])\n            smallest_change = i\n        end\n  \
    \  end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,3,5,6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4,3,5,6,7])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 to 1 \n      \
    \  \n        if arr[i] > arr[i+1] \n            \n            smallest_change\
    \ = smallest_change + 1\n            \n        else \n            \n         \
    \   smallest_change = smallest_change + 1\n            \n        end\n       \
    \ \n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,",
  "    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n  \
    \      if arr[i] != arr[i+1] \n            smallest_change = i\n            break\n\
    \        end\n    end\n    \n    return smallest_change\nend", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr)-1 downto 1 \n        smallest_change = smallest_change\
    \ + 1 \n        if arr[i] != reverse(arr[i]) \n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    smallest_change = Int64(0)\n    \n    for i = length(arr)-1\
    \ downto 1 \n        smallest_change = min(smallest_change, length(arr) - i) \n\
    \    end \n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of integers and returns the number of\
    \ elements in the array that are less than or equal to 10. \nFor example, if the\
    \ input array is [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], the function should return\
    \ 4.", "    \n    smallest_change = Inf \n    \n    for i = length(arr) - 1 downto\
    \ 1 \n        smallest_change = min(smallest_change, length(arr) - i) \n    end\
    \ \n    \n    return smallest_change \nend ", "    \n    smallest_change = Inf\
    \ \n    \n    for i = length(arr) downto 1 \n        smallest_change = min(smallest_change,\
    \ length(arr) - i) \n    end \n    \n    return smallest_change \nend ", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\nsmallest_change(arr)\n</cell>\n<text>\nQuestion 3\nWrite a function that\
    \ checks if a number is palindrome or not. An integer is a palindrome if its integer\
    \ representation is the same when read from left to right and from right to left.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    smallest_change\
    \ = 0\n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] != reverse(arr[i])\
    \ \n            smallest_change = i\n            break\n        end\n    end\n\
    \    return smallest_change\nend", "    \n    smallest_change = 0\n    \n    for\
    \ x in arr\n        if x == reverse(arr)[1]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend", "    \n \
    \   smallest_change = 0\n    \n    for i = length(arr)-1 downto 1 \n        if\
    \ arr[i] > arr[i-1] \n            smallest_change = smallest_change + 1\n    \
    \    elseif arr[i] < arr[i-1] \n            smallest_change = smallest_change\
    \ - 1\n        end\n    end\n    \n    return smallest_change\nend", "    \n \
    \   smallest_change = Inf \n    \n    for x in arr \n        if x == reverse(arr[x])\
    \ \n            smallest_change = min(smallest_change, x - 1) \n        else \n\
    \            smallest_change = min(smallest_change, x - 1) \n        end \n  \
    \  end \n    \n    return smallest_change \nend ", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    smallest_change = Inf \n    for i = length(arr)\
    \ - 2 ; i >= 0 ; i = i - 1 \n        smallest_change = min(smallest_change, arr[i]\
    \ + arr[i + 1])\n    end\n    return smallest_change\nend", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    smallest_change = 0\n    \n\
    \    for i = length(arr) downto 1 \n        smallest_change = smallest_change\
    \ + arr[i]\n    end\n    \n    return smallest_change\nend", "    smallest_change\
    \ = 0\n    smallest_change_count = 0\n    for i = length(arr) downto 1 \n    \
    \    if arr[i] != reverse(arr[i]) \n            smallest_change = smallest_change\
    \ + 1\n            smallest_change_count = smallest_change_count + 1\n       \
    \ end\n    end\n    return smallest_change\nend\nsmallest_change(arr)\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given an array arr of integers, find the\
    \ minimum number of elements that\n    need to be changed to make the array palindromic.\
    \ A palindromic array is an array that\n    is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.", "    smallest_change\
    \ = 0\n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change =\
    \ smallest_change + arr[i]\n    end\n    return smallest_change\nend\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    smallest_change", "    \n    smallest_change = Inf \n    \n    for i = length(arr)\
    \ - 2 to 1 \n        \n        if arr[i] > arr[i+1] \n            \n         \
    \   if arr[i] > arr[i+1] \n                \n                smallest_change =\
    \ smallest_change \n                \n            elseif arr[i] < arr[i+1] \n\
    \                \n                smallest_change = smallest_change + 1 \n  \
    \              \n            elseif arr[i] == arr[i+1] \n                \n  \
    \              smallest_change = smallest_change + 1 \n                \n    \
    \        end\n            \n        elseif arr[i] < arr[i+1] \n            \n\
    \            if arr[i] < arr[i+1] \n                \n                smallest_change\
    \ = smallest_change \n                \n            elseif arr[i] > arr[i+1] \n\
    \                \n                smallest_change = smallest_change + 1 \n  \
    \              \n            elseif arr[i] == arr[i+1] \n                \n  \
    \              smallest_change = smallest_change + 1 \n                \n    \
    \        end\n            \n        end\n        \n    end\n    \n    return smallest_change\n\
    end", "    \n    smallest_change = Inf \n    \n    for i = length(arr) - 1 downto\
    \ 1 \n        smallest_change = min(smallest_change, arr[i] + arr[-i-1]) \n  \
    \  end \n    \n    return smallest_change \nend \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the number of elements that need to be changed to make the array\
    \ palindromic. For example, if the array is [1,2,3,4,5,6,7,8,9,10,11,12], then\
    \ there are 4 elements that need to be changed to make the array palindromic.\
    \ Write a function that takes an array of integers and returns the number of elements\
    \ that need to be changed to make the array palindromic. For example, if the array\
    \ is [1,2,3,4,5,6,7,8,9,10,11,12], then there are 4 elements that need to be changed\
    \ to make the array palindromic. Write a function that takes an array of integers\
    \ and returns the number of elements that need to be changed to make the array\
    \ palindromic. For example, if the array is [1,2,3,4,5,6,7,8,9,10,11,12], then\
    \ there are 4 elements that need to be changed to make the array palindromic.\
    \ Write a function that takes an array of integers and returns the number of elements\
    \ that need to be changed to make the array palindromic. For example, if the array\
    \ is [1,2,3,4,5,6,7,8,9,10,11,12], then there are 4 elements that need to be changed\
    \ to make the array palindromic. Write a function that takes an array of integers\
    \ and returns the number of elements that need to be changed to make the array\
    \ palindromic. For example, if the array is [1,2,3,4,5,6,7,8,9,10,11,12], then\
    \ there are 4 elements that need to be changed to make the array palindromic.\
    \ Write a function that takes an array of integers and returns the number of elements\
    \ that need to be changed to make the array palindromic. For example, if the array\
    \ is [1,2,3,4,5,6,7,8,9,10,11,12], then there are 4 elements that need to be changed\
    \ to make the array palindromic. Write a function that takes an array of integers\
    \ and returns the number of elements that need to be changed to make the array\
    \ palindromic. For example, if the array is [1,2,3,4,5,6,7,8,9,10,11,12], then\
    \ there are 4 elements that need to be changed to make the array palindromic.\
    \ Write a function that takes an array of integers and returns the number of elements\
    \ that need to be changed to make the array palindromic. For example, if the array\
    \ is [1,2,3,4,5,6,7,8,9,10,11,12], then there are 4 elements that need to be changed\
    \ to make the array palindromic. Write a function that takes an array of integers\
    \ and returns the number of ", "    smallest_change = 0\n    for i = length(arr):-1:1\n\
    \        if arr[i] > arr[i+1]\n            smallest_change = i\n        end\n\
    \    end\n    return smallest_change\nend", "    smallest_change = 0\n    for\
    \ i = length(arr) downto 1 \n        if arr[i] != reverse(arr[i])\n          \
    \  smallest_change = i\n        end\n    end\n    return smallest_change\nend",
  "    \n    smallest_change = 0\n    \n    for i = length(arr)-1 downto 1 \n    \
    \    smallest_change = smallest_change + 1 \n        if arr[i] != reverse(arr[i])\
    \ \n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 to 1 \n      \
    \  smallest_change = smallest_change + arr[i]\n    end\n    \n    return smallest_change\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = Inf \n    \n    for i = length(arr) - 1 downto 1 \n        smallest_change\
    \ = min(smallest_change, length(arr) - i) \n    end \n    \n    return smallest_change\n\
    end", "    \n    smallest_change = Inf \n    \n    for i = length(arr) - 1 downto\
    \ 1 \n        \n        if arr[i] > arr[i+1] \n            \n            smallest_change\
    \ = min(smallest_change, arr[i+1] - arr[i]) \n            \n        else \n  \
    \          \n            smallest_change = min(smallest_change, arr[i] - arr[i+1])\
    \ \n            \n        end\n        \n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,23",
  "    \n    smallest_change = 0\n    \n    for i = length(arr):-1:1\n        if arr[i]\
    \ != reverse(arr[i])\n            smallest_change = i\n            break\n   \
    \     end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nProblem 3\nGiven a string,\
    \ find the length of the longest substring without repeating characters.", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    smallest_change\
    \ = 0\n    smallest_change_found = false\n    \n    for i = length(arr) downto\
    \ 1 \n        smallest_change = smallest_change + 1 \n        smallest_change_found\
    \ = false\n        \n        for j = length(arr) - i downto 0 \n            if\
    \ arr[j] != arr[j + i] \n                smallest_change = smallest_change - 1\
    \ \n                smallest_change_found = true\n                break\n    \
    \        end\n        end\n        \n        if !smallest_change_found \n    \
    \        break\n        end\n    end\n    \n    return smallest_change\nend",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    change = 0\n\
    \    \n    for i = 1:largest\n        if arr[i] != arr[largest]\n            change\
    \ += 1\n        end\n    end\n    \n    for i = 1:smallest\n        if arr[i]\
    \ != arr[smallest]\n            change += 1\n        end\n    end\n    \n    return\
    \ change\nend\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr):-1:1\n        smallest_change = smallest_change\
    \ if arr[i] != reverse(arr[i])\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns the number of unique elements in the array. \nFor example, if the\
    \ input array is [1,2,2,3,3,4,5,5,5,6,7,8,9,10], your function should return 8.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    smallest_change\
    \ = Inf \n    for i = length(arr)-1 downto 1 \n        if arr[i] > arr[i+1] \n\
    \            smallest_change = min(smallest_change, arr[i+1] - arr[i]) \n    \
    \    else \n            smallest_change = min(smallest_change, arr[i] - arr[i+1])\
    \ \n        end \n    end \n    return smallest_change \nend \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,",
  "    \n    smallest_change = 0\n    \n    for i = length(arr):-1:1\n        if arr[i]\
    \ != reverse(arr[i])\n            smallest_change = i\n            break\n   \
    \     end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,22",
  "    smallest_change = Inf \n    for x in arr \n        if x == reverse(arr[x])\
    \ \n            smallest_change = min(smallest_change, x-1)\n        else \n \
    \           smallest_change = min(smallest_change, x-1)\n    end\n    return smallest_change\n\
    end", "    smallest_change = Inf \n    for x in arr \n        if x == reverse(arr)\
    \ \n            smallest_change = min(smallest_change, x-1)\n        else \n \
    \           smallest_change = min(smallest_change, x-1)\n        end\n    end\n\
    \    return smallest_change\nend\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,", "    \n    minimum\
    \ = Inf \n    \n    for i = length(arr) - 2 ; i >= 0 ; i -= 1 \n        \n   \
    \     if arr[i] != arr[i+1] \n            \n            if minimum > abs(arr[i]\
    \ - arr[i+1]) \n                minimum = abs(arr[i] - arr[i+1]) \n          \
    \  end \n        end \n    end \n    \n    return minimum \nend \n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <text>\nProblem 8\nWrite a function that returns true if the array arr is palindromic\
    \ and false otherwise. \nThe function should work for arrays of any length.",
  "    smallest_change = 0\n    for i = length(arr):-1:1\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n        end\n    end\n    return smallest_change\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change = Inf\
    \ \n    \n    for i = length(arr) - 2 to -1 \n        smallest_change = min(smallest_change,\
    \ arr[i] + arr[i + 1])\n    end\n    \n    return smallest_change\nend", "   \
    \ smallest_change = Inf \n    for x in arr \n        if x == reverse(arr) \n \
    \           smallest_change = min(smallest_change, x - 1) \n        else \n  \
    \          smallest_change = min(smallest_change, x - 1) \n        end \n    end\
    \ \n    return smallest_change \nend ", "    \n    smallest_change = Inf \n  \
    \  \n    for i = length(arr) - 1 downto 1 \n        smallest_change = min(smallest_change,\
    \ arr[i] - arr[i + 1])\n    endfor \n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns the number of palindromic arrays that can be created from that array.\
    \ For example:", "    \n    largest = maximum(arr)\n    smallest = minimum(arr)\n\
    \    \n    largest = largest * largest\n    smallest = smallest * smallest\n \
    \   \n    largest = largest * largest\n    smallest = smallest * smallest\n  \
    \  \n    largest = largest * largest\n    smallest = smallest * smallest\n   \
    \ \n    largest = largest * largest\n    smallest = smallest * smallest\n    \n\
    \    largest = largest * largest\n    smallest = smallest * smallest\n    \n \
    \   largest = largest * largest\n    smallest = smallest * smallest\n    \n  \
    \  largest = largest * largest\n    smallest = smallest * smallest\n    \n   \
    \ largest = largest * largest\n    smallest = smallest * smallest\n    \n    largest\
    \ = largest * largest\n    smallest = smallest * smallest\n    \n    largest =\
    \ largest * largest\n    smallest = smallest * smallest\n    \n    largest = largest\
    \ * largest\n    smallest = smallest * smallest\n    \n    largest = largest *\
    \ largest\n    smallest = smallest * smallest\n    \n    largest = largest * largest\n\
    \    smallest = smallest * smallest\n    \n    largest = largest * largest\n \
    \   smallest = smallest * smallest\n    \n    largest = largest * largest\n  \
    \  smallest = smallest * smallest\n    \n    largest = largest * largest\n   \
    \ smallest = smallest * smallest\n    \n    largest = largest * largest\n    smallest\
    \ = smallest * smallest\n    \n    largest = largest * largest\n    smallest =\
    \ smallest * smallest\n    \n    largest = largest * largest\n    smallest = smallest\
    \ * smallest\n    \n    largest = largest * largest\n    smallest = smallest *\
    \ smallest\n    \n    largest = largest * largest\n    smallest = smallest * smallest\n\
    \    \n    largest = largest * largest\n    smallest = smallest * smallest\n \
    \   \n    largest = largest * largest\n    smallest = smallest * smallest\n  \
    \  \n    largest = largest * largest\n    ", "    \n    smallest_change = 0\n\
    \    \n    for i = length(arr) downto 1 \n        smallest_change = smallest_change\
    \ + arr[i]\n        \n        if arr[i] != arr[length(arr)-i] \n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,5,6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4,5,6,7])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,",
  "    \n    minimum = Inf \n    \n    for x in arr \n        if x == reverse(arr)\
    \ \n            minimum += 1\n        end \n    end \n    \n    return minimum\
    \ \nend ", "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n  \
    \  change = largest - smallest\n    \n    \n    if change == 0 \n        return\
    \ 0 \n    else \n        return change \n    end\nend", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr):-1:1\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=", "    smallest_change = Inf\
    \ \n    for i = length(arr) - 1 downto 1 \n        if arr[i] > arr[i + 1] \n \
    \           smallest_change = i \n            break \n        end \n    end \n\
    \    return smallest_change \nend \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = Inf \n    \n    for x in arr \n        if x == reverse(arr) \n           \
    \ smallest_change = min(smallest_change, x - 1) \n        else \n            smallest_change\
    \ = min(smallest_change, x - 1) \n        end \n    end \n    \n    return smallest_change\
    \ \nend ", "    \n    smallest_change = 0\n    \n    for i = length(arr):-1:1\n\
    \        smallest_change = smallest_change if arr[i] != reverse(arr[i]) \n   \
    \ end\n    \n    return smallest_change\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 to\
    \ 1 \n        \n        if arr[i] > arr[i + 1] \n            \n            smallest_change\
    \ += 1\n            \n        else \n            \n            if arr[i] < arr[i\
    \ + 1] \n                \n                smallest_change += 2\n            \
    \    \n            else\n                \n                smallest_change +=\
    \ 1 \n                \n            end\n            \n        end\n        \n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nProblem 3\nGiven an\
    \ array arr of integers, find the minimum number of elements that\nneed to be\
    \ changed to make the array palindromic. A palindromic array is an array that\n\
    is read the same backwards and forwards. In one change, you can change one element\
    \ to any other element.", "    \n    smallest_change = Inf \n    \n    for x in\
    \ arr \n        if x == reverse(arr[x]) \n            smallest_change = min(smallest_change,\
    \ x - 1) \n        else \n            smallest_change = min(smallest_change, x\
    \ - 1) \n        end \n    end \n    \n    return smallest_change \nend \n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is palindrome or\
    \ not. For example, 121 is palindrome and 12321 is not. Your function should take\
    \ in a single number as input.", "    smallest_change = Inf \n    for i = length(arr)\
    \ - 2 ; i >= 0 ; i = i - 1 \n        if arr[i] > arr[i + 1] \n            smallest_change\
    \ = i + 1 \n            break \n        end \n    end \n    return smallest_change\
    \ \nend \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12]) \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ \nsmallest_change([1,2,3,4,5,6,7,8,", "    \n    smallest_change = Int64(0)\n\
    \    \n    for i = length(arr) - 2 to -1 \n        if arr[i] != arr[i+1] \n  \
    \          smallest_change = smallest_change + 1\n        end\n    end\n    \n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,5,6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4,5,6,7])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,", " \
    \   smallest_change = 0\n    for i = length(arr) - 2 ; i >= 0 ; i-- \n       \
    \ smallest_change = smallest_change + arr[i]\n    end\n    return smallest_change\n\
    end", "    smallest_change = 0\n    for i = length(arr) - 2 ; i >= 0 ; i-- \n\
    \        if arr[i] != reverse(arr[i+1])\n            smallest_change = i\n   \
    \         break\n        end\n    end\n    return smallest_change\nend", "   \
    \ \n    smallest_change = 0\n    \n    for i = length(arr):-1:1\n        if arr[i]\
    \ != reverse(arr[i])\n            smallest_change = i\n            break\n   \
    \     end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 to 1 \n      \
    \  smallest_change = smallest_change + 1 \n        if arr[i] != reverse(arr[i])\
    \ \n            smallest_change = smallest_change - 1 \n            break \n \
    \       end \n    end \n    \n    return smallest_change \nend ", "    smallest_change\
    \ = Inf \n    for x in arr \n        if x == reverse(arr) \n            smallest_change\
    \ = min(smallest_change, x - 1) \n        else \n            smallest_change =\
    \ min(smallest_change, x - 1) \n        end \n    end \n    return smallest_change\
    \ \nend \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,",
  "    \n    smallest_change = 0\n    \n    for i = length(arr):-1:1\n        if arr[i]\
    \ != reverse(arr[i])\n            smallest_change = i\n            break\n   \
    \     end\n    end\n    \n    return smallest_change\nend", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr):-1:1\n        \n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend", "    \n    smallest_change = Inf \n   \
    \ \n    for i = length(arr)-1 downto 1 \n        \n        if arr[i] > arr[i+1]\
    \ \n            smallest_change = i\n            break\n        end\n        \n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr):-1:1\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend", "    \n    smallest_change = 0\n    \n\
    \    for i = length(arr) - 2 to 1 \n        smallest_change = smallest_change\
    \ + 1 if arr[i] != arr[i+1] \n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    smallest_change = Inf \n  \
    \  for x in arr \n        if x == reverse(arr[x]) \n            smallest_change\
    \ = min(smallest_change, x-1)\n        else \n            smallest_change = min(smallest_change,\
    \ x-1)\n        end\n    end\n    return smallest_change\nend\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr)-1 downto 1 \n        smallest_change = smallest_change\
    \ + 1 \n        if arr[i] != reverse(arr[i]) \n            smallest_change = smallest_change\
    \ - 1 \n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,4,5,6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213",
  "    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n  \
    \      if arr[i] != reverse(arr[i+1])\n            smallest_change = i\n     \
    \       break\n        end\n    end\n    \n    return smallest_change\nend\nsmallest_change([1,2,3])\n\
    smallest_change([1,3,2])\nsmallest_change([1,2,1])\nsmallest_change([1,3,2])\n\
    smallest_change([1,2,3])\nsmallest_change([1,3,2])\nsmallest_change([1,2,1])\n\
    smallest_change([1,3,2])\nsmallest_change([1,2,3])\nsmallest_change([1,3,2])\n\
    smallest_change([1,2,1])\nsmallest_change([1,3,2])\nsmallest_change([1,2,3])\n\
    smallest_change([1,3,2])\nsmallest_change([1,2,1])\nsmallest_change([1,3,2])\n\
    smallest_change([1,2,3])\nsmallest_change([1,3,2])\nsmallest_change([1,2,1])\n\
    smallest_change([1,3,2])\nsmallest_change([1,2,3])\nsmallest_change([1,3,2])\n\
    smallest_change([1,2,1])\nsmallest_change([1,3,2])\nsmallest_change([1,2,3])\n\
    smallest_change([1,3,2])\nsmallest_change([1,2,1])\nsmallest_change([1,3,2])\n\
    smallest_change([1,2,3])\nsmallest_change([1,3,2])\nsmallest_change([1,2,1])\n\
    smallest_change([1,3,2])\nsmallest_change([1,2,3])\nsmallest_change([1,3,2])\n\
    smallest_change([1,2,1])\nsmallest_change([1,3,2])\nsmallest_change([1,2,3])\n\
    smallest_change([1,3,2])\nsmallest_change([1,2,1])\nsmallest_change([1,3,2])\n\
    smallest_change([1,2,3])\nsmallest_change([1,3,2])\nsmallest_change([1,2,1])\n\
    smallest_change([1,3,2])\nsmallest_change([1,2,3])\nsmallest_change([1,3,2])\n\
    smallest_change([1,2,1])\nsmallest_change([1,3,2])\nsmallest_change([1,2,3])\n\
    smallest_change([1,3,2])\nsmallest_change([1,2,1])\nsmallest_change([1,3,2])\n\
    smallest_change([1,2,3])\nsmallest_change([1,3,2])\nsmallest_change([1,2,1])\n\
    smallest_change([1,3,2])\nsmallest_change([1,2,3])\nsmallest_change([1,3,2])\n\
    smallest_change([1,2,1])\nsmallest_change([1,3,2])\nsmallest_change([1,2,3])\n\
    smallest_change", "    smallest_change = Inf \n    for i = length(arr) - 1 downto\
    \ 1 \n        if arr[i] > arr[i + 1] \n            smallest_change = i \n    \
    \        break \n        end \n    end \n    return smallest_change \nend \nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    smallest_change([1,2,3,4,5,", "    \n    smallest_change = 0\n    \n    for i\
    \ = length(arr):-1:1\n        smallest_change = smallest_change + arr[i]\n   \
    \ end\n    \n    return smallest_change\nend\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<text>\nQuestion 3\nWrite a function that takes an array of integers\
    \ and returns the number of elements in the array that are greater than the element\
    \ in the middle of the array. For example, if the array is [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\
    \ the function should return 4 because there are 4 elements in the array that\
    \ are greater than the element in the middle of the array.", "    \n    smallest_change\
    \ = Inf \n    \n    for x in arr \n        smallest_change = min(smallest_change,\
    \ x - reverse(arr)) \n    end \n    \n    return smallest_change \nend ", "  \
    \  \n    smallest_change = Inf \n    \n    for x in arr \n        if x == reverse(arr[x])\
    \ \n            smallest_change = min(smallest_change, x-1)\n        end\n   \
    \ end\n    \n    return smallest_change\nend", "    \n    smallest_change = 0\n\
    \    \n    for i = length(arr) downto 1 do\n        smallest_change = smallest_change\
    \ + arr[i]\n    end\n    \n    return smallest_change\nend", "    smallest_change\
    \ = 0\n    smallest_change_i = 0\n    smallest_change_j = 0\n    \n    for i =\
    \ length(arr) - 1, j = length(arr) - 2\n        if arr[i] > arr[j]\n         \
    \   smallest_change = smallest_change + 1\n            smallest_change_i = i\n\
    \            smallest_change_j = j\n        elseif arr[i] < arr[j]\n         \
    \   smallest_change = smallest_change + 1\n            smallest_change_i = i\n\
    \            smallest_change_j = j\n        end\n    end\n    \n    if smallest_change\
    \ == 0\n        return -1\n    end\n    \n    if smallest_change == 1\n      \
    \  return smallest_change_i - smallest_change_j + 1\n    end\n    \n    return\
    \ smallest_change\nend\nsmallest_change([1,2,3])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change([1,2,4])\nsmallest_change([1,2,4])\n\
    smallest_change([1,2,4])\nsmallest_change", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    smallest_change = 0\n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        smallest_change = min(smallest_change, length(arr) - i)\n    end\n\
    \    return smallest_change\nend\nsmallest_change(arr)\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/27833523)\n<|/ c |>\n<| c |>\nI added an explanation\
    \ as to why this is not a good answer.\n<|/ c |>\n<| c |>\nThe question was \"\
    Given an array arr of integers, find the minimum number of elements that\n   \
    \ need to be changed to make the array palindromic. A palindromic array is an\
    \ array that\n    is read the same backwards and forwards. In one change, you\
    \ can change one element to any other element.\"\n<|/ c |>\n<| c |>\nThe question\
    \ was \"Given an array arr of integers, find the minimum number of elements that\n\
    \    need to be changed to make the array palindromic. A palindromic array is\
    \ an array that\n    is read the same backwards and forwards. In one change, you\
    \ can change one element to any other element.\"\n<|/ c |>\n<| c |>\nThe question\
    \ was \"Given an array arr of integers, find the minimum number of elements that\n\
    \    need to be changed to make the array palindromic. A palindromic array is\
    \ an array that\n    is read the same backwards and forwards. In one change, you\
    \ can change one element to any other element.\"\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "    \n    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n\
    \    if largest == smallest \n        return largest\n    end\n    \n    change\
    \ = largest - smallest\n    \n    if change == 0 \n        return largest\n  \
    \  end\n    \n    change = change / 2\n    \n    if change == 0 \n        return\
    \ largest\n    end\n    \n    change = change / 2\n    \n    if change == 0 \n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0 \n        return largest\n    end\n    \n    change = change / 2\n\
    \    \n    if change == 0 \n        return largest\n    end\n    \n    change\
    \ = change / 2\n    \n    if change == 0 \n        return largest\n    end\n \
    \   \n    change = change / 2\n    \n    if change == 0 \n        return largest\n\
    \    end\n    \n    change = change / 2\n    \n    if change == 0 \n        return\
    \ largest\n    end\n    \n    change = change / 2\n    \n    if change == 0 \n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0 \n        return largest\n    end\n    \n    change = change / 2\n\
    \    \n    if change == 0 \n        return largest\n    end\n    \n    change\
    \ = change / 2\n    \n    if change == 0 \n        return largest\n    end\n \
    \   \n    change = change / 2\n    \n    if change == 0 \n        return largest\n\
    \    end\n    \n    change = change / 2\n    \n    if change == 0 \n        return\
    \ largest\n    end\n    \n    change = change / 2\n    \n    if change == 0 \n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0 \n        return largest\n    end\n    \n    change = change / 2\n\
    \    \n    if change == 0 \n        return largest\n    end\n    \n    change\
    \ = change / 2\n    \n    if change == 0 \n        return largest\n    end\n \
    \   \n    change = change / 2\n    \n    if change == 0 \n        return largest\n\
    \    end\n    \n    change = change / 2\n    \n    if change == 0 \n        return\
    \ largest\n    end\n    \n    change = change / 2\n    \n    if change == 0 \n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0 \n        return largest\n", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    smallest_change = 0\n    \n    for i =\
    \ length(arr) - 2 ; i >= 0 ; i-- \n        \n        if arr[i] != arr[i+1] \n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend", "    smallest_change = Inf \n    for i\
    \ = length(arr) - 2 to 1 \n        if arr[i] > arr[i+1] \n            smallest_change\
    \ = min(smallest_change, arr[i+1] - arr[i]) \n        else \n            smallest_change\
    \ = min(smallest_change, arr[i] - arr[i+1]) \n        end \n    end \n    return\
    \ smallest_change \nend ", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    smallest_change = 0\n    \n    for i = length(arr) downto\
    \ 1 \n        smallest_change = smallest_change + 1 \n        \n        if arr[i]\
    \ != reverse(arr[i]) \n            smallest_change = smallest_change - 1 \n  \
    \          break\n        end\n    end\n    \n    return smallest_change\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    smallest_change = Inf \n    \n    for i = length(arr)\
    \ - 2 to 1 \n        if arr[i] > arr[i+1] \n            smallest_change = i \n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5", "    smallest_change = Int64(0)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-1)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-2)\n    smallest_change = minimum(smallest_change, length(arr)-3)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-4)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-5)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-6)\n    smallest_change = minimum(smallest_change, length(arr)-7)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-8)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-9)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-10)\n    smallest_change = minimum(smallest_change, length(arr)-11)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-12)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-13)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-14)\n    smallest_change = minimum(smallest_change, length(arr)-15)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-16)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-17)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-18)\n    smallest_change = minimum(smallest_change, length(arr)-19)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-20)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-21)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-22)\n    smallest_change = minimum(smallest_change, length(arr)-23)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-24)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-25)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-26)\n    smallest_change = minimum(smallest_change, length(arr)-27)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-28)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-29)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-30)\n    smallest_change = minimum(smallest_change, length(arr)-31)\n\
    \    smallest_", "    smallest_change = 0\n    \n    for i = length(arr):-1:1\n\
    \        if arr[i] > arr[i-1]\n            smallest_change = smallest_change +\
    \ 1\n        else\n            smallest_change = smallest_change - 1\n       \
    \ end\n    end\n    return smallest_change\nend", "    \n    smallest_change =\
    \ 0\n    \n    for i = length(arr) downto 1 do\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n        end\n    end\n    \n    return smallest_change\n\
    end\nsmallest_change([1,2,3])\nsmallest_change([1,2,2,3])\nsmallest_change([1,2,2,3,3])\n\
    smallest_change([1,2,2,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\n\
    smallest_change([1,2,2,3,3,3,3])\nsmallest_change([1,2,2,3,3,3,3])\nsmalle", " \
    \   smallest_change = Inf \n    for i = length(arr) - 1 downto 1 \n        if\
    \ arr[i] > arr[i+1] \n            smallest_change = i \n            break \n \
    \       end \n    end \n    return smallest_change \nend ", "    \n    smallest_change\
    \ = Inf \n    \n    for i = length(arr) downto 1 \n        \n        if arr[i]\
    \ > arr[i-1] \n            \n            smallest_change = i \n            break\
    \ \n            \n        end\n        \n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns the number of elements in the array that are less than the element\
    \ at index i. For example, if the array is [1,2,3,4,5,6,7,8,9,10], the function\
    \ should return 2 because there are two elements that are less than the element\
    \ at index 2. Write a function that takes an array of integers and returns the\
    \ number of elements in the array that are less than the element at index i. For\
    \ example, if the array is [1,2,3,4,5,6,7,8,9,10], the function should return\
    \ 2 because there are two elements that are less than the element at index 2.\
    \ Write a function that takes an array of integers and returns the number of elements\
    \ in the array that are less than the element at index i. For example, if the\
    \ array is [1,2,3,4,5,6,7,8,9,10], the function should return 2 because there\
    \ are two elements that are less than the element at index 2. Write a function\
    \ that takes an array of integers and returns the number of elements in the array\
    \ that are less than the element at index i. For example, if the array is [1,2,3,4,5,6,7,8,9,10],\
    \ the function should return 2 because there are two elements that are less than\
    \ the element at index 2. Write a function that takes an array of integers and\
    \ returns the number of elements in the array that are less than the element at\
    \ index i. For example, if the array is [1,2,3,4,5,6,7,8,9,10], the function should\
    \ return 2 because there are two elements that are less than the element at index\
    \ 2. Write a function that takes an array of integers and returns the number of\
    \ elements in the array that are less than the element at index i. For example,\
    \ if the array is [1,2,3,4,5,6,7,8,9,10], the function should return 2 because\
    \ there are two elements that are less than the element at index 2. Write a function\
    \ that takes an array of integers and returns the number of elements in the array\
    \ that are less than the element at index i. For example, if the array is [1,2,3,4,5,6,7,8,9,10],\
    \ the function should return 2 because there are two elements that are less than\
    \ the element at index 2. Write a function that takes an array of integers and\
    \ returns the number of elements in the array that are less than the element at\
    \ index i. For example, if the array is [1,2,3,4,5,6,7,8,9,10], the function should\
    \ return 2 because there are two elements that are less than the element at index\
    \ 2. ", "    \n    smallest_change = 0\n    \n    for i = length(arr)-1 downto\
    \ 1 \n        smallest_change = smallest_change + 1 if arr[i] != reverse(arr[i])\
    \ \n    end \n    \n    return smallest_change \nend \n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,", "    \n    smallest_change = Inf \n    \n\
    \    for i = length(arr) - 2 to 1 \n        smallest_change = min(smallest_change,\
    \ arr[i] + arr[i + 1])\n    end\n    \n    return smallest_change\nend", "   \
    \ \n    minimum = Inf \n    \n    for x in arr \n        if x == reverse(arr[x])\
    \ \n            minimum += 1\n        else \n            minimum = Inf \n    \
    \        break\n    end\n    \n    return minimum\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 2 to 1 \n        \n        if arr[i] > arr[i+1] \n            smallest_change\
    \ = smallest_change + 1\n            arr[i+1] = arr[i]\n            arr[i] = 0\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,2,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3,3,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3,3,3,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    smallest_change\
    \ = 0\n    \n    for i = length(arr):-1:1\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 to -1 \n     \
    \   \n        if arr[i] > arr[i+1] \n            \n            smallest_change\
    \ = smallest_change + 1\n            \n        else \n            \n         \
    \   smallest_change = smallest_change + 1\n            \n            if smallest_change\
    \ > length(arr) - 1 \n                \n                break\n            \n\
    \            end\n            \n        end\n        \n    end\n    \n    return\
    \ smallest_change\n    \nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,",
  "    \n    smallest_change = Inf \n    \n    for i = length(arr) downto 1 \n   \
    \     \n        if arr[i] > arr[i-1] \n            \n            smallest_change\
    \ = i \n            break \n            \n        else \n            \n      \
    \      smallest_change = Inf \n            break \n            \n        end \n\
    \        \n    end \n    \n    return smallest_change \nend ", "    \n    minimum\
    \ = Inf \n    \n    for x in arr \n        minimum = min(minimum, x-1)\n    end\n\
    \    \n    return minimum\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,4])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,4])\n\
    </cell>\n", "    \n    smallest_change = 0\n    \n    for x in arr\n        smallest_change\
    \ = smallest_change if x == reverse(arr[x]) else smallest_change + 1\n    end\n\
    \    \n    return smallest_change\nend\nsmallest_change([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nProblem 3\nGiven a binary search tree and a node in that tree,\
    \ find the in-order successor of that node in the BST.", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr):-1:1\n        smallest_change = smallest_change\
    \ + arr[i]\n    end\n    \n    return smallest_change\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
