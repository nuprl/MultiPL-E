name: HumanEval_14_all_prefixes
language: jl
prompt: "\"\"\" Return list of all prefixes from shortest to longest of the input\
  \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
  \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
  asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\",\
  \ \"WW\", \"WWW\"])\nend\n"
completions: ["    \n    prefixes = []\n    \n    for c in string\n        prefixes\
    \ += all_prefixes_helper(c, prefixes)\n    end\n    \n    return prefixes\nend",
  "    prefix_list = Vector{String}()\n    for prefix in all_prefixes_iter(string)\n\
    \        push!(prefix_list, prefix)\n    end\n    return prefix_list\nend", " \
    \   \n    prefix_list = Vector{String}()\n    prefix_list = all_prefixes(string,\
    \ prefix_list)\n    \n    return prefix_list\nend", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for c in string\n        if prefix_length == 0 &&\
    \ c == '_'\n            prefixes += ['_']\n        elseif prefix_length == 1 &&\
    \ c == '_'\n            prefixes += ['_']\n        elseif prefix_length == 2 &&\
    \ c == '_'\n            prefixes += ['_']\n        elseif prefix_length == 3 &&\
    \ c == '_'\n            prefixes += ['_']\n        elseif prefix_length == 4 &&\
    \ c == '_'\n            prefixes += ['_']\n        elseif prefix_length == 5 &&\
    \ c == '_'\n            prefixes += ['_']\n        elseif prefix_length == 6 &&\
    \ c == '_'\n            prefixes += ['_']\n        elseif prefix_length == 7 &&\
    \ c == '_'\n            prefixes += ['_']\n        elseif prefix_length == 8 &&\
    \ c == '_'\n            prefixes += ['_']\n        elseif prefix_length == 9 &&\
    \ c == '_'\n            prefixes += ['_']\n        elseif prefix_length == 10\
    \ && c == '_'\n            prefixes += ['_']\n        elseif prefix_length ==\
    \ 11 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 12 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 13 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 14 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 15 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 16 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 17 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 18 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 19 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 20 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 21 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 22 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 23 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 24 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 25 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 26 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == 27 && c == '_'\n            prefixes += ['_']\n        elseif prefix_length\
    \ == ", "    \n    prefixes = []\n    \n    for c in string\n        prefixes\
    \ += all_prefixes(string[end-c+1:end])\n    end\n    \n    prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>",
  "    \n    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    \n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefixes = Vector{String}()\n\
    \    prefix_lengths = Vector{Int64}()\n    \n    for c in string\n        prefix_lengths[length(c)]\
    \ += 1\n    end\n    \n    for i = length(prefix_lengths)\n        push!(prefixes,\
    \ string[prefix_lengths[i]:i])\n    end\n    \n    return prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = all_prefixes_helper(string, prefix_list)\n    return prefix_list\nend", " \
    \   \n    prefixes = []\n    \n    for c in string\n        prefixes += all_prefixes(string[c:end])\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>", "    prefixes\
    \ = Vector{String}()\n    prefixes << string\n    prefixes << string[0..-2]\n\
    \    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n    prefixes <<\
    \ string[0..-2]\n    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n\
    \    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n    prefixes <<\
    \ string[0..-2]\n    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n\
    \    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n    prefixes <<\
    \ string[0..-2]\n    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n\
    \    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n    prefixes <<\
    \ string[0..-2]\n    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n\
    \    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n    prefixes <<\
    \ string[0..-2]\n    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n\
    \    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n    prefixes <<\
    \ string[0..-2]\n    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n\
    \    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n    prefixes <<\
    \ string[0..-2]\n    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n\
    \    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n    prefixes <<\
    \ string[0..-2]\n    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n\
    \    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n    prefixes <<\
    \ string[0..-2]\n    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n\
    \    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n    prefixes <<\
    \ string[0..-2]\n    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n\
    \    prefixes << string[0..-2]\n    prefixes << string[0..-2]\n    prefixes <<\
    \ string[0..-2]\n    prefixes << string[0..-2]\n    prefix", "    \n    prefixes\
    \ = []\n    \n    for c in string:\n        if c != ' ' \n            prefixes\
    \ += all_prefixes(string[string.index(c)+1:])\n        else\n            prefixes\
    \ += [c]\n        end\n    end\n    \n    return prefixes\nend", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>", "    prefixes\
    \ = Vector{String}()\n    prefix_length = 0\n    for c in string\n        if prefix_length\
    \ == 0 || prefix_length + 1 < length(c)\n            prefixes += [c]\n       \
    \     prefix_length += 1\n        else\n            prefix_length = 0\n      \
    \  end\n    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefix",
  "    \n    prefixes = []\n    \n    for prefix in string.split(\"\")\n        push!(prefixes,\
    \ prefix)\n    end\n    \n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    \n    prefixes = Vector{String}()\n\
    \    \n    for prefix in all_prefixes_iter(string)\n        push!(prefixes, prefix)\n\
    \    end\n    \n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefixes = Vector{String}()\n    \n    for i = 1:length(string)\n \
    \       prefixes += string[(i+1):end]\n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefix", "    \n    prefixes = []\n    \n    for i = 1:length(string)\n  \
    \      prefixes = [prefixes string[i-1:i]]\n    end\n    \n    return prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefix", "    prefixes = []\n    prefix_length = 1\n    prefix_lengths = [1]\n\
    \    while prefix_length < string.length\n        prefix_length = prefix_length\
    \ + 1\n        prefix_lengths = prefix_lengths..prefix_length\n    end\n    for\
    \ prefix_length in prefix_lengths\n        prefixes = prefixes..string.take(prefix_length)\n\
    \    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the longest prefix that is a substring of the input string. For\
    \ example, longest_prefix(\"abcabcbb\") returns \"abc\".", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for c in string\n        if prefix_length == 0 ||\
    \ prefix_length + 1 < length(c)\n            prefixes += [c]\n            prefix_length\
    \ += 1\n        else\n            prefix_length = 0\n        end\n    end\n  \
    \  return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes", "    prefix_list = Vector{String}()\n  \
    \  prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3] =\
    \ string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n    prefix_", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = all_prefixes_helper(string, prefix_list)\n    return prefix_list\nend", " \
    \   \n    prefixes = Vector{String}()\n    \n    for c in string\n        prefixes\
    \ += all_prefixes(string[1:end-1]) + [c]\n    end\n    \n    return prefixes\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    \n    prefixes = Vector{String}()\n    \n    for c in string\n    \
    \    prefixes += all_prefixes(string[1:end-1]) + [c]\n    end\n    \n    return\
    \ prefixes\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.", "    prefix_list = Vector{String}()\n    for prefix\
    \ in all_prefixes_iter(string)\n        push!(prefix_list, prefix)\n    end\n\
    \    return prefix_list\nend", "    prefixes = Vector{String}()\n    prefix_length\
    \ = 0\n    for c in string\n        if prefix_length == 0 \n            prefix_length\
    \ = length(c)\n        elseif prefix_length < length(c)\n            prefix_length\
    \ = length(c)\n        end\n        push!(prefixes, string[prefix_length..end])\n\
    \    end\n    return prefixes\nend", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    \n    return\
    \ prefix_list\nend", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefixes = Vector{String}()\n\
    \    for c in string\n        push!(prefixes, string[1:c])\n    end\n    return\
    \ prefixes\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</", "    prefixes = Vector{String}()\n    prefixes\
    \ = all_prefixes_helper(string, prefixes)\n    return prefixes\nend", "    prefixes\
    \ = Vector{String}()\n    prefix_length = 0\n    for c in string\n        if prefix_length\
    \ < length(c)\n            prefixes += [c]\n            prefix_length = length(c)\n\
    \        else\n            prefix_length = 0\n        end\n    end\n    prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabc", "    \n    prefixes = Vector{String}()\n    \n    for\
    \ i = length(prefixes) downto 1 do\n        prefixes[i] = string[(i-1):end]\n\
    \    end\n    \n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for c in string\n        if prefix_length == 0 \n\
    \            prefixes += [c]\n        else\n            prefix_length = prefix_length\
    \ + 1\n            prefixes += [string[prefix_length-1]]\n        end\n    end\n\
    \    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for c in string\n        if prefix_length == 0 \n\
    \            prefixes += [c]\n        else\n            prefixes += [c] * (prefix_length\
    \ + 1)\n        end\n        prefix_length += 1\n    end\n    return prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefix", "    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(string[1:end-1])\
    \ + [c]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5", "    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        if c == '.'\n            prefixes << ''\n\
    \        else\n            prefixes << c\n        end\n    end\n    \n    return\
    \ prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab.cd\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"ab.cd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab.cd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab.cd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab.cd\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab.cd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab.cd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab.cd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab.cd\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab.cd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab.cd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab.cd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab.cd\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab.cd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab.cd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab.cd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab.cd\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab.cd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab.cd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab.cd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab.cd\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab.cd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab.cd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab.cd\"\
    )\n</cell>\n<code language=julia-1.5", "    prefixes = Vector{String}()\n    prefixes\
    \ << \"\"\n    for c in string\n        if prefixes[end-1] == \"\"\n         \
    \   prefixes[end-1] = c\n        else\n            prefixes[end-1] = prefixes[end-1]\
    \ + c\n        end\n    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the longest prefix that appears in the input string.\
    \ For example, if the input string is \"abcabcbb\", the longest prefix that appears\
    \ is \"abc\".", "    prefix_list = Vector{String}()\n    for prefix in all_prefixes_iter(string)\n\
    \        push!(prefix_list, prefix)\n    end\n    return prefix_list\nend", " \
    \   prefixes = Vector{String}()\n    for c in string\n        push!(prefixes,\
    \ string[1:c-1])\n    end\n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")[1]\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[2]\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )[3]\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")[4]\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")[5]\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")[6]\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[7]\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )[8]\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")[9]\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")[10]\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")[11]\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[12]\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )[13]\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")[14]\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")[15]\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")[16]\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")[17]\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[18]\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )[19]\n</cell>\n<code language=julia-1.5>\nall_", "    \n    prefixes = Vector{String}()\n\
    \    \n    for i = 1:length(string)\n        prefixes += string[i-1:i]\n    end\n\
    \    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    \n    prefixes = []\n    \n    for c in string\n        push!(prefixes,\
    \ string[1:end-1]) \n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb", "    prefixes =\
    \ []\n    for c in string\n        push!(prefixes, string[1:c-1])\n    end\n \
    \   prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell", "    prefixes\
    \ = Vector{String}()\n    prefix_length = 0\n    for c in string\n        if prefix_length\
    \ == 0 || prefix_length + 1 < length(c)\n            prefixes += [c]\n       \
    \     prefix_length += 1\n        end\n    end\n    return prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n", "    prefixes = Vector{String}()\n    for c in string\n      \
    \  prefixes += all_prefixes(c) + [c]\n    end\n    prefixes\nend\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcccaaaa\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcccaaaab\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcccaaaabb\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcccaaaabbb\"\
    )\n</cell>", "    \n    prefixes = []\n    \n    for c in string\n        if c\
    \ != ' '\n            prefixes += all_prefixes(string[end-1:end])\n        end\n\
    \    end\n    \n    prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc def ghi jkl mno\")\n</cell>\n<code language=julia-1.5>", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n    prefix_", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for c in string\n        if prefix_length == 0 \n\
    \            prefixes += [c]\n        else\n            prefix_length -= 1\n \
    \           prefixes += [c]\n        end\n    end\n    prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccde\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefgh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghi\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghij\"\
    )\n</cell>\n<code language=julia-1.5", "    prefixes = Vector{String}()\n    prefix_lengths\
    \ = Vector{Int64}()\n    prefix_lengths[1] = 1\n    for i = 2\n        prefix_lengths[i]\
    \ = prefix_lengths[i-1] + 1\n    end\n    for i = length(prefix_lengths)\n   \
    \     prefixes[i] = string[prefix_lengths[i]:end]\n    end\n    return prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell",
  "    \n    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    \n    return prefix_list\nend", "    \n    prefixes = Vector{String}()\n\
    \    \n    for prefix in all_prefixes_iter(string)\n        push!(prefixes, prefix)\n\
    \    end\n    \n    return prefixes\nend", "    \n    prefixes = Vector{String}()\n\
    \    \n    prefix_length = 0\n    \n    for character in string\n        \n  \
    \      if character == \"\"\n            \n            push!(prefixes, \"\")\n\
    \            \n        elseif prefix_length == 0 \n            \n            push!(prefixes,\
    \ character)\n            \n        elseif prefix_length == length(character)\n\
    \            \n            push!(prefixes, character)\n            \n        else\n\
    \            \n            push!(prefixes, character[1:prefix_length])\n     \
    \       \n        end\n        \n        prefix_length += 1\n        \n    end\n\
    \    \n    return prefixes\n    \nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab",
  "    prefixes = []\n    prefix_length = 0\n    \n    for c in string\n        if\
    \ prefix_length == 0 \n            prefixes += [c]\n        elseif prefix_length\
    \ < length(c)\n            prefixes += [c]\n        else\n            prefixes\
    \ += [c[prefix_length]]\n            prefix_length = 0\n        end\n        prefix_length\
    \ += 1\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    \n    return\
    \ prefix_list\nend", "    prefixes = Vector{String}()\n    prefix_length = 0\n\
    \    for c in string\n        if prefix_length == 0 || prefix_length + 1 < length(c)\n\
    \            prefixes += [c]\n            prefix_length += 1\n        else\n \
    \           prefix_length = 0\n        end\n    end\n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes", "    prefixes = Vector{String}()\n    prefix_length = 0\n    for\
    \ c in string\n        if prefix_length == 0 \n            prefixes += [c]\n \
    \       else\n            prefix_length -= 1\n            prefixes += [c]\n  \
    \      end\n    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abrac", "    prefixes = Vector{String}()\n    for c in string\n        push!(prefixes,\
    \ string[1:c])\n    end\n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    \n    prefixes = Vector{String}()\n    \n    for c in string\n    \
    \    prefixes += all_prefixes(c)\n    end\n    \n    return prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacac\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacacb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacacb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacacb", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes(string[1:end-1], prefix_list)\n\
    \    prefix_list = all_prefixes(string[1:end], prefix_list)\n    prefix_list\n\
    end", "    \n    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    \n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefixes = Vector{String}()\n\
    \    prefixes = [string]\n    for prefix in prefixes\n        prefixes = prefixes\
    \ + prefixes[prefix:end-1]\n    end\n    prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcabcabc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcabcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcabcabcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcabcabcabcabcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab",
  "    \n    prefixes = []\n    \n    for prefix in string.split(\"\")\n        prefixes\
    \ += prefix\n    end\n    \n    return prefixes\nend", "    \n    prefixes = Vector{String}()\n\
    \    \n    for prefix in string.split(\"\")\n        push!(prefixes, prefix)\n\
    \    end\n    \n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    for prefix in all_prefixes_iter(string)\n        push!(prefix_list, prefix)\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abrac", "    prefixes =\
    \ Vector{String}()\n    prefixes = [string[1:i] for i in 1:length(string)]\n \
    \   return prefixes\nend\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"abracadabra\")\n</", " \
    \   prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(string[1:end-1])\
    \ + [c]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    \n    return\
    \ prefix_list\nend", "    \n    prefixes = Vector{String}()\n    \n    for i =\
    \ 1:length(string)\n        prefixes += string[(i+1):end]\n    end\n    \n   \
    \ return prefixes\nend", "    \n    prefix_list = Vector{String}()\n    prefix_list\
    \ = all_prefixes_helper(string, prefix_list)\n    \n    return prefix_list\nend",
  "    prefixes = Vector{String}()\n    prefix_length = 0\n    for c in string\n \
    \       if prefix_length == 0 || prefix_length + 1 < length(c)\n            prefixes\
    \ += [c]\n            prefix_length += 1\n        else\n            prefix_length\
    \ = 0\n        end\n    end\n    prefixes\nend", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes(string[1:end-1], prefix_list)\n    prefix_list\
    \ = all_prefixes(string[end-1:end], prefix_list)\n    prefix_list = all_prefixes(string[end:],\
    \ prefix_list)\n    \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>", "    prefixes\
    \ = Vector{String}()\n    prefix_length = 0\n    for c in string\n        if prefix_length\
    \ == 0 \n            prefixes << c\n        elseif prefix_length < length(c)\n\
    \            prefixes << c\n            prefix_length += 1\n        else\n   \
    \         prefix_length = 0\n            prefixes << c\n        end\n    end\n\
    \    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")", "    \n    prefixes = Vector{String}()\n    \n    for i = 1:length(string)\n\
    \        prefixes += string[i..end]\n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abaaaba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abaaabaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abaaabaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaabaaaba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abaaabaaabaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abaaabaaabaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaabaaabaaabaa\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abaaabaaabaaabaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abaaabaaabaaabaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abaaabaaabaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abaaabaaabaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaabaaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaabaaabaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaa", "    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(string[1:end-1])\
    \ + [c]\n    end\n    \n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")[2]\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end]\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )[end] == \"abracadabra\"\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end-1] == \"abra\"\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end-2] == \"abra\"\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end-3] != \"abra\"\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end-4] != \"abra\"\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end-5] != \"abra\"\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end-6] != \"abra\"\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end-7] != \"abra\"\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end-8] != \"abra\"\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end-9] != \"abra\"\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end-10] != \"abra\"\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end-11] != \"abra\"\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end-12] != \"abra\"\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")[end-13] != \"abra\"\n", "    \n    prefixes = []\n    \n    for\
    \ prefix in string.split(\"\")\n        push!(prefixes, prefix)\n    end\n   \
    \ \n    return prefixes\nend", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = all_prefixes_helper(string, prefix_list)\n    return prefix_list\nend", " \
    \   prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefixes = Vector{String}()\n\
    \    \n    prefix_lengths = all_prefix_lengths(string)\n    \n    for length in\
    \ prefix_lengths\n        push!(prefixes, string[length+1:end])\n    end\n   \
    \ \n    return prefixes\nend", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\n", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    \n    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    \n    return prefix_list\nend", "    prefixes = []\n    for\
    \ c in string\n        prefixes += all_prefixes(string[1:end-1]) + [c]\n    end\n\
    \    prefixes\nend", "    prefix_list = Vector{String}()\n    prefix_list[1] =\
    \ string\n    prefix_list[2] = string\n    prefix_list[3] = string\n    prefix_list[4]\
    \ = string\n    prefix_list[5] = string\n    prefix_list[6] = string\n    prefix_list[7]\
    \ = string\n    prefix_list[8] = string\n    prefix_list[9] = string\n    prefix_list[10]\
    \ = string\n    prefix_list[11] = string\n    prefix_list[12] = string\n    prefix_list[13]\
    \ = string\n    prefix_list[14] = string\n    prefix_list[15] = string\n    prefix_list[16]\
    \ = string\n    prefix_list[17] = string\n    prefix_list[18] = string\n    prefix_list[19]\
    \ = string\n    prefix_list[20] = string\n    prefix_list[21] = string\n    prefix_list[22]\
    \ = string\n    prefix_list[23] = string\n    prefix_list[24] = string\n    prefix_list[25]\
    \ = string\n    prefix_list[26] = string\n    prefix_list[27] = string\n    prefix_list[28]\
    \ = string\n    prefix_list[29] = string\n    prefix_list[30] = string\n    prefix_list[31]\
    \ = string\n    prefix_list[32] = string\n    prefix_list[33] = string\n    prefix_list[34]\
    \ = string\n    prefix_list[35] = string\n    prefix_list[36] = string\n    prefix_list[37]\
    \ = string\n    prefix_list[38] = string\n    prefix_list[39] = string\n    prefix_list[40]\
    \ = string\n    prefix_list[41] = string\n    prefix_list[42] = string\n    prefix_list[43]\
    \ = string\n    prefix_list[44] = string\n    prefix_list[45] = string\n    prefix_list[46]\
    \ = string\n    prefix_list[47] = string\n    prefix_list[48] = string\n    prefix_list[49]\
    \ = string\n    prefix_list[50] = string\n    prefix_list[51] = string\n    prefix_list[52]\
    \ = string\n    prefix_list[53] = string\n    prefix_list[54] = string\n    prefix_list[55]\
    \ = string\n    prefix_list[56] = string\n    prefix_list[57] = string\n    prefix_list[58]\
    \ = string\n    prefix_list[59] = string\n    prefix_list[60] = string\n    prefix_list[61]\
    \ = string\n    prefix_list[62] = string\n    prefix_list[63] = string\n    prefix_list[64]\
    \ = string\n    prefix_list[65] = string\n    prefix_list[66] = string\n    prefix_list[67]\
    \ = string\n    prefix_list[68] = string\n    prefix_list[69] = string\n    prefix_list[70]\
    \ = string\n    prefix_list[71] = string\n    prefix_list[72] = string\n    prefix_",
  "    prefixes = Vector{String}()\n    prefix_length = 0\n    prefix_lengths = Vector{Int64}()\n\
    \    for c in string\n        prefix_length += length(c)\n        prefix_lengths\
    \ << prefix_length\n    end\n    prefix_lengths = prefix_lengths[prefix_lengths..end]\n\
    \    for p in prefix_lengths\n        push!(prefixes, string[prefix_lengths[p]:p])\n\
    \    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for c in string\n        if prefix_length == 0 ||\
    \ prefix_length + 1 < length(c)\n            prefixes += [c]\n            prefix_length\
    \ += 1\n        else\n            prefix_length = 0\n        end\n    end\n  \
    \  return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefix", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c)\n    end\n   \
    \ \n    return prefixes\nend", "    prefixes = Vector{String}()\n    prefix_length\
    \ = 0\n    for character in string\n        if character == prefixes[prefix_length]\n\
    \            prefix_length += 1\n        else\n            prefix_length = 0\n\
    \            prefixes << character\n        end\n    end\n    prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the longest\
    \ prefix that is a substring of the input string. For example, if the input is\
    \ \"abracadabra\" and the longest prefix is \"abr\", then the function should\
    \ return \"abr\".", "    prefix_list = Vector{String}()\n    prefix_list[1] =\
    \ string\n    prefix_list[2] = string\n    prefix_list[3] = string\n    prefix_list[4]\
    \ = string\n    prefix_list[5] = string\n    prefix_list[6] = string\n    prefix_list[7]\
    \ = string\n    prefix_list[8] = string\n    prefix_list[9] = string\n    prefix_list[10]\
    \ = string\n    prefix_list[11] = string\n    prefix_list[12] = string\n    prefix_list[13]\
    \ = string\n    prefix_list[14] = string\n    prefix_list[15] = string\n    prefix_list[16]\
    \ = string\n    prefix_list[17] = string\n    prefix_list[18] = string\n    prefix_list[19]\
    \ = string\n    prefix_list[20] = string\n    prefix_list[21] = string\n    prefix_list[22]\
    \ = string\n    prefix_list[23] = string\n    prefix_list[24] = string\n    prefix_list[25]\
    \ = string\n    prefix_list[26] = string\n    prefix_list[27] = string\n    prefix_list[28]\
    \ = string\n    prefix_list[29] = string\n    prefix_list[30] = string\n    prefix_list[31]\
    \ = string\n    prefix_list[32] = string\n    prefix_list[33] = string\n    prefix_list[34]\
    \ = string\n    prefix_list[35] = string\n    prefix_list[36] = string\n    prefix_list[37]\
    \ = string\n    prefix_list[38] = string\n    prefix_list[39] = string\n    prefix_list[40]\
    \ = string\n    prefix_list[41] = string\n    prefix_list[42] = string\n    prefix_list[43]\
    \ = string\n    prefix_list[44] = string\n    prefix_list[45] = string\n    prefix_list[46]\
    \ = string\n    prefix_list[47] = string\n    prefix_list[48] = string\n    prefix_list[49]\
    \ = string\n    prefix_list[50] = string\n    prefix_list[51] = string\n    prefix_list[52]\
    \ = string\n    prefix_list[53] = string\n    prefix_list[54] = string\n    prefix_list[55]\
    \ = string\n    prefix_list[56] = string\n    prefix_list[57] = string\n    prefix_list[58]\
    \ = string\n    prefix_list[59] = string\n    prefix_list[60] = string\n    prefix_list[61]\
    \ = string\n    prefix_list[62] = string\n    prefix_list[63] = string\n    prefix_list[64]\
    \ = string\n    prefix_list[65] = string\n    prefix_list[66] = string\n    prefix_list[67]\
    \ = string\n    prefix_list[68] = string\n    prefix_list[69] = string\n    prefix_list[70]\
    \ = string\n    prefix_list[71] = string\n    prefix_list[72] = string\n    prefix_",
  "    \n    prefix_list = Vector{String}()\n    \n    for prefix in all_prefixes_iter(string)\n\
    \        push!(prefix_list, prefix)\n    end\n    \n    return prefix_list\nend",
  "    \n    prefixes = Vector{String}()\n    \n    for c in string\n        prefixes\
    \ += all_prefixes(string[end-c+1:end])\n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacacbbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacacbbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacacb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacacbba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbba", "   \
    \ prefixes = Vector{String}()\n    prefix_length = 0\n    for c in string\n  \
    \      if prefix_length == 0 || prefix_length + 1 < length(c)\n            prefixes\
    \ += [c]\n            prefix_length += 1\n        else\n            prefix_length\
    \ = 0\n        end\n    end\n    return prefixes\nend", "    prefixes = []\n \
    \   for c in string\n        push!(prefixes, string[1:c])\n    end\n    prefixes\n\
    end", "    prefixes = []\n    prefix_length = 0\n    for c in string\n       \
    \ if prefix_length == 0 \n            prefixes = [c]\n        else\n         \
    \   prefixes += all_prefixes(string[prefix_length..-1]) \n            prefix_length\
    \ += 1\n        end\n    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes", "    prefixes\
    \ = Vector{String}()\n    for c in string\n        push!(prefixes, string[1:c])\n\
    \    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra", "    \n  \
    \  prefixes = Vector{String}()\n    \n    prefix_length = 0\n    \n    for c in\
    \ string\n        if prefix_length == 0 \n            prefixes += [c]\n      \
    \  elseif prefix_length == length(string)\n            prefixes += [c]\n     \
    \   else\n            prefixes += [string[prefix_length]]\n            prefix_length\
    \ += 1\n        end\n    end\n    \n    return prefixes\nend", "    prefixes =\
    \ Vector{String}()\n    prefix_length = 0\n    prefix_lengths = all_prefix_lengths(string)\n\
    \    for length in prefix_lengths\n        if length == prefix_length\n      \
    \      prefixes << string[prefix_length]\n        else\n            prefix_length\
    \ = length\n            prefixes << string[prefix_length]\n        end\n    end\n\
    \    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb", " \
    \   prefixes = []\n    prefix_length = 0\n    for c in string\n        if prefix_length\
    \ == 0 \n            prefixes = [c]\n        elseif prefix_length < length(c)\n\
    \            prefixes += [c]\n        else\n            prefixes += all_prefixes(string[prefix_length..end])\n\
    \        end\n        prefix_length += 1\n    end\n    return prefixes\nend",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2\
    \ to length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n \
    \   end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = all_prefixes_helper(string, prefix_list)\n    return prefix_list\nend", " \
    \   prefixes = Vector{String}()\n    prefix_length = 0\n    for character in string\n\
    \        if character == \"\"\n            prefixes << \"\"\n        else\n  \
    \          prefix_length += 1\n            prefixes << string[prefix_length..end]\n\
    \        end\n    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abaaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abaaaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaabaa\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abaaabaaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abaaabaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaabaaabaaa\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abaaabaaabaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abaaabaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abaaabaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaabaaabaaabaaab\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abaaabaaabaaabaaaba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abaaabaaabaaabaaabaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abaaabaaabaaabaaabaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abaaabaaabaaabaaabaa", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = all_prefixes_helper(string, prefix_list)\n    return prefix_list\nend", " \
    \   prefixes = []\n    for c in string\n        prefixes += all_prefixes(c)\n\
    \    end\n    prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaaac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaacbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaacbbc\")\n</cell>\n<code language=julia-1.5", "    prefixes\
    \ = Vector{String}()\n    prefix_length = 0\n    for c in string\n        if prefix_length\
    \ == 0 || prefix_length + 1 < length(c)\n            prefixes += [c]\n       \
    \     prefix_length += 1\n        else\n            prefix_length = 0\n      \
    \  end\n    end\n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    \n    prefixes = Vector{String}()\n    \n    for c in string\n    \
    \    prefixes += all_prefixes(c) + [c]\n    end\n    \n    return prefixes\nend",
  "    \n    prefixes = Vector{String}()\n    \n    for i = 1:length(string)\n   \
    \     prefixes += string[(i+1):end]\n    end\n    \n    return prefixes\nend",
  "    prefixes = []\n    prefix_length = 1\n    \n    for c in string\n        prefixes\
    \ += all_prefixes(string[prefix_length+1:end])\n        prefix_length += 1\n \
    \   end\n    \n    prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string,prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefixes = Vector{String}()\n\
    \    prefixes = [string]\n    for prefix in prefixes\n        for char in string\n\
    \            if char != prefix\n                break\n            prefixes +=\
    \ [prefix..char]\n        end\n    end\n    return prefixes\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n", "    \n    prefix_list = Vector{String}()\n    prefix_list = all_prefixes(string[1:end-1],\
    \ prefix_list)\n    prefix_list = all_prefixes(string[end-1:end], prefix_list)\n\
    \    prefix_list = all_prefixes(string[end:], prefix_list)\n    \n    return prefix_list\n\
    end", "    \n    prefixes = []\n    \n    for c in string\n        prefixes +=\
    \ all_prefixes(string[1:end-1]) + [c]\n    end\n    \n    return prefixes\nend",
  "    \n    prefixes = Vector{String}()\n    \n    prefix_length = 0\n    \n    for\
    \ c in string\n        if prefix_length == 0 \n            prefixes += [c]\n \
    \       else\n            prefixes += [string[prefix_length:end]]\n          \
    \  prefix_length = end\n        end\n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=",
  "    \n    prefixes = Vector{String}()\n    \n    for prefix in string.split(\"\"\
    )\n        push!(prefixes, prefix)\n    end\n    \n    return prefixes\nend",
  "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    \n    prefixes = []\n    \n\
    \    for prefix in string.split(\"\")\n        prefixes += prefix\n    end\n \
    \   \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    \n    prefixes = Vector{String}()\n    \n    for i = 1:length(string)\n\
    \        prefixes += string[(i+1):end]\n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest substring\
    \ that is a palindrome. \nFor example, \nlongest_palindrome(\"abracadabra\") should\
    \ return \"abracadabra\".", "    \n    prefixes = []\n    \n    for c in string\n\
    \        prefixes += all_prefixes(string[end-1:end])\n        \n        prefixes\
    \ += [c]\n    end\n    \n    return prefixes\nend", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for c in string\n        if prefix_length == 0 ||\
    \ prefix_length + 1 < length(c)\n            prefixes += [c]\n            prefix_length\
    \ += 1\n        else\n            prefix_length = 0\n        end\n    end\n  \
    \  return prefixes\nend", "    \n    prefixes = []\n    \n    for c in string\n\
    \        prefixes += all_prefixes(c) \n    end\n    \n    prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracad", "    prefixes = Vector{String}()\n    for prefix in all_prefixes_iter(string)\n\
    \        push!(prefixes, prefix)\n    end\n    return prefixes\nend", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend", "    \n    prefix_list = Vector{String}()\n   \
    \ prefix_list = all_prefixes_helper(string, prefix_list)\n    \n    return prefix_list\n\
    end", "    \n    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    \n    return prefix_list\nend", "    prefixes = []\n    for\
    \ c in string\n        prefixes += all_prefixes(string[1:c])\n        prefixes\
    \ += [c]\n    end\n    prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for character in string\n        prefix_length +=\
    \ 1\n        if prefix_length == length(string)\n            prefixes << character\n\
    \        end\n    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>", "    \n    prefixes = Vector{String}()\n    \n    prefix_length\
    \ = 0\n    \n    for c in string\n        if prefix_length == 0 \n           \
    \ prefix_length = length(c)\n            prefixes << c\n        elseif length(c)\
    \ == prefix_length\n            prefixes << c\n        else\n            prefixes\
    \ << c\n            prefix_length = length(c)\n        end\n    end\n    \n  \
    \  return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\n", "    \n    prefixes = Vector{String}()\n\
    \    \n    for prefix in all_prefixes_iter(string)\n        push!(prefixes, prefix)\n\
    \    end\n    \n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefixes = Vector{String}()\n    prefix_length = 0\n    for c in string\n\
    \        if prefix_length == 0 || prefix_length + 1 < length(c)\n            prefixes\
    \ += [c]\n            prefix_length += 1\n        else\n            prefix_length\
    \ = 0\n        end\n    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes", "    prefixes\
    \ = []\n    prefix_length = 0\n    \n    for c in string\n        if prefix_length\
    \ == 0 \n            prefixes = [c]\n        else\n            prefixes += all_prefixes(string[prefix_length..end])\n\
    \            prefix_length += 1\n        end\n    end\n    \n    return prefixes\n\
    end", "    prefixes = Vector{String}()\n    prefix_length = 0\n    for c in string\n\
    \        if prefix_length == 0 \n            prefixes += [c]\n        elseif prefix_length\
    \ == length(string)\n            prefixes += [c]\n        else\n            prefixes\
    \ += [string[prefix_length]]\n            prefix_length += 1\n        end\n  \
    \  end\n    return prefixes\nend", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n", "    \n    prefixes = Vector{String}()\n    \n    for i = 1:length(string)\n\
    \        prefixes += string[(i+1):end]\n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n",
  "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    \n    prefixes = Vector{String}()\n    \n    for prefix in all_prefixes_iter(string)\n\
    \        push!(prefixes, prefix)\n    end\n    \n    return prefixes\nend", " \
    \   prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefix", " \
    \   prefixes = Vector{String}()\n    prefix_length = 0\n    for c in string\n\
    \        if prefix_length == 0 \n            prefixes += [c]\n        elseif prefix_length\
    \ < length(c)\n            prefixes += [c]\n        else\n            prefix_length\
    \ = length(c)\n            prefixes += [c]\n        end\n    end\n    prefixes\n\
    end\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThanks for your answer. Could\
    \ you please explain how this works?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer. Hope it helps.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a package\
    \ that does this for you:\nhttps://github.com/jamie-johnson/StringPrefixes\n<code>\n\
    julia> using StringPrefixes", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = all_prefixes_helper(string, prefix_list)\n    return prefix_list\nend", " \
    \   prefixes = Vector{String}()\n    prefix_length = 0\n    for c in string\n\
    \        if prefix_length == 0 \n            prefixes += [c]\n        else\n \
    \           prefix_length = prefix_length + 1\n            prefixes += [c] * (prefix_length\
    \ - 1)\n        end\n    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.3>\nall_", "    prefix_list = Vector{String}()\n\
    \    for prefix in all_prefixes_iter(string)\n        push!(prefix_list, prefix)\n\
    \    end\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    \n    prefixes = Vector{String}()\n\
    \    \n    for i = 1:length(string)\n        prefixes += string[(i+1):end]\n \
    \   end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefix", "    prefixes = []\n    for s\
    \ in string.split(\"\")\n        push!(prefixes, s)\n    end\n    return prefixes\n\
    end", "    prefix_list = Vector{String}()\n    for prefix in all_prefixes_iter(string)\n\
    \        push!(prefix_list, prefix)\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb", " \
    \   prefixes = Vector{String}()\n    for i = 1:length(string)\n        prefixes\
    \ += string[i..end]\n    end\n    prefixes\nend", "    prefixes = Vector{String}()\n\
    \    prefixes = [string]\n    for prefix in prefixes\n        for c in string\n\
    \            if c != prefix\n                push!(prefixes, prefix)\n       \
    \         break\n        end\n    end\n    return prefixes\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = all_prefixes_helper(string, prefix_list)\n    return prefix_list\nend", " \
    \   \n    prefixes = Vector{String}()\n    \n    for i = 1:length(string)\n  \
    \      prefixes += string[(i+1):end]\n    end\n    \n    return prefixes\nend",
  "    \n    prefixes = Vector{String}()\n    \n    for i = 1:length(string)\n   \
    \     prefixes += string[i..end]\n    end\n    \n    return prefixes\nend", " \
    \   prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefixes = Vector{String}()\n\
    \    for prefix in all_prefixes_iter(string)\n        push!(prefixes, prefix)\n\
    \    end\n    return prefixes\nend", "    prefixes = Vector{String}()\n    prefix_length\
    \ = 0\n    for c in string\n        if prefix_length == 0 \n            prefixes\
    \ += [c]\n        elseif prefix_length < length(c)\n            prefixes += [c]\n\
    \        else\n            prefixes += [string[prefix_length]]\n            prefix_length\
    \ = 0\n        end\n        prefix_length += 1\n    end\n    return prefixes\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for character in string\n        if character == '_'\n\
    \            prefix_length += 1\n        else\n            prefixes[prefix_length]\
    \ = character\n            prefix_length += 1\n        end\n    end\n    return\
    \ prefixes\nend", "    \n    prefixes = Vector{String}()\n    \n    for prefix\
    \ in all_prefixes_helper(string, prefixes)\n        push!(prefixes, prefix)\n\
    \    end\n    \n    return prefixes\nend", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    \n    for character in string\n        if character\
    \ == prefixes[prefix_length]\n            prefix_length += 1\n        else\n \
    \           prefix_length = 0\n            prefixes << prefixes[prefix_length]\n\
    \        end\n    end\n    \n    prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for c in string\n        if prefix_length == 0 ||\
    \ prefix_length + 1 < length(c)\n            prefixes += [c]\n            prefix_length\
    \ += 1\n        else\n            prefix_length = 0\n        end\n    end\n  \
    \  return prefixes\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefix", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    \n    for character in string\n        if character\
    \ == prefixes[prefix_length]\n            prefix_length += 1\n        else\n \
    \           prefix_length = 0\n            prefixes << prefixes[prefix_length]\n\
    \        end\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=juli", "    \n    prefixes = Vector{String}()\n\
    \    \n    for prefix in all_prefixes(string[1:end-1]) \n        push!(prefixes,\
    \ prefix[1:end-1] + string(prefix))\n    end\n    \n    prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefixes = Vector{String}()\n    prefixes = [string]\n    for i = 2:length(string)\n\
    \        prefixes += [string[i-1:i]]\n    end\n    prefixes\nend", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaaba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaabba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaabbaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbaabbaaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaabbaabba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaabbaabbaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbaabbaabbaaba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaabbaabbaabba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbaabbaabbaabbaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaabbaabbaabbaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaabbaabbaabbaaba\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaabbaabbaabbaabba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbaabbaabbaabbaabbaa\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbaabbaabbaabbaabbaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbaabbaabbaabbaabbaaba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbaabbaabbaabbaabbaabba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbaabbaab", "    \n    prefixes = []\n\
    \    \n    for c in string\n        prefixes += all_prefixes(string[1:end-1] +\
    \ c)\n    end\n    \n    prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for c in string\n        if prefix_length < length(c)\n\
    \            prefixes += [c]\n            prefix_length += 1\n        else\n \
    \           prefix_length = 0\n        end\n    end\n    return prefixes\nend",
  "    \n    prefixes = Vector{String}()\n    \n    for c in string\n        prefixes\
    \ += all_prefixes(string[1:end-1]) + [c]\n    end\n    \n    return prefixes\n\
    end", "    prefixes = Vector{String}()\n    prefix_length = 0\n    for c in string\n\
    \        if prefix_length == 0 && isalpha(c)\n            prefix_length = length(c)\n\
    \        elseif prefix_length != 0 && isalpha(c)\n            prefixes += [c]\n\
    \            prefix_length -= 1\n        end\n    end\n    prefixes\nend\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    \n    prefix_list = Vector{String}()\n    \n    for prefix in all_prefixes_helper(string,\
    \ prefix_list)\n        prefix_list += prefix\n    end\n    \n    return prefix_list\n\
    end", "    \n    prefixes = Vector{String}()\n    \n    for i = 1:length(string)\n\
    \        prefixes += string[(i+1):end]\n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.4>\nall_prefixes(\"abracadabra\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ the string \"abra\" appears in the string. \nWrite a function that takes a string\
    \ and returns the number of times the string \"abra\" appears in the string and\
    \ also the number of times the string \"cad\" appears in the string."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
