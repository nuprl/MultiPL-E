language: jl
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1) == 1 \n\
    @assert special_factorial(2) == 2 \n@assert special_factorial(3) == 6 \n@assert\
    \ special_factorial(4) == 24 \n@assert special_factorial(5) == 120 \n@assert special_factorial(6)\
    \ == 720 \n@assert special_factorial(7) == 5040 \n@assert special_factorial(8)\
    \ == 40320 \n@assert special_factorial(9) == 362880 \n@assert special_factorial(10)\
    \ == 3628800\n</cell>\n<text>\nExercise 3\nWrite a function that computes the\
    \ factorial of a given number using recursion.\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxy9ise7.jl:16\nin expression starting at\
    \ /tmp/tmpvxy9ise7.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        factorial(n) * factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(100);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(100);\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqj0xthdu.jl:17\nin expression starting at\
    \ /tmp/tmpqj0xthdu.jl:17\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \n\
    special_factorial(3)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the factorial of a given number using recursion.\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_9ulbvc.jl:17\nin expression starting at\
    \ /tmp/tmpg_9ulbvc.jl:17\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp1ecqkimn.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1ecqkimn.jl:14\n\
    in expression starting at /tmp/tmp1ecqkimn.jl:14\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<text>\nExercise 2: Write a function that calculates the factorial\
    \ of a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmwl9wzgb.jl:16\nin expression starting at\
    \ /tmp/tmpmwl9wzgb.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<text>\nThe function special_factorial is recursive, meaning\
    \ that it will call itself until it reaches the base case where n == 0. In this\
    \ case, the base case is when n == 0, which means that we return 1 since 1 factorial\
    \ is equal to 1. We will also need to import the function factorial from the math\
    \ library to complete the function definition:\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1cka4x1.jl:16\nin expression starting at\
    \ /tmp/tmph1cka4x1.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(5)\n</cell>\n\
    <text>\nThe function factorial is defined as:\n    factorial(n) = n!\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpw95omkb_.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw95omkb_.jl:14\n\
    in expression starting at /tmp/tmpw95omkb_.jl:14\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwp2_pnt.jl:16\nin expression starting at\
    \ /tmp/tmphwp2_pnt.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(3) ==\
    \ 6\n@assert special_factorial(4) == 24\n@assert special_factorial(5) == 120\n\
    @assert special_factorial(6) == 720\n@assert special_factorial(7) == 5040\n@assert\
    \ special_factorial(8) == 40320\n@assert special_factorial(9) == 362880\n@assert\
    \ special_factorial(10) == 3628800\n@assert special_factorial(11) == 39916800\n\
    @assert special_factorial(12) == 479001600\n@assert special_factorial(13) == 6227020800\n\
    @assert special_factorial(14) == 87178291200\n@assert special_factorial(15) ==\
    \ 1307674368000\n@assert special_factorial(16) == 20922789888000\n@assert special_factorial(17)\
    \ == 355687428096000\n@assert special_factorial(18) == 6402373705728000\n@assert\
    \ special_factorial(19) == 121645100408832000\n@assert special_factorial(20) ==\
    \ 2432902008176640000\n@assert special_factorial(21) == 51090942171709440000\n\
    @assert special_factorial(22) == 1124000727777607680000\n@assert special_factorial(23)\
    \ == 25852016738884976640000\n@assert special_factorial(24) == 620448401733239439360000\n\
    @assert special_factorial(25) == 15511210043330985984000000\n@assert special_factorial(26)\
    \ == 403291461126605635584000000\n@assert special_factorial(27) == 10888869450418352160768000000\n\
    @assert special_factorial(28) == 304888344611713860501504000000\n@assert special_factorial(29)\
    \ == 8841761993739701954543616000000\n@assert special_factorial(30) == 265252859812191058636308480000000\n\
    @assert special_factorial(31) == 8222838654177922817725562880000000\n@assert special_factorial(32)\
    \ == 263130836933693530167218012160000000\n@assert special_factorial(33) == 8683317618811886495518194401280000000\n\
    @assert special_factorial(34) == 28521267700285334472656250000000000000000\n@assert\
    \ special_factorial(\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6dnoisa.jl:16\nin expression starting at\
    \ /tmp/tmpa6dnoisa.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time brazilian_factorial(10)\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxk1k2ptl.jl:17\nin expression starting at\
    \ /tmp/tmpxk1k2ptl.jl:17\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwfdukqiw.jl:16\nin expression starting at\
    \ /tmp/tmpwfdukqiw.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time brazilian_factorial(100);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a number given as\
    \ a parameter. \nThe function should return the factorial of the number given\
    \ as a parameter. \nThe function should raise an error if the number given as\
    \ a parameter is negative.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sypj5_9.jl:17\nin expression starting at\
    \ /tmp/tmp9sypj5_9.jl:17\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwfdukqiw.jl:16\nin expression starting at\
    \ /tmp/tmpwfdukqiw.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3os77vtz.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp3os77vtz.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3os77vtz.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3os77vtz.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978838
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(100);\n@time\
    \ special_factorial(100);\n</cell>\n<text>\nExercise\nWrite a function that calculates\
    \ the factorial of a given number using recursion.\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg4g7fg6p.jl:17\nin expression starting at\
    \ /tmp/tmpg4g7fg6p.jl:17\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbsursty7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpbsursty7.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbsursty7.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbsursty7.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978838
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(3)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpb736aawl.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb736aawl.jl:14\n\
    in expression starting at /tmp/tmpb736aawl.jl:14\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gkp2e5c.jl:16\nin expression starting at\
    \ /tmp/tmp0gkp2e5c.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe factorial of a number\
    \ n is defined as:\n    factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd797o85q.jl:16\nin expression starting at\
    \ /tmp/tmpd797o85q.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)!\
    \ * (n-4)! * (n-5)! * (n-6)! * (n-7)! * (n-8)! * (n-9)! * (n-10)!\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nspecial_factorial(10)\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    factorial_series(n::Int64)::Int64\nusing Test\n\n@testset begin\n\n\
    candidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpjywln3ud.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjywln3ud.jl:14\n\
    in expression starting at /tmp/tmpjywln3ud.jl:14\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6siao463.jl:17\nin expression starting at\
    \ /tmp/tmp6siao463.jl:17\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpifegbj4y.jl:17\nin expression starting at\
    \ /tmp/tmpifegbj4y.jl:17\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1) == 1 \n\
    @assert special_factorial(2) == 2 \n@assert special_factorial(3) == 6 \n@assert\
    \ special_factorial(4) == 24 \n@assert special_factorial(5) == 120 \n@assert special_factorial(6)\
    \ == 720 \n@assert special_factorial(7) == 5040 \n@assert special_factorial(8)\
    \ == 40320 \n@assert special_factorial(9) == 362880 \n@assert special_factorial(10)\
    \ == 3628800\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8fj5bpsk.jl:16\nin expression starting at\
    \ /tmp/tmp8fj5bpsk.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)!\
    \ * (n-4)! * (n-5)! * (n-6)! * (n-7)! * (n-8)! * (n-9)! * (n-10)! * (n-11)! *\
    \ (n-12)! * (n-13)! * (n-14)! * (n-15)! * (n-16)! * (n-17)! * (n-18)! * (n-19)!\
    \ * (n-20)! * (n-21)! * (n-22)! * (n-23)! * (n-24)! * (n-25)! * (n-26)! * (n-27)!\
    \ * (n-28)! * (n-29)! * (n-30)! * (n-31)! * (n-32)! * (n-33)! * (n-34)! * (n-35)!\
    \ * (n-36)! * (n-37)! * (n-38)! * (n-39)! * (n-40)! * (n-41)! * (n-42)! * (n-43)!\
    \ * (n-44)! * (n-45)! * (n-46)! * (n-47)! * (n-48)! * (n-49)! * (n-50)! * (n-51)!\
    \ * (n-52)! * (n-53)! * (n-54)! * (n-55)! * (n-56)! * (n-57)! * (n-58)! * (n-59)!\
    \ * (n-60)! * (n-61)! * (n-60)! * (n-62)! * (n-63)! * (n-64)! * (n-65)! * (n-66)!\
    \ * (n-67)! * (n-68)! * (n-69)! * (n-70)! * (n-71)! * (n-72)! * (n-73)! * (n-74)!\
    \ * (n-75)! * (n-76)! * (n-77)! * (n-78)! * (n-79)! * (n-80)! * (n-81)! * (n-82)!\
    \ * (n-83)! * (n-84)! * (n-85)! * (n-86)! * (n-87)! * (n-88)! * (n-89)! * (n-90)!\
    \ * (n-91)! * (n-92)! * (n-93)! * (n-94)! * (n-95)! * (n-96)! * (n-97)! * (n-98)!\
    \ * (n-99)! * (n-100)! * (n-101)! * (n-102)! * (n-103)! * (n-104)! * (n-105)!\
    \ * (n-106)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t\
    @test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp4842egmf.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4842egmf.jl:14\n\
    in expression starting at /tmp/tmp4842egmf.jl:14\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_09outh.jl:16\nin expression starting at\
    \ /tmp/tmpf_09outh.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplf_llvoa.jl:16\nin expression starting at\
    \ /tmp/tmplf_llvoa.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n# Test\n@assert special_factorial(1)\
    \ == 1 \n@assert special_factorial(2) == 2 \n@assert special_factorial(3) == 6\
    \ \n@assert special_factorial(4) == 24 \n@assert special_factorial(5) == 120 \n\
    @assert special_factorial(6) == 720 \n@assert special_factorial(7) == 5040 \n\
    @assert special_factorial(8) == 40320 \n@assert special_factorial(9) == 362880\
    \ \n@assert special_factorial(10) == 3628800\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that calculates the factorial of a number given as an input parameter\
    \ and returns the factorial as a Float64. Test your function with the following\
    \ values:\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t\
    @test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_vmzl7pa.jl:17\nin expression starting at\
    \ /tmp/tmp_vmzl7pa.jl:17\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgyvk475v.jl:16\nin expression starting at\
    \ /tmp/tmpgyvk475v.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n - 1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdu4tdkno.jl:17\nin expression starting at\
    \ /tmp/tmpdu4tdkno.jl:17\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp198u_7no.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp198u_7no.jl:1\n\
    in expression starting at /tmp/tmp198u_7no.jl:1\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbsursty7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpbsursty7.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbsursty7.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbsursty7.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978838
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe factorial of a number\
    \ n is defined as:\n    factorial(n) = n!\n    where n > 0\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcbi0wnwc.jl:16\nin expression starting at\
    \ /tmp/tmpcbi0wnwc.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5) ==\
    \ 120\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2uk3mww.jl:16\nin expression starting at\
    \ /tmp/tmpm2uk3mww.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else \n        special_factorial(n - 1) * n\n\
    end\n</cell>\n<code language=julia-1.5>\n@time brazilian_factorial(100);\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqyw8xmmf.jl:16\nin expression starting at\
    \ /tmp/tmpqyw8xmmf.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5) ==\
    \ 120\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0z0b46qp.jl:16\nin expression starting at\
    \ /tmp/tmp0z0b46qp.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpifegbj4y.jl:17\nin expression starting at\
    \ /tmp/tmpifegbj4y.jl:17\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10)\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzz8jqfbp.jl:17\nin expression starting at\
    \ /tmp/tmpzz8jqfbp.jl:17\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.3>\nspecial_factorial(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number. \nThe function should receive a number as input and should return the\
    \ factorial of this number.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwtmjt6qo.jl:16\nin expression starting at\
    \ /tmp/tmpwtmjt6qo.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmphhhg8r4w.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphhhg8r4w.jl:14\n\
    in expression starting at /tmp/tmphhhg8r4w.jl:14\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplf_llvoa.jl:16\nin expression starting at\
    \ /tmp/tmplf_llvoa.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<text>\nThe factorial function above is recursive, meaning\
    \ that it will call itself until it reaches the base case (when n is 0). In the\
    \ special factorial function, we will also need to keep track of the factorial\
    \ of previous numbers. To do this, we will use a mutable variable called factorials.\
    \ We will initialize this variable with 1 because factorials[0] will always be\
    \ 1. We will also need a variable called n to keep track of the current factorial\
    \ we are calculating. Finally, we will use a for loop to iterate over all numbers\
    \ from 1 to n. Finally, we will return the factorial of n by multiplying the factorials\
    \ variable with the current factorial.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_rea5iiw.jl:16\nin expression starting at\
    \ /tmp/tmp_rea5iiw.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\nspecial_factorial(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwvmvjusy.jl:16\nin expression starting at\
    \ /tmp/tmpwvmvjusy.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5) ==\
    \ 120\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a number given as an input.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th0r8vt.jl:16\nin expression starting at\
    \ /tmp/tmp1th0r8vt.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)!\
    \ * (n-4)! * (n-5)! * ... * (n-(n+1))!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpakzc2qpr.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpakzc2qpr.jl:14\n\
    in expression starting at /tmp/tmpakzc2qpr.jl:14\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3os77vtz.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp3os77vtz.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3os77vtz.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3os77vtz.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978838
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwm3a6ms1.jl:17\nin expression starting at\
    \ /tmp/tmpwm3a6ms1.jl:17\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3os77vtz.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp3os77vtz.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3os77vtz.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3os77vtz.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978838
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<text>\nNow let's test the function by giving it a number\
    \ between 0 and 20\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4o77b3ui.jl:17\nin expression starting at\
    \ /tmp/tmp4o77b3ui.jl:17\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        factorial(n) * factorial(n-1)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4grw2xbz.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp4grw2xbz.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 144 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4grw2xbz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4grw2xbz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4grw2xbz.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 2880 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4grw2xbz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4grw2xbz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4grw2xbz.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 3628800 == 125411328000\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4grw2xbz.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4grw2xbz.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978840
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpllxw2ohu.jl:17\nin expression starting at\
    \ /tmp/tmpllxw2ohu.jl:17\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(100)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype special_factorial(1000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype special_factorial(10000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype special_factorial(100000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype special_factorial(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype special_factorial(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype special_factorial(100000000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype special_factorial(1000000000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype special_factorial(10000000000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype special_factorial(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype special_factorial(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype special_factorial(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(100000000000000000000000)\n\
    </cell>\n\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t\
    @test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp6pttcca8.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6pttcca8.jl:14\n\
    in expression starting at /tmp/tmp6pttcca8.jl:14\n"
  stdout: ''
  timestamp: 1659978840
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1)\
    \ == 1 \"The function special_factorial should return 1 when n = 1\"\n@assert\
    \ special_factorial(2) == 2 \"The function special_factorial should return 2 when\
    \ n = 2\"\n@assert special_factorial(3) == 6 \"The function special_factorial\
    \ should return 6 when n = 3\"\n@assert special_factorial(4) == 24 \"The function\
    \ special_factorial should return 24 when n = 4\"\n@assert special_factorial(5)\
    \ == 120 \"The function special_factorial should return 120 when n = 5\"\n@assert\
    \ special_factorial(6) == 720 \"The function special_factorial should return 720\
    \ when n = 6\"\n@assert special_factorial(7) == 50401 \"The function special_factorial\
    \ should return 50401 when n = 7\"\n@assert special_factorial(8) == 40320 \"The\
    \ function special_factorial should return 40320 when n = 8\"\n@assert special_factorial(9)\
    \ == 362880 \"The function special_factorial should return 362880 when n = 9\"\
    \n@assert special_factorial(10) == 3628800 \"The function special_factorial should\
    \ return 3628800\"\n@assert special_factorial(11) == 39916800 \"The function special_factorial\
    \ should return 39916800\"\n@assert special_factorial(12) == 479001600 \"The function\
    \ special_factorial should return 479001600\"\n@assert special_factorial(13) ==\
    \ 6227020800 \"The function special_factorial should return 6227020800\"\n@assert\
    \ special_factorial(14) == 87178291200 \"The function special_factorial should\
    \ return 87178291200\"\n@assert special_factorial(15) == 13076743680000 \"The\
    \ function special_factorial should return 13076743680000\"\n@assert special_factorial(16)\
    \ == 20922789888000  \"The function special_factorial should return 20922789888000\"\
    \n@assert special_factorial(17) == 355687428096000  \"The function special_factorial\
    \ should return 355687428096000\"\n@assert special_factorial(18) == 6402373705728000\
    \  \"The function special_factorial should return 6402373705728000\"\n@assert\
    \ special_factorial(19) == 121645100408832000  \"The function special_factorial\
    \ should return 121645100408832000\"\n@assert \nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhh3s0tn.jl:17\nin expression starting at\
    \ /tmp/tmpqhh3s0tn.jl:17\n"
  stdout: ''
  timestamp: 1659978840
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptr774w8d.jl:17\nin expression starting at\
    \ /tmp/tmptr774w8d.jl:17\n"
  stdout: ''
  timestamp: 1659978840
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp198u_7no.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp198u_7no.jl:1\n\
    in expression starting at /tmp/tmp198u_7no.jl:1\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\n\
    end\n</cell>\n<code language=julia-1.5>\nspecial_factorial(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1i4baniz.jl:16\nin expression starting at\
    \ /tmp/tmp1i4baniz.jl:16\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else \n        n * special_factorial(n-1)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb4jffwqs.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpb4jffwqs.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4jffwqs.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4jffwqs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb4jffwqs.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4jffwqs.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4jffwqs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb4jffwqs.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4jffwqs.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4jffwqs.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwp2_pnt.jl:16\nin expression starting at\
    \ /tmp/tmphwp2_pnt.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)!\
    \ * (n-4)! * (n-5)! * ... * (n-(n+1))!\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpq1_23oub.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq1_23oub.jl:14\n\
    in expression starting at /tmp/tmpq1_23oub.jl:14\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqa4z3mgz.jl:16\nin expression starting at\
    \ /tmp/tmpqa4z3mgz.jl:16\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnj0sp2wq.jl:17\nin expression starting at\
    \ /tmp/tmpnj0sp2wq.jl:17\n"
  stdout: ''
  timestamp: 1659978840
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<text>\nThe factorial function will return the factorial of\
    \ a given number n. For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_iq7pwh6.jl:16\nin expression starting at\
    \ /tmp/tmp_iq7pwh6.jl:16\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5o59agfx.jl:17\nin expression starting at\
    \ /tmp/tmp5o59agfx.jl:17\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_g3j46i.jl:17\nin expression starting at\
    \ /tmp/tmpp_g3j46i.jl:17\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1)\
    \ == 1 \"The function special_factorial should return 1 when n is 1\"\n@assert\
    \ special_factorial(2) == 2 \"The function special_factorial should return 2 when\
    \ n is 2\"\n@assert special_factorial(3) == 6 \"The function special_factorial\
    \ should return 6 when n is 3\"\n@assert special_factorial(4) == 24 \"The function\
    \ special_factorial should return 24 when n is 4\"\n@assert special_factorial(5)\
    \ == 120 \"The function special_factorial should return 120 when n is 5\"\n@assert\
    \ special_factorial(6) == 720 \"The function special_factorial should return 720\
    \ when n is 6\"\n@assert special_factorial(7) == 50401 \"The function special_factorial\
    \ should return 50401 when n is 7\"\n@assert special_factorial(8) == 40320 \"\
    The function special_factorial should return 40320 when n is 8\"\n@assert special_factorial(9)\
    \ == 362880 \"The function special_factorial should return 362880 when n is 9\"\
    \n@assert special_factorial(10) == 3628800 \"The function special_factorial should\
    \ return 3628800 when n is 10\"\n@assert special_factorial(11) == 39916800 \"\
    The function special_factorial should return 39916800 when n is 11\"\n@assert\
    \ special_factorial(12) == 479001600 \"The function special_factorial should return\
    \ 479001600 when n is 12\"\n@assert special_factorial(13) == 6227020800 \"The\
    \ function special_factorial should return 6227020800 when n is 13\"\n@assert\
    \ special_factorial(14) == 87178291200 \"The function special_factorial should\
    \ return 87178291200 when n is 14\"\n@assert special_factorial(15) == 1307674368000\
    \ \"The function special_factorial should return 1307674368000 when n is 15\"\n\
    @assert special_factorial(16) == 20922789888000 \"The function special_factorial\
    \ should return 20922789888000 when n is 16\"\n@assert special_factorial(17) ==\
    \ 35568742809600 \"The function special_factorial should return 35568742809600\
    \ when n is 17\"\n@assert special_factorial(18) == 640237370572800 \"The function\
    \ special_factorial \nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpej2le59f.jl:17\nin expression starting at\
    \ /tmp/tmpej2le59f.jl:17\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2t8dj05.jl:17\nin expression starting at\
    \ /tmp/tmpy2t8dj05.jl:17\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplf_llvoa.jl:16\nin expression starting at\
    \ /tmp/tmplf_llvoa.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwp2_pnt.jl:16\nin expression starting at\
    \ /tmp/tmphwp2_pnt.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        factorial(n) * factorial(n-1)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4grw2xbz.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp4grw2xbz.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 144 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4grw2xbz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4grw2xbz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4grw2xbz.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 2880 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4grw2xbz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4grw2xbz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4grw2xbz.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 3628800 == 125411328000\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4grw2xbz.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4grw2xbz.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978840
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.3>\nspecial_factorial(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjfia4p5i.jl:16\nin expression starting at\
    \ /tmp/tmpjfia4p5i.jl:16\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwfdukqiw.jl:16\nin expression starting at\
    \ /tmp/tmpwfdukqiw.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a number\
    \ given as input.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzfcnvwhx.jl:17\nin expression starting at\
    \ /tmp/tmpzfcnvwhx.jl:17\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygmfbmu1.jl:17\nin expression starting at\
    \ /tmp/tmpygmfbmu1.jl:17\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoglrxz4l.jl:17\nin expression starting at\
    \ /tmp/tmpoglrxz4l.jl:17\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3xp4ojl.jl:16\nin expression starting at\
    \ /tmp/tmpa3xp4ojl.jl:16\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwp2_pnt.jl:16\nin expression starting at\
    \ /tmp/tmphwp2_pnt.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwm3a6ms1.jl:17\nin expression starting at\
    \ /tmp/tmpwm3a6ms1.jl:17\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number using a recursive function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5e7i_9uy.jl:16\nin expression starting at\
    \ /tmp/tmp5e7i_9uy.jl:16\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        special_factorial(n-1) * n\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4b67curz.jl:17\nin expression starting at\
    \ /tmp/tmp4b67curz.jl:17\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpazi0278i.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpazi0278i.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpazi0278i.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpazi0278i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpazi0278i.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpazi0278i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpazi0278i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpazi0278i.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpazi0278i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpazi0278i.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4q3znit1.jl:17\nin expression starting at\
    \ /tmp/tmp4q3znit1.jl:17\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwfdukqiw.jl:16\nin expression starting at\
    \ /tmp/tmpwfdukqiw.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5) ==\
    \ 120\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfaccceu.jl:16\nin expression starting at\
    \ /tmp/tmpgfaccceu.jl:16\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n@assert\
    \ special_factorial(5) == 120\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the factorial of a given number using recursion.\nusing Test\n\n\
    @testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfevznix1.jl:17\nin expression starting at\
    \ /tmp/tmpfevznix1.jl:17\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwp2_pnt.jl:16\nin expression starting at\
    \ /tmp/tmphwp2_pnt.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * ... *\
    \ 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(3)\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n\
    \    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpvgkr6ha2.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvgkr6ha2.jl:14\n\
    in expression starting at /tmp/tmpvgkr6ha2.jl:14\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(5)\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a number given as an input parameter. \nThe function should return the factorial\
    \ of the number given as an input parameter. \nThe function should raise a TypeError\
    \ if the input parameter is not a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp60ngkxv4.jl:17\nin expression starting at\
    \ /tmp/tmp60ngkxv4.jl:17\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbsursty7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpbsursty7.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbsursty7.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbsursty7.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978838
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    factorial(n::Int64)::Int64\n\
    \    \n    Computes the factorial of a given integer.\n    \n    For example:\n\
    \    \n    The function will receive an integer as input and should return the\
    \ factorial of this integer.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjww18i3y.jl:17\nin expression starting at\
    \ /tmp/tmpjww18i3y.jl:17\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n@time brazilian_factorial(100);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnubtx40j.jl:16\nin expression starting at\
    \ /tmp/tmpnubtx40j.jl:16\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5) ==\
    \ 120\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj28jk3zh.jl:16\nin expression starting at\
    \ /tmp/tmpj28jk3zh.jl:16\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a given integer n using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpny1aigbv.jl:16\nin expression starting at\
    \ /tmp/tmpny1aigbv.jl:16\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n# Test the function with different\
    \ inputs\nprintln(special_factorial(1))\nprintln(special_factorial(2))\nprintln(special_factorial(3))\n\
    println(special_factorial(4))\nprintln(special_factorial(5))\nprintln(special_factorial(6))\n\
    println(special_factorial(7))\nprintln(special_factorial(8))\nprintln(special_factorial(9))\n\
    println(special_factorial(10))\nprintln(special_factorial(11))\nprintln(special_factorial(12))\n\
    println(special_factorial(13))\nprintln(special_factorial(14))\nprintln(special_factorial(15))\n\
    println(special_factorial(16))\nprintln(special_factorial(17))\nprintln(special_factorial(18))\n\
    println(special_factorial(19))\nprintln(special_factorial(20))\nprintln(special_factorial(21))\n\
    println(special_factorial(22))\nprintln(special_factorial(23))\nprintln(special_factorial(24))\n\
    println(special_factorial(25))\nprintln(special_factorial(26))\nprintln(special_factorial(27))\n\
    println(special_factorial(28))\nprintln(special_factorial(29))\nprintln(special_factorial(30))\n\
    println(special_factorial(31))\nprintln(special_factorial(32))\nprintln(special_factorial(33))\n\
    println(special_factorial(34))\nprintln(special_factorial(35))\nprintln(special_factorial(36))\n\
    println(special_factorial(37))\nprintln(special_factorial(38))\nprintln(special_factorial(39))\n\
    println(special_factorial(40))\nprintln(special_factorial(41))\nprintln(special_factorial(42))\n\
    println(special_factorial(43))\nprintln(special_factorial(44))\nprintln(special_factorial(45))\n\
    println(special_factorial(46))\nprintln(special_factorial(47))\nprintln(special_factorial(48))\n\
    println(special_factorial(49))\nprintln(special_factorial(50))\nprintln(special_factorial(51))\n\
    println(special_factorial(52))\nprintln(special_factorial(53))\nprintln(special_factorial(54))\n\
    println(special_factorial(55))\nprintln(special_factorial(56))\nprintln(special_factorial(57))\n\
    println(special_factorial(58))\nprintln(special_factorial(59))\nprintln(special_factorial(60))\n\
    println(special_factorial(\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph60lmbtg.jl:16\nin expression starting at\
    \ /tmp/tmph60lmbtg.jl:16\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else \n        special_factorial(n - 1) * n\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8p7ahwki.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp8p7ahwki.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8p7ahwki.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8p7ahwki.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8p7ahwki.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8p7ahwki.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8p7ahwki.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8p7ahwki.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8p7ahwki.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8p7ahwki.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqu7do0u.jl:16\nin expression starting at\
    \ /tmp/tmpmqu7do0u.jl:16\n"
  stdout: ''
  timestamp: 1659978843
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<text>\nExercise 2\nWrite a function that receives an integer\
    \ as input and returns the factorial of this integer.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zafd5w3.jl:16\nin expression starting at\
    \ /tmp/tmp0zafd5w3.jl:16\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5) ==\
    \ 120\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqo0ufks3.jl:16\nin expression starting at\
    \ /tmp/tmpqo0ufks3.jl:16\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7tnca8h3.jl:17\nin expression starting at\
    \ /tmp/tmp7tnca8h3.jl:17\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(5)\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps2ad177x.jl:16\nin expression starting at\
    \ /tmp/tmps2ad177x.jl:16\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(3)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpqywaqo58.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqywaqo58.jl:14\n\
    in expression starting at /tmp/tmpqywaqo58.jl:14\n"
  stdout: ''
  timestamp: 1659978843
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ number using a while loop.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmptllhyj9l.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptllhyj9l.jl:14\n\
    in expression starting at /tmp/tmptllhyj9l.jl:14\n"
  stdout: ''
  timestamp: 1659978843
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_g3j46i.jl:17\nin expression starting at\
    \ /tmp/tmpp_g3j46i.jl:17\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7qkt9oe_.jl:16\nin expression starting at\
    \ /tmp/tmp7qkt9oe_.jl:16\n"
  stdout: ''
  timestamp: 1659978843
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3os77vtz.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp3os77vtz.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3os77vtz.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3os77vtz.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978838
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that receives a number\
    \ as input and returns the factorial of this number.\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfzqvthe8.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfzqvthe8.jl:14\n\
    in expression starting at /tmp/tmpfzqvthe8.jl:14\n"
  stdout: ''
  timestamp: 1659978843
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbsursty7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpbsursty7.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbsursty7.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbsursty7.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978838
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)::Int64\n\
    \    \n    Calculates the factorial series up to n.\n    \n    For example:\n\
    \    \n    The function will receive an integer as input and should return the\
    \ factorial\n    series of this integer.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpol4514me.jl:16\nin expression starting at\
    \ /tmp/tmpol4514me.jl:16\n"
  stdout: ''
  timestamp: 1659978843
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpchrydtzl.jl:16\nin expression starting at\
    \ /tmp/tmpchrydtzl.jl:16\n"
  stdout: ''
  timestamp: 1659978843
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglh86djy.jl:16\nin expression starting at\
    \ /tmp/tmpglh86djy.jl:16\n"
  stdout: ''
  timestamp: 1659978843
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxvvyj881.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpxvvyj881.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvvyj881.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvvyj881.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxvvyj881.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvvyj881.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvvyj881.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxvvyj881.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvvyj881.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvvyj881.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978845
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpw0xqjai_.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw0xqjai_.jl:14\n\
    in expression starting at /tmp/tmpw0xqjai_.jl:14\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11mn3rtk.jl:17\nin expression starting at\
    \ /tmp/tmp11mn3rtk.jl:17\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5ymi9ur.jl:17\nin expression starting at\
    \ /tmp/tmp_5ymi9ur.jl:17\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbsursty7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpbsursty7.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbsursty7.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbsursty7.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978838
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3xv06fa4.jl:17\nin expression starting at\
    \ /tmp/tmp3xv06fa4.jl:17\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<text>\nThe factorial function above is recursive, which means\
    \ that it calls itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep calling itself until it reaches the base case. In the case of the factorial\
    \ function, the base case is when the input is 0. The factorial function will\
    \ keep \nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9u4ojym.jl:16\nin expression starting at\
    \ /tmp/tmpv9u4ojym.jl:16\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n@time\
    \ special_factorial(10000);\n</cell>\n<text>\nExercise: Write a function that\
    \ calculates the factorial of a given number using recursion.\nusing Test\n\n\
    @testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27jbkx80.jl:16\nin expression starting at\
    \ /tmp/tmp27jbkx80.jl:16\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n@time brazilian_factorial(100);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzmbkvvrb.jl:16\nin expression starting at\
    \ /tmp/tmpzmbkvvrb.jl:16\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)!\
    \ * (n-4)! * (n-5)! * (n-6)! * (n-7)! * (n-8)! * (n-9)! * (n-10)! * (n-11)! *\
    \ (n-12)! * (n-13)! * (n-14)! * (n-15)! * (n-16)! * (n-17)! * (n-18)! * (n-19)!\
    \ * (n-20)! * (n-21)! * (n-22)! * (n-23)! * (n-24)! * (n-25)! * (n-26)! * (n-27)!\
    \ * (n-28)! * (n-29)! * (n-30)! * (n-31)! * (n-32)! * (n-33)! * (n-34)! * (n-35)!\
    \ * (n-36)! * (n-37)! * (n-38)! * (n-39)! * (n-40)! * (n-41)! * (n-42)! * (n-43)!\
    \ * (n-44)! * (n-45)! * (n-46)! * (n-47)! * (n-48)! * (n-49)! * (n-50)! * (n-51)!\
    \ * (n-52)! * (n-53)! * (n-54)! * (n-55)! * (n-56)! * (n-57)! * (n-58)! * (n-59)!\
    \ * (n-60)! * (n-61)! * (n-62)! * (n-63)! * (n-64)! * (n-65)! * (n-66)! * (n-67)!\
    \ * (n-68)! * (n-69)! * (n-70)! * (n-71)! * (n-72)! * (n-73)! * (n-74)! * (n-75)!\
    \ * (n-76)! * (n-77)! * (n-78)! * (n-79)! * (n-80)! * (n-81)! * (n-82)! * (n-83)!\
    \ * (n-84)! * (n-85)! * (n-86)! * (n-87)! * (n-88)! * (n-89)! * (n-90)! * (n-91)!\
    \ * (n-92)! * (n-93)! * (n-94)! * (n-95)! * (n-96)! * (n-97)! * (n-98)! * (n-99)!\
    \ * (n-100)! * (n-101)! * (n-102)! * (n-103)! * (n-104)! * (n-105)! * (n-106)!\
    \ * (n-107\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t\
    @test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpb2ne1ol7.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb2ne1ol7.jl:14\n\
    in expression starting at /tmp/tmpb2ne1ol7.jl:14\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n# TEST special_factorial (5th block)\n\
    @test special_factorial(5) == 120\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that computes the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnlp8npr.jl:16\nin expression starting at\
    \ /tmp/tmpcnlp8npr.jl:16\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000)\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqjtcs6qy.jl:17\nin expression starting at\
    \ /tmp/tmpqjtcs6qy.jl:17\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<text>\nNow let's test the function with some examples:\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp59fnmh9x.jl:17\nin expression starting at\
    \ /tmp/tmp59fnmh9x.jl:17\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5) ==\
    \ 120\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj28jk3zh.jl:16\nin expression starting at\
    \ /tmp/tmpj28jk3zh.jl:16\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp110eayg8.jl:17\nin expression starting at\
    \ /tmp/tmp110eayg8.jl:17\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxvvyj881.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpxvvyj881.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvvyj881.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvvyj881.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxvvyj881.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvvyj881.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvvyj881.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxvvyj881.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvvyj881.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvvyj881.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978845
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk48f6euq.jl:17\nin expression starting at\
    \ /tmp/tmpk48f6euq.jl:17\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * ... *\
    \ 1!\n    end\nend\n</cell>\n<text>\nThe function special_factorial is defined\
    \ in the file factorial.jl. Let's see how it works:\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp2wcxuuw0.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2wcxuuw0.jl:14\n\
    in expression starting at /tmp/tmp2wcxuuw0.jl:14\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n@time brazilian_factorial(100);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxcisrlb6.jl:16\nin expression starting at\
    \ /tmp/tmpxcisrlb6.jl:16\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n# Let's test the function with some\
    \ examples\n@test special_factorial(5) == 120\n@test special_factorial(4) == 24\n\
    @test special_factorial(3) == 6\n@test special_factorial(2) == 2\n@test special_factorial(0)\
    \ == 1\n</cell>\n<text>\nExercise 3\nWrite a function that computes the factorial\
    \ of a number given as an input argument.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwbjg7y_u.jl:16\nin expression starting at\
    \ /tmp/tmpwbjg7y_u.jl:16\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwfdukqiw.jl:16\nin expression starting at\
    \ /tmp/tmpwfdukqiw.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(3) ==\
    \ 6\n@assert special_factorial(4) == 24\n@assert special_factorial(5) == 120\n\
    @assert special_factorial(6) == 720\n@assert special_factorial(7) == 5040\n@assert\
    \ special_factorial(8) == 40320\n@assert special_factorial(9) == 362880\n@assert\
    \ special_factorial(10) == 3628800\n@assert special_factorial(11) == 39916800\n\
    @assert special_factorial(12) == 479001600\n@assert special_factorial(13) == 6227020800\n\
    @assert special_factorial(14) == 87178291200\n@assert special_factorial(15) ==\
    \ 1307674368000\n@assert special_factorial(16) == 20922789888000\n@assert special_factorial(17)\
    \ == 355687428096000\n@assert special_factorial(18) == 6402373705728000\n@assert\
    \ special_factorial(19) == 121645100408832000\n@assert special_factorial(20) ==\
    \ 2432902008176640000\n@assert special_factorial(21) == 51090942171709440000\n\
    @assert special_factorial(22) == 1124000727777607680000\n@assert special_factorial(23)\
    \ == 25852016738884976640000\n@assert special_factorial(24) == 620448401733239439360000\n\
    @assert special_factorial(25) == 15511210043330985984000000\n@assert special_factorial(26)\
    \ == 403291461126605635584000000\n@assert special_factorial(27) == 10888869450418352160768000000\n\
    @assert special_factorial(28) == 304888344611713860501504000000\n@assert special_factorial(29)\
    \ == 8841761993739701954543616000000\n@assert special_factorial(30) == 265252859812191058636308480000000\n\
    @assert special_factorial(31) == 8222838654177922817725562880000000\n@assert special_factorial(32)\
    \ == 263130836933693530167218012160000000\n@assert special_factorial(33) == 82228386541779228177255628800000000\n\
    @assert special_factorial(34) == 108888694504183521607680000000000\n@assert special_factorial(35\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7k4mymcc.jl:16\nin expression starting at\
    \ /tmp/tmp7k4mymcc.jl:16\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnqmg4fii.jl:16\nin expression starting at\
    \ /tmp/tmpnqmg4fii.jl:16\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpplrk918v.jl:16\nin expression starting at\
    \ /tmp/tmpplrk918v.jl:16\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zy97y46.jl:17\nin expression starting at\
    \ /tmp/tmp0zy97y46.jl:17\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        factorial(n) * factorial(n-1)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4grw2xbz.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp4grw2xbz.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 144 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4grw2xbz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4grw2xbz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4grw2xbz.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 2880 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4grw2xbz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4grw2xbz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4grw2xbz.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 3628800 == 125411328000\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4grw2xbz.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4grw2xbz.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978840
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp198u_7no.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp198u_7no.jl:1\n\
    in expression starting at /tmp/tmp198u_7no.jl:1\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n@assert special_factorial(5)\
    \ == 120\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a number given as an input parameter and prints the result to the screen.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfshb7iyg.jl:16\nin expression starting at\
    \ /tmp/tmpfshb7iyg.jl:16\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3os77vtz.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp3os77vtz.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3os77vtz.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3os77vtz.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978838
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwp2_pnt.jl:16\nin expression starting at\
    \ /tmp/tmphwp2_pnt.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpplrk918v.jl:16\nin expression starting at\
    \ /tmp/tmpplrk918v.jl:16\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)!\
    \ * (n-4)! * ... * (n-(n-1))!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp1oltimwd.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1oltimwd.jl:14\n\
    in expression starting at /tmp/tmp1oltimwd.jl:14\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphw4vo04f.jl:17\nin expression starting at\
    \ /tmp/tmphw4vo04f.jl:17\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit9jf40n.jl:17\nin expression starting at\
    \ /tmp/tmpit9jf40n.jl:17\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * ... *\
    \ 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5)\
    \ == 120\n@assert special_factorial(10) == 3628800\n@assert special_factorial(20)\
    \ == 5040\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmps1jjgfw7.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps1jjgfw7.jl:14\n\
    in expression starting at /tmp/tmps1jjgfw7.jl:14\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1)\
    \ == 1 \n@assert special_factorial(2) == 2 \n@assert special_factorial(3) == 6\
    \ \n@assert special_factorial(4) == 24 \n@assert special_factorial(5) == 120 \n\
    @assert special_factorial(6) == 720 \n@assert special_factorial(7) == 5040 \n\
    @assert special_factorial(8) == 40320 \n@assert special_factorial(9) == 362880\
    \ \n@assert special_factorial(10) == 3628800\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5tllc8r.jl:17\nin expression starting at\
    \ /tmp/tmpm5tllc8r.jl:17\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number. \nThe function should receive an integer as input and should return\
    \ the factorial of this integer.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppd_sv4mp.jl:16\nin expression starting at\
    \ /tmp/tmppd_sv4mp.jl:16\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)!\
    \ * (n-4)! * (n-5)! * (n-6)! * (n-7)! * (n-8)! * (n-9)! * (n-10)! * (n-11)! *\
    \ (n-12)! * (n-13)! * (n-14)! * (n-15)! * (n-16)! * (n-17)! * (n-18)! * (n-19)!\
    \ * (n-20)! * (n-21)! * (n-22)! * (n-23)! * (n-24)! * (n-25)! * (n-26)! * (n-27)!\
    \ * (n-28)! * (n-29)! * (n-30)! * (n-31)! * (n-32)! * (n-33)! * (n-34)! * (n-35)!\
    \ * (n-36)! * (n-37)! * (n-38)! * (n-39)! * (n-40)! * (n-41)! * (n-42)! * (n-43)!\
    \ * (n-44)! * (n-45)! * (n-46)! * (n-47)! * (n-48)! * (n-49)! * (n-50)! * (n-51)!\
    \ * (n-52)! * (n-53)! * (n-54)! * (n-55)! * (n-56)! * (n-57)! * (n-58)! * (n-59)!\
    \ * (n-60)! * (n-61)! * (n-62)! * (n-63)! * (n-64)! * (n-65)! * (n-66)! * (n-67)!\
    \ * (n-68)! * (n-69)! * (n-70)! * (n-71)! * (n-72)! * (n-73)! * (n-74)! * (n-75)!\
    \ * (n-76)! * (n-77)! * (n-78)! * (n-79)! * (n-80)! * (n-81)! * (n-82)! * (n-83)!\
    \ * (n-84)! * (n-85)! * (n-86)! * (n-87)! * (n-88)! * (n-89)! * (n-90)! * (n-91)!\
    \ * (n-92)! * (n-93)! * (n-94)! * (n-95)! * (n-96)! * (n-97)! * (n-98)! * (n-99)!\
    \ * (n-100)! * (n-101)! * (n-102)! * (n-103)! * (n-104)! * (n-105)! * (n-106)!\
    \ * (n-107\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t\
    @test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpb2ne1ol7.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb2ne1ol7.jl:14\n\
    in expression starting at /tmp/tmpb2ne1ol7.jl:14\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwp2_pnt.jl:16\nin expression starting at\
    \ /tmp/tmphwp2_pnt.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5) ==\
    \ 120\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsh8o2qc0.jl:16\nin expression starting at\
    \ /tmp/tmpsh8o2qc0.jl:16\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n - 1))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpas8ozgeq.jl:16\nin expression starting at\
    \ /tmp/tmpas8ozgeq.jl:16\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        factorial(n) * factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1)\
    \ == 1 \n@assert special_factorial(2) == 2 \n@assert special_factorial(3) == 6\
    \ \n@assert special_factorial(4) == 24 \n@assert special_factorial(5) == 120 \n\
    @assert special_factorial(6) == 720 \n@assert special_factorial(7) == 5040 \n\
    @assert special_factorial(8) == 40320 \n@assert special_factorial(9) == 362880\
    \ \n@assert special_factorial(10) == 3628800\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that calculates the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_39l5xmu.jl:17\nin expression starting at\
    \ /tmp/tmp_39l5xmu.jl:17\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n \
    \   end\nend\n</cell>\n<code language=julia-1.3>\nspecial_factorial(3)\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\nThe Brazilian factorial is defined as:\n  \
    \  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6f7e0c49.jl:17\nin expression starting at\
    \ /tmp/tmp6f7e0c49.jl:17\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpol7c3wx_.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpol7c3wx_.jl:14\n\
    in expression starting at /tmp/tmpol7c3wx_.jl:14\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n@assert special_factorial(5)\
    \ == 120\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a number given as an input.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2y1_6kcq.jl:16\nin expression starting at\
    \ /tmp/tmp2y1_6kcq.jl:16\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"The factorial of a number\
    \ is the product of all positive integers up to and \nincluding the number itself.\
    \ For example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\n    \n    For example:\n    \n \
    \   The function will receive an integer as input and should return the factorial\
    \ \n    of this integer.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgj_4vlq9.jl:17\nin expression starting at\
    \ /tmp/tmpgj_4vlq9.jl:17\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<text>\nThe function special_factorial is defined in the\
    \ cell above. Let's see how it works:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp4l028box.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4l028box.jl:14\n\
    in expression starting at /tmp/tmp4l028box.jl:14\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * ... *\
    \ 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1)\
    \ == 1 \"The function special_factorial should return 1 when n is 1\"\n@assert\
    \ special_factorial(2) == 2 \"The function special_factorial should return 2 when\
    \ n is 2\"\n@assert special_factorial(3) == 6 \"The function special_factorial\
    \ should return 6 when n is 3\"\n@assert special_factorial(4) == 24 \"The function\
    \ special_factorial should return 24 when n is 4\"\n@assert special_factorial(5)\
    \ == 120 \"The function special_factorial should return 120 when n is 5\"\n@assert\
    \ special_factorial(6) == 720 \"The function special_factorial should return 720\
    \ when n is 6\"\n@assert special_factorial(7) == 50401 \"The function special_factorial\
    \ should return 50401 when n is 7\"\n@assert special_factorial(8) == 40320 \"\
    The function special_factorial should return 40320 when n is 8\"\n@assert special_factorial(9)\
    \ == 362880 \"The function special_factorial should return 362880 when n is 9\"\
    \n@assert special_factorial(10) == 3628800 \"The function special_factorial should\
    \ return 3628800 when n is 10\"\n@assert special_factorial(11) == 39916800 \"\
    The function special_factorial should return 39916800 when n is 11\"\n@assert\
    \ special_factorial(12) == 479001600 \"The function special_factorial should return\
    \ 479001600 when n is 12\"\n@assert special_factorial(13) == 6227020800 \"The\
    \ function special_factorial should return 6227020800 when n is 13\"\n@assert\
    \ special_factorial(14) == 87178291200 \"The function special_factorial should\
    \ return 87178291200 when n is 14\"\n@assert special_factorial(15) == 13076743680000\
    \ \"The function special_factorial should return 13076743680000 when n is 15\"\
    \n@assert special_factorial(16) == 20922789888000  \"The function special_factorial\
    \ should return 20922789888000 when n is 16\"\n@assert special_factorial(17) ==\
    \ 355687428096000  \"The function special_factorial should return 355687428096000\
    \ when n is 17\"\n@assert special_factorial(18) == 6402373705728\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpr1cxx__y.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr1cxx__y.jl:14\n\
    in expression starting at /tmp/tmpr1cxx__y.jl:14\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1v8ygshy.jl:17\nin expression starting at\
    \ /tmp/tmp1v8ygshy.jl:17\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else \n        special_factorial(n - 1) * n\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that receives a number as input\
    \ and returns the factorial of it modulo 10.\nusing Test\n\n@testset begin\n\n\
    candidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_eoj2ri.jl:16\nin expression starting at\
    \ /tmp/tmph_eoj2ri.jl:16\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * ... *\
    \ 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time brazilian_factorial(100);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpz4_ezwqx.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz4_ezwqx.jl:14\n\
    in expression starting at /tmp/tmpz4_ezwqx.jl:14\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that receives a number\
    \ as input and returns the factorial of this number.\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfe2lf0yx.jl:17\nin expression starting at\
    \ /tmp/tmpfe2lf0yx.jl:17\n"
  stdout: ''
  timestamp: 1659978847
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<text>\nThe function special_factorial is called recursively\
    \ until it reaches the base case where n == 0. The base case is when n == 0. In\
    \ this case, the function returns 1 since 1 is the factorial of 0. Otherwise,\
    \ the function returns the product of the previous result multiplied by the factorial\
    \ of n. For example, special_factorial(5) == 5*4*3*2*1 == 120.\nusing Test\n\n\
    @testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsa0d0rps.jl:16\nin expression starting at\
    \ /tmp/tmpsa0d0rps.jl:16\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbsursty7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpbsursty7.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbsursty7.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbsursty7.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbsursty7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbsursty7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978838
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptdbj__4x.jl:16\nin expression starting at\
    \ /tmp/tmptdbj__4x.jl:16\n"
  stdout: ''
  timestamp: 1659978847
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gkp2e5c.jl:16\nin expression starting at\
    \ /tmp/tmp0gkp2e5c.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * ... *\
    \ 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian\
    \ factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)!\
    \ * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp0ubrsidg.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0ubrsidg.jl:14\n\
    in expression starting at /tmp/tmp0ubrsidg.jl:14\n"
  stdout: ''
  timestamp: 1659978847
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        special_factorial(n - 1) * n\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4uxsqz1_.jl:17\nin expression starting at\
    \ /tmp/tmp4uxsqz1_.jl:17\n"
  stdout: ''
  timestamp: 1659978847
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else \n        special_factorial(n - 1) * n\n\
    end\n</cell>\n<text>\nExercise\nWrite a function that receives an integer as input\
    \ and returns the factorial of this integer.\nusing Test\n\n@testset begin\n\n\
    candidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2_1qwuh.jl:16\nin expression starting at\
    \ /tmp/tmpf2_1qwuh.jl:16\n"
  stdout: ''
  timestamp: 1659978847
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a given number. Your function should accept a number as input and should\
    \ return the factorial of this number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mm0adxd.jl:16\nin expression starting at\
    \ /tmp/tmp2mm0adxd.jl:16\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * ... *\
    \ 1!\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    factorial(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpavi_rapb.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavi_rapb.jl:14\n\
    in expression starting at /tmp/tmpavi_rapb.jl:14\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpiozngy9s.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiozngy9s.jl:14\n\
    in expression starting at /tmp/tmpiozngy9s.jl:14\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else \n        special_factorial(n-1) * n\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that will return the factorial\
    \ of a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbolz_ah.jl:16\nin expression starting at\
    \ /tmp/tmpjbolz_ah.jl:16\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbv10bdck.jl:16\nin expression starting at\
    \ /tmp/tmpbv10bdck.jl:16\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf1d8hxpo.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf1d8hxpo.jl:1\n\
    in expression starting at /tmp/tmpf1d8hxpo.jl:1\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n@time\
    \ special_factorial(10000);\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ calculates the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu9_igeyj.jl:17\nin expression starting at\
    \ /tmp/tmpu9_igeyj.jl:17\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70s3gmra.jl:16\nin expression starting at\
    \ /tmp/tmp70s3gmra.jl:16\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<text>\nExercise 4\nWrite a function that receives a number\
    \ as input and returns the factorial of the number raised to some power.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlrnrwrh.jl:16\nin expression starting at\
    \ /tmp/tmptlrnrwrh.jl:16\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp198u_7no.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp198u_7no.jl:1\n\
    in expression starting at /tmp/tmp198u_7no.jl:1\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gkp2e5c.jl:16\nin expression starting at\
    \ /tmp/tmp0gkp2e5c.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5) ==\
    \ 120\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a number given as an input argument. \nThe function should raise a TypeError\
    \ if the input is not a number.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyv7381g8.jl:16\nin expression starting at\
    \ /tmp/tmpyv7381g8.jl:16\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1)\
    \ == 1 \"The function special_factorial should return 1 when n = 1\"\n@assert\
    \ special_factorial(2) == 2 \"The function special_factorial should return 2 when\
    \ n = 2\"\n@assert special_factorial(3) == 6 \"The function special_factorial\
    \ should return 6 when n = 3\"\n@assert special_factorial(4) == 24 \"The function\
    \ special_factorial should return 24 when n = 4\"\n@assert special_factorial(5)\
    \ == 120 \"The function special_factorial should return 120 when n = 5\"\n@assert\
    \ special_factorial(6) == 720 \"The function special_factorial should return 720\
    \ when n = 6\"\n@assert special_factorial(7) == 50401 \"The function special_factorial\
    \ should return 50401 when n = 7\"\n@assert special_factorial(8) == 40320 \"The\
    \ function special_factorial should return 40320 when n = 8\"\n@assert special_factorial(9)\
    \ == 362880 \"The function special_factorial should return 362880 when n = 9\"\
    \n@assert special_factorial(10) == 3628800 \"The function special_factorial should\
    \ return 3628800\"\n@assert special_factorial(11) == 39916800 \"The function special_factorial\
    \ should return 39916800\"\n@assert special_factorial(12) == 479001600 \"The function\
    \ special_factorial should return 479001600\"\n@assert special_factorial(13) ==\
    \ 6227020800 \"The function special_factorial should return 6227020800\"\n@assert\
    \ special_factorial(14) == 87178291200 \"The function special_factorial should\
    \ return 87178291200\"\n@assert special_factorial(15) == 13076743680000 \"The\
    \ function special_factorial should return 13076743680000\"\n@assert special_factorial(16)\
    \ == 20922789888000  \"The function special_factorial should return 20922789888000\"\
    \n@assert special_factorial(17) == 355687428096000  \"The function special_factorial\
    \ should return 355687428096000\"\n@assert special_factorial(18) == 6402373705728000\
    \  \"The function special_factorial should return 6402373705728000\"\n@assert\
    \ special_factorial(19) == 121645100408832000  \"The function special_factorial\
    \ should return 121645100408832000\"\n@assert \nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhh3s0tn.jl:17\nin expression starting at\
    \ /tmp/tmpqhh3s0tn.jl:17\n"
  stdout: ''
  timestamp: 1659978840
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)!\
    \ * (n-4)! * (n-5)! * (n-6)! * (n-7)! * (n-8)! * (n-9)! * (n-10)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpa_0n2wu_.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa_0n2wu_.jl:14\n\
    in expression starting at /tmp/tmpa_0n2wu_.jl:14\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9bgzqv_.jl:16\nin expression starting at\
    \ /tmp/tmpy9bgzqv_.jl:16\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1) == 1 \n\
    @assert special_factorial(2) == 2 \n@assert special_factorial(3) == 6 \n@assert\
    \ special_factorial(4) == 24 \n@assert special_factorial(5) == 120 \n@assert special_factorial(6)\
    \ == 720 \n@assert special_factorial(7) == 5040 \n@assert special_factorial(8)\
    \ == 40320 \n@assert special_factorial(9) == 362880 \n@assert special_factorial(10)\
    \ == 3628800\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ factorial of a number given as a parameter. \nThe function should raise an error\
    \ if the number given is negative.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvsiofrx3.jl:16\nin expression starting at\
    \ /tmp/tmpvsiofrx3.jl:16\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp114qhac4.jl:17\nin expression starting at\
    \ /tmp/tmp114qhac4.jl:17\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygmfbmu1.jl:17\nin expression starting at\
    \ /tmp/tmpygmfbmu1.jl:17\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n# Test the function special_factorial\n\
    @assert special_factorial(1) == 1 \n@assert special_factorial(2) == 2 \n@assert\
    \ special_factorial(3) == 6 \n@assert special_factorial(4) == 24 \n@assert special_factorial(5)\
    \ == 120 \n@assert special_factorial(6) == 720 \n@assert special_factorial(7)\
    \ == 5040 \n@assert special_factorial(8) == 40320 \n@assert special_factorial(9)\
    \ == 362880 \n@assert special_factorial(10) == 3628800\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a number given as an input\
    \ parameter and returns the result rounded to the nearest integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzggw6hc1.jl:17\nin expression starting at\
    \ /tmp/tmpzggw6hc1.jl:17\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgp6k3xmk.jl:17\nin expression starting at\
    \ /tmp/tmpgp6k3xmk.jl:17\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else \n        special_factorial(n - 1) * n\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfvdwgvhk.jl:17\nin expression starting at\
    \ /tmp/tmpfvdwgvhk.jl:17\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpol7c3wx_.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpol7c3wx_.jl:14\n\
    in expression starting at /tmp/tmpol7c3wx_.jl:14\n"
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplf_llvoa.jl:16\nin expression starting at\
    \ /tmp/tmplf_llvoa.jl:16\n"
  stdout: ''
  timestamp: 1659978839
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        special_factorial(n-1) * n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppg6rndt2.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppg6rndt2.jl:1\n\
    in expression starting at /tmp/tmppg6rndt2.jl:1\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwp2_pnt.jl:16\nin expression starting at\
    \ /tmp/tmphwp2_pnt.jl:16\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1) ==\
    \ 1 \n@assert special_factorial(2) == 2 \n@assert special_factorial(3) == 6 \n\
    @assert special_factorial(4) == 24 \n@assert special_factorial(5) == 120 \n@assert\
    \ special_factorial(6) == 720 \n@assert special_factorial(7) == 5040 \n@assert\
    \ special_factorial(8) == 40320 \n@assert special_factorial(9) == 362880 \n@assert\
    \ special_factorial(10) == 3628800\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that computes the factorial of a number given as an input parameter. \nThe function\
    \ should raise a TypeError if the input is not a number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2nba_rsb.jl:16\nin expression starting at\
    \ /tmp/tmp2nba_rsb.jl:16\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3os77vtz.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp3os77vtz.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3os77vtz.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3os77vtz.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3os77vtz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3os77vtz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978838
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5) ==\
    \ 120\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj28jk3zh.jl:16\nin expression starting at\
    \ /tmp/tmpj28jk3zh.jl:16\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Tests\n@test special_factorial(1)\
    \ == 1 \n@test special_factorial(2) == 2 \n@test special_factorial(3) == 6 \n\
    @test special_factorial(4) == 24 \n@test special_factorial(5) == 120 \n@test special_factorial(6)\
    \ == 720 \n@test special_factorial(7) == 5040 \n@test special_factorial(8) ==\
    \ 40320 \n@test special_factorial(9) == 362880 \n@test special_factorial(10) ==\
    \ 3628800\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a number given as a parameter. \nThe function should return the factorial\
    \ of the number passed as a parameter. \nThe function should raise an error if\
    \ the number passed as parameter is not positive.\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr6m44ry1.jl:17\nin expression starting at\
    \ /tmp/tmpr6m44ry1.jl:17\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) *\
    \ n \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprnlhcv7a.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmprnlhcv7a.jl:22\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnlhcv7a.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnlhcv7a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprnlhcv7a.jl:23\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnlhcv7a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnlhcv7a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprnlhcv7a.jl:24\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnlhcv7a.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnlhcv7a.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978849
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * ... *\
    \ 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(10)\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n\
    \    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp2l2kyhr2.jl:11 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2l2kyhr2.jl:14\n\
    in expression starting at /tmp/tmp2l2kyhr2.jl:14\n"
  stdout: ''
  timestamp: 1659978849
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1)\
    \ == 1 \"The factorial of 1 should be 1\"\n@assert special_factorial(2) == 2 \"\
    The factorial of 2 should be 2\"\n@assert special_factorial(3) == 6 \"The factorial\
    \ of 3 should be 6\"\n@assert special_factorial(4) == 24 \"The factorial of 4\
    \ should be 24\"\n@assert special_factorial(5) == 120 \"The factorial of 5 should\
    \ be 120\"\n@assert special_factorial(6) == 720 \"The factorial of 6 should be\
    \ 720\"\n@assert special_factorial(7) == 5040  \"The factorial of 7 should be\
    \ 5040\"\n@assert special_factorial(8) == 40320 \"The factorial of 8 should be\
    \ 40320\"\n@assert special_factorial(9) == 362880 \"The factorial of 9 should\
    \ be 362880\"\n@assert special_factorial(10) == 3628800 \"The factorial of 10\
    \ should be 3628800\"\n@assert special_factorial(11) == 39916800 \"The factorial\
    \ of 11 should be 39916800\"\n@assert special_factorial(12) == 479001600 \"The\
    \ factorial of 12 should be 479001600\"\n@assert special_factorial(13) == 6227020800\
    \ \"The factorial of 13 should be 6227020800\"\n@assert special_factorial(14)\
    \ == 87178291200 \"The factorial of 14 should be 87178291200\"\n@assert special_factorial(15)\
    \ == 13076743680000 \"The factorial of 15 should be 13076743680000\"\n@assert\
    \ special_factorial(16) == 20922789888000  \"The factorial of 16 should be 20922789888000\"\
    \n@assert special_factorial(17) == 355687428096000  \"The factorial of 17 should\
    \ be 355687428096000\"\n@assert special_factorial(18) == 6402373705728000  \"\
    The factorial of 18 should be 6402373705728000\"\n@assert special_factorial(19)\
    \ == 121645100408832000  \"The factorial of 19 should be 121645100408832000\"\n\
    @assert special_factorial(20) == 2432902008176640000  \"The factorial of 20 should\
    \ be 2432902008176640000\"\n@assert special_factorial(21) == 51090942171709440000\
    \  \"The factorial of 21 should be \nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfuxx7yxp.jl:17\nin expression starting at\
    \ /tmp/tmpfuxx7yxp.jl:17\n"
  stdout: ''
  timestamp: 1659978849
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
    \ \n    if n == 0 \n        1\n    else \n        special_factorial(n - 1) * n\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1) == 1 \n\
    @assert special_factorial(2) == 2 \n@assert special_factorial(3) == 6 \n@assert\
    \ special_factorial(4) == 24 \n@assert special_factorial(5) == 120 \n@assert special_factorial(6)\
    \ == 720 \n@assert special_factorial(7) == 5040 \n@assert special_factorial(8)\
    \ == 40320 \n@assert special_factorial(9) == 362880 \n@assert special_factorial(10)\
    \ == 3628800\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the\
    \ factorial of a given number using recursion.\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5izaj1sp.jl:16\nin expression starting at\
    \ /tmp/tmp5izaj1sp.jl:16\n"
  stdout: ''
  timestamp: 1659978849
