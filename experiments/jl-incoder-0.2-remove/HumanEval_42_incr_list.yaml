name: HumanEval_42_incr_list
language: jl
prompt: "\"\"\"Return list with elements incremented by 1.\n            \"\"\"\nfunction\
  \ incr_list(l::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
completions: ["    l = l + 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, plus 1. \nWrite a function that returns the last\
    \ element of a vector, minus 1. \nWrite a function that returns the sum of a vector,\
    \ plus 1. \nWrite a function that returns the product of a vector, multiplied\
    \ by 1. \nWrite a function that returns the quotient of a vector, divided by 1.\
    \ \nWrite a function that returns the absolute value of a vector, plus 1. \nWrite\
    \ a function that returns the absolute value of a vector, minus 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. \nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1. \nWrite a function\
    \ that returns the absolute value of a vector, divided by 1. ", "    l = l + [Int64(1)]\n\
    \    return l\nend", "    l = l + 1 \n    return l\nend\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise: Write a function that returns a\
    \ list with elements incremented by 1 starting from 0.", "    l = l + [1]\n  \
    \  return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>", "    l = l + [1]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>", "    return l + [length(l)]\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n", "    return l + [length(l)]\n\
    end", "    return l + [1]\nend", "    return l + [1]\nend", "    l = l + [1]\n\
    \    return l\nend", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>", "    return l + [1]\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list", "    return l + [length(l)]\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n", "    l = l + 1 \n \
    \   return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first element of a vector,\
    \ if it exists, or returns an empty string if it does not.", "    l = l + [Int64(1)]\n\
    \    return l\nend", "    return l + [1]\nend", "    l = l + 1 \n    return l\
    \ \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    l = l + [1]\n    return l\nend", "    l = l + [1]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n\
    \    return l\nend", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ array and returns a new array where each element is the sum of the elements\
    \ in the original array except for the first element. For example, if the input\
    \ array is [1,2,3,4,5], the output should be [2,4,6,8,10].", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ list.", "    l = l + [1]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector as input and returns a vector with elements incremented by 1.", "   \
    \ l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns a list with elements\
    \ incremented by 1 starting from element n.", "    return l + [1]\nend", "   \
    \ l = l + [1]\n    return l\nend", "    return l + [1]\nend", "    return l +\
    \ [1]\nend", "    return l + [length(l)]\nend\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\n", "    l = l + [Int64(1)]\n    return l\nend", " \
    \   l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a ", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ a list with elements incremented by 1 starting at element x.", "    l = l +\
    \ [Int64(1)]\n    return l\nend", "    l = l + [1]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first element of a vector, incremented by 1.", " \
    \   l = l + [Int64(1)]\n    return l\nend", "    return l + [1]\nend", "    l\
    \ = l + [Int64(1)]\n    return l\nend", "    return l + [1]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list", "    l = l\
    \ + [Int64(1)]\n    return l\nend", "    l = l + [1]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>", "    l = l + 1 \n   \
    \ return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns list with elements incremented\
    \ by 1.\nWrite a function that returns list with elements incremented by 1.\n\
    Write a function that returns list with elements incremented by 1.\nWrite a function\
    \ that returns list with elements incremented by 1.\nWrite a function that returns\
    \ list with elements incremented by 1.\nWrite a function that returns list with\
    \ elements incremented by 1.\nWrite a function that returns list with elements\
    \ incremented by 1.\nWrite a function that returns list with elements incremented\
    \ by 1.\nWrite a function that returns list with elements incremented by 1.\n\
    Write a function that returns list with elements incremented by 1.\nWrite a function\
    \ that returns list with elements incremented by 1.\nWrite a function that returns\
    \ list with elements incremented by 1.\nWrite a function that returns list with\
    \ elements incremented by 1.\nWrite a function that returns list with elements\
    \ incremented by 1.\nWrite a function that returns list with elements incremented\
    \ by 1.\nWrite a function that returns list with elements incremented by 1.\n\
    Write a function that returns list with elements incremented by 1.\nWrite a function\
    \ that returns list with elements incremented by 1.\nWrite a function that returns\
    \ list with elements incremented by 1.\nWrite a function that returns list with\
    \ elements incremented by 1.\nWrite a function that returns list with elements\
    \ incremented by 1.\nWrite a function that returns list with elements incremented\
    \ by 1.\nWrite a function that returns list with elements incremented by 1.\n\
    Write a function that returns list with elements incremented by 1.\nWrite a function\
    \ that returns list with elements incremented by 1.\nWrite a function that returns\
    \ list with elements incremented by 1.\nWrite a function that returns list with\
    \ elements incremented by 1.\nWrite a function that returns list with elements\
    \ incremented by 1.\nWrite a function that returns list with elements incremented\
    \ by 1.\nWrite a function that returns list with elements incremented by 1.\n\
    Write a function that returns list with elements incremented by 1.\nWrite a function\
    \ that returns list with elements incremented by 1.\nWrite a function that returns\
    \ list with elements incremented by 1.\nWrite a function that returns list with\
    \ elements incremented by 1.\nWrite a function that returns list with elements\
    \ incremented by 1.\nWrite a function that returns list with elements incremented\
    \ by 1.\nWrite a function that returns list with elements incremented by 1.\n\
    Write a function that returns list with elements incremented by 1.\nWrite a function\
    \ that returns list with elements incremented by 1.\nWrite a function that returns\
    \ list with elements ", "    l = l + [1]\n    return l\nend", "    l = l + 1 \n\
    \    return l \nend", "    return l + [1]\nend", "    l = l + [Int64(1)]\n   \
    \ return l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=", "  \
    \  l = l + [1]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    return l + [1]\nend", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of a vector.", "    l = l + [Int64(1)]\n    return l\n\
    end", "    l = l + [Int64(1)]\n    return l\nend", "    l = l + [Int64(1)]\n \
    \   return l\nend", "    return l + [1]\nend", "    l = l + 1 \n    return l \n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns a vector with elements\
    \ incremented by 1.", "    l = l + [1]\n    return l\nend", "    l = l + 1 \n\
    \    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a vector, if it exists. Otherwise, return 0.", "    l = l + [1]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns a new vector with\
    \ each element multiplied by 2.\nHint: use map!", "    l = l + [Int64(1)]\n  \
    \  return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes an array and returns the array reversed.",
  "    l = l + [1]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a vector, if it exists, otherwise the second element. Test it on vectors of\
    \ length 2, 3, 4, and 5.", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=", "    l = l + [1]\n    return l\n\
    end", "    l = l + [1]\n    return l\nend", "    return l + [1]\nend", "    l\
    \ = l + [Int64(1)]\n    return l\nend", "    l = l + [Int64(1)]\n    return l\n\
    end", "    return l + [1]\nend\n</cell>\n<code language=julia-1.4>\nincr_list(1:10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first element of\
    \ a vector, incremented by 1.", "    return l + [length(l)]\nend", "    l = l\
    \ + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a list that is greater than a specified value.", "    l = l + [1]\n    return\
    \ l\nend", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ a list with elements incremented by 1 until a condition is met. For example,\
    \ if the list is [1,2,3,4,5,6,7], the function should return [2,3,4,5,6,7,8].",
  "    l = l + [1]\n    return l\nend", "    l = l + [Int64(1)]\n    return l\nend",
  "    l = l + [1]\n    return l\nend", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector as input and returns\
    \ a vector with elements incremented by 1.", "    return l + [length(l)]\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n", "    l = l + [1]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=", "    return l + [Int64(1)]\nend",
  "    l = l + [1]\n    return l\nend", "    l = l + [1]\n    return l\nend", "  \
    \  l = l + [1]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    l = l + [1]\n    return l\nend", "    l = l + [Int64(1)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.4>\nincr_list([1,2,3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector as input and returns a vector with elements\
    \ incremented by 1.\nHint: Use map!", "    l = l + [Int64(1)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    l = l + [1]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the product\
    \ of the elements of an array. \nWrite a function that returns the maximum of\
    \ the elements of an array. \nWrite a function that returns the minimum of the\
    \ elements of an array. \nWrite a function that returns the absolute value of\
    \ the elements of an array. \nWrite a function that returns the reciprocal of\
    \ the elements of an array. \nWrite a function that returns the exponential of\
    \ the elements of an array. \nWrite a function that returns the natural logarithm\
    \ of the elements of an array. \nWrite a function that returns the square root\
    \ of the elements of an array. \nWrite a function that returns the sine of the\
    \ elements of an array. \nWrite a function that returns the cosine of the elements\
    \ of an array. \nWrite a function that returns the tangent of the elements of\
    \ an array. \nWrite a function that returns the hyperbolic sine of the elements\
    \ of an array. \nWrite a function that returns the hyperbolic cosine of the elements\
    \ of an array. \nWrite a function that returns the hyperbolic tangent of the elements\
    \ of an array. \nWrite a function that returns the hyperbolic arctangent of the\
    \ elements of an array. \nWrite a function that returns the hyperbolic arctangent\
    \ of the elements of an array. \nWrite a function that returns the hyperbolic\
    \ arctangent of the elements of an array. \nWrite a function that returns the\
    \ hyperbolic arctangent of the elements of an array. \nWrite a function that returns\
    \ the hyperbolic arctangent of the elements of an array. \nWrite a function that\
    \ returns the hyperbolic arctangent of the elements of an array. \nWrite a function\
    \ that returns the hyperbolic arctangent of the elements of an array. \nWrite\
    \ a function that returns the hyperbolic arctangent of the elements of an array.\
    \ \nWrite a function that returns the hyperbolic arctangent of the elements of\
    \ an array. \nWrite a function that returns the hyperbolic arctangent of the elements\
    \ of an array. \nWrite a function that returns the hyperbolic arctangent of the\
    \ elements of an array. \nWrite a function that returns the hyperbolic arctangent\
    \ of the elements of an array. \nWrite a function that returns the hyperbolic\
    \ arctangent of the elements of an array. \nWrite a function that returns the\
    \ hyperbolic arctangent of the elements of an array. \nWrite a function that returns\
    \ the hyperbolic arctangent of the elements of an array. \nWrite a function that\
    \ returns the hyperbolic arctangent of the elements of an array. \nWrite a function\
    \ that returns the hyperbolic arctangent of the elements of an array. ", "   \
    \ l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the elements of a vector in reverse order. \nThe function should take one argument,\
    \ that is a vector of Int64s.", "    return l + [1]\nend", "    l = l + 1 \n \
    \   return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ vector. \nWrite a function that returns the product of the elements of a vector.\
    \ \nWrite a function that returns the maximum of the elements of a vector. \n\
    Write a function that returns the minimum of the elements of a vector. \nWrite\
    \ a function that returns the absolute value of a number. ", "    l = l + 1 \n\
    \    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers. \nThe function should work\
    \ also for vectors of different lengths.", "    l = l + [Int64(1)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of an array.",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n\
    </cell>\n<code language=julia-1.0>", "    return l + [1]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list", "    l = l\
    \ + [1]\n    return l\nend", "    l = l + 1 \n    return l \nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>", "    l = l + [1]\n  \
    \  return l\nend", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>", "    return l + [1]\nend", "    l = l + [1]\n    return\
    \ l\nend", "    l = l + [Int64(1)]\n    return l\nend", "    return l + [1]\n\
    end", "    l = l + [1]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ a list with elements incremented by 1 until a condition is met.", "    return\
    \ l + [Int64(1)]\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ of an array. \nThe function should take an argument of type Array{Int64,1}.",
  "    l = l + [1]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector and returns a\
    \ vector with elements incremented by 1.", "    l = l + [1]\n    return l\nend",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector as input and returns a vector with elements incremented by 1.", "   \
    \ l = l + [1]\n    return l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the vector with its elements incremented by 1.", "    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns a list with elements incremented by\
    \ 1.\nWrite a function that returns a list with elements incremented by 1.\nWrite\
    \ a function that returns a list with elements incremented by 1.\nWrite a function\
    \ that returns a list with elements incremented by 1.\nWrite a function that returns\
    \ a list with elements incremented by 1.\nWrite a function that returns a list\
    \ with elements incremented by 1.\nWrite a function that returns a list with elements\
    \ incremented by 1.\nWrite a function that returns a list with elements incremented\
    \ by 1.\nWrite a function that returns a list with elements incremented by 1.\n\
    Write a function that returns a list with elements incremented by 1.\nWrite a\
    \ function that returns a list with elements incremented by 1.\nWrite a function\
    \ that returns a list with elements incremented by 1.\nWrite a function that returns\
    \ a list with elements incremented by 1.\nWrite a function that returns a list\
    \ with elements incremented by 1.\nWrite a function that returns a list with elements\
    \ incremented by 1.\nWrite a function that returns a list with elements incremented\
    \ by 1.\nWrite a function that returns a list with elements incremented by 1.\n\
    Write a function that returns a list with elements incremented by 1.\nWrite a\
    \ function that returns a list with elements incremented by 1.\nWrite a function\
    \ that returns a list with elements incremented by 1.\nWrite a function that returns\
    \ a list with elements incremented by 1.\nWrite a function that returns a list\
    \ with elements incremented by 1.\nWrite a function that returns a list with elements\
    \ incremented by 1.\nWrite a function that returns a list with elements incremented\
    \ by 1.\nWrite a function that returns a list with elements incremented by 1.\n\
    Write a function that returns a list with elements incremented by 1.\nWrite a\
    \ function that returns a list with elements incremented by 1.\nWrite a function\
    \ that returns a list with elements incremented by 1.\nWrite a function that returns\
    \ a list with elements incremented by 1.\nWrite a function that returns a list\
    \ with elements incremented by 1.\nWrite a function that returns a list with elements\
    \ incremented by 1.\nWrite a function that returns a list with elements incremented\
    \ by 1.\nWrite a function that returns a list with elements incremented by 1.\n\
    Write a function that returns a list with elements incremented by 1.\nWrite a\
    \ function that returns a list with elements incremented by 1.\nWrite a function\
    \ that returns a list with elements incremented by 1.\nWrite a function that returns\
    \ a list with elements incremented by 1.\nWrite a function that returns a list\
    \ with elements incremented by 1.\nWrite a function that returns a list with elements\
    \ incremented by 1.\nWrite a function that returns a list with elements ", " \
    \   l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the same vector but with each element incremented by 1.", "    l\
    \ = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the elements\
    \ of an array.", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ list with elements incremented by 1.\nWrite a function that returns list with\
    \ elements incremented by 1.\nWrite a function that returns list with elements\
    \ incremented by 1.\nWrite a function that returns list with elements incremented\
    \ by 1.", "    return l + [length(l)]\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ a list with elements incremented by 1 starting from element n.\nHint: use incr_list",
  "    l = l + [1]\n    return l\nend", "    l = l + [Int64(1)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.4>\nincr_list([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements of a list.", "    l\
    \ = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ of a list.", "    l = l + [Int64(1)]\n    return l\nend", "    l = l + 1 \n\
    \    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<code language=julia-1.5>", "    return l + [1]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list", "    l = l\
    \ + 1 \n    return l \nend", "    l = l + [1]\n    return l\nend", "    l = l\
    \ + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a vector, if it is not empty, otherwise return 0.", "    l = l + 1 \n    return\
    \ l\nend\n</cell>\n<code language=julia-1.4>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a vector and returns a new vector with the\
    \ elements incremented by 1.", "    return l + [1]\nend\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns a vector of integers where the integers are incremented\
    \ by 1.", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.4>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, incremented by 1.", "    l = l + [1]\n    return\
    \ l\nend", "    return l + [Int64(1)]\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of a vector.", "    l = l + [Int64(1)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a vector, incremented\
    \ by 1.", "    l = l + [Int64(1)]\n    return l\nend", "    l = l + [1]\n    return\
    \ l\nend", "    return l + [1]\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list", "    l = l + 1 \n    return l \nend", "    return l + [1]\nend", " \
    \   l = l + [Int64(1)]\n    return l\nend", "    l = l + [1]\n    return l\nend",
  "    return l + [1]\nend\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns a list with elements\
    \ incremented by 1 starting from 0.", "    return l + [1]\nend", "    l = l +\
    \ 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>", "    l = l + [1]\n  \
    \  return l\nend\n</cell>\n<code language=julia-1.4>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.4>", "    l = l + [1]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns a list with elements incremented by 1 starting from\
    \ 0.", "    return l + [Int64(1)]\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the product of a list\
    \ of numbers.", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>", "    l = l + [1]\n    return l\nend", "    l = l +\
    \ [1]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a vector, incremented by 1.", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=", "    l = l + [Int64(1)]\n    return\
    \ l\nend", "    l = l + [1]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first element of a vector, if it exists. Otherwise return 0.", "    l =\
    \ l + [1]\n    return l\nend", "    l = l + [1]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the elements of an array. \nWrite a function\
    \ that returns the product of the elements of an array. \nWrite a function that\
    \ returns the maximum of the elements of an array. \nWrite a function that returns\
    \ the minimum of the elements of an array. \nWrite a function that returns the\
    \ absolute value of a number. ", "    l = l + 1 \n    return l \nend", "    return\
    \ l + [Int64(1)]\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of a list\
    \ of numbers. \nThe function should work for lists of any length.", "    l = l\
    \ + [1]\n    return l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a vector, incremented by 1.", "    return l + [length(l)]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first element of a list that satisfies a condition.\
    \ For example, if the list is [1,2,3,4,5,6] and we want the first element that\
    \ satisfies x>3, the function should return 4.", "    l = l + [Int64(1)]\n   \
    \ return l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ vector.", "    l = l + 1 \n    return l \nend", "    l = l + [Int64(1)]\n  \
    \  return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=", "  \
    \  l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the product of a list of numbers.", "    return l + [1]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list", "    l = l\
    \ + [1]\n    return l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns a list with elements\
    \ incremented by 1 starting at position n. \nFor example, incr_list([1,2,3], 2)\
    \ should return [2,3,4].", "    l = l + [Int64(1)]\n    return l\nend", "    l\
    \ = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a vector, if it is not empty, otherwise it returns 0.", "    l = l + [1]\n \
    \   return l\nend", "    return l + [length(l)]\nend", "    l = l + 1 \n    return\
    \ l \nend", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.0>\nincr_list([1,2,3])\n</cell>\n\
    <code language=", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=", "    return l + [1]\nend", "    l = l + [Int64(1)]\n    return\
    \ l\nend", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector as input and returns a vector with elements that are the sum of the input\
    \ vector's elements. \nFor example, incr_vec([1,2,3]) should return [2,3,4].",
  "    l = l + [1]\n    return l\nend", "    return l + [length(l)]\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first element of a vector, if it is not empty. Otherwise\
    \ return 0.", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>", "    l = l + [1]\n    return l\nend", "    return\
    \ l + [1]\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise: Write a function that returns a list with elements incremented\
    \ by 1 but starting from index 0.", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>", "    return l + [1]\nend", "    l = l + [Int64(1)]\n\
    \    return l\nend", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array and returns the array reversed.", "    l = l\
    \ + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements of the vector. \nThe function should\
    \ also return the squares of the elements of the vector.\nThe function should\
    \ also return the sum of the squares of the elements of the vector.\nThe function\
    \ should also return the sum of the squares of the elements of the vector.", " \
    \   return l + [1]\nend", "    l = l + [1]\n    return l\nend", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns a new vector\
    \ with elements incremented by 1.\nFor example, incr_vec([1,2,3]) should return\
    \ [2,3,4].\nHint: Use map!.", "    l = l + 1 \n    return l \nend\n</cell>\n<code\
    \ language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector and returns a vector with elements incremented by 1.", "    l = l + 1\
    \ \n    return l \nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.3>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.3>",
  "    return l + [1]\nend", "    return l + [1]\nend", "    return l + [1]\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list", "    return\
    \ l + [length(l)]\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n",
  "    l = l + [1]\n    return l\nend", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>",
  "    l = l + [1]\n    return l\nend", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>", "    return l + [1]\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns a list with elements incremented by\
    \ 1 starting from 0.", "    return l + [1]\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
