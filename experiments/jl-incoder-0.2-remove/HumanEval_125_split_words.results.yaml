language: jl
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    words = [w for w in words if w != \"\"]\n    \n\
    \    if length(words) == 0 \n        return 0 \n    else \n        return length(words)\
    \ + length(filter(w -> w == \" \", words))\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a vector of all characters\
    \ in the string that are not in the alphabet of English.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxt9sn7s9.jl:20\nin expression starting at\
    \ /tmp/tmpxt9sn7s9.jl:20\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    words = split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n \
    \   for w in words\n        push!(words_split, w)\n    end\n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvl523dw5.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvl523dw5.jl:1\n\
    in expression starting at /tmp/tmpvl523dw5.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    if length(words) == 0 \n        return 0 \n   \
    \ else \n        return length(words) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ve5xzrf.jl:18\nin expression starting at\
    \ /tmp/tmp7ve5xzrf.jl:18\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for w in\
    \ words\n        words_split = push!(words_split, w)\n    end\n    words_split\n\
    end\n</cell>\n<code language=julia-1.0>\nsplit_words(\"a b c d e f g h i j k l\
    \ m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"a b c d e f g h i j k l m n o p q r s\
    \ t u v w x y z\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"a b c d\
    \ e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"a b c d e f g h i j k l m n o p q r s\
    \ t u v w x y z\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"a b c d\
    \ e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"a b c d e f g h i j k l m n o p q r s\
    \ t u v w x y z\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"a b c d\
    \ e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"a b c d e f g h i \nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp435tdo76.jl:17\nin expression starting at\
    \ /tmp/tmp435tdo76.jl:17\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words = [w for w in words if w != \"\"]\n        words = [w\
    \ for w in words if w != \",\"]\n        words = [w for w in words if w != \"\
    .\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w for\
    \ w in words if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"!\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"!\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    !\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"!\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"!\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    !\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"!\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n   \
    \     words = [\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkwljoj5i.jl:1\nin expression starting at /tmp/tmpkwljoj5i.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \",,\"\
    ]\n    words = [w for w in words if w != \",,,\"]\n    words = [w for w in words\
    \ if w != \",,,,\"]\n    words = [w for w in words if w != \",,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,\"]\n    words = [w for w in words if w\
    \ != \",,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,,,,\"]\n    words = [w for w in words if\
    \ w != \",,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,\"]\n    words = [w for\
    \ w in words if w != \",,,,,,,,,,,,,\"]\n    words = [w for w in words if w !=\
    \ \",,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,\"]\n    words = [w\
    \ for w in words if w != \",,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words\
    \ if w != \",,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for\
    \ w in words if w != \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words\
    \ if w != \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w !=\
    \ \",,,,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words = [\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5r_4d037.jl:1\nin expression starting at /tmp/tmp5r_4d037.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    if length(words) == 0\n        return words\n \
    \   else\n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpts55aoqg.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpts55aoqg.jl:1\n\
    in expression starting at /tmp/tmpts55aoqg.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \".\"\
    ]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsml7ycai.jl:55\nin expression starting at\
    \ /tmp/tmpsml7ycai.jl:55\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words = words[words != \"\"]\n        words = words[words !=\
    \ \",\"]\n        words = words[words != \".\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"?\"]\n        words = words[words !=\
    \ \"-\"]\n        words = words[words != \"--\"]\n        words = words[words\
    \ != \"---\"]\n        words = words[words != \"----\"]\n        words = words[words\
    \ != \"-----\"]\n        words = words[words != \"------\"]\n        words = words[words\
    \ != \"--------\"]\n        words = words[words != \"---------\"]\n        words\
    \ = words[words != \"-----------\"]\n        words = words[words != \"------------\"\
    ]\n        words = words[words != \"-------------\"]\n        words = words[words\
    \ != \"--------------\"]\n        words = words[words != \"---------------\"]\n\
    \        words = words[words != \"--------------\"]\n        words = words[words\
    \ != \"--------------\"]\n        words = words[words != \"--------------\"]\n\
    \        words = words[words != \"--------------\"]\n        words = words[words\
    \ != \"--------------\"]\n        words = words[words != \"--------------\"]\n\
    \        words = words[words != \"--------------\"]\n        words = words[words\
    \ != \"--------------\"]\n        words = words[words != \"--------------\"]\n\
    \        words = words[words != \"--------------\"]\n        words = words[words\
    \ != \"--------------\"]\n        words = words[words != \"--------------\"]\n\
    \        words = words[words != \"--------------\"]\n        words = words[words\
    \ != \"--------------\"]\n        words = words[words != \"--------------\"]\n\
    \        words = words[words != \"--------------\"]\n        words = words[words\
    \ != \"--------------\"]\n        words = words[words != \"--------------\"]\n\
    \        words = words[words != \"--------------\"]\n        words = words[words\
    \ != \"--------------\"]\n        words = words[words != \"--------------\"]\n\
    \        words = words[words != \"--------------\"]\n        words = words[words\
    \ != \"--------------\"]\n        words = words[words != \"--------------\"]\n\
    \        words = words[words != \"--------------\"]\n        words = words[words\
    \ != \"--------------\"]\n        words = words[words != \"--------------\"]\n\
    \        words = words[\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfj5ixh96.jl:1\nin expression starting at /tmp/tmpfj5ixh96.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    if length(words) == 0 \n        return 0 \n   \
    \ else \n        return length(words) \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized. \nExamples\n>>> capitalize_words(\"Hello World\") \n\"Hello World\"\
    \n>>> capitalize_words(\"Hello World!\") \n\"Hello World!\"\n>>> capitalize_words(\"\
    Hello World!!\") \n\"Hello World!!\"\n>>> capitalize_words(\"Hello World!!!\"\
    ) \n\"Hello World!!!\"\n>>> capitalize_words(\"Hello World!!!\") \n\"Hello World!!!\"\
    \n>>> capitalize_words(\"Hello World!!!\") \n\"Hello World!!!\"\n>>> capitalize_words(\"\
    Hello World!!!\") \n\"Hello World!!!\"\n>>> capitalize_words(\"Hello World!!!\"\
    ) \n\"Hello World!!!\"\n>>> capitalize_words(\"Hello World!!!\") \n\"Hello World!!!\"\
    \n>>> capitalize_words(\"Hello World!!!\") \n\"Hello World!!!\"\n>>> capitalize_words(\"\
    Hello World!!!\") \n\"Hello World!!!\"\n>>> capitalize_words(\"Hello World!!!\"\
    ) \n\"Hello World!!!\"\n>>> capitalize_words(\"Hello World!!!\") \n\"Hello World!!!\"\
    \n>>> capitalize_words(\"Hello World!!!\") \n\"Hello World!!!\"\n>>> capitalize_words(\"\
    Hello World!!!\") \n\"Hello World!!!\"\n>>> capitalize_words(\"Hello World!!!\"\
    ) \n\"Hello World!!!\"\n>>> capitalize_words(\"Hello World!!!\") \n\"Hello World!!!\"\
    \n>>> capitalize_words(\"Hello World!!!\") \n\"Hello World!!!\"\n>>> capitalize_words(\"\
    Hello World!!!\") \n\"Hello World!!!\"\n>>> capitalize_words(\"Hello World!!!\"\
    ) \n\"Hello World!!!\"\n>>> capitalize_words(\"Hello World!!!\") \n\"Hello World!!!\"\
    \n>>> capitalize_words(\"Hello World!!!\") \n\"Hello World!!!\"\n>>> capitalize_words(\"\
    Hello World!!!\") \n\"Hello World!!!\"\n>>> capitalize_words(\"Hello World!!!\"\
    ) \n\"Hello World!!!\"\n>>> capitalize_words(\"Hello World!!!\") \n\"Hello World!!!\"\
    \n>>> capitalize_words(\"Hello World!!!\") \n\"Hello World!!!\"\n>>> capitalize_words(\"\
    Hello World!!!\") \n\"Hello World!!!\"\n>>> capitalize_words(\"Hello World!!!\"\
    ) \n\"Hello World!!!\"\n>>> capitalize_words(\"Hello World!!!\") \n\"\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppj8s0oe5.jl:18\nin expression starting at\
    \ /tmp/tmppj8s0oe5.jl:18\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   return words\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n\
    I wrote a package called StringUtils based on Julia's String package that does\
    \ what you want. \n<code>\nusing StringUtils\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5x3fps8.jl:19\nin expression starting at\
    \ /tmp/tmpd5x3fps8.jl:19\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\
    \n        return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\\n\"\n        return Vector{String}()\n    elseif txt == \"\\t\\n\"\n\
    \        return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return \nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpne2oo4ui.jl:1\nin expression starting at /tmp/tmpne2oo4ui.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        words_split = push!(words_split, word)\n    end\n    words_split\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp87hcalmm.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp87hcalmm.jl:23\n  Expression: candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n   Evaluated: [\"Hello,world!\"] ==\
    \ [\"Hello\", \"world!\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp87hcalmm.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp87hcalmm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp87hcalmm.jl:26\n  Expression: candidate(\"abcdef\") == 3\n\
    \   Evaluated: [\"abcdef\"] == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp87hcalmm.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp87hcalmm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp87hcalmm.jl:27\n  Expression: candidate(\"aaabb\") == 2\n\
    \   Evaluated: [\"aaabb\"] == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp87hcalmm.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp87hcalmm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp87hcalmm.jl:28\n  Expression: candidate(\"aaaBb\") == 1\n\
    \   Evaluated: [\"aaaBb\"] == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp87hcalmm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp87hcalmm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp87hcalmm.jl:29\n  Expression: candidate(\"\") == 0\n   Evaluated:\
    \ [\"\"] == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/jul"
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n\
    \    for word in words\n        words_split = words_split ++ [word]\n    end\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split), \",\")]\n\
    \    \n    words_split = words_split ++ [join(reverse(words_split\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzmd8wd4z.jl:74\nin expression starting at\
    \ /tmp/tmpzmd8wd4z.jl:74\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \" \"]\n        words = [w for w in words if w != \"\\n\"]\n       \
    \ words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\n\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\n\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\n\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\n\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   word\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpuhovmr17.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuhovmr17.jl:1\n\
    in expression starting at /tmp/tmpuhovmr17.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \".\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"-\"]\n        words = [w for w in words if w != \"_\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w for\
    \ w in words if w != \"_\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"-\"]\n        words = [w for w in words if w != \"_\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"?\"]\n        words = [w for w in words if w != \"-\"]\n        words\
    \ = [w for w in words if w != \"_\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"-\"]\n        words = [w for w in words if w != \"\
    _\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"?\"]\n        words = [w for w in words if w != \"-\"]\n\
    \        words = [w for w in words if w != \"_\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"-\"]\n        words = [w for w in words\
    \ if w != \"_\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"-\"]\n        words = [w for w in words if w != \"_\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        word\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpz_wsrbq0.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz_wsrbq0.jl:1\n\
    in expression starting at /tmp/tmpz_wsrbq0.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \",,\"\
    ]\n    words = [w for w in words if w != \",,.\"]\n    words = [w for w in words\
    \ if w != \",,.,\"]\n    words = [w for w in words if w != \",,.,.\"]\n    words\
    \ = [w for w in words if w != \",,.,.,\"]\n    words = [w for w in words if w\
    \ != \",,.,.,.\"]\n    words = [w for w in words if w != \",,.,.,.,\"]\n    words\
    \ = [w for w in words if w != \",,.,.,.,.\"]\n    words = [w for w in words if\
    \ w != \",,.,.,.,.,\"]\n    words = [w for w in words if w != \",,.,.,.,.,.\"\
    ]\n    words = [w for w in words if w != \",,.,.,.,.,.,\"]\n    words = [w for\
    \ w in words if w != \",,.,.,.,.,.,.,\"]\n    words = [w for w in words if w !=\
    \ \",,.,.,.,.,.,.,.,\"]\n    words = [w for w in words if w != \",,.,.,.,.,.,.,.,.,\"\
    ]\n    words = [w for w in words if w != \",,.,.,.,.,.,.,.,.,.,\"]\n    words\
    \ = [w for w in words if w != \",,.,.,.,.,.,.,.,.,.,.,\"]\n    words = [w for\
    \ w in words if w != \",,.,.,.,.,.,.,.,.,.,.,.,\"]\n    words = [w for w in words\
    \ if w != \",,.,.,.,.,.,.,.,.,.,.,.,.,\"]\n    words = [w for w in words if w\
    \ != \",,.,.,.,.,.,.,.,.,.,.,.,.,.,\"]\n    words = [w for w in \nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp3r013yy0.jl:35\nin expression starting at /tmp/tmp3r013yy0.jl:35\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    txt = txt.strip(\",\")\n    txt = txt.strip(\"\\n\")\n    txt = txt.strip(\"\
    \\r\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"  \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\"\")\n    txt = txt.strip(\"'\")\n    txt = txt.strip(\"\
    `\")\n    txt = txt.strip(\".\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt.strip(\";\")\n    txt = txt.strip(\"\
    :\")\n    txt = txt.strip(\",\")\n    txt = txt\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplg705ndl.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplg705ndl.jl:1\n\
    in expression starting at /tmp/tmplg705ndl.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \" \"]\n        words = [w for w in words if w != \"\\n\"]\n       \
    \ words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp62jeamvn.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp62jeamvn.jl:1\n\
    in expression starting at /tmp/tmp62jeamvn.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    word_counts = Dict()\n    for w in words\n  \
    \      word_counts[w] = get(word_counts, w, 0) + 1\n    end\n    \n    word_counts\
    \ = sort(word_counts, by=x->x[1], rev=true)\n    \n    word_counts = Dict()\n\
    \    for w in words\n        word_counts[w] = get(word_counts, w, 0) + 1\n   \
    \ end\n    \n    word_counts = sort(word_counts, by=x->x[2], rev=true)\n    \n\
    \    word_counts = Dict()\n    for w in words\n        word_counts[w] = get(word_counts,\
    \ w, 0) + 1\n    end\n    \n    word_counts = sort(word_counts, by=x->x[3], rev=true)\n\
    \    \n    word_counts = Dict()\n    for w in words\n        word_counts[w] =\
    \ get(word_counts, w, 0) + 1\n    end\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[4], rev=true)\n    \n    word_counts = Dict()\n    for w in words\n\
    \        word_counts[w] = get(word_counts, w, 0) + 1\n    end\n    \n    word_counts\
    \ = sort(word_counts, by=x->x[5], rev=true)\n    \n    word_counts = Dict()\n\
    \    for w in words\n        word_counts[w] = get(word_counts, w, 0) + 1\n   \
    \ end\n    \n    word_counts = sort(word_counts, by=x->x[6], rev=true)\n    \n\
    \    word_counts = Dict()\n    for w in words\n        word_counts[w] = get(word_counts,\
    \ w, 0) + 1\n    end\n    \n    word_counts = sort(word_counts, by=x->x[7], rev=true)\n\
    \    \n    word_counts = Dict()\n    for w in words\n        word_counts[w] =\
    \ get(word_counts, w, 0) + 1\n    end\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[8], rev=true)\n    \n    word_counts = Dict()\n    for w in words\n\
    \        word_counts[w] = get(word_counts, w, 0) + 1\n    end\n    \n    word_counts\
    \ = sort(word_counts, by=x->x[9], rev=true)\n    \n    word_counts = Dict()\n\
    \    for w in words\n        word_counts[w] = get(word_counts, w, 0) + 1\n   \
    \ end\n    \n    word_counts = sort(word_counts, by=x->x[10], rev=true)\n    \n\
    \    word_counts = \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1pks7qle.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1pks7qle.jl:1\n\
    in expression starting at /tmp/tmp1pks7qle.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \" \"\
    ]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\r\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurebtwqg.jl:55\nin expression starting at\
    \ /tmp/tmpurebtwqg.jl:55\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    txt\
    \ = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n    else\n\
    \        words = split(txt, \" \")\n        \n        word_counts = Dict{String,\
    \ Int64}()\n        for word in words\n            word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n        end\n        \n        sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n        \n        word_counts_sorted = Dict{String, Int64}()\n   \
    \     for word_count in sorted_word_counts\n            word_counts_sorted[word_count]\
    \ = get(word_counts_sorted, word_count, 0) + 1\n        end\n        \n      \
    \  sorted_word_counts_sorted = sort(collect(values(word_counts_sorted)), by=x->x)\n\
    \        \n        word_counts_sorted_sorted = Dict{String, Int64}()\n       \
    \ for word_count in sorted_word_counts_sorted\n            word_counts_sorted_sorted[word_count]\
    \ = get(word_counts_sorted_sorted, word_count, 0) + 1\n        end\n        \n\
    \        word_counts_sorted_sorted_sorted = sort(collect(values(word_counts_sorted_sorted)),\
    \ by=x->x)\n        \n        word_counts_sorted_sorted_sorted_sorted = sort(collect(values(word_counts_sorted_sorted_sorted)),\
    \ by=x->x)\n        \n        word_counts_sorted_sorted_sorted_sorted_sorted =\
    \ sort(collect(values(word_counts_sorted_sorted_sorted_sorted)), by=x->x)\n  \
    \      \n        word_counts_sorted_sorted_sorted_sorted_sorted_sorted = sort(collect(values(word_counts_sorted_sorted_sorted_sorted_sorted)),\
    \ by=x->x)\n        \n        word_counts_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sort(collect(values(word_counts_sorted_sorted_sorted_sorted_sorted_sorted)),\
    \ by=x->x)\n        \n        word_counts_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sort(collect(values(word_counts_sorted_sorted_sorted_sorted_sorted_sorted_sorted)),\
    \ by=x->x)\n        \n        word_counts_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sort(collect(values(word_counts_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)),\
    \ by=x->x)\n        \n        word_counts_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sort(collect(values(word_counts_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)),\
    \ by=x->x)\n        \n        word_counts_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sort(collect(values(word_counts_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_qb_t6q.jl:53\nin expression starting at\
    \ /tmp/tmp4_qb_t6q.jl:53\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n\
    \    for word in words\n        words_split = push!(words_split, word)\n    end\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !ise\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6bs5gc2j.jl:66\nin expression starting at\
    \ /tmp/tmp6bs5gc2j.jl:66\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    words_count = count(words)\n    if words_count == 0 \n     \
    \   return words_count\n    \n    words_count_with_commas = count(words,\",\"\
    )\n    if words_count_with_commas == 0 \n        return words_count_with_commas\n\
    \    \n    words_count_with_commas_with_odd_order = count(words,\",\",ord('a'))\n\
    \    if words_count_with_commas_with_odd_order == 0 \n        return words_count_with_commas_with_odd_order\n\
    \    \n    return words_count_with_commas_with_odd_order\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string. \nExamples\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n\
    5\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n5\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n5\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n5\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n5\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n\
    5\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n5\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n5\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n5\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n5\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n\
    5\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n5\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n5\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0sfnj768.jl:25\nin expression starting at\
    \ /tmp/tmp0sfnj768.jl:25\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        words_split = push!(words_split, word)\n    end\n    words_split\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8k57byam.jl:17\nin expression starting at\
    \ /tmp/tmp8k57byam.jl:17\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        return words\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,julia,split |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprh5f0q_l.jl:18\nin expression starting at\
    \ /tmp/tmprh5f0q_l.jl:18\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \" \"\
    ]\n    words = [w for w in words if w != \"-\"]\n    words = [w for w in words\
    \ if w != \"--\"]\n    words = [w for w in words if w != \"---\"]\n    words =\
    \ [w for w in words if w != \"----\"]\n    words = [w for w in words if w != \"\
    -----\"]\n    words = [w for w in words if w != \"------\"]\n    words = [w for\
    \ w in words if w != \"--------\"]\n    words = [w for w in words if w != \"---------\"\
    ]\n    words = [w for w in words if w != \"----------\"]\n    words = [w for w\
    \ in words if w != \"-----------\"]\n    words = [w for w in words if w != \"\
    ------------\"]\n    words = [w for w in words if w != \"-------------\"]\n  \
    \  words = [w for w in words if w != \"--------------\"]\n    words = [w for w\
    \ in words if w != \"---------------\"]\n    words = [w for w in words if w !=\
    \ \"--------------\"]\n    words = [w for w in words if w != \"---------------\"\
    ]\n    words = [w for w in words if w != \"---------------\"]\n    words = [w\
    \ for w in words if w != \"---------------\"]\n    words = [w for w in words if\
    \ w != \"---------------\"]\n    words = [w for w in words if w != \"---------------\"\
    ]\n    words = [w for w in words if w != \"---------------\"]\n    words = [w\
    \ for w in words if w != \"---------------\"]\n    words = [w for w in words if\
    \ w != \"---------------\"]\n    words = [w for w in words if w != \"---------------\"\
    ]\n    words = [w for w in words if w != \"---------------\"]\n    words = [w\
    \ for w in words if w != \"---------------\"]\n    words = [w for w in words if\
    \ w != \"---------------\"]\n    words = [w for w in words if w != \"---------------\"\
    ]\n    words = [w for w in words if w != \"---------------\"]\n    words = [w\
    \ for w in words if w != \"---------------\"]\n    words = [w for w in words if\
    \ w != \"---------------\"]\n    words = [w for w in words if w != \"---------------\"\
    ]\n    words = [w for w in words if w != \"---------------\"]\n    words = [w\
    \ for w in words if w != \"---------------\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppy8bygyz.jl:53\nin expression starting at\
    \ /tmp/tmppy8bygyz.jl:53\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = split(txt, \",\")\n    words_split = words_split[findall(words_split\
    \ .!= txt)]\n    words_split = words_split[findall(words_split .!= \" \")]\n \
    \   words_split = words_split[findall(words_split .!= \",\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,\")]\n    words_split = words_split[findall(words_split\
    \ .!= \",,\")]\n    words_split = words_split[findall(words_split .!= \" ,.,\"\
    )]\n    words_split = words_split[findall(words_split .!= \",.,\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" .,\")]\n    words_split = words_split[findall(words_split\
    \ .!= \".,\")]\n    words_split = words_split[findall(words_split .!= \" .,.\"\
    )]\n    words_split = words_split[findall(words_split .!= \".,.\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" .,.,\")]\n    words_split = words_split[findall(words_split\
    \ .!= \".,.,\")]\n    words_split = words_split[findall(words_split .!= \" .,.,.\"\
    )]\n    words_split = words_split[findall(words_split .!= \".,.,.\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" .,.,.,\")]\n    words_split = words_split[findall(words_split\
    \ .!= \".,.,.,\")]\n    words_split = words_split[findall(words_split .!= \" .,.,.,.\"\
    )]\n    words_split = words_split[findall(words_split .!= \".,.,.,.\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" .,.,.,.,\")]\n    words_split = words_split[findall(words_split\
    \ .!= \".,.,.,.,\")]\n    words_split = words_split[findall(words_split .!= \"\
    \ .,.,.,.,.\")]\n    words_split = words_split[findall(words_split .!= \".,.,.,.,.\"\
    )]\n    words_split = words_split[findall(words_split .!= \" .,.,.,.,.,\")]\n\
    \    words_split = words_split[findall(words_split .!= \".,.,.,.,.,\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" .,.,.,.,.,.\")]\n    words_split =\
    \ words_split[findall(words_split .!= \".,.,\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwhwuw5r.jl:44\nin expression starting at\
    \ /tmp/tmpnwhwuw5r.jl:44\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    words_count\
    \ = Int64(0)\n    for word in words\n        words_count += length(word)\n   \
    \     if words_count % 2 == 1\n            words_split += word\n        end\n\
    \    end\n    \n    if words_count % 2 == 1\n        words_split += words\n  \
    \  end\n    \n    return words_split\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a string with all the characters in lower case and spaces\
    \ replaced by underscores\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7iaz0nm.jl:27\nin expression starting at\
    \ /tmp/tmpm7iaz0nm.jl:27\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \",,\"\
    ]\n    words = [w for w in words if w != \",,,\"]\n    words = [w for w in words\
    \ if w != \",,,,\"]\n    words = [w for w in words if w != \",,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,\"]\n    words = [w for w in words if w\
    \ != \",,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,,,,\"]\n    words = [w for w in words if\
    \ w != \",,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,\"]\n    words = [w for\
    \ w in words if w != \",,,,,,,,,,,,,\"]\n    words = [w for w in words if w !=\
    \ \",,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,\"]\n    words = [w\
    \ for w in words if w != \",,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words\
    \ if w != \",,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for\
    \ w in words if w != \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words\
    \ if w != \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w !=\
    \ \",,,,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words = [\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5r_4d037.jl:1\nin expression starting at /tmp/tmp5r_4d037.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        words_split = push!(words_split, word)\n    end\n    return\
    \ words_split\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post. - [From Review](/review/low-quality-posts/18606374)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to split\
    \ a string into words, and I provided a solution that does that. He also asked\
    \ how to count the number of words in a string, and I provided a solution that\
    \ does that. He also asked how to count the number of words with an odd number\
    \ of letters, and I provided a solution that does that. He also asked how to count\
    \ the number of words with an even number of letters, and I provided a solution\
    \ that does that. He also asked how to count the number of words with an even\
    \ number of letters, and I provided a solution that does that. He also asked how\
    \ to count the number of words with an odd number of letters, and I provided a\
    \ solution that does that. He also asked how to count the number of words with\
    \ an even number of letters, and I provided a solution that does that. He also\
    \ asked how to count the number of words with an odd number of letters, and I\
    \ provided a solution that does that. He also asked how to count the number of\
    \ words with an even number of letters, and I provided a solution that does that.\
    \ He also asked how to count the number of words with an odd number of letters,\
    \ and I provided a solution that does that.\n<|/ c |>\n<| c |>\nI believe this\
    \ does answer the question. He asked how to split a string into words, and I provided\
    \ a solution that does that. He also asked how to count the number of words in\
    \ a string, and I provided a solution that does that. He also asked how to count\
    \ the number of words with an odd number of letters, and I provided a solution\
    \ that does that. He also asked how to count the number of words with an even\
    \ number of letters, and I provided a solution that does that. He also asked how\
    \ to count the number of words with an even number of letters, and I provided\
    \ a solution that does that. He also asked how to count the number of words with\
    \ an odd number of letters, and I provided a solution that does that. He also\
    \ asked how to count the number of words with an even number of letters, and I\
    \ provided a solution that does that\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpemaami4l.jl:17\nin expression starting at\
    \ /tmp/tmpemaami4l.jl:17\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    \n    words = split(txt,\
    \ \" \")\n    \n    word_counts = Dict{String, Int64}()\n    for word in words\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  sorted_word_counts = sort(collect(values(word_counts)), by=x->x)\n    \n  \
    \  word_counts = Dict{String, Int64}()\n    for word in sorted_word_counts\n \
    \       word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n   \
    \ sorted_word_counts = sort(collect(values(word_counts)), by=x->x)\n    \n   \
    \ word_counts = Dict{String, Int64}()\n    for word in sorted_word_counts\n  \
    \      word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts\
    \ = sort(collect(values(word_counts)), by=x->x)\n    \n    word_counts = Dict{String,\
    \ Int64}()\n    for word in sorted_word_counts\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    word_counts = Dict{String, Int64}()\n    for word in sorted_word_counts\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  sorted_word_counts = sort(collect(values(word_counts)), by=x->x)\n    \n  \
    \  word_counts = Dict{String, Int64}()\n    for word in sorted_word_counts\n \
    \       word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n   \
    \ sorted_word_counts = sort(collect(values(word_counts)), by=x->x)\n    \n   \
    \ word_counts = Dict{String, Int64}()\n    for word in sorted_word_counts\n  \
    \      word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts\
    \ = sort(collect(values(word_counts)), by=x->x)\n    \n    word_counts = Dict{String,\
    \ Int64}()\n    for word in sorted_word_counts\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    word_counts = Dict{String, Int64}()\n    for word in sorted_word_counts\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmppdbw1zra.jl:73\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppdbw1zra.jl:1\n\
    in expression starting at /tmp/tmppdbw1zra.jl:1\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \",,\"\
    ]\n    words = [w for w in words if w != \",,,\"]\n    words = [w for w in words\
    \ if w != \",,,,\"]\n    words = [w for w in words if w != \",,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,\"]\n    words = [w for w in words if w\
    \ != \",,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,,,,\"]\n    words = [w for w in words if\
    \ w != \",,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,\"]\n    words = [w for\
    \ w in words if w != \",,,,,,,,,,,,,\"]\n    words = [w for w in words if w !=\
    \ \",,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,\"]\n    words = [w\
    \ for w in words if w != \",,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words\
    \ if w != \",,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for\
    \ w in words if w != \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words\
    \ if w != \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w !=\
    \ \",,,,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words = [w \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2wfwtein.jl:1\nin expression starting at /tmp/tmp2wfwtein.jl:1\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \",,\"\
    ]\n    words = [w for w in words if w != \",,,\"]\n    words = [w for w in words\
    \ if w != \",,,,\"]\n    words = [w for w in words if w != \",,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,\"]\n    words = [w for w in words if w\
    \ != \",,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,,,,\"]\n    words = [w for w in words if\
    \ w != \",,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,\"]\n    words = [w for\
    \ w in words if w != \",,,,,,,,,,,,,\"]\n    words = [w for w in words if w !=\
    \ \",,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,\"]\n    words = [w\
    \ for w in words if w != \",,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words\
    \ if w != \",,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for\
    \ w in words if w != \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words\
    \ if w != \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w !=\
    \ \",,,,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words = [\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5r_4d037.jl:1\nin expression starting at /tmp/tmp5r_4d037.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = split(words, \",\")\n    words_split2 =\
    \ split(words_split, \" \")\n    words_split3 = split(words_split2, \",\")\n \
    \   words_split4 = split(words_split3, \" \")\n    words_split5 = split(words_split4,\
    \ \",\")\n    words_split6 = split(words_split5, \" \")\n    words_split7 = split(words_split6,\
    \ \",\")\n    words_split8 = split(words_split7, \" \")\n    words_split9 = split(words_split8,\
    \ \",\")\n    words_split10 = split(words_split9, \" \")\n    words_split11 =\
    \ split(words_split10, \",\")\n    words_split12 = split(words_split11, \" \"\
    )\n    words_split13 = split(words_split12, \",\")\n    words_split14 = split(words_split13,\
    \ \" \")\n    words_split15 = split(words_split14, \",\")\n    words_split16 =\
    \ split(words_split15, \" \")\n    words_split17 = split(words_split16, \",\"\
    )\n    words_split18 = split(words_split17, \" \")\n    words_split19 = split(words_split18,\
    \ \",\")\n    words_split20 = split(words_split19, \" \")\n    words_split21 =\
    \ split(words_split20, \",\")\n    words_split22 = split(words_split21, \" \"\
    )\n    words_split23 = split(words_split22, \",\")\n    words_split24 = split(words_split23,\
    \ \" \")\n    words_split25 = split(words_split24, \",\")\n    words_split26 =\
    \ split(words_split25, \" \")\n    words_split27 = split(words_split26, \",\"\
    )\n    words_split28 = split(words_split27, \" \")\n    words_split29 = split(words_split28,\
    \ \",\")\n    words_split30 = split(words_split29, \" \")\n    words_split31 =\
    \ split(words_split30, \",\")\n    words_split32 = split(words_split31, \" \"\
    )\n    words_split33 = split(words_split32, \",\")\n    words_split34 = split(words_split33,\
    \ \" \")\n    words_split35 = split(words_split34, \",\")\n    words_split36 =\
    \ split(words_split35, \" \")\n    words_split37 = split(words_split36, \",\"\
    )\n    words_split38 = split(words_split37, \" \")\n    words_split39 = split(words_split38,\
    \ \",\")\n    words_split40 = split(words_split39, \" \")\n    words_split41 =\
    \ split(words_split40, \",\")\n    words_split42 = split(words_split41, \" \"\
    )\n    words_split43 = split(words_split42, \",\")\n    words_split44 = split(words_split43,\
    \ \" \")\n    words_split45 = split(words_split44, \",\")\n    words_\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpesx6hsok.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpesx6hsok.jl:1\n\
    in expression starting at /tmp/tmpesx6hsok.jl:1\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        words_split = push!(words_split, word)\n    end\n    words_split\
    \ = words_split[findall(x -> x != \" \", words_split)]\n    words_split = words_split[findall(x\
    \ -> x != \",\", words_split)]\n    words_split = words_split[findall(x -> x !=\
    \ \" \", words_split)]\n    words_split = words_split[findall(x -> x != \",\"\
    , words_split)]\n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    words_split = words_split[findall(x -> x != \",\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x != \" \", words_split)]\n    words_split = words_split[findall(x\
    \ -> x != \",\", words_split)]\n    words_split = words_split[findall(x -> x !=\
    \ \" \", words_split)]\n    words_split = words_split[findall(x -> x != \",\"\
    , words_split)]\n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    words_split = words_split[findall(x -> x != \",\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x != \" \", words_split)]\n    words_split = words_split[findall(x\
    \ -> x != \",\", words_split)]\n    words_split = words_split[findall(x -> x !=\
    \ \" \", words_split)]\n    words_split = words_split[findall(x -> x != \",\"\
    , words_split)]\n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    words_split = words_split[findall(x -> x != \",\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x != \" \", words_split)]\n    words_split = words_split[findall(x\
    \ -> x != \",\", words_split)]\n    words_split = words_split[findall(x -> x !=\
    \ \" \", words_split)]\n    words_split = words_split[findall(x -> x != \",\"\
    , words_split)]\n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    words_split = words_split[findall(x -> x != \",\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x != \" \", words_split)]\n    words_split = words_split[findall(x\
    \ -> x != \",\", words_split)]\n    words_split = words_split[findall(x -> x !=\
    \ \" \", words_split)]\n    words_split = words_split[findall(x -> x != \",\"\
    , words_split)]\n    words_split = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu54iobwm.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu54iobwm.jl:1\n\
    in expression starting at /tmp/tmpu54iobwm.jl:1\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = split(words, \",\")\n    words_split2 =\
    \ split(words_split, \" \")\n    words_split3 = split(words_split2, \",\")\n \
    \   words_split4 = split(words_split3, \" \")\n    words_split5 = split(words_split4,\
    \ \",\")\n    words_split6 = split(words_split5, \" \")\n    words_split7 = split(words_split6,\
    \ \",\")\n    words_split8 = split(words_split7, \" \")\n    words_split9 = split(words_split8,\
    \ \",\")\n    words_split10 = split(words_split9, \" \")\n    words_split11 =\
    \ split(words_split10, \",\")\n    words_split12 = split(words_split11, \" \"\
    )\n    words_split13 = split(words_split12, \",\")\n    words_split14 = split(words_split13,\
    \ \" \")\n    words_split15 = split(words_split14, \",\")\n    words_split16 =\
    \ split(words_split15, \" \")\n    words_split17 = split(words_split16, \",\"\
    )\n    words_split18 = split(words_split17, \" \")\n    words_split19 = split(words_split18,\
    \ \",\")\n    words_split20 = split(words_split19, \" \")\n    words_split21 =\
    \ split(words_split20, \",\")\n    words_split22 = split(words_split21, \" \"\
    )\n    words_split23 = split(words_split22, \",\")\n    words_split24 = split(words_split23,\
    \ \" \")\n    words_split25 = split(words_split24, \",\")\n    words_split26 =\
    \ split(words_split25, \" \")\n    words_split27 = split(words_split26, \",\"\
    )\n    words_split28 = split(words_split27, \" \")\n    words_split29 = split(words_split28,\
    \ \",\")\n    words_split30 = split(words_split29, \" \")\n    words_split31 =\
    \ split(words_split30, \",\")\n    words_split32 = split(words_split31, \" \"\
    )\n    words_split33 = split(words_split32, \",\")\n    words_split34 = split(words_split33,\
    \ \" \")\n    words_split35 = split(words_split34, \",\")\n    words_split36 =\
    \ split(words_split35, \" \")\n    words_split37 = split(words_split36, \",\"\
    )\n    words_split38 = split(words_split37, \" \")\n    words_split39 = split(words_split38,\
    \ \",\")\n    words_split40 = split(words_split39, \" \")\n    words_split41 =\
    \ split(words_split40, \",\")\n    words_split42 = split(words_split41, \" \"\
    )\n    words_split43 = split(words_split42, \",\")\n    words_split44 = split(words_split43,\
    \ \" \")\n    words_split45 = split(words_split44, \",\")\n    words_\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpesx6hsok.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpesx6hsok.jl:1\n\
    in expression starting at /tmp/tmpesx6hsok.jl:1\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return txt\n    \n    words = split(txt, \" \")\n\
    \    \n    words_splitted = Vector{String}(undef, 0)\n    \n    for word in words\n\
    \        words_splitted = cat(1, words_splitted, split(word))\n    end\n    \n\
    \    return words_splitted\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7iqpvh3n.jl:24\nin expression starting at\
    \ /tmp/tmp7iqpvh3n.jl:24\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    \n    words_split = []\n    \n    for w in words\n        push!(words_split,\
    \ split(w))\n    end\n    \n    words_split\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of strings and returns a vector of strings\
    \ where each string has been concatenated with itself and all other\nstrings in\
    \ the vector. For example, [\"a\", \"b\", \"c\"] -> [\"a\", \"ab\", \"abc\"]\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4dvvxgen.jl:20\nin expression starting at\
    \ /tmp/tmp4dvvxgen.jl:20\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = split(txt, \",\")\n    words_split2 = split(txt,\
    \ \",\")\n    words_split3 = split(txt, \",\")\n    words_split4 = split(txt,\
    \ \",\")\n    words_split5 = split(txt, \",\")\n    words_split6 = split(txt,\
    \ \",\")\n    words_split7 = split(txt, \",\")\n    words_split8 = split(txt,\
    \ \",\")\n    words_split9 = split(txt, \",\")\n    words_split10 = split(txt,\
    \ \",\")\n    words_split11 = split(txt, \",\")\n    words_split12 = split(txt,\
    \ \",\")\n    words_split13 = split(txt, \",\")\n    words_split14 = split(txt,\
    \ \",\")\n    words_split15 = split(txt, \",\")\n    words_split16 = split(txt,\
    \ \",\")\n    words_split17 = split(txt, \",\")\n    words_split18 = split(txt,\
    \ \",\")\n    words_split19 = split(txt, \",\")\n    words_split20 = split(txt,\
    \ \",\")\n    words_split21 = split(txt, \",\")\n    words_split22 = split(txt,\
    \ \",\")\n    words_split23 = split(txt, \",\")\n    words_split24 = split(txt,\
    \ \",\")\n    words_split25 = split(txt, \",\")\n    words_split26 = split(txt,\
    \ \",\")\n    words_split27 = split(txt, \",\")\n    words_split28 = split(txt,\
    \ \",\")\n    words_split29 = split(txt, \",\")\n    words_split30 = split(txt,\
    \ \",\")\n    words_split31 = split(txt, \",\")\n    words_split32 = split(txt,\
    \ \",\")\n    words_split33 = split(txt, \",\")\n    words_split34 = split(txt,\
    \ \",\")\n    words_split35 = split(txt, \",\")\n    words_split36 = split(txt,\
    \ \",\")\n    words_split37 = split(txt, \",\")\n    words_split38 = split(txt,\
    \ \",\")\n    words_split39 = split(txt, \",\")\n    words_split40 = split(txt,\
    \ \",\")\n    words_split41 = split(txt, \",\")\n    words_split42 = split(txt,\
    \ \",\")\n    words_split43 = split(txt, \",\")\n    words_split44 = split(txt,\
    \ \",\")\n    words_split45 = split(txt, \",\")\n    words_split46 = split(txt,\
    \ \",\")\n    words_split47 = split(txt, \",\")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaw5xldba.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaw5xldba.jl:1\n\
    in expression starting at /tmp/tmpaw5xldba.jl:1\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words_split = []\n    \n    for w in words\n\
    \        \n        if w == \"\"\n            words_split.push(\",\")\n       \
    \ else\n            words_split.push(w)\n        end\n    end\n    \n    words_split\
    \ = split(words_split[1], \",\")\n    \n    words_split\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbjeitaha.jl:28\nin expression starting at\
    \ /tmp/tmpbjeitaha.jl:28\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\
    \n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\t\"\n        return\
    \ Vector{String}(\"\\t\")\n    elseif txt == \"\\r\"\n        return Vector{String}(\"\
    \\r\")\n    elseif txt == \"\\r\\n\"\n        return Vector{String}(\"\\r\\n\"\
    )\n    elseif txt == \"\\t\\n\"\n        return Vector{String}(\"\\t\\n\")\n \
    \   elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif\
    \ txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt == \"\
    \\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\n   \
    \     return Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\n        return\
    \ Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\n        return Vector{String}(\"\
    \\n\")\n    elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n  \
    \  elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt\
    \ == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\
    \n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\n        return\
    \ Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\n        return Vector{String}(\"\
    \\n\")\n    elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n  \
    \  elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt\
    \ == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\
    \n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\n        return\
    \ Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\n        return Vector{String}(\"\
    \\n\")\n    elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n  \
    \  elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt\
    \ == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\
    \n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\n        return\
    \ Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\n        return Vector{String}(\"\
    \\n\")\n    elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n  \
    \  elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt\
    \ == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\
    \n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\n        return\
    \ Vector{String}(\"\\n\")\n    elseif txt == \"\\n\"\n        return Vector\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa13tfyis.jl:1\nin expression starting at /tmp/tmpa13tfyis.jl:1\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    \n    if length(words) == 0 \n        return 0 \n    else \n\
    \        \n        letters = Vector{String}(undef, 0)\n        \n        for word\
    \ in words \n            letters = letters + split(word)\n        end\n      \
    \  \n        letters = letters[2:end]\n        \n        letters = letters[findall(x\
    \ -> !isascii(x), letters)]\n        \n        letters = letters[findall(x ->\
    \ !isascii(x), letters)]\n        \n        letters = letters[findall(x -> !isascii(x),\
    \ letters)]\n        \n        letters = letters[findall(x -> !isascii(x), letters)]\n\
    \        \n        letters = letters[findall(x -> !isascii(x), letters)]\n   \
    \     \n        letters = letters[findall(x -> !isascii(x), letters)]\n      \
    \  \n        letters = letters[findall(x -> !isascii(x), letters)]\n        \n\
    \        letters = letters[findall(x -> !isascii(x), letters)]\n        \n   \
    \     letters = letters[findall(x -> !isascii(x), letters)]\n        \n      \
    \  letters = letters[findall(x -> !isascii(x), letters)]\n        \n        letters\
    \ = letters[findall(x -> !isascii(x), letters)]\n        \n        letters = letters[findall(x\
    \ -> !isascii(x), letters)]\n        \n        letters = letters[findall(x ->\
    \ !isascii(x), letters)]\n        \n        letters = letters[findall(x -> !isascii(x),\
    \ letters)]\n        \n        letters = letters[findall(x -> !isascii(x), letters)]\n\
    \        \n        letters = letters[findall(x -> !isascii(x), letters)]\n   \
    \     \n        letters = letters[findall(x -> !isascii(x), letters)]\n      \
    \  \n        letters = letters[findall(x -> !isascii(x), letters)]\n        \n\
    \        letters = letters[findall(x -> !isascii(x), letters)]\n        \n   \
    \     letters = letters[findall(x -> !isascii(x), letters)]\n        \n      \
    \  letters = letters[findall(x -> !isascii(x), letters)]\n        \n        letters\
    \ = letters[findall(x -> !isascii(x), letters)]\n        \n        letters = letters[findall(x\
    \ -> !isascii(x), letters)]\n        \n        letters = letters[findall(x ->\
    \ !isascii(x), letters)]\n        \n        letters = letters[findall(x -> !isascii(x),\
    \ letters)]\n        \n        letters = letters[findall(x -> !isascii(x), letters)]\n\
    \        \n        letters = letters[findall(x -> !\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp75cxlani.jl:79\nin expression starting at\
    \ /tmp/tmp75cxlani.jl:79\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = split(words, \",\")\n    words_split =\
    \ words_split[words_split .!= \"\"]\n    words_split = words_split[words_split\
    \ .!= \" \"]\n    words_split = words_split[words_split .!= \"\"]\n    words_split\
    \ = words_split[words_split .!= \" \"]\n    words_split = words_split[words_split\
    \ .!= \"\"]\n    words_split = words_split[words_split .!= \" \"]\n    words_split\
    \ = words_split[words_split .!= \"\"]\n    words_split = words_split[words_split\
    \ .!= \" \"]\n    words_split = words_split[words_split .!= \"\"]\n    words_split\
    \ = words_split[words_split .!= \" \"]\n    words_split = words_split[words_split\
    \ .!= \"\"]\n    words_split = words_split[words_split .!= \" \"]\n    words_split\
    \ = words_split[words_split .!= \"\"]\n    words_split = words_split[words_split\
    \ .!= \" \"]\n    words_split = words_split[words_split .!= \"\"]\n    words_split\
    \ = words_split[words_split .!= \" \"]\n    words_split = words_split[words_split\
    \ .!= \"\"]\n    words_split = words_split[words_split .!= \" \"]\n    words_split\
    \ = words_split[words_split .!= \"\"]\n    words_split = words_split[words_split\
    \ .!= \" \"]\n    words_split = words_split[words_split .!= \"\"]\n    words_split\
    \ = words_split[words_split .!= \" \"]\n    words_split = words_split[words_split\
    \ .!= \"\"]\n    words_split = words_split[words_split .!= \" \"]\n    words_split\
    \ = words_split[words_split .!= \"\"]\n    words_split = words_split[words_split\
    \ .!= \" \"]\n    words_split = words_split[words_split .!= \"\"]\n    words_split\
    \ = words_split[words_split .!= \" \"]\n    words_split = words_split[words_split\
    \ .!= \"\"]\n    words_split = words_split[words_split .!= \" \"]\n    words_split\
    \ = words_split[words_split .!= \"\"]\n    words_split = words_split[words_split\
    \ .!= \" \"]\n    words_split = words_split[words_split .!= \"\"]\n    words_split\
    \ = words_split[words_split .!= \" \"]\n    words_split = words_split[words_split\
    \ .!= \"\"]\n    words_split = words_split[words_split .!= \" \"]\n    words_split\
    \ = words_split[words_split .!= \"\"]\n    words_split = words_split[words_split\
    \ .!= \" \"]\n    words_split = \nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq3epcjeb.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq3epcjeb.jl:1\n\
    in expression starting at /tmp/tmpq3epcjeb.jl:1\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words_without_commas = filter(x->!contains(x, \"\
    ,\"), words)\n        words_without_commas = filter(x->!contains(x, \"-\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"(\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \")\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"[\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"]\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"{\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"|\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"!\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"?\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"=\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"-\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"\\\"\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"\\'\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"#\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"@\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"~\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"*\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"&\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"=\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"(\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \")\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!contains(x, \"[\"), words_without_commas)\n\
    \        words_without_commas = filter(x\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprdch_hme.jl:39\nin expression starting at\
    \ /tmp/tmprdch_hme.jl:39\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return Vector{String}()\n    end\n    words = split(txt,\
    \ \" \")\n    words = words[words != \"\"]\n    words = words[words != \",\"]\n\
    \    words = words[words != \".\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"-\"]\n    words = words[words\
    \ != \"&\"]\n    words = words[words != \"(\"]\n    words = words[words != \"\
    )\"]\n    words = words[words != \"[\"]\n    words = words[words != \"]\"]\n \
    \   words = words[words != \"\\\"\"]\n    words = words[words != \"\\'\"]\n  \
    \  words = words[words != \"`\"]\n    words = words[words != \"~\"]\n    words\
    \ = words[words != \"`\"]\n    words = words[words != \"~\"]\n    words = words[words\
    \ != \"`\"]\n    words = words[words != \"~\"]\n    words = words[words != \"\
    `\"]\n    words = words[words != \"~\"]\n    words = words[words != \"`\"]\n \
    \   words = words[words != \"~\"]\n    words = words[words != \"`\"]\n    words\
    \ = words[words != \"~\"]\n    words = words[words != \"`\"]\n    words = words[words\
    \ != \"~\"]\n    words = words[words != \"`\"]\n    words = words[words != \"\
    ~\"]\n    words = words[words != \"`\"]\n    words = words[words != \"~\"]\n \
    \   words = words[words != \"`\"]\n    words = words[words != \"~\"]\n    words\
    \ = words[words != \"`\"]\n    words = words[words != \"~\"]\n    words = words[words\
    \ != \"`\"]\n    words = words[words != \"~\"]\n    words = words[words != \"\
    `\"]\n    words = words[words != \"~\"]\n    words = words[words != \"`\"]\n \
    \   words = words[words != \"~\"]\n    words = words[words != \"`\"]\n    words\
    \ = words[words != \"~\"]\n    words = words[words != \"`\"]\n    words = words[words\
    \ != \"~\"]\n    words = words[words != \"`\"]\n    words = words[words != \"\
    ~\"]\n    words = words[words != \"`\"]\n    words = words[word\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4jy5h6hh.jl:1\nin expression starting at /tmp/tmp4jy5h6hh.jl:1\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        words_split = push!(words_split, word)\n    end\n    words_split\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/27825823)\n<|/ c\
    \ |>\n<| c |>\nThe question was how to split a string into words. I provided a\
    \ solution to that question. How is this not an answer?\n<|/ c |>\n<| c |>\nThe\
    \ question was how to split a string into words. I provided a solution to that\
    \ question. How is this not an answer?\n<|/ c |>\n<| c |>\nThe question was how\
    \ to split a string into words. I provided a solution to that question. How is\
    \ this not an answer?\n<|/ c |>\n<| c |>\nThe question was how to split a string\
    \ into words. I provided a solution to that question. How is this not an answer?\n\
    <|/ c |>\n<| a tags=string,julia |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpscidr04v.jl:17\nin expression starting at\
    \ /tmp/tmpscidr04v.jl:17\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        words_split = words_split ++ [word]\n    end\n    return words_split\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnt8k6t66.jl:17\nin expression starting at\
    \ /tmp/tmpnt8k6t66.jl:17\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \" \"\
    ]\n    words = [w for w in words if w != \"-\"]\n    words = [w for w in words\
    \ if w != \"_\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp127mulu6.jl:55\nin expression starting at\
    \ /tmp/tmp127mulu6.jl:55\n"
  stdout: ''
  timestamp: 1659749243
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \" \"]\n  \
    \  words = [w for w in words if w != \".\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!?\"]\n    words = [w for w in words if w != \"?!\"]\n\
    \    words = [w for w in words if w != \"!?!\"]\n    words = [w for w in words\
    \ if w != \"?!?\"]\n    words = [w for w in words if w != \"!?!?\"]\n    words\
    \ = [w for w in words if w != \"?!?!\"]\n    words = [w for w in words if w !=\
    \ \"!?!?!\"]\n    words = [w for w in words if w != \"?!?!?\"]\n    words = [w\
    \ for w in words if w != \"!?!?!?\"]\n    words = [w for w in words if w != \"\
    ?!?!?!\"]\n    words = [w for w in words if w != \"!?!?!?\"]\n    words = [w for\
    \ w in words if w != \"?!?!?!?\"]\n    words = [w for w in words if w != \"!?!?!?!\"\
    ]\n    words = [w for w in words if w != \"?!?!?!?!\"]\n    words = [w for w in\
    \ words if w != \"!?!?!?!?\"]\n    words = [w for w in words if w != \"?!?!?!?!?\"\
    ]\n    words = [w for w in words if w != \"!?!?!?!?!\"]\n    words = [w for w\
    \ in words if w != \"?!?!?!?!?!\"]\n    words = [w for w in words if w != \"!?!?!?!?!?\"\
    ]\n    words = [w for w in words if w != \"?!?!?!?!?!?\"]\n    words = [w for\
    \ w in words if w != \"!?!?!?!?!?!\"]\n    words = [w for w in words if w != \"\
    ?!?!?!?!?!?!\"]\n    words = [w for w in words if w != \"!?!?!?\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyb3bv2kl.jl:45\nin expression starting at\
    \ /tmp/tmpyb3bv2kl.jl:45\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words = [w for w in words if w != \"\"]\n        return words\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    count_letters(txt::String)\n\
    \    Count the number of lower-case letters in the text you pass as an argument\n\
    \    \n    Arguments\n    txt :: String \n    \n    Returns\n    count :: Int64\n\
    \    \n    Examples\n            >>> count_letters(\"abcdef\") \n            3\
    \ \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44eis50x.jl:19\nin expression starting at\
    \ /tmp/tmp44eis50x.jl:19\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \".\"\
    ]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsml7ycai.jl:55\nin expression starting at\
    \ /tmp/tmpsml7ycai.jl:55\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   words = [w for w in words if w != \"\\n\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\f\"]\n        words = [w for w in words\
    \ if w != \"\\v\"]\n        words = [w for w in words if w != \"\\a\"]\n     \
    \   words = [w for w in words if w != \"\\e\"]\n        words = [w for w in words\
    \ if w != \"\\c\"]\n        words = [w for w in words if w != \"\\o\"]\n     \
    \   words = [w for w in words if w != \"\\i\"]\n        words = [w for w in words\
    \ if w != \"\\h\"]\n        words = [w for w in words if w != \"\\o\"]\n     \
    \   words = [w for w in words if w != \"\\o\"]\n        words = [w for w in words\
    \ if w != \"\\o\"]\n        words = [w for w in words if w != \"\\o\"]\n     \
    \   words = [w for w in words if w != \"\\o\"]\n        words = [w for w in words\
    \ if w != \"\\o\"]\n        words = [w for w in words if w != \"\\o\"]\n     \
    \   words = [w for w in words if w != \"\\o\"]\n        words = [w for w in words\
    \ if w != \"\\o\"]\n        words = [w for w in words if w != \"\\o\"]\n     \
    \   words = [w for w in words if w != \"\\o\"]\n        words = [w for w in words\
    \ if w != \"\\o\"]\n        words = [w for w in words if w != \"\\o\"]\n     \
    \   words = [w for w in words if w != \"\\o\"]\n        words = [w for w in words\
    \ if w != \"\\o\"]\n        words = [w for w in words if w != \"\\o\"]\n     \
    \   words = [w for w in words if w != \"\\o\"]\n        words = [w for w in words\
    \ if w != \"\\o\"]\n        words = [w for w in words if w != \"\\o\"]\n     \
    \   words = [w for w in words if w != \"\\o\"]\n        words = [w for w in words\
    \ if w != \"\\o\"]\n        words = [w for w in words if w != \"\\o\"]\n     \
    \   words = [w for w in words if w != \"\\o\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplquicnnd.jl:23\nin expression starting at /tmp/tmplquicnnd.jl:23\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    if isempty(words)\n        return words\n    else\n\
    \        \n        words = split(txt, \",\")\n        \n        if isempty(words)\n\
    \            return words\n        else\n            \n            words = split(txt,\
    \ \" \")\n            \n            if isempty(words)\n                return\
    \ words\n            else\n                \n                words = split(txt,\
    \ \",\")\n                \n                if isempty(words)\n              \
    \      return words\n                else\n                    \n            \
    \        words = split(txt, \" \")\n                    \n                   \
    \ if isempty(words)\n                        return words\n                  \
    \  else\n                        \n                        words = split(txt,\
    \ \",\")\n                        \n                        if isempty(words)\n\
    \                            return words\n                        else\n    \
    \                        \n                            words = split(txt, \" \"\
    )\n                            \n                            if isempty(words)\n\
    \                                return words\n                            else\n\
    \                                \n                                words = split(txt,\
    \ \",\")\n                                \n                                if\
    \ isempty(words)\n                                    return words\n         \
    \                       else\n                                    \n         \
    \                           words = split(txt, \" \")\n                      \
    \              \n                                    if isempty(words)\n     \
    \                                   return words\n                           \
    \         else\n                                        \n                   \
    \                     words = split(txt, \",\")\n                            \
    \            \n                                        if isempty(words)\n   \
    \                                         return words\n                     \
    \                   else\n                                            \n     \
    \                                       words = split(txt, \" \")\n          \
    \                                  \n                                        \
    \    if isempty(words)\n                                                return\
    \ words\n                                            else\n                  \
    \                              \n                                            \
    \    words = split(txt, \",\")\n                                             \
    \   \n                                                if isempty(words)\n    \
    \                                                return words\n              \
    \                                  else\n                                    \
    \                \n                                                    words =\
    \ split(txt, \" \")\n                                                    \n  \
    \                                                  if isempty(words)\n       \
    \                                                 return words\n             \
    \                                       else\n                               \
    \                         \n                                                 \
    \       words = split(txt, \",\")\n                                          \
    \              \n                                                        if isempty(words)\n\
    \                                                            return words\n  \
    \                                                      else\n                \
    \                                            \n                              \
    \                              words = split(txt, \" \")\n                   \
    \                                         \n                                 \
    \                           if isempty(words)\n                              \
    \                                  return words\n                            \
    \                                else\n                                      \
    \                          \n                                                \
    \                words = split(txt, \",\")\n                                 \
    \                               \n                                           \
    \                     if isempty(words)\n                                    \
    \                                return words\n                              \
    \                                  else\n                                    \
    \                                \n                                          \
    \                          words = split(txt, \" \")\n                       \
    \                                             \n                             \
    \                                       if isempty(words)\n                  \
    \                                                                      return\
    \ words\n                                                                    else\n\
    \                                                                        \n  \
    \                                                                      words =\
    \ split(txt, \",\")\n                                                        \
    \                \n                                                          \
    \              if isempty(words)\n                                           \
    \                                 return words\n                             \
    \                                           else\n                           \
    \                                                 \n                         \
    \                                                   words = split(txt, \" \")\n\
    \                                                                            \n\
    \                                                                            if\
    \ isempty(words)\n                                                           \
    \                     return words\n                                         \
    \                                   else\n                                   \
    \                                             \n                             \
    \                                                   words = split(txt, \",\")\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpbgp5nh38.jl:120\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbgp5nh38.jl:1\n\
    in expression starting at /tmp/tmpbgp5nh38.jl:1\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    words = split(txt, \" \")\n    \n    if isempty(words)\n        return words\n\
    \    else\n        \n        words = map(x -> lowercase(x), words)\n        \n\
    \        words_count = length(words)\n        \n        if words_count % 2 ==\
    \ 1\n            \n            words_count = words_count + 1\n            \n \
    \           words = words[2:end]\n            \n        else\n            \n \
    \           words = words[2:end]\n            \n        end\n        \n      \
    \  return words\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string. \nExamples\n\
    >>> count_chars(\"Hello World\")\n10\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n\
    >>> count_chars(\"Hello World\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbtibfsge.jl:36\nin expression starting at\
    \ /tmp/tmpbtibfsge.jl:36\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n\
    \    for word in words\n        words_split = push!(words_split, word)\n    end\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpletieol5.jl:68\nin expression starting at\
    \ /tmp/tmpletieol5.jl:68\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words = [w for w in words if w != \"\"]\n        return words\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI came up with\
    \ this solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdtrh5xz0.jl:19\nin expression starting at\
    \ /tmp/tmpdtrh5xz0.jl:19\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\
    \n        return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmv0u2c0a.jl:1\nin expression starting at /tmp/tmpmv0u2c0a.jl:1\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt)\n    \n    words_split = Vector{String}()\n    \n    for word in\
    \ words\n        words_split += split(word)\n    end\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbtla1twf.jl:66\nin expression starting at\
    \ /tmp/tmpbtla1twf.jl:66\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}()\n    for word in words\n\
    \        if !isempty(word)\n            words_split = words_split ++ split(word,\
    \ \",\")\n        end\n    end\n    words_split = words_split ++ [word]\n    words_split\
    \ = words_split .- \"a\"\n    words_split = words_split .- \"b\"\n    words_split\
    \ = words_split .- \"c\"\n    words_split = words_split .- \"d\"\n    words_split\
    \ = words_split .- \"e\"\n    words_split = words_split .- \"f\"\n    words_split\
    \ = words_split .- \"g\"\n    words_split = words_split .- \"h\"\n    words_split\
    \ = words_split .- \"i\"\n    words_split = words_split .- \"j\"\n    words_split\
    \ = words_split .- \"k\"\n    words_split = words_split .- \"l\"\n    words_split\
    \ = words_split .- \"m\"\n    words_split = words_split .- \"n\"\n    words_split\
    \ = words_split .- \"o\"\n    words_split = words_split .- \"p\"\n    words_split\
    \ = words_split .- \"q\"\n    words_split = words_split .- \"r\"\n    words_split\
    \ = words_split .- \"s\"\n    words_split = words_split .- \"t\"\n    words_split\
    \ = words_split .- \"u\"\n    words_split = words_split .- \"v\"\n    words_split\
    \ = words_split .- \"w\"\n    words_split = words_split .- \"x\"\n    words_split\
    \ = words_split .- \"y\"\n    words_split = words_split .- \"z\"\n    words_split\
    \ = words_split .- \"A\"\n    words_split = words_split .- \"B\"\n    words_split\
    \ = words_split .- \"C\"\n    words_split = words_split .- \"D\"\n    words_split\
    \ = words_split .- \"E\"\n    words_split = words_split .- \"F\"\n    words_split\
    \ = words_split .- \"G\"\n    words_split = words_split .- \"H\"\n    words_split\
    \ = words_split .- \"I\"\n    words_split = words_split .- \"J\"\n    words_split\
    \ = words_split .- \"K\"\n    words_split = words_split .- \"L\"\n    words_split\
    \ = words_split .- \"M\"\n    words_split = words_split .- \"N\"\n    words_split\
    \ = words_split .- \"O\"\n    words_split = words_split .- \"P\"\n    words_split\
    \ = words_split .- \"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzoae63dy.jl:66\nin expression starting at\
    \ /tmp/tmpzoae63dy.jl:66\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"#\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"#\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"#\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"#\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"#\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"#\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"#\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"#\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"#\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"#\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"#\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"#\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"#\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"#\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"#\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpletebcet.jl:1\nin expression starting at /tmp/tmpletebcet.jl:1\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        words_split = push!(words_split, word)\n    end\n    return\
    \ words_split\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpps7uzied.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpps7uzied.jl:23\n  Expression: candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n   Evaluated: [\"Hello,world!\"] ==\
    \ [\"Hello\", \"world!\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpps7uzied.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpps7uzied.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpps7uzied.jl:26\n  Expression: candidate(\"abcdef\") == 3\n\
    \   Evaluated: [\"abcdef\"] == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpps7uzied.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpps7uzied.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpps7uzied.jl:27\n  Expression: candidate(\"aaabb\") == 2\n\
    \   Evaluated: [\"aaabb\"] == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpps7uzied.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpps7uzied.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpps7uzied.jl:28\n  Expression: candidate(\"aaaBb\") == 1\n\
    \   Evaluated: [\"aaaBb\"] == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpps7uzied.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpps7uzied.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpps7uzied.jl:29\n  Expression: candidate(\"\") == 0\n   Evaluated:\
    \ [\"\"] == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/jul"
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \",,\"\
    ]\n    words = [w for w in words if w != \",,,\"]\n    words = [w for w in words\
    \ if w != \",,,,\"]\n    words = [w for w in words if w != \",,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,\"]\n    words = [w for w in words if w\
    \ != \",,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,,,,\"]\n    words = [w for w in words if\
    \ w != \",,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,\"]\n    words = [w for\
    \ w in words if w != \",,,,,,,,,,,,,\"]\n    words = [w for w in words if w !=\
    \ \",,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,\"]\n    words = [w\
    \ for w in words if w != \",,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words\
    \ if w != \",,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for\
    \ w in words if w != \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words\
    \ if w != \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w !=\
    \ \",,,,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words = [\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5r_4d037.jl:1\nin expression starting at /tmp/tmp5r_4d037.jl:1\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = split(words, \",\")\n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !ise\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx306ng2y.jl:40\nin expression starting at\
    \ /tmp/tmpx306ng2y.jl:40\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words_split = Vector{String}(undef, 0)\n        for word in\
    \ words\n            words_split = words_split ++ split(word, \",\")\n       \
    \ end\n        return words_split\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpw2v1nt7z.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpw2v1nt7z.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  type\
    \ String has no field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] split_words(txt::String)\n     @ Main /tmp/tmpw2v1nt7z.jl:10\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw2v1nt7z.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw2v1nt7z.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpw2v1nt7z.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  type String has no\
    \ field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] split_words(txt::String)\n     @ Main /tmp/tmpw2v1nt7z.jl:10\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw2v1nt7z.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw2v1nt7z.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpw2v1nt7z.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  type String has\
    \ no field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] split_words(txt::String)\n     @ Main /tmp/tmpw2v1nt7z.jl:10\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw2v1nt7z.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw2v1nt7z.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpw2v1nt7z.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hel"
  timestamp: 1659749246
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt)\n    \n    if length(words) == 0 \n        return words\n    \n\
    \    words = words[2:end]\n    \n    if all(islower(word)) \n        return words\n\
    \    \n    words = words[2:end]\n    \n    if all(isupper(word)) \n        return\
    \ words\n    \n    words = words[2:end]\n    \n    if all(isdigit(word)) \n  \
    \      return words\n    \n    words = words[2:end]\n    \n    if all(isalpha(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isalnum(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isspace(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(iscomma(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isdot(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isdash(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isquote(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isbackquote(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isbracket(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isbackslash(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isquote(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isbackquote(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isbracket(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isbackslash(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isquote(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isbackquote(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isbracket(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isbackslash(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n    if all(isquote(word))\
    \ \n        return words\n    \n    words = words[2:end]\n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvzrbse00.jl:1\nin expression starting at /tmp/tmpvzrbse00.jl:1\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = words[words != \"\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfeqf8cb9.jl:1\nin expression starting at /tmp/tmpfeqf8cb9.jl:1\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words_split = split(words, \",\")\n        words_split2 = split(words_split,\
    \ \" \")\n        words_split3 = split(words_split2, \" \")\n        words_split4\
    \ = split(words_split3, \" \")\n        words_split5 = split(words_split4, \"\
    \ \")\n        words_split6 = split(words_split5, \" \")\n        words_split7\
    \ = split(words_split6, \" \")\n        words_split8 = split(words_split7, \"\
    \ \")\n        words_split9 = split(words_split8, \" \")\n        words_split10\
    \ = split(words_split9, \" \")\n        words_split11 = split(words_split10, \"\
    \ \")\n        words_split12 = split(words_split11, \" \")\n        words_split13\
    \ = split(words_split12, \" \")\n        words_split14 = split(words_split13,\
    \ \" \")\n        words_split15 = split(words_split14, \" \")\n        words_split16\
    \ = split(words_split15, \" \")\n        words_split17 = split(words_split16,\
    \ \" \")\n        words_split18 = split(words_split17, \" \")\n        words_split19\
    \ = split(words_split18, \" \")\n        words_split20 = split(words_split19,\
    \ \" \")\n        words_split21 = split(words_split20, \" \")\n        words_split22\
    \ = split(words_split21, \" \")\n        words_split23 = split(words_split22,\
    \ \" \")\n        words_split24 = split(words_split23, \" \")\n        words_split25\
    \ = split(words_split24, \" \")\n        words_split26 = split(words_split25,\
    \ \" \")\n        words_split27 = split(words_split26, \" \")\n        words_split28\
    \ = split(words_split27, \" \")\n        words_split29 = split(words_split28,\
    \ \" \")\n        words_split30 = split(words_split29, \" \")\n        words_split31\
    \ = split(words_split30, \" \")\n        words_split32 = split(words_split31,\
    \ \" \")\n        words_split33 = split(words_split32, \" \")\n        words_split34\
    \ = split(words_split33, \" \")\n        words_split35 = split(words_split34,\
    \ \" \")\n        words_split36 = split(words_split35, \" \")\n        words_split37\
    \ = split(words_split36, \" \")\n        words_split38 = split(words_split37,\
    \ \" \")\n        words_split39 = split(words_split38, \" \")\n        words_split40\
    \ = split(words_split39, \" \")\n        words_split41 = split(words_split40,\
    \ \" \")\n        words_split42 = split(words_split41, \" \")\n        words_split43\
    \ = split(words_split42, \" \")\n        words_split44 = split(words_split43,\
    \ \" \")\n        words_split45 = split(words_split44, \" \")\n        words_split46\
    \ = split(\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpex0rnjuv.jl:63\nin expression starting at\
    \ /tmp/tmpex0rnjuv.jl:63\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n\
    \    for word in words\n        words_split = push!(words_split, word)\n    end\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyr503ifw.jl:68\nin expression starting at\
    \ /tmp/tmpyr503ifw.jl:68\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    \n    if length(words) == 0\n        return words\n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbhhg5yc8.jl:1\nin expression starting at /tmp/tmpbhhg5yc8.jl:1\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    if length(words) == 0\n        return words\n \
    \   end\n    \n    words_split = split(words, \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split2 = split(words_split,\
    \ \" \")\n    \n    if length(words_split2) == 0\n        return words\n    end\n\
    \    \n    words_split3 = split(words_split2, \",\")\n    \n    if length(words_split3)\
    \ == 0\n        return words\n    end\n    \n    words_split4 = split(words_split3,\
    \ \" \")\n    \n    if length(words_split4) == 0\n        return words\n    end\n\
    \    \n    words_split5 = split(words_split4, \",\")\n    \n    if length(words_split5)\
    \ == 0\n        return words\n    end\n    \n    words_split6 = split(words_split5,\
    \ \" \")\n    \n    if length(words_split6) == 0\n        return words\n    end\n\
    \    \n    words_split7 = split(words_split6, \",\")\n    \n    if length(words_split7)\
    \ == 0\n        return words\n    end\n    \n    words_split8 = split(words_split7,\
    \ \" \")\n    \n    if length(words_split8) == 0\n        return words\n    end\n\
    \    \n    words_split9 = split(words_split8, \",\")\n    \n    if length(words_split9)\
    \ == 0\n        return words\n    end\n    \n    words_split10 = split(words_split9,\
    \ \" \")\n    \n    if length(words_split10) == 0\n        return words\n    end\n\
    \    \n    words_split11 = split(words_split10, \",\")\n    \n    if length(words_split11)\
    \ == 0\n        return words\n    end\n    \n    words_split12 = split(words_split11,\
    \ \" \")\n    \n    if length(words_split12) == 0\n        return words\n    end\n\
    \    \n    words_split13 = split(words_split12, \",\")\n    \n    if length(words_split13)\
    \ == 0\n        return words\n    end\n    \n    words_split14 = split(words_split13,\
    \ \" \")\n    \n    if length(words_split14) == 0\n        return words\n    end\n\
    \    \n    words_split15 = split(words_split14, \",\")\n    \n    if length(words_split15)\
    \ == 0\n        return words\n    end\n    \n    words_split16 = split(words_split15,\
    \ \" \")\n    \n    if length(words_split16) == 0\n        return words\n    end\n\
    \    \n    words_split17 = split(words_split16, \",\")\n    \n    if length(words_split17)\
    \ == 0\n        return words\n    end\n    \n    words_split18 = split(words_split17,\
    \ \" \")\n    \n    if length(words_split18) == 0\n        return words\n    end\n\
    \    \n    words_split19 = split(words_split18, \",\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnfb5rb6q.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnfb5rb6q.jl:1\n\
    in expression starting at /tmp/tmpnfb5rb6q.jl:1\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    \n    if isempty(words)\n        return words\n    else\n  \
    \      words_split = split(words)\n        words_split = [w for w in words_split\
    \ if w != \"\"]\n        words_split = [w for w in words_split if w != \",\"]\n\
    \        words_split = [w for w in words_split if w != \" \"]\n        words_split\
    \ = [w for w in words_split if w != \".\"]\n        words_split = [w for w in\
    \ words_split if w != \"!\"]\n        words_split = [w for w in words_split if\
    \ w != \"?\"]\n        words_split = [w for w in words_split if w != \"-\"]\n\
    \        words_split = [w for w in words_split if w != \"_\"]\n        words_split\
    \ = [w for w in words_split if w != \"(\"]\n        words_split = [w for w in\
    \ words_split if w != \")\"]\n        words_split = [w for w in words_split if\
    \ w != \"[\"]\n        words_split = [w for w in words_split if w != \"]\"]\n\
    \        words_split = [w for w in words_split if w != \"{\"]\n        words_split\
    \ = [w for w in words_split if w != \"}\"]\n        words_split = [w for w in\
    \ words_split if w != \"|\"]\n        words_split = [w for w in words_split if\
    \ w != \"^\"]\n        words_split = [w for w in words_split if w != \"~\"]\n\
    \        words_split = [w for w in words_split if w != \"!\"]\n        words_split\
    \ = [w for w in words_split if w != \"?\"]\n        words_split = [w for w in\
    \ words_split if w != \"-\"]\n        words_split = [w for w in words_split if\
    \ w != \"_\"]\n        words_split = [w for w in words_split if w != \"(\"]\n\
    \        words_split = [w for w in words_split if w != \")\"]\n        words_split\
    \ = [w for w in words_split if w != \"[\"]\n        words_split = [w for w in\
    \ words_split if w != \"]\"]\n        words_split = [w for w in words_split if\
    \ w != \"{\"]\n        words_split = [w for w in words_split if w != \"}\"]\n\
    \        words_split = [w for w in words_split if w != \"|\"]\n        words_split\
    \ = [w for w in words_split if w != \"^\"]\n        words_split = [w for w in\
    \ words_split if w != \"~\"]\n        words_split = [w for w in words_split if\
    \ w != \"!\"]\n        words_split = [w for w in words_split if w != \"?\"]\n\
    \        words_split = [w for \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6rw4dsej.jl:51\nin expression starting at\
    \ /tmp/tmp6rw4dsej.jl:51\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \"-\"]\n        words = [w for w in words if w != \"--\"]\n        words\
    \ = [w for w in words if w != \"---\"]\n        words = [w for w in words if w\
    \ != \"----\"]\n        words = [w for w in words if w != \"-----\"]\n       \
    \ words = [w for w in words if w != \"------\"]\n        words = [w for w in words\
    \ if w != \"--------\"]\n        words = [w for w in words if w != \"---------\"\
    ]\n        words = [w for w in words if w != \"----------\"]\n        words =\
    \ [w for w in words if w != \"-----------\"]\n        words = [w for w in words\
    \ if w != \"------------\"]\n        words = [w for w in words if w != \"-------------\"\
    ]\n        words = [w for w in words if w != \"--------------\"]\n        words\
    \ = [w for w in words if w != \"----------------\"]\n        words = [w for w\
    \ in words if w != \"-----------------\"]\n        words = [w for w in words if\
    \ w != \"------------------\"]\n        words = [w for w in words if w != \"-------------------\"\
    ]\n        words = [w for w in words if w != \"--------------------\"]\n     \
    \   words = [w for w in words if w != \"---------------------\"]\n        words\
    \ = [w for w in words if w != \"----------------------\"]\n        words = [w\
    \ for w in words if w != \"---------------------\"]\n        words = [w for w\
    \ in words if w != \"----------------------\"]\n        words = [w for w in words\
    \ if w != \"---------------------\"]\n        words = [w for w in words if w !=\
    \ \"----------------------\"]\n        words = [w for w in words if w != \"---------------------\"\
    ]\n        words = [w for w in words if w != \"----------------------\"]\n   \
    \     words = [w for w in words if w != \"---------------------\"]\n        words\
    \ = [w for w in words if w != \"----------------------\"]\n        words = [w\
    \ for w in words if w != \"---------------------\"]\n        words = [w for w\
    \ in words if w != \"----------------------\"]\n        words = [w for w in words\
    \ if w != \"---------------------\"]\n        words = [w for w in words if w !=\
    \ \"----------------------\"]\n        words = [w for w in words if w != \"---------------------\"\
    ]\n        words = [w \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsnxrws5o.jl:1\nin expression starting at /tmp/tmpsnxrws5o.jl:1\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        words_split = push!(words_split, word)\n    end\n    words_split\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a vector of words that start with a capital letter and end with a period. \n\
    Examples\n>>> split_words(\"Hello World. How are you?\")\n[\"Hello\", \"World\"\
    , \"How\", \"are\", \"you\"]\n>>> split_words(\"Hello World. How are you?\")\n\
    [\"Hello\", \"World\", \"How\", \"are\", \"you\"]\n>>> split_words(\"Hello World.\
    \ How are you?\")\n[\"Hello\", \"World\", \"How\", \"are\", \"you\"]\n>>> split_words(\"\
    Hello World. How are you?\")\n[\"Hello\", \"World\", \"How\", \"are\", \"you\"\
    ]\n>>> split_words(\"Hello World. How are you?\")\n[\"Hello\", \"World\", \"How\"\
    , \"are\", \"you\"]\n>>> split_words(\"Hello World. How are you?\")\n[\"Hello\"\
    , \"World\", \"How\", \"are\", \"you\"]\n>>> split_words(\"Hello World. How are\
    \ you?\")\n[\"Hello\", \"World\", \"How\", \"are\", \"you\"]\n>>> split_words(\"\
    Hello World. How are you?\")\n[\"Hello\", \"World\", \"How\", \"are\", \"you\"\
    ]\n>>> split_words(\"Hello World. How are you?\")\n[\"Hello\", \"World\", \"How\"\
    , \"are\", \"you\"]\n>>> split_words(\"Hello World. How are you?\")\n[\"Hello\"\
    , \"World\", \"How\", \"are\", \"you\"]\n>>> split_words(\"Hello World. How are\
    \ you?\")\n[\"Hello\", \"World\", \"How\", \"are\", \"you\"]\n>>> split_words(\"\
    Hello World. How are you?\")\n[\"Hello\", \"World\", \"How\", \"are\", \"you\"\
    ]\n>>> split_words(\"Hello World. How are you?\")\n[\"Hello\", \"World\", \"How\"\
    , \"are\", \"you\"]\n>>> split_words(\"Hello World. How are you?\")\n[\"Hello\"\
    , \"World\", \"How\", \"are\", \"you\"]\n>>> split_words(\"Hello World. How are\
    \ you?\")\n[\"Hello\", \"World\", \"How\", \"are\", \"you\"]\n>>> split_words(\"\
    Hello World. How are you?\")\n[\"Hello\", \"World\", \"How\", \"are\", \"you\"\
    ]\n>>> split_words(\"Hello World. How are you?\")\n[\"Hello\", \"World\", \"How\"\
    , \"are\", \"you\"]\n>>> split_words(\"Hello World. How are you?\")\n[\"Hello\"\
    , \"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7660l1nf.jl:17\nin expression starting at\
    \ /tmp/tmp7660l1nf.jl:17\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    words_split = Vector{String}(undef, 0)\n    words_count = Int64(0)\n\
    \    for word in words\n        words_count += length(word)\n        if words_count\
    \ > 1\n            words_split += word\n        else\n            words_split\
    \ += split(word)[1]\n        end\n    end\n    return words_split\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1arqahw_.jl:23\nin expression starting at\
    \ /tmp/tmp1arqahw_.jl:23\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n\
    \    for word in words\n        words_split = push!(words_split, word)\n    end\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphzjhc5wc.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphzjhc5wc.jl:1\n\
    in expression starting at /tmp/tmphzjhc5wc.jl:1\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n\
    \    for word in words\n        words_split = push!(words_split, word)\n    end\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkcjwex5a.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkcjwex5a.jl:1\n\
    in expression starting at /tmp/tmpkcjwex5a.jl:1\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    words_split = Vector{String}(undef, 0)\n    words_count = Int64(0)\n\
    \    for word in words\n        words_split = push!(words_split, word)\n     \
    \   words_count = words_count + 1\n    end\n    return words_count, words_split\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ a vector of strings where each string is a word in the string with each word\
    \ capitalized.\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppk7vv9u2.jl:19\nin expression starting at\
    \ /tmp/tmppk7vv9u2.jl:19\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    txt\
    \ = txt.trim()\n    if txt == \"\"\n        return txt\n    \n    words = split(txt,\
    \ \" \")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsu_nm8vd.jl:1\nin expression starting at /tmp/tmpsu_nm8vd.jl:1\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    words = split(txt, \" \")\n    \n    if length(words) == 0\n        return\
    \ words\n    else\n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp3snska7k.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3snska7k.jl:1\n\
    in expression starting at /tmp/tmp3snska7k.jl:1\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   return words\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiyuux6l0.jl:19\nin expression starting at\
    \ /tmp/tmpiyuux6l0.jl:19\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    if length(words) == 0\n        return length(txt)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1lxwd5ky.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1lxwd5ky.jl:1\n\
    in expression starting at /tmp/tmp1lxwd5ky.jl:1\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt)\n    \n    words_split = []\n    \n    for word in words\n    \
    \    \n        if isempty(word)\n            words_split = []\n        else\n\
    \            words_split = split(word)\n        end\n    end\n    \n    words_split\
    \ = words_split[words_split .!= \"\"]\n    \n    words_split = words_split[words_split\
    \ .!= \",\"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp72m43tws.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp72m43tws.jl:1\n\
    in expression starting at /tmp/tmp72m43tws.jl:1\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \" \"]\n        words = [w for w in words if w != \"\\n\"]\n       \
    \ words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\f\"]\n     \
    \   words = [w for w in words if w != \"\\v\"]\n        words = [w for w in words\
    \ if w != \"\\a\"]\n        words = [w for w in words if w != \"\\e\"]\n     \
    \   words = [w for w in words if w != \"\\l\"]\n        words = [w for w in words\
    \ if w != \"\\i\"]\n        words = [w for w in words if w != \"\\o\"]\n     \
    \   words = [w for w in words if w != \"\\s\"]\n        words = [w for w in words\
    \ if w != \"\\p\"]\n        words = [w for w in words if w != \"\\m\"]\n     \
    \   words = [w for w in words if w != \"\\p\"]\n        words = [w for w in words\
    \ if w != \"\\m\"]\n        words = [w for w in words if w != \"\\p\"]\n     \
    \   words = [w for w in words if w != \"\\p\"]\n        words = [w for w in words\
    \ if w != \"\\p\"]\n        words = [w for w in words if w != \"\\p\"]\n     \
    \   words = [w for w in words if w != \"\\p\"]\n        words = [w for w in words\
    \ if w != \"\\p\"]\n        words = [w for w in words if w != \"\\p\"]\n     \
    \   words = [w for w in words if w != \"\\p\"]\n        words = [w for w in words\
    \ if w != \"\\p\"]\n        words = [w for w in words if w != \"\\p\"]\n     \
    \   words = [w for w in words if w != \"\\p\"]\n        words = [w for w in words\
    \ if w != \"\\p\"]\n        words = [w for w in words if w != \"\\p\"]\n     \
    \   words = [w for w in words if w != \"\\p\"]\n        words = [w for w in words\
    \ if w != \"\\p\"]\n        words = [w for w in words if w != \"\\p\"]\n     \
    \   words = [w for w in words if w != \"\\p\"]\n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeufhofkj.jl:25\nin expression starting at /tmp/tmpeufhofkj.jl:25\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    words_count\
    \ = Int64(0)\n    for word in words\n        words_count += length(word)\n   \
    \     if words_count % 2 == 1\n            words_split += word\n        end\n\
    \    end\n    return words_split\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string. \nExamples\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n8\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.\")\n8\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.,\")\n8\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.,.\")\n8\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.,.,\")\n8\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.,.,.\")\n8\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.,.,.,\")\n8\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.,.,.,.\")\n8\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.,.,.,.,\")\n8\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.,.,.,.,.\")\n8\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.,.,.,.,.,\")\n8\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.,.,.,.,.,.\")\n8\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.,.,.,.,.,.,\")\n8\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.,.,.,.,.,.,.\")\n8\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.,.,.,.,.,.,.,\")\n8\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.,.,.,.,.,.,.,.,.\")\n8\n>>> count_words(\"The quick\
    \ brown fo\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfvyc0d89.jl:21\nin expression starting at\
    \ /tmp/tmpfvyc0d89.jl:21\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \".\"\
    ]\n    words = [w for w in words if w != \"!\"]\n    words = [w for w in words\
    \ if w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w\
    \ for w in words if w != \"_\"]\n    words = [w for w in words if w != \"&\"]\n\
    \    words = [w for w in words if w != \"(\"]\n    words = [w for w in words if\
    \ w != \")\"]\n    words = [w for w in words if w != \"[\"]\n    words = [w for\
    \ w in words if w != \"]\"]\n    words = [w for w in words if w != \"{\"]\n  \
    \  words = [w for w in words if w != \"}\"]\n    words = [w for w in words if\
    \ w != \"|\"]\n    words = [w for w in words if w != \"~\"]\n    words = [w for\
    \ w in words if w != \"^\"]\n    words = [w for w in words if w != \"#\"]\n  \
    \  words = [w for w in words if w != \"$\"]\n    words = [w for w in words if\
    \ w != \"%\"]\n    words = [w for w in words if w != \"&\"]\n    words = [w for\
    \ w in words if w != \"*\"]\n    words = [w for w in words if w != \"(\"]\n  \
    \  words = [w for w in words if w != \")\"]\n    words = [w for w in words if\
    \ w != \"[\"]\n    words = [w for w in words if w != \"]\"]\n    words = [w for\
    \ w in words if w != \"{\"]\n    words = [w for w in words if w != \"}\"]\n  \
    \  words = [w for w in words if w != \"|\"]\n    words = [w for w in words if\
    \ w != \"~\"]\n    words = [w for w in words if w != \"^\"]\n    words = [w for\
    \ w in words if w != \"#\"]\n    words = [w for w in words if w != \"$\"]\n  \
    \  words = [w for w in words if w != \"%\"]\n    words = [w for w in words if\
    \ w != \"&\"]\n    words = [w for w in words if w != \"*\"]\n    words = [w for\
    \ w in words if w != \"(\"]\n    words = [w for w in words if w != \")\"]\n  \
    \  words = [w for w in words if w != \"[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0c93eujx.jl:29\nin expression starting at\
    \ /tmp/tmp0c93eujx.jl:29\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    \n    if length(words) == 0\n        return words\n    \n  \
    \  words_split = split(words)\n    \n    if length(words_split) == 0\n       \
    \ return words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpee0fvyi0.jl:135\nin expression starting at\
    \ /tmp/tmpee0fvyi0.jl:135\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}()\n    for word in words\n\
    \        words_split = words_split ++ split(word, \",\")\n    end\n    words_split\
    \ = words_split ++ [word]\n    words_split = words_split .- \"a\"\n    words_split\
    \ = words_split .- \"b\"\n    words_split = words_split .- \"c\"\n    words_split\
    \ = words_split .- \"d\"\n    words_split = words_split .- \"e\"\n    words_split\
    \ = words_split .- \"f\"\n    words_split = words_split .- \"g\"\n    words_split\
    \ = words_split .- \"h\"\n    words_split = words_split .- \"i\"\n    words_split\
    \ = words_split .- \"j\"\n    words_split = words_split .- \"k\"\n    words_split\
    \ = words_split .- \"l\"\n    words_split = words_split .- \"m\"\n    words_split\
    \ = words_split .- \"n\"\n    words_split = words_split .- \"o\"\n    words_split\
    \ = words_split .- \"p\"\n    words_split = words_split .- \"q\"\n    words_split\
    \ = words_split .- \"r\"\n    words_split = words_split .- \"s\"\n    words_split\
    \ = words_split .- \"t\"\n    words_split = words_split .- \"u\"\n    words_split\
    \ = words_split .- \"v\"\n    words_split = words_split .- \"w\"\n    words_split\
    \ = words_split .- \"x\"\n    words_split = words_split .- \"y\"\n    words_split\
    \ = words_split .- \"z\"\n    words_split = words_split .- \"A\"\n    words_split\
    \ = words_split .- \"B\"\n    words_split = words_split .- \"C\"\n    words_split\
    \ = words_split .- \"D\"\n    words_split = words_split .- \"E\"\n    words_split\
    \ = words_split .- \"F\"\n    words_split = words_split .- \"G\"\n    words_split\
    \ = words_split .- \"H\"\n    words_split = words_split .- \"I\"\n    words_split\
    \ = words_split .- \"J\"\n    words_split = words_split .- \"K\"\n    words_split\
    \ = words_split .- \"L\"\n    words_split = words_split .- \"M\"\n    words_split\
    \ = words_split .- \"N\"\n    words_split = words_split .- \"O\"\n    words_split\
    \ = words_split .- \"P\"\n    words_split = words_split .- \"Q\"\n    words_split\
    \ = words_split .- \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_i_63f5u.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_i_63f5u.jl:1\n\
    in expression starting at /tmp/tmp_i_63f5u.jl:1\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    words_split\
    \ = [word for word in words if word != \"\"]\n    words_split = [word for word\
    \ in words_split if word != \",\"]\n    words_split = [word for word in words_split\
    \ if word != \"\"]\n    words_split = [word for word in words_split if word !=\
    \ \",\"]\n    words_split = [word for word in words_split if word != \"\"]\n \
    \   words_split = [word for word in words_split if word != \",\"]\n    words_split\
    \ = [word for word in words_split if word != \"\"]\n    words_split = [word for\
    \ word in words_split if word != \",\"]\n    words_split = [word for word in words_split\
    \ if word != \"\"]\n    words_split = [word for word in words_split if word !=\
    \ \",\"]\n    words_split = [word for word in words_split if word != \"\"]\n \
    \   words_split = [word for word in words_split if word != \",\"]\n    words_split\
    \ = [word for word in words_split if word != \"\"]\n    words_split = [word for\
    \ word in words_split if word != \",\"]\n    words_split = [word for word in words_split\
    \ if word != \"\"]\n    words_split = [word for word in words_split if word !=\
    \ \",\"]\n    words_split = [word for word in words_split if word != \"\"]\n \
    \   words_split = [word for word in words_split if word != \",\"]\n    words_split\
    \ = [word for word in words_split if word != \"\"]\n    words_split = [word for\
    \ word in words_split if word != \",\"]\n    words_split = [word for word in words_split\
    \ if word != \"\"]\n    words_split = [word for word in words_split if word !=\
    \ \",\"]\n    words_split = [word for word in words_split if word != \"\"]\n \
    \   words_split = [word for word in words_split if word != \",\"]\n    words_split\
    \ = [word for word in words_split if word != \"\"]\n    words_split = [word for\
    \ word in words_split if word != \",\"]\n    words_split = [word for word in words_split\
    \ if word != \"\"]\n    words_split = [word for word in words_split if word !=\
    \ \",\"]\n    words_split = [word for word in words_split if word != \"\"]\n \
    \   words_split = [word for word in words_split if word != \",\"]\n    words_split\
    \ = [word for word in words_split if word != \"\"]\n    words_split = [word for\
    \ word in words_split if word != \",\"]\n    words_split = [word for word in words_split\
    \ if word != \"\"]\n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6_9rki86.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6_9rki86.jl:1\n\
    in expression starting at /tmp/tmp6_9rki86.jl:1\n"
  stdout: ''
  timestamp: 1659749246
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = split(words, \",\")\n    words_split2 =\
    \ split(words_split, \" \")\n    words_split3 = split(words_split2, \",\")\n \
    \   words_split4 = split(words_split3, \" \")\n    words_split5 = split(words_split4,\
    \ \",\")\n    words_split6 = split(words_split5, \" \")\n    words_split7 = split(words_split6,\
    \ \",\")\n    words_split8 = split(words_split7, \" \")\n    words_split9 = split(words_split8,\
    \ \",\")\n    words_split10 = split(words_split9, \" \")\n    words_split11 =\
    \ split(words_split10, \",\")\n    words_split12 = split(words_split11, \" \"\
    )\n    words_split13 = split(words_split12, \",\")\n    words_split14 = split(words_split13,\
    \ \" \")\n    words_split15 = split(words_split14, \",\")\n    words_split16 =\
    \ split(words_split15, \" \")\n    words_split17 = split(words_split16, \",\"\
    )\n    words_split18 = split(words_split17, \" \")\n    words_split19 = split(words_split18,\
    \ \",\")\n    words_split20 = split(words_split19, \" \")\n    words_split21 =\
    \ split(words_split20, \",\")\n    words_split22 = split(words_split21, \" \"\
    )\n    words_split23 = split(words_split22, \",\")\n    words_split24 = split(words_split23,\
    \ \" \")\n    words_split25 = split(words_split24, \",\")\n    words_split26 =\
    \ split(words_split25, \" \")\n    words_split27 = split(words_split26, \",\"\
    )\n    words_split28 = split(words_split27, \" \")\n    words_split29 = split(words_split28,\
    \ \",\")\n    words_split30 = split(words_split29, \" \")\n    words_split31 =\
    \ split(words_split30, \",\")\n    words_split32 = split(words_split31, \" \"\
    )\n    words_split33 = split(words_split32, \",\")\n    words_split34 = split(words_split33,\
    \ \" \")\n    words_split35 = split(words_split34, \",\")\n    words_split36 =\
    \ split(words_split35, \" \")\n    words_split37 = split(words_split36, \",\"\
    )\n    words_split38 = split(words_split37, \" \")\n    words_split39 = split(words_split38,\
    \ \",\")\n    words_split40 = split(words_split39, \" \")\n    words_split41 =\
    \ split(words_split40, \",\")\n    words_split42 = split(words_split41, \" \"\
    )\n    words_split43 = split(words_split42, \",\")\n    words_split44 = split(words_split43,\
    \ \" \")\n    words_split45 = split(words_split44, \",\")\n    words_\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpesx6hsok.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpesx6hsok.jl:1\n\
    in expression starting at /tmp/tmpesx6hsok.jl:1\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}()\n    for word in words\n\
    \        if !contains(words_split, word)\n            words_split += word\n  \
    \      end\n    end\n    return length(words_split)\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfva0u8e.jl:19\nin expression starting at\
    \ /tmp/tmplfva0u8e.jl:19\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"-\"\
    ]\n    words = [w for w in words if w != \"_\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"_\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n  \
    \  words = [w for w in words if w != \"?\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh1v4vft.jl:55\nin expression starting at\
    \ /tmp/tmpmh1v4vft.jl:55\n"
  stdout: ''
  timestamp: 1659749246
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \"-\"]\n        words = [w for w in words if w != \"_\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w\
    \ for w in words if w != \"-\"]\n        words = [w for w in words if w != \"\
    -\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w for\
    \ w in words if w != \"-\"]\n        words = [w for w in words if w != \"-\"]\n\
    \        words = [w for w in words if w != \"-\"]\n        words = [w for w in\
    \ words if w != \"-\"]\n        words = [w for w in words if w != \"-\"]\n   \
    \     words = [w for w in words if w != \"-\"]\n        words = [w for w in words\
    \ if w != \"-\"]\n        words = [w for w in words if w != \"-\"]\n        words\
    \ = [w for w in words if w != \"-\"]\n        words = [w for w in words if w !=\
    \ \"-\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w\
    \ for w in words if w != \"-\"]\n        words = [w for w in words if w != \"\
    -\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w for\
    \ w in words if w != \"-\"]\n        words = [w for w in words if w != \"-\"]\n\
    \        words = [w for w in words if w != \"-\"]\n        words = [w for w in\
    \ words if w != \"-\"]\n        words = [w for w in words if w != \"-\"]\n   \
    \     words = [w for w in words if w != \"-\"]\n        words = [w for w in words\
    \ if w != \"-\"]\n        words = [w for w in words if w != \"-\"]\n        words\
    \ = [w for w in words if w != \"-\"]\n        words = [w for w in words if w !=\
    \ \"-\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w\
    \ for w in words if w != \"-\"]\n        words = [w for w in words if w != \"\
    -\"]\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpb9ucgwme.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb9ucgwme.jl:1\n\
    in expression starting at /tmp/tmpb9ucgwme.jl:1\n"
  stdout: ''
  timestamp: 1659749245
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words = [w for w in words if w != \"\"]\n   \
    \ \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for w in\
    \ words if w != \" \"]\n    \n    words = [w for w in words if w != \"\\n\"]\n\
    \    \n    words = [w for w in words if w != \"\\t\"]\n    \n    words = [w for\
    \ w in words if w != \"\\r\"]\n    \n    words = [w for w in words if w != \"\\\
    t\"]\n    \n    words = [w for w in words if w != \"\\r\"]\n    \n    words =\
    \ [w for w in words if w != \"\\n\"]\n    \n    words = [w for w in words if w\
    \ != \"\\t\"]\n    \n    words = [w for w in words if w != \"\\r\"]\n    \n  \
    \  words = [w for w in words if w != \"\\n\"]\n    \n    words = [w for w in words\
    \ if w != \"\\t\"]\n    \n    words = [w for w in words if w != \"\\r\"]\n   \
    \ \n    words = [w for w in words if w != \"\\n\"]\n    \n    words = [w for w\
    \ in words if w != \"\\t\"]\n    \n    words = [w for w in words if w != \"\\\
    r\"]\n    \n    words = [w for w in words if w != \"\\n\"]\n    \n    words =\
    \ [w for w in words if w != \"\\t\"]\n    \n    words = [w for w in words if w\
    \ != \"\\r\"]\n    \n    words = [w for w in words if w != \"\\n\"]\n    \n  \
    \  words = [w for w in words if w != \"\\t\"]\n    \n    words = [w for w in words\
    \ if w != \"\\r\"]\n    \n    words = [w for w in words if w != \"\\n\"]\n   \
    \ \n    words = [w for w in words if w != \"\\t\"]\n    \n    words = [w for w\
    \ in words if w != \"\\r\"]\n    \n    words = [w for w in words if w != \"\\\
    n\"]\n    \n    words = [w for w in words if w != \"\\t\"]\n    \n    words =\
    \ [w for w in words if w != \"\\r\"]\n    \n    words = [w for w in words if w\
    \ != \"\\n\"]\n    \n    words = [w for w in words if w != \"\\t\"]\n    \n  \
    \  words = [w for w in words if w != \"\\r\"]\n    \n    words = [w for w in words\
    \ if w != \"\\n\"]\n    \n    words = [w for w in \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpy6fupgxx.jl:82\nin expression starting at /tmp/tmpy6fupgxx.jl:82\n"
  stdout: ''
  timestamp: 1659749246
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    words = words[words .!= \"\"]\n    words = words[words .!= \"\
    ,\"]\n    words = words[words .!= \" \"]\n    words = words[words .!= \" ,\"]\n\
    \    words = words[words .!= \" .\"]\n    words = words[words .!= \" ?\"]\n  \
    \  words = words[words .!= \" !\"]\n    words = words[words .!= \" .\"]\n    words\
    \ = words[words .!= \" ?\"]\n    words = words[words .!= \" !\"]\n    words =\
    \ words[words .!= \" .\"]\n    words = words[words .!= \" ?\"]\n    words = words[words\
    \ .!= \" !\"]\n    words = words[words .!= \" .\"]\n    words = words[words .!=\
    \ \" ?\"]\n    words = words[words .!= \" !\"]\n    words = words[words .!= \"\
    \ .\"]\n    words = words[words .!= \" ?\"]\n    words = words[words .!= \" !\"\
    ]\n    words = words[words .!= \" .\"]\n    words = words[words .!= \" ?\"]\n\
    \    words = words[words .!= \" !\"]\n    words = words[words .!= \" .\"]\n  \
    \  words = words[words .!= \" ?\"]\n    words = words[words .!= \" !\"]\n    words\
    \ = words[words .!= \" .\"]\n    words = words[words .!= \" ?\"]\n    words =\
    \ words[words .!= \" !\"]\n    words = words[words .!= \" .\"]\n    words = words[words\
    \ .!= \" ?\"]\n    words = words[words .!= \" !\"]\n    words = words[words .!=\
    \ \" .\"]\n    words = words[words .!= \" ?\"]\n    words = words[words .!= \"\
    \ !\"]\n    words = words[words .!= \" .\"]\n    words = words[words .!= \" ?\"\
    ]\n    words = words[words .!= \" !\"]\n    words = words[words .!= \" .\"]\n\
    \    words = words[words .!= \" ?\"]\n    words = words[words .!= \" !\"]\n  \
    \  words = words[words .!= \" .\"]\n    words = words[words .!= \" ?\"]\n    words\
    \ = words[words .!= \" !\"]\n    words = words[words .!= \" .\"]\n    words =\
    \ words[words .!= \" ?\"]\n    words = words[words .!= \" !\"]\n    words = word\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn5v4u5vp.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn5v4u5vp.jl:1\n\
    in expression starting at /tmp/tmpn5v4u5vp.jl:1\n"
  stdout: ''
  timestamp: 1659749246
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = split(txt, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = split(words_split,\
    \ \" \")\n    words_split = split(words_split, \",\")\n    words_split = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5b6zoax8.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5b6zoax8.jl:1\n\
    in expression starting at /tmp/tmp5b6zoax8.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return txt\n    \n    words = split(txt, \" \")\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for w\
    \ in words if w != \",\"]\n    \n    words = [w for w in words if w != \"-\"]\n\
    \    \n    words = [w for w in words if w != \"_\"]\n    \n    words = [w for\
    \ w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"?\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptih8c0y3.jl:83\nin expression starting at\
    \ /tmp/tmptih8c0y3.jl:83\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = [split(word, \",\") for word in words]\n\
    \    words_split = [word for word in words_split if length(word) > 0]\n    words_split\
    \ = [word for word in words_split if all(islower(word))]\n    words_split = [word\
    \ for word in words_split if length(word) % 2 != 0]\n    words_split = [word for\
    \ word in words_split if length(word) % 2 == 0]\n    words_split = [word for word\
    \ in words_split if length(word) % 2 != 0]\n    words_split = [word for word in\
    \ words_split if length(word) % 2 == 0]\n    words_split = [word for word in words_split\
    \ if length(word) % 2 != 0]\n    words_split = [word for word in words_split if\
    \ length(word) % 2 == 0]\n    words_split = [word for word in words_split if length(word)\
    \ % 2 != 0]\n    words_split = [word for word in words_split if length(word) %\
    \ 2 == 0]\n    words_split = [word for word in words_split if length(word) % 2\
    \ != 0]\n    words_split = [word for word in words_split if length(word) % 2 ==\
    \ 0]\n    words_split = [word for word in words_split if length(word) % 2 != 0]\n\
    \    words_split = [word for word in words_split if length(word) % 2 == 0]\n \
    \   words_split = [word for word in words_split if length(word) % 2 != 0]\n  \
    \  words_split = [word for word in words_split if length(word) % 2 == 0]\n   \
    \ words_split = [word for word in words_split if length(word) % 2 != 0]\n    words_split\
    \ = [word for word in words_split if length(word) % 2 == 0]\n    words_split =\
    \ [word for word in words_split if length(word) % 2 != 0]\n    words_split = [word\
    \ for word in words_split if length(word) % 2 == 0]\n    words_split = [word for\
    \ word in words_split if length(word) % 2 != 0]\n    words_split = [word for word\
    \ in words_split if length(word) % 2 == 0]\n    words_split = [word for word in\
    \ words_split if length(word) % 2 != 0]\n    words_split = [word for word in words_split\
    \ if length(word) % 2 == 0]\n    words_split = [word for word in words_split if\
    \ length(word) % 2 != 0]\n    words_split = [word for word in words_split if length(word)\
    \ % 2 == 0]\n    words_split = [word for word in words_split if length(word) %\
    \ 2 != 0]\n    words_split = [word for word in words_split if length(word) % 2\
    \ == 0]\n    words_split = [word for word in words_split if length(word) % 2 !=\
    \ 0]\n    words_split = [word for word in words_split if length(word) % 2 == 0]\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzy4gz1h3.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzy4gz1h3.jl:1\n\
    in expression starting at /tmp/tmpzy4gz1h3.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    words_split = Vector{String}()\n    \n    for word\
    \ in words\n        words_split = words_split ++ split(word,\",\")\n    end\n\
    \    \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word for word in words_split if !isascii(word)]\n    \n    words_split =\
    \ words_split ++ [word for word in words_split if isascii(word)]\n    \n    words_split\
    \ = words_split ++ [word for word in words_split if !isascii(word)]\n    \n  \
    \  words_split = words_split ++ [word for word in words_split if isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if !isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if !isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if !isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if !isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if !isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if !isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if !isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if !isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if isascii(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if !isascii(word)]\n\
    \    \n    words_split = words_split ++ [word \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ka5ewot.jl:1\nin expression starting at /tmp/tmp3ka5ewot.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \",,\"]\n    words = [w for w in words if w != \",.\"]\n    words = [w\
    \ for w in words if w != \",.,\"]\n    words = [w for w in words if w != \",?\"\
    ]\n    words = [w for w in words if w != \",!\"]\n    words = [w for w in words\
    \ if w != \",?!\"]\n    words = [w for w in words if w != \",?!?\"]\n    words\
    \ = [w for w in words if w != \",?!?!\"]\n    words = [w for w in words if w !=\
    \ \",?!?!?\"]\n    words = [w for w in words if w != \",?!?!?!\"]\n    words =\
    \ [w for w in words if w != \",?!?!?!?\"]\n    words = [w for w in words if w\
    \ != \",?!?!?!?!\"]\n    words = [w for w in words if w != \",?!?!?!?!?\"]\n \
    \   words = [w for w in words if w != \",?!?!?!?!?!\"]\n    words = [w for w in\
    \ words if w != \",?!?!?!?!?!?\"]\n    words = [w for w in words if w != \",?!?!?!?!?!?!\"\
    ]\n    words = [w for w in words if w != \",?!?!?!?!?!?!?!\"]\n    words = [w\
    \ for w in words if w != \",?!?!?!?!?!?!?!?!\"]\n    words = [w for w in words\
    \ if w != \",?!?!?!?!?!?!?!?!?!\"]\n    words = [w for w in words if w != \",?!?!?!?!?!?!?!?!?!?!\"\
    ]\n    words = [w for w in words if w != \",?!?!?!?!?!?!?!?!?!?!?!\"]\n    words\
    \ = [w for w in words if w != \",?!?!?!?!?!?!?!\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwavjtw6e.jl:41\nin expression starting at\
    \ /tmp/tmpwavjtw6e.jl:41\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    if length(words) == 0 \n        return 0 \n   \
    \ else \n        return length(words) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    split_words(\"abcdef\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a string with all the characters in lower case and no spaces.\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz2pun7l0.jl:18\nin expression starting at\
    \ /tmp/tmpz2pun7l0.jl:18\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        if !isempty(word)\n            words_split = push!(words_split,\
    \ word)\n        end\n    end\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7cjv9tf6.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7cjv9tf6.jl:1\n\
    in expression starting at /tmp/tmp7cjv9tf6.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    words_without_whitespace = filter(x -> !contains(\" \", x),\
    \ words)\n    words_without_commas = filter(x -> !contains(\",\", x), words_without_whitespace)\n\
    \    words_without_commas = map(x -> lowercase(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !contains(\" \", x), words_without_commas)\n\
    \    words_without_commas = map(x -> lowercase(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !contains(\" \", x), words_without_commas)\n\
    \    words_without_commas = map(x -> lowercase(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !contains(\" \", x), words_without_commas)\n\
    \    words_without_commas = map(x -> lowercase(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !contains(\" \", x), words_without_commas)\n\
    \    words_without_commas = map(x -> lowercase(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !contains(\" \", x), words_without_commas)\n\
    \    words_without_commas = map(x -> lowercase(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !contains(\" \", x), words_without_commas)\n\
    \    words_without_commas = map(x -> lowercase(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !contains(\" \", x), words_without_commas)\n\
    \    words_without_commas = map(x -> lowercase(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !contains(\" \", x), words_without_commas)\n\
    \    words_without_commas = map(x -> lowercase(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !contains(\" \", x), words_without_commas)\n\
    \    words_without_commas = map(x -> lowercase(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !contains(\" \", x), words_without_commas)\n\
    \    words_without_commas = map(x -> lowercase(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !contains(\" \", x), words_without_commas)\n\
    \    words_without_commas = map(x -> lowercase(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !contains(\" \", x), words_without_commas)\n\
    \    words_without_commas = map(x -> lowercase(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !contains(\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15dcsk6c.jl:41\nin expression starting at\
    \ /tmp/tmp15dcsk6c.jl:41\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    \n    if isempty(words)\n        return words\n    end\n   \
    \ \n    words_split = split(words)\n    \n    if isempty(words_split)\n      \
    \  return words_split\n    end\n    \n    words_split = words_split[end]\n   \
    \ \n    if isempty(words_split)\n        return words_split\n    end\n    \n \
    \   words_split = words_split[end]\n    \n    if isempty(words_split)\n      \
    \  return words_split\n    end\n    \n    words_split = words_split[end]\n   \
    \ \n    if isempty(words_split)\n        return words_split\n    end\n    \n \
    \   words_split = words_split[end]\n    \n    if isempty(words_split)\n      \
    \  return words_split\n    end\n    \n    words_split = words_split[end]\n   \
    \ \n    if isempty(words_split)\n        return words_split\n    end\n    \n \
    \   words_split = words_split[end]\n    \n    if isempty(words_split)\n      \
    \  return words_split\n    end\n    \n    words_split = words_split[end]\n   \
    \ \n    if isempty(words_split)\n        return words_split\n    end\n    \n \
    \   words_split = words_split[end]\n    \n    if isempty(words_split)\n      \
    \  return words_split\n    end\n    \n    words_split = words_split[end]\n   \
    \ \n    if isempty(words_split)\n        return words_split\n    end\n    \n \
    \   words_split = words_split[end]\n    \n    if isempty(words_split)\n      \
    \  return words_split\n    end\n    \n    words_split = words_split[end]\n   \
    \ \n    if isempty(words_split)\n        return words_split\n    end\n    \n \
    \   words_split = words_split[end]\n    \n    if isempty(words_split)\n      \
    \  return words_split\n    end\n    \n    words_split = words_split[end]\n   \
    \ \n    if isempty(words_split)\n        return words_split\n    end\n    \n \
    \   words_split = words_split[end]\n    \n    if isempty(words_split)\n      \
    \  return words_split\n    end\n    \n    words_split = words_split[end]\n   \
    \ \n    if isempty(words_split)\n        return words_split\n    end\n    \n \
    \   words_split = words_split[end]\n    \n    if isempty(words_split)\n      \
    \  return words_split\n    end\n    \n    words_split = words_split[end]\n   \
    \ \n    if isempty(words_split)\n        return words_split\n    end\n    \n \
    \   words_split = words_split[\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeltohwqm.jl:1\nin expression starting at /tmp/tmpeltohwqm.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt)\n    \n    if length(words) == 0 \n        return 0 \n    \n  \
    \  if length(words) == 1 \n        return words[1] \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpes26m6wl.jl:1\nin expression starting at /tmp/tmpes26m6wl.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        words_split = vcat(words_split, split(word,\",\"))\n    end\n\
    \    words_split = words_split[findall(x -> !isascii(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isascii(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n    words_split = words_split[findall(x -> !isascii(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isascii(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isascii(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n    words_split = words_split[findall(x -> !isascii(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isascii(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isascii(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n    words_split = words_split[findall(x -> !isascii(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isascii(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isascii(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n    words_split = words_split[findall(x -> !isascii(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isascii(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isascii(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n    words_split = words_split[findall(x -> !isascii(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isascii(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isascii(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isascii(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp62vez7hl.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp62vez7hl.jl:1\n\
    in expression starting at /tmp/tmp62vez7hl.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words_split = []\n    \n    for word in words\n\
    \        \n        if length(word) == 0 \n            words_split.push(word)\n\
    \        else\n            words_split.push(split(word,\",\"))\n        end\n\
    \    end\n    \n    words_split = unique(words_split)\n    \n    words_split =\
    \ sort(words_split)\n    \n    words_split = words_split[words_split .!= []]\n\
    \    \n    words_split = words_split[words_split .!= [1]]\n    \n    words_split\
    \ = words_split[words_split .!= [1]]\n    \n    words_split = words_split[words_split\
    \ .!= [1]]\n    \n    words_split = words_split[words_split .!= [1]]\n    \n \
    \   words_split = words_split[words_split .!= [1]]\n    \n    words_split = words_split[words_split\
    \ .!= [1]]\n    \n    words_split = words_split[words_split .!= [1]]\n    \n \
    \   words_split = words_split[words_split .!= [1]]\n    \n    words_split = words_split[words_split\
    \ .!= [1]]\n    \n    words_split = words_split[words_split .!= [1]]\n    \n \
    \   words_split = words_split[words_split .!= [1]]\n    \n    words_split = words_split[words_split\
    \ .!= [1]]\n    \n    words_split = words_split[words_split .!= [1]]\n    \n \
    \   words_split = words_split[words_split .!= [1]]\n    \n    words_split = words_split[words_split\
    \ .!= [1]]\n    \n    words_split = words_split[words_split .!= [1]]\n    \n \
    \   words_split = words_split[words_split .!= [1]]\n    \n    words_split = words_split[words_split\
    \ .!= [1]]\n    \n    words_split = words_split[words_split .!= [1]]\n    \n \
    \   words_split = words_split[words_split .!= [1]]\n    \n    words_split = words_split[words_split\
    \ .!= [1]]\n    \n    words_split = words_split[words_split .!= [1]]\n    \n \
    \   words_split = words_split[words_split .!= [1]]\n    \n    words_split = words_split[words_split\
    \ .!= [1]]\n    \n    words_split = words_split[words_split .!= [1]]\n    \n \
    \   words_split = words_split[words_split .!= [1]]\n    \n    words_split = words_split[words_split\
    \ .!= [1]]\n    \n    words_split = words_split[words_split .!= [1]]\n    \n \
    \   words_split = words_split[words_split .!= [1]]\n    \n    words_split = words_split[words_split\
    \ .!= [1]]\n    \n    words_split = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvzf2xgfv.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvzf2xgfv.jl:1\n\
    in expression starting at /tmp/tmpvzf2xgfv.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \",,\"\
    ]\n    words = [w for w in words if w != \",,.\"]\n    words = [w for w in words\
    \ if w != \",,.,\"]\n    words = [w for w in words if w != \",,.,.\"]\n    words\
    \ = [w for w in words if w != \",,.,.,\"]\n    words = [w for w in words if w\
    \ != \",,.,.,.\"]\n    words = [w for w in words if w != \",,.,.,.,\"]\n    words\
    \ = [w for w in words if w != \",,.,.,.,.\"]\n    words = [w for w in words if\
    \ w != \",,.,.,.,.,\"]\n    words = [w for w in words if w != \",,.,.,.,.,.\"\
    ]\n    words = [w for w in words if w != \",,.,.,.,.,.,\"]\n    words = [w for\
    \ w in words if w != \",,.,.,.,.,.,.\"]\n    words = [w for w in words if w !=\
    \ \",,.,.,.,.,.,.,\"]\n    words = [w for w in words if w != \",,.,.,.,.,.,.,.,\"\
    ]\n    words = [w for w in words if w != \",,.,.,.,.,.,.,.,.\"]\n    words = [w\
    \ for w in words if w != \",,.,.,.,.,.,.,.,.,\"]\n    words = [w for w in words\
    \ if w != \",,.,.,.,.,.,.,.,.,.,\"]\n    words = [w for w in words if w != \"\
    ,,.,.,.,.,.,.,.,.,.,.,\"]\n    words = [w for w in words if w != \",,.,.,.,.,.,.,.,.,.,.,.,\"\
    ]\n    words = [w for w in words if w != \",,.,.,.,.,.,.,.,.,.,\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgl0xhblj.jl:38\nin expression starting at\
    \ /tmp/tmpgl0xhblj.jl:38\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = split(words, \",\")\n    words_split =\
    \ words_split[findall(x -> length(x) > 0, words_split)]\n    words_split = words_split[findall(x\
    \ -> length(x) == 1, words_split)]\n    words_split = words_split[findall(x ->\
    \ length(x) == 2, words_split)]\n    words_split = words_split[findall(x -> length(x)\
    \ == 3, words_split)]\n    words_split = words_split[findall(x -> length(x) ==\
    \ 4, words_split)]\n    words_split = words_split[findall(x -> length(x) == 5,\
    \ words_split)]\n    words_split = words_split[findall(x -> length(x) == 6, words_split)]\n\
    \    words_split = words_split[findall(x -> length(x) == 7, words_split)]\n  \
    \  words_split = words_split[findall(x -> length(x) == 8, words_split)]\n    words_split\
    \ = words_split[findall(x -> length(x) == 9, words_split)]\n    words_split =\
    \ words_split[findall(x -> length(x) == 10, words_split)]\n    words_split = words_split[findall(x\
    \ -> length(x) == 11, words_split)]\n    words_split = words_split[findall(x ->\
    \ length(x) == 12, words_split)]\n    words_split = words_split[findall(x -> length(x)\
    \ == 13, words_split)]\n    words_split = words_split[findall(x -> length(x) ==\
    \ 14, words_split)]\n    words_split = words_split[findall(x -> length(x) == 15,\
    \ words_split)]\n    words_split = words_split[findall(x -> length(x) == 16, words_split)]\n\
    \    words_split = words_split[findall(x -> length(x) == 17, words_split)]\n \
    \   words_split = words_split[findall(x -> length(x) == 18, words_split)]\n  \
    \  words_split = words_split[findall(x -> length(x) == 19, words_split)]\n   \
    \ words_split = words_split[findall(x -> length(x) == 20, words_split)]\n    words_split\
    \ = words_split[findall(x -> length(x) == 21, words_split)]\n    words_split =\
    \ words_split[findall(x -> length(x) == 22, words_split)]\n    words_split = words_split[findall(x\
    \ -> length(x) == 23, words_split)]\n    words_split = words_split[findall(x ->\
    \ length(x) == 24, words_split)]\n    words_split = words_split[findall(x -> length(x)\
    \ == 25, words_split)]\n    words_split = words_split[findall(x -> length(x) ==\
    \ 26, words_split)]\n    words_split = words_split[findall(x -> length(x) == 27,\
    \ words_split)]\n    words_split = words_split[findall(x -> length(x) == 28, words_split)]\n\
    \    words_split = words_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbtcagkuw.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbtcagkuw.jl:1\n\
    in expression starting at /tmp/tmpbtcagkuw.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words_split = Vector{String}()\n        for word\
    \ in words\n            words_split = words_split ++ split(word, \",\")\n    \
    \    end\n        return words_split\n    end\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=1 |>\nI like to use regular expressions to solve this kind of\
    \ problems. \n<code>\njulia> using Regexp\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk4kw00n1.jl:22\nin expression starting at\
    \ /tmp/tmpk4kw00n1.jl:22\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    words = split(txt, \" \")\n    words = words[words != \"\"]\n    words =\
    \ words[words != \" \"]\n    words = words[words != \"\\n\"]\n    words = words[words\
    \ != \"\\r\"]\n    words = words[words != \"\\t\"]\n    words = words[words !=\
    \ \"\\r\"]\n    words = words[words != \"\\t\"]\n    words = words[words != \"\
    \\r\"]\n    words = words[words != \"\\t\"]\n    words = words[words != \"\\r\"\
    ]\n    words = words[words != \"\\t\"]\n    words = words[words != \"\\r\"]\n\
    \    words = words[words != \"\\t\"]\n    words = words[words != \"\\r\"]\n  \
    \  words = words[words != \"\\t\"]\n    words = words[words != \"\\r\"]\n    words\
    \ = words[words != \"\\t\"]\n    words = words[words != \"\\r\"]\n    words =\
    \ words[words != \"\\t\"]\n    words = words[words != \"\\r\"]\n    words = words[words\
    \ != \"\\t\"]\n    words = words[words != \"\\r\"]\n    words = words[words !=\
    \ \"\\t\"]\n    words = words[words != \"\\r\"]\n    words = words[words != \"\
    \\t\"]\n    words = words[words != \"\\r\"]\n    words = words[words != \"\\t\"\
    ]\n    words = words[words != \"\\r\"]\n    words = words[words != \"\\t\"]\n\
    \    words = words[words != \"\\r\"]\n    words = words[words != \"\\t\"]\n  \
    \  words = words[words != \"\\r\"]\n    words = words[words != \"\\t\"]\n    words\
    \ = words[words != \"\\r\"]\n    words = words[words != \"\\t\"]\n    words =\
    \ words[words != \"\\r\"]\n    words = words[words != \"\\t\"]\n    words = words[words\
    \ != \"\\r\"]\n    words = words[words != \"\\t\"]\n    words = words[words !=\
    \ \"\\r\"]\n    words = words[words != \"\\t\"]\n    words = words[words != \"\
    \\r\"]\n    words = words[words != \"\\t\"]\n    words = words[words != \"\\r\"\
    ]\n    words = words[words != \"\\t\"]\n    words = words[words != \"\\r\"]\n\
    \    words = words[words != \"\\t\"]\n    words = words[words != \"\\r\"]\n  \
    \  words = words[words != \"\\t\"]\n    words = words[words != \"\\r\"]\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe6bfnzcu.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe6bfnzcu.jl:1\n\
    in expression starting at /tmp/tmpe6bfnzcu.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for w in\
    \ words\n        words_split = push!(words_split, w)\n    end\n    words_split\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string. \nExamples\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.\")\n7\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.,\")\n7\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.,.\")\n7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,\"\
    )\n7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.\")\n\
    7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,\")\n7\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.\")\n7\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,\")\n7\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.\")\n7\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.,\")\n7\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.,.\")\n\
    7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.,.,\"\
    )\n7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.,.,.\"\
    )\n7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.,.,.,\"\
    )\n7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.,.,.,.\"\
    )\n7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.,.,.,.,\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfjcaf7f.jl:17\nin expression starting at\
    \ /tmp/tmpgfjcaf7f.jl:17\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    \n    if isempty(words)\n        return words\n    else\n  \
    \      \n        words_split = split(words)\n        \n        if isempty(words_split)\n\
    \            return words\n        else\n            \n            words_split\
    \ = split(words_split)\n            \n            if isempty(words_split)\n  \
    \              return words\n            else\n                \n            \
    \    words_split = split(words_split)\n                \n                if isempty(words_split)\n\
    \                    return words\n                else\n                    \n\
    \                    words_split = split(words_split)\n                    \n\
    \                    if isempty(words_split)\n                        return words\n\
    \                    else\n                        \n                        words_split\
    \ = split(words_split)\n                        \n                        if isempty(words_split)\n\
    \                            return words\n                        else\n    \
    \                        \n                            words_split = split(words_split)\n\
    \                            \n                            if isempty(words_split)\n\
    \                                return words\n                            else\n\
    \                                \n                                words_split\
    \ = split(words_split)\n                                \n                   \
    \             if isempty(words_split)\n                                    return\
    \ words\n                                else\n                              \
    \      \n                                    words_split = split(words_split)\n\
    \                                    \n                                    if\
    \ isempty(words_split)\n                                        return words\n\
    \                                    else\n                                  \
    \      \n                                        words_split = split(words_split)\n\
    \                                        \n                                  \
    \      if isempty(words_split)\n                                            return\
    \ words\n                                        else\n                      \
    \                      \n                                            words_split\
    \ = split(words_split)\n                                            \n       \
    \                                     if isempty(words_split)\n              \
    \                                  return words\n                            \
    \                else\n                                                \n    \
    \                                            words_split = split(words_split)\n\
    \                                                \n                          \
    \                      if isempty(words_split)\n                             \
    \                       return words\n                                       \
    \         else\n                                                    \n       \
    \                                             words_split = split(words_split)\n\
    \                                                    \n                      \
    \                              if isempty(words_split)\n                     \
    \                                   return words\n                           \
    \                         else\n                                             \
    \           \n                                                        words_split\
    \ = split(words_split)\n                                                     \
    \   \n                                                        return length(words_split)\n\
    \                                end\n                            end\n      \
    \                  end\n                    end\n                end\n       \
    \     end\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qqr91r6.jl:100\nin expression starting at\
    \ /tmp/tmp2qqr91r6.jl:100\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   return words\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9blg37s9.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp9blg37s9.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  type\
    \ String has no field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] split_words(txt::String)\n     @ Main /tmp/tmp9blg37s9.jl:10\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9blg37s9.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9blg37s9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9blg37s9.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  type String has no\
    \ field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] split_words(txt::String)\n     @ Main /tmp/tmp9blg37s9.jl:10\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9blg37s9.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9blg37s9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9blg37s9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  type String has\
    \ no field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] split_words(txt::String)\n     @ Main /tmp/tmp9blg37s9.jl:10\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9blg37s9.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9blg37s9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9blg37s9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hel"
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return Vector{String}()\n    end\n    \n    words\
    \ = split(txt, \" \")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmwjtsts9.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmwjtsts9.jl:1\n\
    in expression starting at /tmp/tmpmwjtsts9.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = split(txt, \",\")\n    words_split = words_split[findall(words_split[!.]==\"\
    \")] \n    words_split = words_split[findall(words_split[!.]==\"\")] \n    words_split\
    \ = words_split[findall(words_split[!.]==\"\")] \n    words_split = words_split[findall(words_split[!.]==\"\
    \")] \n    words_split = words_split[findall(words_split[!.]==\"\")] \n    words_split\
    \ = words_split[findall(words_split[!.]==\"\")] \n    words_split = words_split[findall(words_split[!.]==\"\
    \")] \n    words_split = words_split[findall(words_split[!.]==\"\")] \n    words_split\
    \ = words_split[findall(words_split[!.]==\"\")] \n    words_split = words_split[findall(words_split[!.]==\"\
    \")] \n    words_split = words_split[findall(words_split[!.]==\"\")] \n    words_split\
    \ = words_split[findall(words_split[!.]==\"\")] \n    words_split = words_split[findall(words_split[!.]==\"\
    \")] \n    words_split = words_split[findall(words_split[!.]==\"\")] \n    words_split\
    \ = words_split[findall(words_split[!.]==\"\")] \n    words_split = words_split[findall(words_split[!.]==\"\
    \")] \n    words_split = words_split[findall(words_split[!.]==\"\")] \n    words_split\
    \ = words_split[findall(words_split[!.]==\"\")] \n    words_split = words_split[findall(words_split[!.]==\"\
    \")] \n    words_split = words_split[findall(words_split[!.]==\"\")] \n    words_split\
    \ = words_split[findall(words_split[!.]==\"\")] \n    words_split = words_split[findall(words_split[!.]==\"\
    \")] \n    words_split = words_split[findall(words_split[!.]==\"\")] \n    words_split\
    \ = words_split[findall(words_split[!.]==\"\")] \n    words_split = words_split[findall(words_split[!.]==\"\
    \")] \n    words_split = words_split[findall(words_split[!.]==\"\")] \n    words_split\
    \ = words_split[findall(words_split[!.]==\"\")] \n    words_split = words_split[findall(words_split[!.]==\"\
    \")] \n    words_split = words_split[findall(words_split[!.]==\"\")] \n    words_split\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \".\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ptk6n6y.jl:12\nin expression starting at\
    \ /tmp/tmp9ptk6n6y.jl:12\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words = [w for w in words if w != \"\"]\n   \
    \ \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for w in\
    \ words if w != \",,\"]\n    \n    words = [w for w in words if w != \",,,\"]\n\
    \    \n    words = [w for w in words if w != \",,,,\"]\n    \n    words = [w for\
    \ w in words if w != \",,,,,\"]\n    \n    words = [w for w in words if w != \"\
    ,,,,,,\"]\n    \n    words = [w for w in words if w != \",,,,,,,\"]\n    \n  \
    \  words = [w for w in words if w != \",,,,,,,,\"]\n    \n    words = [w for w\
    \ in words if w != \",,,,,,,,,\"]\n    \n    words = [w for w in words if w !=\
    \ \",,,,,,,,,,\"]\n    \n    words = [w for w in words if w != \",,,,,,,,,,,\"\
    ]\n    \n    words = [w for w in words if w != \",,,,,,,,,,,,\"]\n    \n    words\
    \ = [w for w in words if w != \",,,,,,,,,,,,,\"]\n    \n    words = [w for w in\
    \ words if w != \",,,,,,,,,,,,,,\"]\n    \n    words = [w for w in words if w\
    \ != \",,,,,,,,,,,,,,,,\"]\n    \n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,\"\
    ]\n    \n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,\"]\n    \n\
    \    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,\"]\n    \n    words\
    \ = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,\"]\n    \n    words = [w\
    \ for w in words if w != \",,,,,,,,,,,,,,,,,,,,,,\"]\n    \n    words = [w for\
    \ w in words if w != \",,,,,,,,,,,,,,,,,,,,,,\"]\n    \n    words = [w for w in\
    \ words if w != \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n    \n    words = [w for w in words\
    \ if w != \",,,,,,,,,,,,,,,,,,,,,,,,,,\"]\n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7lwwqiml.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7lwwqiml.jl:1\n\
    in expression starting at /tmp/tmp7lwwqiml.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    txt\
    \ = txt.trim()\n    \n    if txt == \"\"\n        return Vector{String}()\n  \
    \  end\n    \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}()\n\
    \    \n    for word in words\n        words_split = words_split ++ split(word,\
    \ \",\")\n    end\n    \n    words_split = words_split ++ split(words, \"-\")\n\
    \    \n    words_split = words_split ++ split(words, \"_\")\n    \n    words_split\
    \ = words_split ++ split(words, \"-\")\n    \n    words_split = words_split ++\
    \ split(words, \"_\")\n    \n    words_split = words_split ++ split(words, \"\
    -\")\n    \n    words_split = words_split ++ split(words, \"_\")\n    \n    words_split\
    \ = words_split ++ split(words, \"-\")\n    \n    words_split = words_split ++\
    \ split(words, \"_\")\n    \n    words_split = words_split ++ split(words, \"\
    -\")\n    \n    words_split = words_split ++ split(words, \"_\")\n    \n    words_split\
    \ = words_split ++ split(words, \"-\")\n    \n    words_split = words_split ++\
    \ split(words, \"_\")\n    \n    words_split = words_split ++ split(words, \"\
    -\")\n    \n    words_split = words_split ++ split(words, \"_\")\n    \n    words_split\
    \ = words_split ++ split(words, \"-\")\n    \n    words_split = words_split ++\
    \ split(words, \"_\")\n    \n    words_split = words_split ++ split(words, \"\
    -\")\n    \n    words_split = words_split ++ split(words, \"_\")\n    \n    words_split\
    \ = words_split ++ split(words, \"-\")\n    \n    words_split = words_split ++\
    \ split(words, \"_\")\n    \n    words_split = words_split ++ split(words, \"\
    -\")\n    \n    words_split = words_split ++ split(words, \"_\")\n    \n    words_split\
    \ = words_split ++ split(words, \"-\")\n    \n    words_split = words_split ++\
    \ split(words, \"_\")\n    \n    words_split = words_split ++ split(words, \"\
    -\")\n    \n    words_split = words_split ++ split(words, \"_\")\n    \n    words_split\
    \ = words_split ++ split(words, \"-\")\n    \n    words_split = words_split ++\
    \ split(words, \"_\")\n    \n    words_split = words_split ++ split(words, \"\
    -\")\n    \n    words_split = words_split ++ split(words, \"_\")\n    \n    words_split\
    \ = words_split ++ split(words, \"-\")\n    \n    words_split = words_split ++\
    \ split(words, \"_\")\n    \n    words_split = words_split ++ split(words, \"\
    -\")\n    \n    words_split = words_split ++ split(words, \"_\")\n    \n    words_split\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph217aau4.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph217aau4.jl:1\n\
    in expression starting at /tmp/tmph217aau4.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \" \"\
    ]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm6wamfv9.jl:55\nin expression starting at\
    \ /tmp/tmpm6wamfv9.jl:55\n"
  stdout: ''
  timestamp: 1659749248
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    words_split = split(words)\n    words_split = words_split[findall(words_split[end]\
    \ .!= \" \")]\n    words_split = words_split[findall(words_split[end] .!= \",\"\
    )]\n    words_split = words_split[findall(words_split[end] .!= \".\")]\n    words_split\
    \ = words_split[findall(words_split[end] .!= \",.\")]\n    words_split = words_split[findall(words_split[end]\
    \ .!= \".,\")]\n    words_split = words_split[findall(words_split[end] .!= \"\
    ,,\")]\n    words_split = words_split[findall(words_split[end] .!= \".,.\")]\n\
    \    words_split = words_split[findall(words_split[end] .!= \",.,\")]\n    words_split\
    \ = words_split[findall(words_split[end] .!= \".,,\")]\n    words_split = words_split[findall(words_split[end]\
    \ .!= \",,,\")]\n    words_split = words_split[findall(words_split[end] .!= \"\
    .,,,\")]\n    words_split = words_split[findall(words_split[end] .!= \",,,,\"\
    )]\n    words_split = words_split[findall(words_split[end] .!= \".,,,,\")]\n \
    \   words_split = words_split[findall(words_split[end] .!= \",,,,,\")]\n    words_split\
    \ = words_split[findall(words_split[end] .!= \".,,,,,\")]\n    words_split = words_split[findall(words_split[end]\
    \ .!= \",,,,,,\")]\n    words_split = words_split[findall(words_split[end] .!=\
    \ \".,,,,,,\")]\n    words_split = words_split[findall(words_split[end] .!= \"\
    ,,,,,,,\")]\n    words_split = words_split[findall(words_split[end] .!= \".,,,,,,,\"\
    )]\n    words_split = words_split[findall(words_split[end] .!= \",,,,,,,,\")]\n\
    \    words_split = words_split[findall(words_split[end] .!= \".,,,,,,,,\")]\n\
    \    words_split = words_split[findall(words_split[end] .!= \",,,,,,,,,,\")]\n\
    \    words_split = words_split[findall(words_split[end] .!= \".,,,,,,,,,,\")]\n\
    \    words_split = words_split[findall(words_split[end] .!= \",,,,,,,,,,,,\")]\n\
    \    words_split = words_split[findall(words_split[end] .!= \".,,,,,,,,,,,,,\"\
    )]\n    words_split = words_split[findall(words_split[end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp39rd8rgn.jl:1\nin expression starting at /tmp/tmp39rd8rgn.jl:1\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_without_commas = filter(x -> !contains(x, \",\"\
    ), words)\n    words_without_commas_with_odd_order = filter(x -> contains(x, \"\
    ,\") && ord(x) % 2 != 0, words_without_commas)\n    words_without_commas_with_odd_order_with_count\
    \ = filter(x -> contains(x, \",\") && ord(x) % 2 == 0, words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order_with_count_with_count = filter(x -> contains(x,\
    \ \",\") && ord(x) % 2 == 1, words_without_commas_with_odd_order_with_count)\n\
    \    words_without_commas_with_odd_order_with_count_with_count_with_count = filter(x\
    \ -> contains(x, \",\") && ord(x) % 2 == 2, words_without_commas_with_odd_order_with_count_with_count)\n\
    \    words_without_commas_with_odd_order_with_count_with_count_with_count_with_count\
    \ = filter(x -> contains(x, \",\") && ord(x) % 2 == 3, words_without_commas_with_odd_order_with_count_with_count_with_count)\n\
    \    words_without_commas_with_odd_order_with_count_with_count_with_count_with_count_with_count\
    \ = filter(x -> contains(x, \",\") && ord(x) % 2 == 4, words_without_commas_with_odd_order_with_count_with_count_with_count_with_count)\n\
    \    words_without_commas_with_odd_order_with_count_with_count_with_count_with_count_with_count_with_count\
    \ = filter(x -> contains(x, \",\") && ord(x) % 2 == 5, words_without_commas_with_odd_order_with_count_with_count_with_count_with_count_with_count)\n\
    \    words_without_commas_with_odd_order_with_count_with_count_with_count_with_count_with_count_with_count_with_count\
    \ = filter(x -> contains(x, \",\") && ord(x) % 2 == 6, words_without_commas_with_odd_order_with_count_with_count_with_count_with_count_with_count_with_count)\n\
    \    words_without_commas_with_odd_order_with_count_with_count_with_count_with_count_with_count_with_count_with_count_with_count\
    \ = filter(x -> contains(x, \",\") && ord(x) % 2 == 7, words_without_commas_with_odd_order_with_count_with_count_with_count_with_count_with_count_with_count_with_count)\n\
    \    words_without_commas_with_odd_order_with_count_with_count_with_count_with_count_with_count_with_count_with_count_with_count_with_count\
    \ = filter(x -> contains(x, \",\") && ord(x) % 2 == 8, words_without_commas_with_odd_order_with_count_with_count_with_count_with_count_with_count_with_count_with_count_with_count)\n\
    \    words_without_commas_with_odd_order_with_count_with_count_with_count_with_count_with_count_\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1ku2qh1p.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1ku2qh1p.jl:1\n\
    in expression starting at /tmp/tmp1ku2qh1p.jl:1\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words_split = Vector{String}()\n        for word\
    \ in words\n            words_split = words_split ++ split(word, \",\")\n    \
    \    end\n        return words_split\n    end\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_88z85x.jl:22\nin expression starting at\
    \ /tmp/tmpf_88z85x.jl:22\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"-\"\
    ]\n    words = [w for w in words if w != \"_\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"!?\"]\n    words = [w for w in words if w != \"?!\"\
    ]\n    words = [w for w in words if w != \"!?!\"]\n    words = [w for w in words\
    \ if w != \"?!?\"]\n    words = [w for w in words if w != \"!?!?\"]\n    words\
    \ = [w for w in words if w != \"?!?!?\"]\n    words = [w for w in words if w !=\
    \ \"!?!?!\"]\n    words = [w for w in words if w != \"?!?!?!\"]\n    words = [w\
    \ for w in words if w != \"!?!?!?\"]\n    words = [w for w in words if w != \"\
    ?!?!?!?\"]\n    words = [w for w in words if w != \"!?!?!?!\"]\n    words = [w\
    \ for w in words if w != \"?!?!?!?!\"]\n    words = [w for w in words if w !=\
    \ \"!?!?!?!?\"]\n    words = [w for w in words if w != \"?!?!?!?!?\"]\n    words\
    \ = [w for w in words if w != \"!?!?!?!?!\"]\n    words = [w for w in words if\
    \ w != \"?!?!?!?!?!\"]\n    words = [w for w in words if w != \"!?!?!?!?!?\"]\n\
    \    words = [w for w in words if w != \"?!?!?!?!?!?\"]\n    words = [w for w\
    \ in words if w != \"!?!?!?!?!?!\"]\n    words = [w for w in words if w != \"\
    ?!?!?!?!?!?!\"]\n    words = [w for w in words if w != \"!?!?!?!?!?!?\"]\n   \
    \ words = [w for w in words if w != \"?!?!?!?!?!?!?\"]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6_t5jjtd.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6_t5jjtd.jl:1\n\
    in expression starting at /tmp/tmp6_t5jjtd.jl:1\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    words_without_whitespace = filter(x -> !isempty(x), words)\n\
    \    words_without_commas = filter(x -> !contains(x, \",\"), words_without_whitespace)\n\
    \    words_without_commas_without_whitespace = filter(x -> !isempty(x), words_without_commas)\n\
    \    words_without_commas_without_whitespace = sort(words_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace = reverse(words_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace = filter(x -> !contains(x, \" \"\
    ), words_without_commas_without_whitespace)\n    words_without_commas_without_whitespace\
    \ = sort(words_without_commas_without_whitespace)\n    words_without_commas_without_whitespace\
    \ = reverse(words_without_commas_without_whitespace)\n    words_without_commas_without_whitespace\
    \ = filter(x -> !contains(x, \"-\"), words_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace = sort(words_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace = reverse(words_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace = filter(x -> !contains(x, \"!\"\
    ), words_without_commas_without_whitespace)\n    words_without_commas_without_whitespace\
    \ = sort(words_without_commas_without_whitespace)\n    words_without_commas_without_whitespace\
    \ = reverse(words_without_commas_without_whitespace)\n    words_without_commas_without_whitespace\
    \ = filter(x -> !contains(x, \"?\"), words_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace = sort(words_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace = reverse(words_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace = filter(x -> !contains(x, \":\"\
    ), words_without_commas_without_whitespace)\n    words_without_commas_without_whitespace\
    \ = sort(words_without_commas_without_whitespace)\n    words_without_commas_without_whitespace\
    \ = reverse(words_without_commas_without_whitespace)\n    words_without_commas_without_whitespace\
    \ = filter(x -> !contains(x, \"@\"), words_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace = sort(words_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace = reverse(words_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace = filter(x -> !contains(x, \"#\"\
    ), words_without_commas_without_whitespace)\n    words_without_commas_without_whitespace\
    \ = sort(words_without_commas_without_whitespace)\n    words_without_commas_without_whitespace\
    \ = reverse(words_without_commas_without_whitespace)\n    words_without_commas_\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp14m5b2gx.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp14m5b2gx.jl:1\n\
    in expression starting at /tmp/tmp14m5b2gx.jl:1\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        words_split = push!(words_split, word)\n    end\n    words_split\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of words in the string. \nExamples\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n5\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.,\")\n4\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.,.\")\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,\"\
    )\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.\")\n\
    4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,\")\n4\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.\")\n4\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,\")\n4\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.\")\n4\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.,\")\n4\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.,.\")\n\
    4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.,.,.\"\
    )\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.,.,.,.\"\
    )\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.,.,.,.,.\"\
    )\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,.,.,.,.,.,.\"\
    )\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.,.,.,.,\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnu0vkloo.jl:17\nin expression starting at\
    \ /tmp/tmpnu0vkloo.jl:17\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for w in\
    \ words\n        words_split = push!(words_split, split(w, \",\"))\n    end\n\
    \    words_split = words_split[findall(x -> x != \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x != \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x != \"\", words_split)]\n    words_split = words_split[findall(x -> x !=\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x != \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x != \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x != \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x != \"\", words_split)]\n    words_split = words_split[findall(x -> x !=\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x != \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x != \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x != \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x != \"\", words_split)]\n    words_split = words_split[findall(x -> x !=\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x != \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x != \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x != \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x != \"\", words_split)]\n    words_split = words_split[findall(x -> x !=\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x != \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x != \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x != \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x != \"\", words_split)]\n    words_split = words_split[findall(x -> x !=\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x != \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x != \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x != \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x != \"\", words_split)]\n    words_split = words_split[findall(x -> x !=\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x != \"\", \n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1pv9_c5.jl:47\nin expression starting at\
    \ /tmp/tmpg1pv9_c5.jl:47\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    \n    words_split = Vector{String}(undef, 0)\n    words_count\
    \ = Vector{Int64}(undef, 0)\n    \n    for word in words\n        words_split\
    \ = [word | words_split]\n        words_count = [words_count | lengths(split(word))]\n\
    \    end\n    \n    return words_count, words_split\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc\
    \ def\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abc def ghi jkl\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abc def ghi jkl mno\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi jkl mno pqr\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi jkl mno pqr stu\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi jkl mno pqr stu vwx yz\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi jkl mno pqr stu vwx yz 123\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abc def ghi jkl mno pqr stu vwx yz 123 456\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abc def ghi jkl mno pqr stu vwx yz 123 456 789\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abc def ghi jkl mno pqr stu vwx yz 123 456\
    \ 789 1011\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi jkl\
    \ mno pqr stu vwx yz 123 456 789 1011 121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqiem7_b5.jl:22\nin expression starting at\
    \ /tmp/tmpqiem7_b5.jl:22\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \" \"\
    ]\n    words = [w for w in words if w != \",,\"]\n    words = [w for w in words\
    \ if w != \",,\"]\n    words = [w for w in words if w != \",,\"]\n    words =\
    \ [w for w in words if w != \",,\"]\n    words = [w for w in words if w != \"\
    ,,\"]\n    words = [w for w in words if w != \",,\"]\n    words = [w for w in\
    \ words if w != \",,\"]\n    words = [w for w in words if w != \",,\"]\n    words\
    \ = [w for w in words if w != \",,\"]\n    words = [w for w in words if w != \"\
    ,,\"]\n    words = [w for w in words if w != \",,\"]\n    words = [w for w in\
    \ words if w != \",,\"]\n    words = [w for w in words if w != \",,\"]\n    words\
    \ = [w for w in words if w != \",,\"]\n    words = [w for w in words if w != \"\
    ,,\"]\n    words = [w for w in words if w != \",,\"]\n    words = [w for w in\
    \ words if w != \",,\"]\n    words = [w for w in words if w != \",,\"]\n    words\
    \ = [w for w in words if w != \",,\"]\n    words = [w for w in words if w != \"\
    ,,\"]\n    words = [w for w in words if w != \",,\"]\n    words = [w for w in\
    \ words if w != \",,\"]\n    words = [w for w in words if w != \",,\"]\n    words\
    \ = [w for w in words if w != \",,\"]\n    words = [w for w in words if w != \"\
    ,,\"]\n    words = [w for w in words if w != \",,\"]\n    words = [w for w in\
    \ words if w != \",,\"]\n    words = [w for w in words if w != \",,\"]\n    words\
    \ = [w for w in words if w != \",,\"]\n    words = [w for w in words if w != \"\
    ,,\"]\n    words = [w for w in words if w != \",,\"]\n    words = [w for w in\
    \ words if w != \",,\"]\n    words = [w for w in words if w != \",,\"]\n    words\
    \ = [w \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp75phf7vb.jl:1\nin expression starting at /tmp/tmp75phf7vb.jl:1\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return Vector{String}()\n    end\n    words = split(txt,\
    \ \" \")\n    words = [w for w in words if w != \"\"]\n    words = [w for w in\
    \ words if w != \",\"]\n    words = [w for w in words if w != \"-\"]\n    words\
    \ = [w for w in words if w != \"_\"]\n    words = [w for w in words if w != \"\
    !\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"!?\"]\n    words = [w for w in words if w != \"??\"]\n    words =\
    \ [w for w in words if w != \"???\"]\n    words = [w for w in words if w != \"\
    ????\"]\n    words = [w for w in words if w != \"?????\"]\n    words = [w for\
    \ w in words if w != \"??????\"]\n    words = [w for w in words if w != \"???????\"\
    ]\n    words = [w for w in words if w != \"????????\"]\n    words = [w for w in\
    \ words if w != \"?????????\"]\n    words = [w for w in words if w != \"??????????\"\
    ]\n    words = [w for w in words if w != \"???????????\"]\n    words = [w for\
    \ w in words if w != \"????????????\"]\n    words = [w for w in words if w !=\
    \ \"?????????????\"]\n    words = [w for w in words if w != \"??????????????\"\
    ]\n    words = [w for w in words if w != \"???????????????\"]\n    words = [w\
    \ for w in words if w != \"????????????????\"]\n    words = [w for w in words\
    \ if w != \"?????????????????\"]\n    words = [w for w in words if w != \"??????????????????\"\
    ]\n    words = [w for w in words if w != \"???????????????????\"]\n    words =\
    \ [w for w in words if w != \"????????????????????\"]\n    words = [w for w in\
    \ words if w != \"?????????????????????\"]\n    words = [w for w in words if w\
    \ != \"??????????????????????\"]\n    words = [w for \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0jw2br8n.jl:46\nin expression starting at\
    \ /tmp/tmp0jw2br8n.jl:46\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    if length(words) == 0 \n        return 0 \n   \
    \ else \n        return length(words) \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string. \nExamples\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\") \n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\"\
    ) \n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\") \n5\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.\") \n5\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.\") \n5\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.\") \n5\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.\") \n5\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.\") \n5\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.\") \n5\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.\") \n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\"\
    ) \n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\") \n5\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.\") \n5\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.\") \n5\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.\") \n5\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.\") \n5\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.\") \n5\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.\") \n5\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.\") \n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\"\
    ) \n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\") \n5\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.\") \n5\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.\") \n\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpni0jkjy9.jl:18\nin expression starting at\
    \ /tmp/tmpni0jkjy9.jl:18\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_21ypyb_.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_21ypyb_.jl:1\n\
    in expression starting at /tmp/tmp_21ypyb_.jl:1\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for w in\
    \ words\n        words_split = words_split ++ split(w, \",\")\n    end\n    words_split\
    \ = words_split ++ [join(words_split, \",\")]\n    words_split = words_split ++\
    \ [join(words_split, \",\")]\n    words_split = words_split ++ [join(words_split,\
    \ \",\")]\n    words_split = words_split ++ [join(words_split, \",\")]\n    words_split\
    \ = words_split ++ [join(words_split, \",\")]\n    words_split = words_split ++\
    \ [join(words_split, \",\")]\n    words_split = words_split ++ [join(words_split,\
    \ \",\")]\n    words_split = words_split ++ [join(words_split, \",\")]\n    words_split\
    \ = words_split ++ [join(words_split, \",\")]\n    words_split = words_split ++\
    \ [join(words_split, \",\")]\n    words_split = words_split ++ [join(words_split,\
    \ \",\")]\n    words_split = words_split ++ [join(words_split, \",\")]\n    words_split\
    \ = words_split ++ [join(words_split, \",\")]\n    words_split = words_split ++\
    \ [join(words_split, \",\")]\n    words_split = words_split ++ [join(words_split,\
    \ \",\")]\n    words_split = words_split ++ [join(words_split, \",\")]\n    words_split\
    \ = words_split ++ [join(words_split, \",\")]\n    words_split = words_split ++\
    \ [join(words_split, \",\")]\n    words_split = words_split ++ [join(words_split,\
    \ \",\")]\n    words_split = words_split ++ [join(words_split, \",\")]\n    words_split\
    \ = words_split ++ [join(words_split, \",\")]\n    words_split = words_split ++\
    \ [join(words_split, \",\")]\n    words_split = words_split ++ [join(words_split,\
    \ \",\")]\n    words_split = words_split ++ [join(words_split, \",\")]\n    words_split\
    \ = words_split ++ [join(words_split, \",\")]\n    words_split = words_split ++\
    \ [join(words_split, \",\")]\n    words_split = words_split ++ [join(words_split,\
    \ \",\")]\n    words_split = words_split ++ [join(words_split, \",\")]\n    words_split\
    \ = words_split ++ [join(words_split, \",\")]\n    words_split = words_split ++\
    \ [join(words_split, \",\")]\n    words_split = words_split ++ [join(words_split,\
    \ \",\")]\n    words_split = words_split ++ [join(words_split, \",\")]\n    words_split\
    \ = words_split ++ [join(words_split, \",\")]\n    words_split = words_split ++\
    \ [join(words_split, \",\")]\n    words_split = words_split ++ [join(words_split,\
    \ \",\")]\n    words_split = words_split ++ [join(words_split, \",\")]\n    words_split\
    \ = words_split ++ [join(words_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvetwwpp.jl:52\nin expression starting at\
    \ /tmp/tmpmvetwwpp.jl:52\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    if length(words) == 0 \n        return 0 \n   \
    \ else \n        return length(words) \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of words and returns a vector of numbers,\
    \ where each number is the frequency of its occurence in the input vector. \n\
    The function should return an empty vector if the input vector is empty.\nExamples\n\
    >>> count_words([1,2,2,3,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp19p9mxy5.jl:18\nin expression starting at\
    \ /tmp/tmp19p9mxy5.jl:18\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \" \"]\n  \
    \  words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqtnvzzf9.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqtnvzzf9.jl:1\n\
    in expression starting at /tmp/tmpqtnvzzf9.jl:1\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = words[words != \"\"]\n    words = words[words\
    \ != \",\"]\n    words = words[words != \"-\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"&\"]\n \
    \   words = words[words != \"#\"]\n    words = words[words != \"@\"]\n    words\
    \ = words[words != \"$\"]\n    words = words[words != \"%\"]\n    words = words[words\
    \ != \"^\"]\n    words = words[words != \"*\"]\n    words = words[words != \"\
    (\"]\n    words = words[words != \")\"]\n    words = words[words != \"[\"]\n \
    \   words = words[words != \"]\"]\n    words = words[words != \"|\"]\n    words\
    \ = words[words != \"~\"]\n    words = words[words != \"`\"]\n    words = words[words\
    \ != \"~\"]\n    words = words[words != \"-\"]\n    words = words[words != \"\
    -\"]\n    words = words[words != \"-\"]\n    words = words[words != \"-\"]\n \
    \   words = words[words != \"-\"]\n    words = words[words != \"-\"]\n    words\
    \ = words[words != \"-\"]\n    words = words[words != \"-\"]\n    words = words[words\
    \ != \"-\"]\n    words = words[words != \"-\"]\n    words = words[words != \"\
    -\"]\n    words = words[words != \"-\"]\n    words = words[words != \"-\"]\n \
    \   words = words[words != \"-\"]\n    words = words[words != \"-\"]\n    words\
    \ = words[words != \"-\"]\n    words = words[words != \"-\"]\n    words = words[words\
    \ != \"-\"]\n    words = words[words != \"-\"]\n    words = words[words != \"\
    -\"]\n    words = words[words != \"-\"]\n    words = words[words != \"-\"]\n \
    \   words = words[words != \"-\"]\n    words = words[words != \"-\"]\n    words\
    \ = words[words != \"-\"]\n    words = words[words != \"-\"]\n    words = words[words\
    \ != \"-\"]\n    words = words[words != \"-\"]\n    words = words[words != \"\
    -\"]\n    words = words[words != \"-\"]\n    words = words[words != \"-\"]\n \
    \   \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhwr1tbi.jl:19\nin expression starting at\
    \ /tmp/tmpfhwr1tbi.jl:19\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    if length(words) == 0 \n        return 0 \n   \
    \ \n    words_split = split(words, \",\")\n    \n    if length(words_split) ==\
    \ 0 \n        return length(words) \n    \n    words_split2 = split(words_split,\
    \ \" \")\n    \n    if length(words_split2) == 0 \n        return length(words_split)\
    \ \n    \n    words_split3 = split(words_split2, \",\")\n    \n    if length(words_split3)\
    \ == 0 \n        return length(words_split2) \n    \n    words_split4 = split(words_split3,\
    \ \" \")\n    \n    if length(words_split4) == 0 \n        return length(words_split3)\
    \ \n    \n    words_split5 = split(words_split4, \",\")\n    \n    if length(words_split5)\
    \ == 0 \n        return length(words_split4) \n    \n    words_split6 = split(words_split5,\
    \ \" \")\n    \n    if length(words_split6) == 0 \n        return length(words_split5)\
    \ \n    \n    words_split7 = split(words_split6, \",\")\n    \n    if length(words_split7)\
    \ == 0 \n        return length(words_split6) \n    \n    words_split8 = split(words_split7,\
    \ \" \")\n    \n    if length(words_split8) == 0 \n        return length(words_split7)\
    \ \n    \n    words_split9 = split(words_split8, \",\")\n    \n    if length(words_split9)\
    \ == 0 \n        return length(words_split8) \n    \n    words_split10 = split(words_split9,\
    \ \" \")\n    \n    if length(words_split10) == 0 \n        return length(words_split9)\
    \ \n    \n    words_split11 = split(words_split10, \",\")\n    \n    if length(words_split11)\
    \ == 0 \n        return length(words_split10) \n    \n    words_split12 = split(words_split11,\
    \ \" \")\n    \n    if length(words_split12) == 0 \n        return length(words_split11)\
    \ \n    \n    words_split13 = split(words_split12, \",\")\n    \n    if length(words_split13)\
    \ == 0 \n        return length(words_split12) \n    \n    words_split14 = split(words_split13,\
    \ \" \")\n    \n    if length(words_split14) == 0 \n        return length(words_split13)\
    \ \n    \n    words_split15 = split(words_split14, \",\")\n    \n    if length(words_split15)\
    \ == 0 \n        return length(words_split14) \n    \n    words_split16 = split(words_split15,\
    \ \" \")\n    \n    if length(words_split16) == 0 \n        return length(words_split15)\
    \ \n    \n    words_split17 = split(words_split16, \",\")\n    \n    if length(words_split17)\
    \ == 0 \n        return length(words_split16) \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxoimxsth.jl:1\nin expression starting at /tmp/tmpxoimxsth.jl:1\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = words[2:end]\n        words = words[words[1]\
    \ !=words[end]]\n        words = words[words[1] !=words[end]]\n        words =\
    \ words[words[1] !=words[end]]\n        words = words[words[1] !=words[end]]\n\
    \        words = words[words[1] !=words[end]]\n        words = words[words[1]\
    \ !=words[end]]\n        words = words[words[1] !=words[end]]\n        words =\
    \ words[words[1] !=words[end]]\n        words = words[words[1] !=words[end]]\n\
    \        words = words[words[1] !=words[end]]\n        words = words[words[1]\
    \ !=words[end]]\n        words = words[words[1] !=words[end]]\n        words =\
    \ words[words[1] !=words[end]]\n        words = words[words[1] !=words[end]]\n\
    \        words = words[words[1] !=words[end]]\n        words = words[words[1]\
    \ !=words[end]]\n        words = words[words[1] !=words[end]]\n        words =\
    \ words[words[1] !=words[end]]\n        words = words[words[1] !=words[end]]\n\
    \        words = words[words[1] !=words[end]]\n        words = words[words[1]\
    \ !=words[end]]\n        words = words[words[1] !=words[end]]\n        words =\
    \ words[words[1] !=words[end]]\n        words = words[words[1] !=words[end]]\n\
    \        words = words[words[1] !=words[end]]\n        words = words[words[1]\
    \ !=words[end]]\n        words = words[words[1] !=words[end]]\n        words =\
    \ words[words[1] !=words[end]]\n        words = words[words[1] !=words[end]]\n\
    \        words = words[words[1] !=words[end]]\n        words = words[words[1]\
    \ !=words[end]]\n        words = words[words[1] !=words[end]]\n        words =\
    \ words[words[1] !=words[end]]\n        words = words[words[1] !=words[end]]\n\
    \        words = words[words[1] !=words[end]]\n        words = words[words[1]\
    \ !=words[end]]\n        words = words[words[1] !=\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp05zlcpn8.jl:1\nin expression starting at /tmp/tmp05zlcpn8.jl:1\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_21ypyb_.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_21ypyb_.jl:1\n\
    in expression starting at /tmp/tmp_21ypyb_.jl:1\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"-\"\
    ]\n    words = [w for w in words if w != \"_\"]\n    words = [w for w in words\
    \ if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n\
    \    words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"_\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsau1tna4.jl:55\nin expression starting at\
    \ /tmp/tmpsau1tna4.jl:55\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    word_counts = Dict()\n    \n    for word in words\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  word_counts = sort(word_counts, by=x->x[1], rev=true)\n    \n    word_counts\
    \ = filter(x -> x[1] % 2 != 0, word_counts)\n    \n    word_counts = filter(x\
    \ -> x[1] > 1, word_counts)\n    \n    word_counts = map(x -> x[1], word_counts)\n\
    \    \n    return word_counts\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abc def ghi\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abc def ghi\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abc def ghi\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abc def ghi\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abc def ghi\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abc def ghi\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abc def ghi\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"ab\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptpjz0f2q.jl:29\nin expression starting at\
    \ /tmp/tmptpjz0f2q.jl:29\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return Vector{String}()\n    end\n    \n    words\
    \ = split(txt, \" \")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmwjtsts9.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmwjtsts9.jl:1\n\
    in expression starting at /tmp/tmpmwjtsts9.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words_split = []\n    \n    for word in words\n\
    \        \n        if word == \"\"\n            words_split = [word]\n       \
    \ else\n            words_split = split(word, \",\")\n        end\n    end\n \
    \   \n    words_split = sort(words_split)\n    \n    words_split = [word for word\
    \ in words_split if !isascii(word)]\n    \n    words_split = [word for word in\
    \ words_split if !isascii(word)]\n    \n    words_split = [word for word in words_split\
    \ if !isascii(word)]\n    \n    words_split = [word for word in words_split if\
    \ !isascii(word)]\n    \n    words_split = [word for word in words_split if !isascii(word)]\n\
    \    \n    words_split = [word for word in words_split if !isascii(word)]\n  \
    \  \n    words_split = [word for word in words_split if !isascii(word)]\n    \n\
    \    words_split = [word for word in words_split if !isascii(word)]\n    \n  \
    \  words_split = [word for word in words_split if !isascii(word)]\n    \n    words_split\
    \ = [word for word in words_split if !isascii(word)]\n    \n    words_split =\
    \ [word for word in words_split if !isascii(word)]\n    \n    words_split = [word\
    \ for word in words_split if !isascii(word)]\n    \n    words_split = [word for\
    \ word in words_split if !isascii(word)]\n    \n    words_split = [word for word\
    \ in words_split if !isascii(word)]\n    \n    words_split = [word for word in\
    \ words_split if !isascii(word)]\n    \n    words_split = [word for word in words_split\
    \ if !isascii(word)]\n    \n    words_split = [word for word in words_split if\
    \ !isascii(word)]\n    \n    words_split = [word for word in words_split if !isascii(word)]\n\
    \    \n    words_split = [word for word in words_split if !isascii(word)]\n  \
    \  \n    words_split = [word for word in words_split if !isascii(word)]\n    \n\
    \    words_split = [word for word in words_split if !isascii(word)]\n    \n  \
    \  words_split = [word for word in words_split if !isascii(word)]\n    \n    words_split\
    \ = [word for word in words_split if !isascii(word)]\n    \n    words_split =\
    \ [word for word in words_split if !isascii\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpwqzmeixl.jl:73\nin expression starting at /tmp/tmpwqzmeixl.jl:73\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbl2etk87.jl:1\nin expression starting at /tmp/tmpbl2etk87.jl:1\n"
  stdout: ''
  timestamp: 1659749250
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    words = words[2:end]\n    words = words[2:end]\n    words =\
    \ words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnyfxiko6.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnyfxiko6.jl:1\n\
    in expression starting at /tmp/tmpnyfxiko6.jl:1\n"
  stdout: ''
  timestamp: 1659749250
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words = words[words != \"\"]\n        words = words[words !=\
    \ \",\"]\n        words = words[words != \"-\"]\n        words = words[words !=\
    \ \"?\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \"!\"]\n        words = words[words !=\
    \ \"!\"]\n        words = words[words != \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp209eu94t.jl:1\nin expression starting at /tmp/tmp209eu94t.jl:1\n"
  stdout: ''
  timestamp: 1659749250
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"-\"\
    ]\n    words = [w for w in words if w != \"_\"]\n    words = [w for w in words\
    \ if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjl4v9cd6.jl:55\nin expression starting at\
    \ /tmp/tmpjl4v9cd6.jl:55\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt)\n    \n    words_split = Vector{String}(undef, 0)\n    \n    for\
    \ word in words\n        words_split = words_split ++ [word]\n    end\n    \n\
    \    words_split = words_split ++ [\"\"]\n    \n    words_split = words_split\
    \ |> Vector{String}\n    \n    words_split = words_split |> Vector{String}[x ->\
    \ split(x, \",\")] |> Vector{String}\n    \n    words_split = words_split |> Vector{String}[x\
    \ -> split(x, \" \")] |> Vector{String}\n    \n    words_split = words_split |>\
    \ Vector{String}[x -> split(x, \"\\n\")] |> Vector{String}\n    \n    words_split\
    \ = words_split |> Vector{String}[x -> split(x, \"\\t\")] |> Vector{String}\n\
    \    \n    words_split = words_split |> Vector{String}[x -> split(x, \" \")] |>\
    \ Vector{String}\n    \n    words_split = words_split |> Vector{String}[x -> split(x,\
    \ \",\")] |> Vector{String}\n    \n    words_split = words_split |> Vector{String}[x\
    \ -> split(x, \" \")] |> Vector{String}\n    \n    words_split = words_split |>\
    \ Vector{String}[x -> split(x, \"\\n\")] |> Vector{String}\n    \n    words_split\
    \ = words_split |> Vector{String}[x -> split(x, \"\\t\")] |> Vector{String}\n\
    \    \n    words_split = words_split |> Vector{String}[x -> split(x, \" \")] |>\
    \ Vector{String}\n    \n    words_split = words_split |> Vector{String}[x -> split(x,\
    \ \",\")] |> Vector{String}\n    \n    words_split = words_split |> Vector{String}[x\
    \ -> split(x, \" \")] |> Vector{String}\n    \n    words_split = words_split |>\
    \ Vector{String}[x -> split(x, \"\\n\")] |> Vector{String}\n    \n    words_split\
    \ = words_split |> Vector{String}[x -> split(x, \"\\t\")] |> Vector{String}\n\
    \    \n    words_split = words_split |> Vector{String}[x -> split(x, \" \")] |>\
    \ Vector{String}\n    \n    words_split = words_split |> Vector{String}[x -> split(x,\
    \ \",\")] |> Vector{String}\n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1yej4ny8.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1yej4ny8.jl:1\n\
    in expression starting at /tmp/tmp1yej4ny8.jl:1\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    txt\
    \ = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n    else\n\
    \        words = split(txt, \" \")\n        words = [w for w in words if w !=\
    \ \"\"]\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpsf3pl__x.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsf3pl__x.jl:1\n\
    in expression starting at /tmp/tmpsf3pl__x.jl:1\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \",,\"\
    ]\n    words = [w for w in words if w != \",,,\"]\n    words = [w for w in words\
    \ if w != \",,,,\"]\n    words = [w for w in words if w != \",,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,\"]\n    words = [w for w in words if w\
    \ != \",,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,,,,\"]\n    words = [w for w in words if\
    \ w != \",,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,\"]\n    words = [w for\
    \ w in words if w != \",,,,,,,,,,,,,\"]\n    words = [w for w in words if w !=\
    \ \",,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,\"]\n    words = [w\
    \ for w in words if w != \",,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words\
    \ if w != \",,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,\"]\n    words\
    \ = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for\
    \ w in words if w != \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words\
    \ if w != \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w !=\
    \ \",,,,,,,,,,,,,,,,,,,,,,,,,,\"]\n    words = [w for w in words if w != \",,,,,,,,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words = [w \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2wfwtein.jl:1\nin expression starting at /tmp/tmp2wfwtein.jl:1\n"
  stdout: ''
  timestamp: 1659749242
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\
    \n        return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n   \
    \     return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9z458o5.jl:1\nin expression starting at /tmp/tmpo9z458o5.jl:1\n"
  stdout: ''
  timestamp: 1659749250
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    \n    if length(words) == 0 \n        return words\n    \n \
    \   words_split = split(words)\n    \n    if length(words_split) == 0 \n     \
    \   return words\n    \n    words_split[1] = words_split[1] .- \"a\"\n    \n \
    \   words_split[2] = words_split[2] .- \"b\"\n    \n    words_split[3] = words_split[3]\
    \ .- \"c\"\n    \n    words_split[4] = words_split[4] .- \"d\"\n    \n    words_split[5]\
    \ = words_split[5] .- \"e\"\n    \n    words_split[6] = words_split[6] .- \"f\"\
    \n    \n    words_split[7] = words_split[7] .- \"g\"\n    \n    words_split[8]\
    \ = words_split[8] .- \"h\"\n    \n    words_split[9] = words_split[9] .- \"i\"\
    \n    \n    words_split[10] = words_split[10] .- \"j\"\n    \n    words_split[11]\
    \ = words_split[11] .- \"k\"\n    \n    words_split[12] = words_split[12] .- \"\
    l\"\n    \n    words_split[13] = words_split[13] .- \"m\"\n    \n    words_split[14]\
    \ = words_split[14] .- \"n\"\n    \n    words_split[15] = words_split[15] .- \"\
    o\"\n    \n    words_split[16] = words_split[16] .- \"p\"\n    \n    words_split[17]\
    \ = words_split[17] .- \"q\"\n    \n    words_split[18] = words_split[18] .- \"\
    r\"\n    \n    words_split[19] = words_split[19] .- \"s\"\n    \n    words_split[20]\
    \ = words_split[20] .- \"t\"\n    \n    words_split[21] = words_split[21] .- \"\
    u\"\n    \n    words_split[22] = words_split[22] .- \"v\"\n    \n    words_split[23]\
    \ = words_split[23] .- \"w\"\n    \n    words_split[24] = words_split[24] .- \"\
    x\"\n    \n    words_split[25] = words_split[25] .- \"y\"\n    \n    words_split[26]\
    \ = words_split[26] .- \"z\"\n    \n    words_split[27] = words_split[27] .- \"\
    A\"\n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqjl1hdw4.jl:1\nin expression starting at /tmp/tmpqjl1hdw4.jl:1\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for w in\
    \ words\n        words_split = push!(words_split, w)\n    end\n    words_split\n\
    end\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abc def ghi\", \" \")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abc def ghi\", \" \", true)\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abc def ghi\", \" \", false)\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abc def ghi\", \" \", true, false)\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abc def ghi\", \" \", true, true)\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abc def ghi\", \" \", true, false)\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi\", \" \", true,\
    \ true)\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi\", \" \"\
    , true, false)\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def ghi\"\
    , \" \", true, true)\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abc def\
    \ ghi\", \" \", true, false)\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi\", \" \", true, true)\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi\", \" \", true, false)\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi\", \" \", true, true)\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi\", \" \", true, false)\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi\", \" \", true, true)\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi\", \" \", true, false)\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi\", \" \", true, true)\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def ghi\", \" \", true, false)\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abc def gh\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmo5uwrd.jl:17\nin expression starting at\
    \ /tmp/tmpnmo5uwrd.jl:17\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words_split = Vector{String}(undef, 0)\n        for word in\
    \ words\n            words_split = words_split ++ split(word,\",\")\n        end\n\
    \        words_split = words_split ++ split(txt,\",\")\n        words_split =\
    \ words_split ++ split(txt,\" \")\n        words_split = words_split ++ split(txt,\"\
    .\")\n        words_split = words_split ++ split(txt,\",.\")\n        words_split\
    \ = words_split ++ split(txt,\".,\")\n        words_split = words_split ++ split(txt,\"\
    ,,\")\n        words_split = words_split ++ split(txt,\",,.\")\n        words_split\
    \ = words_split ++ split(txt,\",,,\")\n        words_split = words_split ++ split(txt,\"\
    ,,,.\")\n        words_split = words_split ++ split(txt,\",,,,\")\n        words_split\
    \ = words_split ++ split(txt,\",,,,.\")\n        words_split = words_split ++\
    \ split(txt,\",,,,,\")\n        words_split = words_split ++ split(txt,\",,,,,.\"\
    )\n        words_split = words_split ++ split(txt,\",,,,,,\")\n        words_split\
    \ = words_split ++ split(txt,\",,,,,,.\")\n        words_split = words_split ++\
    \ split(txt,\",,,,,,,\")\n        words_split = words_split ++ split(txt,\",,,,,,,.\"\
    )\n        words_split = words_split ++ split(txt,\",,,,,,,,\")\n        words_split\
    \ = words_split ++ split(txt,\",,,,,,,,.\")\n        words_split = words_split\
    \ ++ split(txt,\",,,,,,,,,\")\n        words_split = words_split ++ split(txt,\"\
    ,,,,,,,,,.\")\n        words_split = words_split ++ split(txt,\",,,,,,,,,,\")\n\
    \        words_split = words_split ++ split(txt,\",,,,,,,,,,.\")\n        words_split\
    \ = words_split ++ split(txt,\",,,,,,,,,,,\")\n        words_split = words_split\
    \ ++ split(txt,\",,,,,,,,,,,.\")\n        words_split = words_split ++ split(txt,\"\
    ,,,,,,,,,,,,\")\n        words_split = words_split ++ split(txt,\",,,,,,,,,,,,.\"\
    )\n        words_split = words_split ++ split(txt,\",,,,,,,,,,,,,\")\n       \
    \ words_split = words_split ++ split(txt,\",,,,,,,,,,,,,.\")\n        words_split\
    \ = words_split ++ split(txt,\",,,,,,,,,,,,,,\")\n        words_split = words_split\
    \ ++ split(\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpathr050b.jl:52\nin expression starting at\
    \ /tmp/tmpathr050b.jl:52\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    if length(words) == 0\n        return words\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwh44tct6.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwh44tct6.jl:1\n\
    in expression starting at /tmp/tmpwh44tct6.jl:1\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n\
    \    for word in words\n        words_split = push!(words_split, word)\n    end\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !ise\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6bs5gc2j.jl:66\nin expression starting at\
    \ /tmp/tmp6bs5gc2j.jl:66\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n\
    \    for w in words\n        words_split = push!(words_split, w)\n    end\n  \
    \  \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n  \
    \  \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n  \
    \  \n    words_split = words_split[findall(x -> x != \" ,\", words_split)]\n \
    \   \n    words_split = words_split[findall(x -> x != \",,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" ,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" ,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" ,,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",,,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" ,,,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",,,,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" ,,,,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",,,,,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" ,,,,,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",,,,,,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" ,,,,,,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",,,,,,,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" ,,,,,,,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",,,,,,,,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" ,,,,,,,,,,\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",,,,,,,,,,,\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5wodil4_.jl:67\nin expression starting at\
    \ /tmp/tmp5wodil4_.jl:67\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_without_commas = filter((x) -> x != \",\", words)\n\
    \    words_without_commas = filter((x) -> x != \"\", words_without_commas)\n \
    \   words_without_commas = filter((x) -> x != \" \", words_without_commas)\n \
    \   words_without_commas = filter((x) -> x != \"\", words_without_commas)\n  \
    \  words_without_commas = filter((x) -> x != \" \", words_without_commas)\n  \
    \  words_without_commas = filter((x) -> x != \"\", words_without_commas)\n   \
    \ words_without_commas = filter((x) -> x != \" \", words_without_commas)\n   \
    \ words_without_commas = filter((x) -> x != \"\", words_without_commas)\n    words_without_commas\
    \ = filter((x) -> x != \" \", words_without_commas)\n    words_without_commas\
    \ = filter((x) -> x != \"\", words_without_commas)\n    words_without_commas =\
    \ filter((x) -> x != \" \", words_without_commas)\n    words_without_commas =\
    \ filter((x) -> x != \"\", words_without_commas)\n    words_without_commas = filter((x)\
    \ -> x != \" \", words_without_commas)\n    words_without_commas = filter((x)\
    \ -> x != \"\", words_without_commas)\n    words_without_commas = filter((x) ->\
    \ x != \" \", words_without_commas)\n    words_without_commas = filter((x) ->\
    \ x != \"\", words_without_commas)\n    words_without_commas = filter((x) -> x\
    \ != \" \", words_without_commas)\n    words_without_commas = filter((x) -> x\
    \ != \"\", words_without_commas)\n    words_without_commas = filter((x) -> x !=\
    \ \" \", words_without_commas)\n    words_without_commas = filter((x) -> x !=\
    \ \"\", words_without_commas)\n    words_without_commas = filter((x) -> x != \"\
    \ \", words_without_commas)\n    words_without_commas = filter((x) -> x != \"\"\
    , words_without_commas)\n    words_without_commas = filter((x) -> x != \" \",\
    \ words_without_commas)\n    words_without_commas = filter((x) -> x != \"\", words_without_commas)\n\
    \    words_without_commas = filter((x) -> x != \" \", words_without_commas)\n\
    \    words_without_commas = filter((x) -> x != \"\", words_without_commas)\n \
    \   words_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpifq6n3ib.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpifq6n3ib.jl:1\n\
    in expression starting at /tmp/tmpifq6n3ib.jl:1\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = split(words, \",\")\n    words_split =\
    \ words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !ise\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx306ng2y.jl:40\nin expression starting at\
    \ /tmp/tmpx306ng2y.jl:40\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for w in\
    \ words\n        words_split = words_split + [split(w, \",\")]\n    end\n    words_split\
    \ = words_split + [split(words, letters(ord(\"a\") + 1))]\n    words_split = words_split\
    \ + [split(words, letters(ord(\"b\") + 1))]\n    words_split = words_split + [split(words,\
    \ letters(ord(\"c\") + 1))]\n    words_split = words_split + [split(words, letters(ord(\"\
    d\") + 1))]\n    words_split = words_split + [split(words, letters(ord(\"e\")\
    \ + 1))]\n    words_split = words_split + [split(words, letters(ord(\"f\") + 1))]\n\
    \    words_split = words_split + [split(words, letters(ord(\"g\") + 1))]\n   \
    \ words_split = words_split + [split(words, letters(ord(\"h\") + 1))]\n    words_split\
    \ = words_split + [split(words, letters(ord(\"i\") + 1))]\n    words_split = words_split\
    \ + [split(words, letters(ord(\"j\") + 1))]\n    words_split = words_split + [split(words,\
    \ letters(ord(\"k\") + 1))]\n    words_split = words_split + [split(words, letters(ord(\"\
    l\") + 1))]\n    words_split = words_split + [split(words, letters(ord(\"m\")\
    \ + 1))]\n    words_split = words_split + [split(words, letters(ord(\"n\") + 1))]\n\
    \    words_split = words_split + [split(words, letters(ord(\"o\") + 1))]\n   \
    \ words_split = words_split + [split(words, letters(ord(\"p\") + 1))]\n    words_split\
    \ = words_split + [split(words, letters(ord(\"q\") + 1))]\n    words_split = words_split\
    \ + [split(words, letters(ord(\"r\") + 1))]\n    words_split = words_split + [split(words,\
    \ letters(ord(\"s\") + 1))]\n    words_split = words_split + [split(words, letters(ord(\"\
    t\") + 1))]\n    words_split = words_split + [split(words, letters(ord(\"u\")\
    \ + 1))]\n    words_split = words_split + [split(words, letters(ord(\"v\") + 1))]\n\
    \    words_split = words_split + [split(words, letters(ord(\"w\") + 1))]\n   \
    \ words_split = words_split + [split(words, letters(ord(\"x\") + 1))]\n    words_split\
    \ = words_split + [split(words, letters(ord(\"y\") + 1))]\n    words_split = words_split\
    \ + [split(words, letters(ord\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9rkkkn4w.jl:41\nin expression starting at\
    \ /tmp/tmp9rkkkn4w.jl:41\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \".\"\
    ]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsml7ycai.jl:55\nin expression starting at\
    \ /tmp/tmpsml7ycai.jl:55\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    if length(words) == 0\n        return words\n\
    \    else\n        \n        words_split = split(words, \",\")\n        \n   \
    \     if length(words_split) == 0\n            return words\n        else\n  \
    \          \n            words_split = split(words_split, \" \")\n           \
    \ \n            if length(words_split) == 0\n                return words\n  \
    \          else\n                \n                words_split = split(words_split,\
    \ \",\")\n                \n                if length(words_split) == 0\n    \
    \                return words\n                else\n                    \n  \
    \                  words_split = split(words_split, \" \")\n                 \
    \   \n                    if length(words_split) == 0\n                      \
    \  return words\n                    else\n                        \n        \
    \                words_split = split(words_split, \",\")\n                   \
    \     \n                        if length(words_split) == 0\n                \
    \            return words\n                        else\n                    \
    \        \n                            words_split = split(words_split, \" \"\
    )\n                            \n                            if length(words_split)\
    \ == 0\n                                return words\n                       \
    \     else\n                                \n                               \
    \ words_split = split(words_split, \",\")\n                                \n\
    \                                if length(words_split) == 0\n               \
    \                     return words\n                                else\n   \
    \                                 \n                                    words_split\
    \ = split(words_split, \" \")\n                                    \n        \
    \                            if length(words_split) == 0\n                   \
    \                     return words\n                                    else\n\
    \                                        \n                                  \
    \      words_split = split(words_split, \",\")\n                             \
    \           \n                                        if length(words_split) ==\
    \ 0\n                                            return words\n              \
    \                          else\n                                            \n\
    \                                            words_split = split(words_split,\
    \ \" \")\n                                            \n                     \
    \                       if length(words_split) == 0\n                        \
    \                        return words\n                                      \
    \      else\n                                                \n              \
    \                                  words_split = split(words_split, \",\")\n \
    \                                               \n                           \
    \                     if length(words_split) == 0\n                          \
    \                          return words\n                                    \
    \            else\n                                                    \n    \
    \                                                words_split = split(words_split,\
    \ \" \")\n                                                    \n             \
    \                                       if length(words_split) == 0\n        \
    \                                                return words\n              \
    \                                      else\n                                \
    \                        \n                                                  \
    \      words_split = split(words_split, \",\")\n                             \
    \                           \n                                               \
    \         if length(words_split) == 0\n                                      \
    \                      return words\n                                        \
    \                else\n                                                      \
    \      \n                                                            words_split\
    \ = split(words_split, \" \")\n                                              \
    \              \n                                                            if\
    \ length(words_split) == 0\n                                                 \
    \               return words\n                                               \
    \             else\n                                                         \
    \       \n                                                                words_split\
    \ = split(words_split, \",\")\n                                              \
    \                  \n                                                        \
    \        if length(words_split) == 0\n                                       \
    \                             return words\n                                 \
    \                               else\n                                       \
    \                             \n                                             \
    \                       words_split = split(words_split, \" \")\n            \
    \                                                        \n                  \
    \                                                  if length(words_split) == 0\n\
    \                                                                        return\
    \ words\n                                                                    else\n\
    \                                                                        \n  \
    \                                                                      words_split\
    \ = split(words_split, \",\")\n                                              \
    \                          \n                                                \
    \                        if length(words_split) == 0\n                       \
    \                                                     return words\n         \
    \                                                               else\n       \
    \                                                                     \n     \
    \                                                                       words_split\
    \ = split(words_split, \" \")\n                                              \
    \                              \n                                            \
    \                                if length(words_split) == 0\n               \
    \                                                                 return words\n\
    \                                                                            else\n\
    \                                                                            \
    \    \n                                                                      \
    \          words_split = split(words_split, \",\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9_fz2_n.jl:131\nin expression starting at\
    \ /tmp/tmpp9_fz2_n.jl:131\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    if isempty(words)\n        return words\n    end\n\
    \    \n    words_split = split(words, \",\")\n    \n    if isempty(words_split)\n\
    \        return words\n    end\n    \n    words_split = split(words_split, \"\
    \ \")\n    \n    if isempty(words_split)\n        return words\n    end\n    \n\
    \    words_split = split(words_split, \",\")\n    \n    if isempty(words_split)\n\
    \        return words\n    end\n    \n    words_split = split(words_split, \"\
    \ \")\n    \n    if isempty(words_split)\n        return words\n    end\n    \n\
    \    words_split = split(words_split, \",\")\n    \n    if isempty(words_split)\n\
    \        return words\n    end\n    \n    words_split = split(words_split, \"\
    \ \")\n    \n    if isempty(words_split)\n        return words\n    end\n    \n\
    \    words_split = split(words_split, \",\")\n    \n    if isempty(words_split)\n\
    \        return words\n    end\n    \n    words_split = split(words_split, \"\
    \ \")\n    \n    if isempty(words_split)\n        return words\n    end\n    \n\
    \    words_split = split(words_split, \",\")\n    \n    if isempty(words_split)\n\
    \        return words\n    end\n    \n    words_split = split(words_split, \"\
    \ \")\n    \n    if isempty(words_split)\n        return words\n    end\n    \n\
    \    words_split = split(words_split, \",\")\n    \n    if isempty(words_split)\n\
    \        return words\n    end\n    \n    words_split = split(words_split, \"\
    \ \")\n    \n    if isempty(words_split)\n        return words\n    end\n    \n\
    \    words_split = split(words_split, \",\")\n    \n    if isempty(words_split)\n\
    \        return words\n    end\n    \n    words_split = split(words_split, \"\
    \ \")\n    \n    if isempty(words_split)\n        return words\n    end\n    \n\
    \    words_split = split(words_split, \",\")\n    \n    if isempty(words_split)\n\
    \        return words\n    end\n    \n    words_split = split(words_split, \"\
    \ \")\n    \n    if isempty(words_split)\n        return words\n    end\n    \n\
    \    words_split = split(words_split, \",\")\n    \n    if isempty(words_split)\n\
    \        return words\n    end\n    \n    words_split = split(words_split, \"\
    \ \")\n    \n    if isempty(words_split)\n        return words\n    end\n    \n\
    \    words_split = split(words_split, \",\")\n    \n    if ise\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsebtayc_.jl:1\nin expression starting at /tmp/tmpsebtayc_.jl:1\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    words_splitted = Vector{String}(undef, 0)\n   \
    \ \n    for word in words\n        words_splitted = push!(words_splitted, word)\n\
    \    end\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x),\
    \ words_splitted)]\n    \n    words_splitted = words_splitted[findall(x \nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxb23o74m.jl:59\nin expression starting at\
    \ /tmp/tmpxb23o74m.jl:59\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"-\"\
    ]\n    words = [w for w in words if w != \"_\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_z4jh727.jl:55\nin expression starting at\
    \ /tmp/tmp_z4jh727.jl:55\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    \n    words = split(txt,\
    \ \" \")\n    \n    word_counts = Dict{String, Int64}()\n    for word in words\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  word_counts = sort(collect(values(word_counts)), by=x->x[1])\n    \n    word_counts\
    \ = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n    \n   \
    \ word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_count\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdsdp_r6c.jl:1\nin expression starting at /tmp/tmpdsdp_r6c.jl:1\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n\
    \    for word in words\n        if !isempty(word)\n            words_split = push!(words_split,\
    \ word)\n        end\n    end\n    \n    return length(words_split)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuiu9wtmg.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpuiu9wtmg.jl:27\n  Expression: candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n   Evaluated: 2 == [\"Hello\", \"\
    world!\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuiu9wtmg.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuiu9wtmg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpuiu9wtmg.jl:28\n  Expression: candidate(\"Hello,world!\")\
    \ == [\"Hello\", \"world!\"]\n   Evaluated: 1 == [\"Hello\", \"world!\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuiu9wtmg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuiu9wtmg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpuiu9wtmg.jl:29\n  Expression: candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"]\n   Evaluated: 2 == [\"Hello\", \"world,!\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuiu9wtmg.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuiu9wtmg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpuiu9wtmg.jl:30\n  Expression: candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"]\n   Evaluated: 2 == [\"Hello,Hello,world\"\
    , \"!\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuiu9wtmg.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuiu9wtmg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpuiu9wtmg.jl:31\n  Expression: candid"
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words_split = []\n    \n    for word in words\n\
    \        \n        if !isnothing(word)\n            \n            words_split\
    \ = words_split ++ split(word, \",\")\n            \n        end\n    end\n  \
    \  \n    words_split = words_split ++ split(txt, \",\")\n    \n    words_split\
    \ = words_split ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt,\
    \ \"\")\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n    words_split\
    \ = words_split ++ split(txt, \"\")\n    \n    words_split = words_split ++ split(txt,\
    \ \" \")\n    \n    words_split = words_split ++ split(txt, \"\")\n    \n    words_split\
    \ = words_split ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt,\
    \ \"\")\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n    words_split\
    \ = words_split ++ split(txt, \"\")\n    \n    words_split = words_split ++ split(txt,\
    \ \" \")\n    \n    words_split = words_split ++ split(txt, \"\")\n    \n    words_split\
    \ = words_split ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt,\
    \ \"\")\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n    words_split\
    \ = words_split ++ split(txt, \"\")\n    \n    words_split = words_split ++ split(txt,\
    \ \" \")\n    \n    words_split = words_split ++ split(txt, \"\")\n    \n    words_split\
    \ = words_split ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt,\
    \ \"\")\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n    words_split\
    \ = words_split ++ split(txt, \"\")\n    \n    words_split = words_split ++ split(txt,\
    \ \" \")\n    \n    words_split = words_split ++ split(txt, \"\")\n    \n    words_split\
    \ = words_split ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt,\
    \ \"\")\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n    words_split\
    \ = words_split ++ split(txt, \"\")\n    \n    words_split = words_split ++ split(txt,\
    \ \" \")\n    \n    words_split = words_split ++ split(txt, \"\")\n    \n    words_split\
    \ = words_split ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt,\
    \ \"\")\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n    words_split\
    \ = words_split ++ split(txt, \"\")\n    \n    words_split = words_\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy0guhzz_.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy0guhzz_.jl:1\n\
    in expression starting at /tmp/tmpy0guhzz_.jl:1\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = [split(word, \",\") for word in words]\n\
    \    words_split = [word for word in words_split if !isempty(word)]\n    words_split\
    \ = [word for word in words_split if !islower(word)]\n    words_split = [word\
    \ for word in words_split if !isupper(word)]\n    words_split = [word for word\
    \ in words_split if !isdigit(word)]\n    words_split = [word for word in words_split\
    \ if !isspace(word)]\n    words_split = [word for word in words_split if !isempty(word)]\n\
    \    words_split = [word for word in words_split if !islower(word)]\n    words_split\
    \ = [word for word in words_split if !isupper(word)]\n    words_split = [word\
    \ for word in words_split if !isdigit(word)]\n    words_split = [word for word\
    \ in words_split if !isspace(word)]\n    words_split = [word for word in words_split\
    \ if !isempty(word)]\n    words_split = [word for word in words_split if !islower(word)]\n\
    \    words_split = [word for word in words_split if !isupper(word)]\n    words_split\
    \ = [word for word in words_split if !isdigit(word)]\n    words_split = [word\
    \ for word in words_split if !isspace(word)]\n    words_split = [word for word\
    \ in words_split if !isempty(word)]\n    words_split = [word for word in words_split\
    \ if !islower(word)]\n    words_split = [word for word in words_split if !isupper(word)]\n\
    \    words_split = [word for word in words_split if !isdigit(word)]\n    words_split\
    \ = [word for word in words_split if !isspace(word)]\n    words_split = [word\
    \ for word in words_split if !isempty(word)]\n    words_split = [word for word\
    \ in words_split if !islower(word)]\n    words_split = [word for word in words_split\
    \ if !isupper(word)]\n    words_split = [word for word in words_split if !isdigit(word)]\n\
    \    words_split = [word for word in words_split if !isspace(word)]\n    words_split\
    \ = [word for word in words_split if !isempty(word)]\n    words_split = [word\
    \ for word in words_split if !islower(word)]\n    words_split = [word for word\
    \ in words_split if !isupper(word)]\n    words_split = [word for word in words_split\
    \ if !isdigit(word)]\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsqlj_xtp.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsqlj_xtp.jl:1\n\
    in expression starting at /tmp/tmpsqlj_xtp.jl:1\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \".\"]\n        words = [w for w in words if w != \"?\"]\n        words\
    \ = [w for w in words if w != \"!\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    !\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"!\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"!\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    !\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"!\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"!\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"!\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    !\"]\n        word\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpmue56ink.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmue56ink.jl:1\n\
    in expression starting at /tmp/tmpmue56ink.jl:1\n"
  stdout: ''
  timestamp: 1659749251
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppwmvyxjn.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppwmvyxjn.jl:1\n\
    in expression starting at /tmp/tmppwmvyxjn.jl:1\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"_\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6jafvb81.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6jafvb81.jl:1\n\
    in expression starting at /tmp/tmp6jafvb81.jl:1\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\
    \n        return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmv0u2c0a.jl:1\nin expression starting at /tmp/tmpmv0u2c0a.jl:1\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpddntmm2h.jl:50\nin expression starting at /tmp/tmpddntmm2h.jl:50\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words = [w for w in words if w != \"\"]\n        words = [w\
    \ for w in words if w != \",\"]\n        words = [w for w in words if w != \"\
    \ \"]\n        words = [w for w in words if w != \"-\"]\n        words = [w for\
    \ w in words if w != \"_\"]\n        words = [w for w in words if w != \"?\"]\n\
    \        words = [w for w in words if w != \"!\"]\n        words = [w for w in\
    \ words if w != \"-\"]\n        words = [w for w in words if w != \"-\"]\n   \
    \     words = [w for w in words if w != \"-\"]\n        words = [w for w in words\
    \ if w != \"-\"]\n        words = [w for w in words if w != \"-\"]\n        words\
    \ = [w for w in words if w != \"-\"]\n        words = [w for w in words if w !=\
    \ \"-\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w\
    \ for w in words if w != \"-\"]\n        words = [w for w in words if w != \"\
    -\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w for\
    \ w in words if w != \"-\"]\n        words = [w for w in words if w != \"-\"]\n\
    \        words = [w for w in words if w != \"-\"]\n        words = [w for w in\
    \ words if w != \"-\"]\n        words = [w for w in words if w != \"-\"]\n   \
    \     words = [w for w in words if w != \"-\"]\n        words = [w for w in words\
    \ if w != \"-\"]\n        words = [w for w in words if w != \"-\"]\n        words\
    \ = [w for w in words if w != \"-\"]\n        words = [w for w in words if w !=\
    \ \"-\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w\
    \ for w in words if w != \"-\"]\n        words = [w for w in words if w != \"\
    -\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w for\
    \ w in words if w != \"-\"]\n        words = [w for w in words if w != \"-\"]\n\
    \        words = [w for w in words if w != \"-\"]\n        words = [w for w in\
    \ words if w != \"-\"]\n        words = [w for w in words if w != \"-\"]\n   \
    \     words = [\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3lf3jrx3.jl:1\nin expression starting at /tmp/tmp3lf3jrx3.jl:1\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \",,\"\
    ]\n    words = [w for w in words if w != \",.\"]\n    words = [w for w in words\
    \ if w != \",.,\"]\n    words = [w for w in words if w != \",..\"]\n    words\
    \ = [w for w in words if w != \",...\"]\n    words = [w for w in words if w !=\
    \ \",....\"]\n    words = [w for w in words if w != \",.....\"]\n    words = [w\
    \ for w in words if w != \",......\"]\n    words = [w for w in words if w != \"\
    ,.......\"]\n    words = [w for w in words if w != \",........\"]\n    words =\
    \ [w for w in words if w != \",..........\"]\n    words = [w for w in words if\
    \ w != \",...........\"]\n    words = [w for w in words if w != \",............\"\
    ]\n    words = [w for w in words if w != \",..............\"]\n    words = [w\
    \ for w in words if w != \",...............\"]\n    words = [w for w in words\
    \ if w != \",................\"]\n    words = [w for w in words if w != \",..................\"\
    ]\n    words = [w for w in words if w != \",...................\"]\n    words\
    \ = [w for w in words if w != \",....................\"]\n    words = [w for w\
    \ in words if w != \",......................\"]\n    words = [w for w in words\
    \ if w != \",.......................\"]\n    words = [w for w in words if w !=\
    \ \",........................\"]\n    words = [w for w in words if w != \",..........................\"\
    ]\n    words = [w for w in words if w != \",...........................\"]\n \
    \   words = [w for w in words if w != \",............................\"]\n   \
    \ words = [w for w in words if w != \",..............................\"]\n   \
    \ words = [w for w in words if w != \",...............................\"]\n  \
    \  words = [w for w in words if w != \",................................\"]\n\
    \    words = [w for w in words if w != \",..................................\"\
    ]\n    words = [w for w in words if w != \",...................................\"\
    ]\n    words = [w for w in \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpo6z0lzoc.jl:46\nin expression starting at /tmp/tmpo6z0lzoc.jl:46\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \".\"\
    ]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsml7ycai.jl:55\nin expression starting at\
    \ /tmp/tmpsml7ycai.jl:55\n"
  stdout: ''
  timestamp: 1659749240
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    if length(words) == 0\n        return words\n\
    \    end\n    \n    words_split = split(words, \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"-\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"/\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"\\\\\")\n    \n    if length(words_split) == 0\n        return words\n   \
    \ end\n    \n    words_split = split(words_split, \"&\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"|\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"~\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"@\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"#\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"$\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"%\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"^\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"&\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"*\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"(\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \")\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"+\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"?\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"!\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"=\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzjccdei6.jl:71\nin expression starting at\
    \ /tmp/tmpzjccdei6.jl:71\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt)\n    \n    words_split = []\n    \n    for w in words\n       \
    \ \n        if w == \"\"\n            \n            words_split.push(\",\")\n\
    \            \n        else\n            \n            words_split.push(w)\n \
    \           \n        end\n        \n    end\n    \n    words_split = words_split[end]\n\
    \    \n    if words_split == \"\"\n        \n        words_split.push(\",\")\n\
    \        \n    end\n    \n    words_split = split(words_split)\n    \n    words_split\
    \ = words_split[end]\n    \n    if words_split == \"\"\n        \n        words_split.push(\"\
    ,\")\n        \n    end\n    \n    words_split = split(words_split)\n    \n  \
    \  words_split = words_split[end]\n    \n    if words_split == \"\"\n        \n\
    \        words_split.push(\",\")\n        \n    end\n    \n    words_split = split(words_split)\n\
    \    \n    words_split = words_split[end]\n    \n    if words_split == \"\"\n\
    \        \n        words_split.push(\",\")\n        \n    end\n    \n    words_split\
    \ = split(words_split)\n    \n    words_split = words_split[end]\n    \n    if\
    \ words_split == \"\"\n        \n        words_split.push(\",\")\n        \n \
    \   end\n    \n    words_split = split(words_split)\n    \n    words_split = words_split[end]\n\
    \    \n    if words_split == \"\"\n        \n        words_split.push(\",\")\n\
    \        \n    end\n    \n    words_split = split(words_split)\n    \n    words_split\
    \ = words_split[end]\n    \n    if words_split == \"\"\n        \n        words_split.push(\"\
    ,\")\n        \n    end\n    \n    words_split = split(words_split)\n    \n  \
    \  words_split = words_split[end]\n    \n    if words_split == \"\"\n        \n\
    \        words_split.push(\",\")\n        \n    end\n    \n    words_split = split(words_split)\n\
    \    \n    words_split = words_split[end]\n    \n    if words_split == \"\"\n\
    \        \n        words_split.push(\",\")\n        \n    end\n    \n    words_split\
    \ = split(words_split)\n    \n    words_split = words_split[end]\n    \n    if\
    \ words_split == \"\"\n        \n        words_split.push(\",\")\n        \n \
    \   end\n    \n    words_split = split(words_split)\n    \n    words_split = words_split[end]\n\
    \    \n    if words_split == \"\"\n        \n        words_split.push(\",\")\n\
    \        \n    end\n    \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp331j4rz1.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp331j4rz1.jl:1\n\
    in expression starting at /tmp/tmp331j4rz1.jl:1\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        words_split = vcat(words_split, split(word))\n    end\n  \
    \  words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphb4l1amt.jl:44\nin expression starting at\
    \ /tmp/tmphb4l1amt.jl:44\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpddntmm2h.jl:50\nin expression starting at /tmp/tmpddntmm2h.jl:50\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\
    \n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\t\"\n        return\
    \ Vector{String}(\"\\t\")\n    elseif txt == \"\\r\"\n        return Vector{String}(\"\
    \\r\")\n    elseif txt == \"\\r\\n\"\n        return Vector{String}(\"\\r\\n\"\
    )\n    elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif\
    \ txt == \"\\t\"\n        return Vector{String}(\"\\t\")\n    elseif txt == \"\
    \\r\"\n        return Vector{String}(\"\\r\")\n    elseif txt == \"\\r\\n\"\n\
    \        return Vector{String}(\"\\r\\n\")\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}(\"\\n\")\n    elseif txt == \"\\t\"\n        return Vector{String}(\"\
    \\t\")\n    elseif txt == \"\\r\"\n        return Vector{String}(\"\\r\")\n  \
    \  elseif txt == \"\\r\\n\"\n        return Vector{String}(\"\\r\\n\")\n    elseif\
    \ txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt == \"\
    \\t\"\n        return Vector{String}(\"\\t\")\n    elseif txt == \"\\r\"\n   \
    \     return Vector{String}(\"\\r\")\n    elseif txt == \"\\r\\n\"\n        return\
    \ Vector{String}(\"\\r\\n\")\n    elseif txt == \"\\n\"\n        return Vector{String}(\"\
    \\n\")\n    elseif txt == \"\\t\"\n        return Vector{String}(\"\\t\")\n  \
    \  elseif txt == \"\\r\"\n        return Vector{String}(\"\\r\")\n    elseif txt\
    \ == \"\\r\\n\"\n        return Vector{String}(\"\\r\\n\")\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\t\"\n\
    \        return Vector{String}(\"\\t\")\n    elseif txt == \"\\r\"\n        return\
    \ Vector{String}(\"\\r\")\n    elseif txt == \"\\r\\n\"\n        return Vector{String}(\"\
    \\r\\n\")\n    elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}(\"\\t\")\n    elseif\
    \ txt == \"\\r\"\n        return Vector{String}(\"\\r\")\n    elseif txt == \"\
    \\r\\n\"\n        return Vector{String}(\"\\r\\n\")\n    elseif txt == \"\\n\"\
    \n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\t\"\n        return\
    \ Vector{String}(\"\\t\")\n    elseif txt == \"\\r\"\n        return Vector{String}(\"\
    \\r\")\n    elseif txt == \"\\r\\n\"\n        return Vector{String}\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_4b8dl8.jl:1\nin expression starting at /tmp/tmpl_4b8dl8.jl:1\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words = [w for w in words if w != \"\"]\n        words = [w\
    \ for w in words if w != \",\"]\n        words = [w for w in words if w != \"\
    -\"]\n        words = [w for w in words if w != \"_\"]\n        words = [w for\
    \ w in words if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n\
    \        words = [w for w in words if w != \"-\"]\n        words = [w for w in\
    \ words if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n   \
    \     words = [w for w in words if w != \"-\"]\n        words = [w for w in words\
    \ if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"-\"]\n        words = [w for w in words if w !=\
    \ \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w\
    \ for w in words if w != \"-\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"-\"]\n        words = [w for w in words if w != \"?\"]\n\
    \        words = [w for w in words if w != \"!\"]\n        words = [w for w in\
    \ words if w != \"-\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"-\"]\n        words = [w for w in words if w != \"?\"]\n        words\
    \ = [w for w in words if w != \"!\"]\n        words = [w for w in words if w !=\
    \ \"-\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    -\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w for\
    \ w in words if w != \"!\"]\n        words = [w for w in words if w != \"-\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"-\"]\n   \
    \     words = [w for w in \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpci_o4007.jl:55\nin expression starting at /tmp/tmpci_o4007.jl:55\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if txt == \"\"\n        return txt\n    \n    words = split(txt, \" \")\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for w\
    \ in words if w != \",\"]\n    \n    words = [w for w in words if w != \"-\"]\n\
    \    \n    words = [w for w in words if w != \"_\"]\n    \n    words = [w for\
    \ w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"?\"\
    ]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"-\"\
    ]\n    \n    words = [w for w in words if w != \"_\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w for\
    \ w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"_\"\
    ]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w for\
    \ w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"?\"\
    ]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w for\
    \ w in words if w != \"_\"]\n    \n    words = [w for w in words if w != \"?\"\
    ]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"-\"\
    ]\n    \n    words = [w for w in words if w != \"_\"]\n    \n    words = [w for\
    \ w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"!\"\
    ]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w for\
    \ w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"_\"\
    ]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w for\
    \ w in words if w != \"!\"]\n    \n    words = [w for \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb4qqmib7.jl:83\nin expression starting at\
    \ /tmp/tmpb4qqmib7.jl:83\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    if isempty(words)\n        return words\n    else\n\
    \        \n        words_split = split(words, \",\")\n        \n        if isempty(words_split)\n\
    \            return words\n        else\n            \n            words_split\
    \ = split(words_split, \" \")\n            \n            if isempty(words_split)\n\
    \                return words\n            else\n                \n          \
    \      words_split = split(words_split, \",\")\n                \n           \
    \     if isempty(words_split)\n                    return words\n            \
    \    else\n                    \n                    words_split = split(words_split,\
    \ \" \")\n                    \n                    if isempty(words_split)\n\
    \                        return words\n                    else\n            \
    \            \n                        words_split = split(words_split, \",\"\
    )\n                        \n                        if isempty(words_split)\n\
    \                            return words\n                        else\n    \
    \                        \n                            words_split = split(words_split,\
    \ \" \")\n                            \n                            if isempty(words_split)\n\
    \                                return words\n                            else\n\
    \                                \n                                words_split\
    \ = split(words_split, \",\")\n                                \n            \
    \                    if isempty(words_split)\n                               \
    \     return words\n                                else\n                   \
    \                 \n                                    words_split = split(words_split,\
    \ \" \")\n                                    \n                             \
    \       if isempty(words_split)\n                                        return\
    \ words\n                                    else\n                          \
    \              \n                                        words_split = split(words_split,\
    \ \",\")\n                                        \n                         \
    \               if isempty(words_split)\n                                    \
    \        return words\n                                        else\n        \
    \                                    \n                                      \
    \      words_split = split(words_split, \" \")\n                             \
    \               \n                                            if isempty(words_split)\n\
    \                                                return words\n              \
    \                              else\n                                        \
    \        \n                                                words_split = split(words_split,\
    \ \",\")\n                                                \n                 \
    \                               if isempty(words_split)\n                    \
    \                                return words\n                              \
    \                  else\n                                                    \n\
    \                                                    words_split = split(words_split,\
    \ \" \")\n                                                    \n             \
    \                                       if isempty(words_split)\n            \
    \                                            return words\n                  \
    \                                  else\n                                    \
    \                    \n                                                      \
    \  words_split = split(words_split, \",\")\n                                 \
    \                       \n                                                   \
    \     if isempty(words_split)\n                                              \
    \              return words\n                                                \
    \        else\n                                                            \n\
    \                                                            words_split = split(words_split,\
    \ \" \")\n                                                            \n     \
    \                                                       if isempty(words_split)\n\
    \                                                                return words\n\
    \                                                            else\n          \
    \                                                      \n                    \
    \                                            words_split = split(words_split,\
    \ \",\")\n                                                                \n \
    \                                                               if isempty(words_split)\n\
    \                                                                    return words\n\
    \                                                                else\n      \
    \                                                              \n            \
    \                                                        words_split = split(words_split,\
    \ \" \")\n                                                                   \
    \ \n                                                                    if isempty(words_split)\n\
    \                                                                        return\
    \ words\n                                                                    else\n\
    \                                                                        \n  \
    \                                                                      words_split\
    \ = split(words_split, \",\")\n                                              \
    \                          \n                                                \
    \                        if isempty(words_split)\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2k6kt27x.jl:1\nin expression starting at /tmp/tmp2k6kt27x.jl:1\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \" \"]\n  \
    \  words = [w for w in words if w != \".\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!?\"]\n    words = [w for w in words if w != \"??\"]\n\
    \    words = [w for w in words if w != \"???\"]\n    words = [w for w in words\
    \ if w != \"????\"]\n    words = [w for w in words if w != \"?????\"]\n    words\
    \ = [w for w in words if w != \"??????\"]\n    words = [w for w in words if w\
    \ != \"???????\"]\n    words = [w for w in words if w != \"????????\"]\n    words\
    \ = [w for w in words if w != \"?????????\"]\n    words = [w for w in words if\
    \ w != \"??????????\"]\n    words = [w for w in words if w != \"???????????\"\
    ]\n    words = [w for w in words if w != \"????????????\"]\n    words = [w for\
    \ w in words if w != \"?????????????\"]\n    words = [w for w in words if w !=\
    \ \"??????????????\"]\n    words = [w for w in words if w != \"???????????????\"\
    ]\n    words = [w for w in words if w != \"????????????????\"]\n    words = [w\
    \ for w in words if w != \"?????????????????\"]\n    words = [w for w in words\
    \ if w != \"??????????????????\"]\n    words = [w for w in words if w != \"???????????????????\"\
    ]\n    words = [w for w in words if w != \"????????????????????\"]\n    words\
    \ = [w for w in words if w != \"?????????????????????\"]\n    words = [w for w\
    \ in words if w != \"??????????????????????\"]\n    words = [w for w in words\
    \ if w != \"???????????????????????\"]\n    words = [w for w in word\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp5kvrwi53.jl:41\nin expression starting at /tmp/tmp5kvrwi53.jl:41\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \" \"\
    ]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zw9rkl2.jl:55\nin expression starting at\
    \ /tmp/tmp3zw9rkl2.jl:55\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \".\"\
    ]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w\
    \ for w in words if w != \"(\"]\n    words = [w for w in words if w != \")\"]\n\
    \    words = [w for w in words if w != \"[\"]\n    words = [w for w in words if\
    \ w != \"]\"]\n    words = [w for w in words if w != \"{\"]\n    words = [w for\
    \ w in words if w != \"}\"]\n    words = [w for w in words if w != \"|\"]\n  \
    \  words = [w for w in words if w != \"&\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"=\"]\n    words = [w for\
    \ w in words if w != \"<\"]\n    words = [w for w in words if w != \">\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"(\"]\n    words = [w for w in words if w != \")\"]\n  \
    \  words = [w for w in words if w != \"[\"]\n    words = [w for w in words if\
    \ w != \"]\"]\n    words = [w for w in words if w != \"{\"]\n    words = [w for\
    \ w in words if w != \"}\"]\n    words = [w for w in words if w != \"|\"]\n  \
    \  words = [w for w in words if w != \"&\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"=\"]\n    words = [w for\
    \ w in words if w != \"<\"]\n    words = [w for w in words if w != \">\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"(\"]\n    words = [w for w in words if w != \")\"]\n  \
    \  words = [w for w in words if w != \"[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2wjbmbf7.jl:55\nin expression starting at\
    \ /tmp/tmp2wjbmbf7.jl:55\n"
  stdout: ''
  timestamp: 1659749253
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words_split = Vector{String}(undef, 0)\n    \n\
    \    for word in words\n        words_split = push!(words_split, word)\n    end\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \",\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \" \", words_split\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyr503ifw.jl:68\nin expression starting at\
    \ /tmp/tmpyr503ifw.jl:68\n"
  stdout: ''
  timestamp: 1659749244
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}()\n    for w in words\n\
    \        push!(words_split, w)\n    end\n    words_split\nend\n</code>\n<|/ a\
    \ tags=julia,string |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/27859012)\n<|/ c |>\n<| c |>\n\
    This does provide an answer to the question. `split` splits a string on whitespace,\
    \ comma, etc. and returns a vector of strings. `split!` modifies a vector in-place\
    \ and returns a new vector. `split!` modifies a vector in-place and returns a\
    \ new vector. `split!` modifies a vector in-place and returns a new vector. `split!`\
    \ modifies a vector in-place and returns a new vector. `split!` modifies a vector\
    \ in-place and returns a new vector. `split!` modifies a vector in-place and returns\
    \ a new vector. `split!` modifies a vector in-place and returns a new vector.\
    \ `split!` modifies a vector in-place and returns a new vector. `split!` modifies\
    \ a vector in-place and returns a new vector. `split!` modifies a vector in-place\
    \ and returns a new vector. `split!` modifies a vector in-place and returns a\
    \ new vector. `split!` modifies a vector in-place and returns a new vector. `split!`\
    \ modifies a vector in-place and returns a new vector. `split!` modifies a vector\
    \ in-place and returns a new vector. `split!` modifies a vector in-place and returns\
    \ a new vector. `split!` modifies a vector in-place and returns a new vector.\
    \ `split!` modifies a vector in-place and returns a new vector. `split!` modifies\
    \ a vector in-place and returns a new vector. `split!` modifies a vector in-place\
    \ and returns a new vector. `split!` modifies a vector in-place and returns a\
    \ new vector. `split!` modifies a vector in-place and returns a new vector. `split!`\
    \ modifies a vector in-place and returns a new vector. `split!` modifies a vector\
    \ in-place and returns a new vector. `split!` modifies a vector in-place and returns\
    \ a new vector. `split!` modifies a vector in-place and returns a new vector.\
    \ `split!` \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphvyn7qjs.jl:17\nin expression starting at\
    \ /tmp/tmphvyn7qjs.jl:17\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    \n    if length(words) == 0 \n        return 0 \n   \
    \ else \n        return length(words) \n    end\nend\n</cell>\n<text>\nExercise\
    \ 5\nWrite a function that takes a string and returns the number of upper-case\
    \ letters in the string.\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpune6alng.jl:18\nin expression starting at\
    \ /tmp/tmpune6alng.jl:18\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for w in\
    \ words\n        words_split = push!(words_split, split(w, \",\"))\n    end\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65cmth77.jl:42\nin expression starting at\
    \ /tmp/tmp65cmth77.jl:42\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    words = split(txt, \" \")\n    words_splitted = Vector{String}(undef, 0)\n\
    \    for word in words\n        words_splitted = push!(words_splitted, word)\n\
    \    end\n    words_splitted\nend\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphu3v821v.jl:18\nin expression starting at\
    \ /tmp/tmphu3v821v.jl:18\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return txt\n    elseif txt==\" \"\n        return\
    \ txt\n    elseif txt==\"\\n\"\n        return txt\n    elseif txt==\"\\t\"\n\
    \        return txt\n    elseif txt==\" \"\n        return txt\n    elseif txt==\"\
    \\n\"\n        return txt\n    elseif txt==\"\\t\"\n        return txt\n    elseif\
    \ txt==\" \"\n        return txt\n    elseif txt==\"\\n\"\n        return txt\n\
    \    elseif txt==\" \"\n        return txt\n    elseif txt==\"\\n\"\n        return\
    \ txt\n    elseif txt==\" \"\n        return txt\n    elseif txt==\"\\n\"\n  \
    \      return txt\n    elseif txt==\" \"\n        return txt\n    elseif txt==\"\
    \\n\"\n        return txt\n    elseif txt==\" \"\n        return txt\n    elseif\
    \ txt==\"\\n\"\n        return txt\n    elseif txt==\" \"\n        return txt\n\
    \    elseif txt==\"\\n\"\n        return txt\n    elseif txt==\" \"\n        return\
    \ txt\n    elseif txt==\"\\n\"\n        return txt\n    elseif txt==\" \"\n  \
    \      return txt\n    elseif txt==\"\\n\"\n        return txt\n    elseif txt==\"\
    \ \"\n        return txt\n    elseif txt==\"\\n\"\n        return txt\n    elseif\
    \ txt==\" \"\n        return txt\n    elseif txt==\"\\n\"\n        return txt\n\
    \    elseif txt==\" \"\n        return txt\n    elseif txt==\"\\n\"\n        return\
    \ txt\n    elseif txt==\" \"\n        return txt\n    elseif txt==\"\\n\"\n  \
    \      return txt\n    elseif txt==\" \"\n        return txt\n    elseif txt==\"\
    \\n\"\n        return txt\n    elseif txt==\" \"\n        return txt\n    elseif\
    \ txt==\"\\n\"\n        return txt\n    elseif txt==\" \"\n        return txt\n\
    \    elseif txt==\"\\n\"\n        return txt\n    elseif txt==\" \"\n        return\
    \ txt\n    elseif txt==\"\\n\"\n        return txt\n    elseif txt==\" \"\n  \
    \      return txt\n    elseif txt==\"\\n\"\n        return txt\n    elseif txt==\"\
    \ \"\n        return txt\n    elseif txt==\"\\n\"\n        return txt\n    elseif\
    \ txt==\" \"\n        return txt\n    elseif txt==\"\\n\"\n        return txt\n\
    \    elseif txt==\" \"\n        return txt\n    elseif txt==\"\\n\"\n        return\
    \ txt\n    elseif txt==\" \"\n        return txt\n    elseif txt==\"\\n\"\n  \
    \      return txt\n    elseif txt==\" \"\n        return txt\n    elseif txt==\"\
    \\n\"\n        return txt\n    elseif txt==\" \"\n        return txt\n    elseif\
    \ txt==\"\\n\"\n        return txt\n    elseif txt==\" \"\n        return txt\n\
    \    elseif txt==\"\\n\"\n        return txt\n    elseif txt==\" \"\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaa4r5ofs.jl:1\nin expression starting at /tmp/tmpaa4r5ofs.jl:1\n"
  stdout: ''
  timestamp: 1659749253
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    txt = txt.trim()\n\
    \    if isempty(txt)\n        return Vector{String}()\n    end\n    \n    words\
    \ = split(txt, \" \")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmwjtsts9.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmwjtsts9.jl:1\n\
    in expression starting at /tmp/tmpmwjtsts9.jl:1\n"
  stdout: ''
  timestamp: 1659749247
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = words[words != \"\"]\n    words = words[words\
    \ != \",\"]\n    words = words[words != \".\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \",\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \".\"]\n    words = words[words != \",\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \".\"]\n    words = words[words != \",\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \",\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \".\"]\n    words = words[words != \",\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \".\"]\n    words = words[words != \",\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \",\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \".\"]\n    words = words[words != \",\"]\n \
    \   words = words[words != \"!\"]\n    words = words[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2gju9rvy.jl:1\nin expression starting at /tmp/tmp2gju9rvy.jl:1\n"
  stdout: ''
  timestamp: 1659749252
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    words_split = split(words)\n    words_split = words_split[words_split\
    \ .!= \"\"]\n    words_split = words_split[words_split .!= \" \"]\n    words_split\
    \ = words_split[words_split .!= \",\"]\n    words_split = words_split[words_split\
    \ .!= \".\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8kh47ikn.jl:1\nin expression starting at /tmp/tmp8kh47ikn.jl:1\n"
  stdout: ''
  timestamp: 1659749253
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    \n    words\
    \ = split(txt, \" \")\n    \n    words = [w for w in words if w != \"\"]\n   \
    \ \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for w in\
    \ words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"]\n  \
    \  \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for w in\
    \ words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"]\n  \
    \  \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for w\
    \ in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"]\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for w\
    \ in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"]\n\
    \    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for\
    \ w in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for\
    \ w in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for\
    \ w in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpp6ve6xjk.jl:82\nin expression starting at /tmp/tmpp6ve6xjk.jl:82\n"
  stdout: ''
  timestamp: 1659749253
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt)\n    \n    if length(words) == 0 \n        return 0 \n    \n    words_without_whitespace\
    \ = filter(x -> !contains(\" \", x), words)\n    \n    if length(words_without_whitespace)\
    \ == 0 \n        return length(words) \n    \n    words_without_comma = filter(x\
    \ -> !contains(\",\", x), words_without_whitespace)\n    \n    if length(words_without_comma)\
    \ == 0 \n        return length(words_without_whitespace) \n    \n    words_without_odd_order\
    \ = filter(x -> !contains(letters, x), words_without_comma)\n    \n    if length(words_without_odd_order)\
    \ == 0 \n        return length(words_without_comma) \n    \n    return length(words_without_odd_order)\
    \ \nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of upper-case letters in the string. \nExamples\n>>> count_upper(\"\
    abc\")\n3\n>>> count_upper(\"aBc\") \n2\n>>> count_upper(\"aBcD\") \n0\n>>> count_upper(\"\
    aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>>\
    \ count_upper(\"aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>> count_upper(\"\
    aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>>\
    \ count_upper(\"aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>> count_upper(\"\
    aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>>\
    \ count_upper(\"aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>> count_upper(\"\
    aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>>\
    \ count_upper(\"aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>> count_upper(\"\
    aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>>\
    \ count_upper(\"aBcD\") \n0\n>>> count_upper(\"aBcD\") \n0\n>>> count_upper(\"\
    aBcD\") \n0\n>>> \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgw936hj.jl:32\nin expression starting at\
    \ /tmp/tmpsgw936hj.jl:32\n"
  stdout: ''
  timestamp: 1659749253
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"-\"\
    ]\n    words = [w for w in words if w != \"_\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"!?\"]\n    words = [w for w in words if w != \"?!\"\
    ]\n    words = [w for w in words if w != \"!?!\"]\n    words = [w for w in words\
    \ if w != \"?!?\"]\n    words = [w for w in words if w != \"!?!?\"]\n    words\
    \ = [w for w in words if w != \"?!?!?\"]\n    words = [w for w in words if w !=\
    \ \"!?!?!\"]\n    words = [w for w in words if w != \"?!?!?!\"]\n    words = [w\
    \ for w in words if w != \"!?!?!?\"]\n    words = [w for w in words if w != \"\
    ?!?!?!?\"]\n    words = [w for w in words if w != \"!?!?!?!\"]\n    words = [w\
    \ for w in words if w != \"?!?!?!?!\"]\n    words = [w for w in words if w !=\
    \ \"!?!?!?!?\"]\n    words = [w for w in words if w != \"?!?!?!?!?\"]\n    words\
    \ = [w for w in words if w != \"!?!?!?!?!\"]\n    words = [w for w in words if\
    \ w != \"?!?!?!?!?!\"]\n    words = [w for w in words if w != \"!?!?!?!?!?\"]\n\
    \    words = [w for w in words if w != \"?!?!?!?!?!?\"]\n    words = [w for w\
    \ in words if w != \"!?!?!?!?!?!\"]\n    words = [w for w in words if w != \"\
    ?!?!?!?!?!?!\"]\n    words = [w for w in words if w != \"!?!?!?!?!?!?\"]\n   \
    \ words = [w for w in words if w != \"?!?!?!?!?!?!?\"]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6_t5jjtd.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6_t5jjtd.jl:1\n\
    in expression starting at /tmp/tmp6_t5jjtd.jl:1\n"
  stdout: ''
  timestamp: 1659749249
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n            >>> split_words(\"abcdef\") \n    3 \n    \"\"\"\n\
    function split_words(txt::String)::Union{Vector{String}, Int64} \n    words =\
    \ split(txt, \" \")\n    words_split = split(words, \",\")\n    words_split2 =\
    \ split(words_split, \" \")\n    words_split3 = split(words_split2, \",\")\n \
    \   words_split4 = split(words_split3, \" \")\n    words_split5 = split(words_split4,\
    \ \",\")\n    words_split6 = split(words_split5, \" \")\n    words_split7 = split(words_split6,\
    \ \",\")\n    words_split8 = split(words_split7, \" \")\n    words_split9 = split(words_split8,\
    \ \",\")\n    words_split10 = split(words_split9, \" \")\n    words_split11 =\
    \ split(words_split10, \",\")\n    words_split12 = split(words_split11, \" \"\
    )\n    words_split13 = split(words_split12, \",\")\n    words_split14 = split(words_split13,\
    \ \" \")\n    words_split15 = split(words_split14, \",\")\n    words_split16 =\
    \ split(words_split15, \" \")\n    words_split17 = split(words_split16, \",\"\
    )\n    words_split18 = split(words_split17, \" \")\n    words_split19 = split(words_split18,\
    \ \",\")\n    words_split20 = split(words_split19, \" \")\n    words_split21 =\
    \ split(words_split20, \",\")\n    words_split22 = split(words_split21, \" \"\
    )\n    words_split23 = split(words_split22, \",\")\n    words_split24 = split(words_split23,\
    \ \" \")\n    words_split25 = split(words_split24, \",\")\n    words_split26 =\
    \ split(words_split25, \" \")\n    words_split27 = split(words_split26, \",\"\
    )\n    words_split28 = split(words_split27, \" \")\n    words_split29 = split(words_split28,\
    \ \",\")\n    words_split30 = split(words_split29, \" \")\n    words_split31 =\
    \ split(words_split30, \",\")\n    words_split32 = split(words_split31, \" \"\
    )\n    words_split33 = split(words_split32, \",\")\n    words_split34 = split(words_split33,\
    \ \" \")\n    words_split35 = split(words_split34, \",\")\n    words_split36 =\
    \ split(words_split35, \" \")\n    words_split37 = split(words_split36, \",\"\
    )\n    words_split38 = split(words_split37, \" \")\n    words_split39 = split(words_split38,\
    \ \",\")\n    words_split40 = split(words_split39, \" \")\n    words_split41 =\
    \ split(words_split40, \",\")\n    words_split42 = split(words_split41, \" \"\
    )\n    words_split43 = split(words_split42, \",\")\n    words_split44 = split(words_split43,\
    \ \" \")\n    words_split45 = split(words_split44, \",\")\n    words_\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpesx6hsok.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpesx6hsok.jl:1\n\
    in expression starting at /tmp/tmpesx6hsok.jl:1\n"
  stdout: ''
  timestamp: 1659749242
