language: jl
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*ones(length(factors))\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpzfv1ici2.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpzfv1ici2.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = Vector{Int64}(undef, 0)\n    \n    for factor in\
    \ factors\n        push!(factors, factor)\n    end\n    \n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp92425l9v.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp92425l9v.jl:21\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp92425l9v.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp92425l9v.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp92425l9v.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp92425l9v.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp92425l9v.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp92425l9v.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp92425l9v.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp92425l9v.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp92425l9v.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp92425l9v.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp92425l9v.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp92425l9v.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp92425l9v.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmptw0wvmf7.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmptw0wvmf7.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmptw0wvmf7.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw0wvmf7.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptw0wvmf7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmptw0wvmf7.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmptw0wvmf7.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw0wvmf7.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptw0wvmf7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmptw0wvmf7.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmptw0wvmf7.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw0wvmf7.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptw0wvmf7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmptw0wvmf7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmptw0wvmf7.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = Vector{Int64}(undef, 0)\n    for factor in factors\n\
    \        push!(factors, factor)\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp69zrt_53.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp69zrt_53.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp69zrt_53.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp69zrt_53.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp69zrt_53.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp69zrt_53.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp69zrt_53.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp69zrt_53.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp69zrt_53.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp69zrt_53.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp69zrt_53.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp69zrt_53.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp69zrt_53.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp69zrt_53.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp69zrt_53.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaphihaq6.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaphihaq6.jl:1\n\
    in expression starting at /tmp/tmpaphihaq6.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9agvg6lb.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp9agvg6lb.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factor_count\
    \ = zeros(Int, length(factors))\n    for i = 1:length(factors)\n        factor_count[i]\
    \ = factor_count[i] + factors[i]\n    end\n    factor_count = sort(factor_count)\n\
    \    factor_count = factor_count[1 : length(factor_count)]\n    return factor_count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnaiws1fm.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpnaiws1fm.jl:20\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnaiws1fm.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnaiws1fm.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnaiws1fm.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnaiws1fm.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnaiws1fm.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnaiws1fm.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnaiws1fm.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnaiws1fm.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnaiws1fm.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnaiws1fm.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnaiws1fm.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnaiws1fm.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnaiws1fm.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp39q3ca88.jl:1\nin expression starting at /tmp/tmp39q3ca88.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpc_r6ozar.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpc_r6ozar.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4za_5cvo.jl:13\nin expression starting at\
    \ /tmp/tmp4za_5cvo.jl:13\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = Vector{Int64}(factors)\n    factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpqo6_ekgf.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpqo6_ekgf.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpqo6_ekgf.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqo6_ekgf.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqo6_ekgf.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpqo6_ekgf.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpqo6_ekgf.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqo6_ekgf.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqo6_ekgf.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpqo6_ekgf.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpqo6_ekgf.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqo6_ekgf.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqo6_ekgf.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpqo6_ekgf.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpqo6_ekgf.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = Vector{Int64}()\n    for factor in factorization\n        push!(factors,factor)\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp2vlvag5w.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp2vlvag5w.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp2vlvag5w.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vlvag5w.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vlvag5w.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp2vlvag5w.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp2vlvag5w.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vlvag5w.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vlvag5w.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp2vlvag5w.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp2vlvag5w.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vlvag5w.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vlvag5w.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp2vlvag5w.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp2vlvag5w.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpc_r6ozar.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpc_r6ozar.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmptw0wvmf7.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmptw0wvmf7.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmptw0wvmf7.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw0wvmf7.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptw0wvmf7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmptw0wvmf7.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmptw0wvmf7.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw0wvmf7.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptw0wvmf7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmptw0wvmf7.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmptw0wvmf7.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw0wvmf7.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptw0wvmf7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmptw0wvmf7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmptw0wvmf7.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpc_r6ozar.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpc_r6ozar.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = []\n    for factor in factorization\n        factors = factors ++ [factor]\n\
    \    end\n    factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpiz00out1.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpiz00out1.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpiz00out1.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiz00out1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiz00out1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpiz00out1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpiz00out1.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiz00out1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiz00out1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpiz00out1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpiz00out1.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiz00out1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiz00out1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpiz00out1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpiz00out1.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpc_r6ozar.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpc_r6ozar.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = factorization[1]\n    factorization[1] = factorization[2]\n    factorization[2]\
    \ = factorization[3]\n    factorization[3] = factorization[4]\n    factorization[4]\
    \ = factorization[5]\n    factorization[5] = factorization[6]\n    factorization[6]\
    \ = factorization[7]\n    factorization[7] = factorization[8]\n    factorization[8]\
    \ = factorization[9]\n    factorization[9] = factorization[10]\n    factorization[10]\
    \ = factorization[11]\n    factorization[11] = factorization[12]\n    factorization[12]\
    \ = factorization[13]\n    factorization[13] = factorization[14]\n    factorization[14]\
    \ = factorization[15]\n    factorization[15] = factorization[16]\n    factorization[16]\
    \ = factorization[17]\n    factorization[17] = factorization[18]\n    factorization[18]\
    \ = factorization[19]\n    factorization[19] = factorization[20]\n    factorization[20]\
    \ = factorization[21]\n    factorization[21] = factorization[22]\n    factorization[22]\
    \ = factorization[23]\n    factorization[23] = factorization[24]\n    factorization[24]\
    \ = factorization[25]\n    factorization[25] = factorization[26]\n    factorization[26]\
    \ = factorization[27]\n    factorization[27] = factorization[28]\n    factorization[28]\
    \ = factorization[29]\n    factorization[29] = factorization[30]\n    factorization[30]\
    \ = factorization[31]\n    factorization[31] = factorization[32]\n    factorization[32]\
    \ = factorization[33]\n    factorization[33] = factorization[34]\n    factorization[34]\
    \ = factorization[35]\n    factorization[35] = factorization[36]\n    factorization[36]\
    \ = factorization[37]\n    factorization[37] = factorization[38]\n    factorization[38]\
    \ = factorization[39]\n    factorization[39] = factorization[40]\n    factorization[40]\
    \ = factorization[41]\n    factorization[41] = factorization[42]\n    factorization[42]\
    \ = factorization[43]\n    factorization[43] = factorization[44]\n    factorization[44]\
    \ = factorization[45]\n    factorization[45] = factorization[\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc20b_rly.jl:1\nin expression starting at /tmp/tmpc20b_rly.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[factors != 1]\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpcaa6z4ef.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpcaa6z4ef.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpcaa6z4ef.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcaa6z4ef.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcaa6z4ef.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpcaa6z4ef.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpcaa6z4ef.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcaa6z4ef.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcaa6z4ef.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpcaa6z4ef.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpcaa6z4ef.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcaa6z4ef.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcaa6z4ef.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpcaa6z4ef.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpcaa6z4ef.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = []\n    for factor in factorization\n        push!(factors, factor)\n    end\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmplg34q3l8.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmplg34q3l8.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdjc7s2zt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdjc7s2zt.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = Vector{Int64}(factors)\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppoav5wey.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmppoav5wey.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppoav5wey.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoav5wey.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppoav5wey.jl:15\ntest set:\
    \ Error During Test at /tmp/tmppoav5wey.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppoav5wey.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoav5wey.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppoav5wey.jl:15\ntest set:\
    \ Error During Test at /tmp/tmppoav5wey.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppoav5wey.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoav5wey.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppoav5wey.jl:15\ntest set:\
    \ Error During Test at /tmp/tmppoav5wey.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppoav5wey.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9agvg6lb.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp9agvg6lb.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factor_counts\
    \ = Dict{Int64, Int64}()\n    for factor in factors\n        factor_counts[factor]\
    \ = factor_counts[factor] + 1 if factor_counts[factor] == 0 else factor_counts[factor]\n\
    \    end\n    factor_counts = sort(collect(factor_counts))\n    factor_counts\
    \ = reverse(factor_counts)\n    return factor_counts\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpwpkj9ghi.jl:8 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwpkj9ghi.jl:9\n\
    in expression starting at /tmp/tmpwpkj9ghi.jl:9\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdjc7s2zt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdjc7s2zt.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpwcskrzvi.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpwcskrzvi.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdjc7s2zt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdjc7s2zt.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = []\n    for factor in factorization\n        factors += [factor]\n    end\n\
    \    factors\nend\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_10gkpwb.jl:13\nin expression starting at\
    \ /tmp/tmp_10gkpwb.jl:13\n"
  stdout: ''
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpmp3msfmx.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpmp3msfmx.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmp3msfmx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmp3msfmx.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmp3msfmx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmp3msfmx.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmp3msfmx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmp3msfmx.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmp3msfmx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmp3msfmx.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmp3msfmx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmp3msfmx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmp3msfmx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmp3msfmx.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmp3msfmx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748275
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr8y4ote7.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr8y4ote7.jl:1\n\
    in expression starting at /tmp/tmpr8y4ote7.jl:1\n"
  stdout: ''
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4za_5cvo.jl:13\nin expression starting at\
    \ /tmp/tmp4za_5cvo.jl:13\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr8y4ote7.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr8y4ote7.jl:1\n\
    in expression starting at /tmp/tmpr8y4ote7.jl:1\n"
  stdout: ''
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    factors = factors.*ones(length(factors))\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpi0q_d2g8.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpi0q_d2g8.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpi0q_d2g8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0q_d2g8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0q_d2g8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi0q_d2g8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpi0q_d2g8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0q_d2g8.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0q_d2g8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi0q_d2g8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpi0q_d2g8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0q_d2g8.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0q_d2g8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi0q_d2g8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpi0q_d2g8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*ones(length(factors))\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpzfv1ici2.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpzfv1ici2.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpmp3msfmx.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpmp3msfmx.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmp3msfmx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmp3msfmx.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmp3msfmx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmp3msfmx.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmp3msfmx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmp3msfmx.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmp3msfmx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmp3msfmx.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmp3msfmx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmp3msfmx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmp3msfmx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmp3msfmx.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmp3msfmx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748275
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpld0gehfz.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpld0gehfz.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpld0gehfz.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld0gehfz.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpld0gehfz.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpld0gehfz.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpld0gehfz.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld0gehfz.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpld0gehfz.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpld0gehfz.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpld0gehfz.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld0gehfz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpld0gehfz.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpld0gehfz.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpld0gehfz.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4za_5cvo.jl:13\nin expression starting at\
    \ /tmp/tmp4za_5cvo.jl:13\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdjc7s2zt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdjc7s2zt.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9agvg6lb.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp9agvg6lb.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factor_counts\
    \ = Dict{Int64, Int64}()\n    for factor in factors\n        factor_counts[factor]\
    \ = factor_counts[factor] + 1\n    end\n    factor_counts = collect(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by = x -> x[1])\n    factor_counts =\
    \ reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpee1xebl1.jl:63\nin expression starting at\
    \ /tmp/tmpee1xebl1.jl:63\n"
  stdout: ''
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpwcskrzvi.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpwcskrzvi.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.4>\nfactorize(123)\n\
    </cell>\n<code language=julia-1.4>\nfactorize(123)\n</cell>\n<code language=julia-1.4>\n\
    factorize(123)\n</cell>\n<code language=julia-1.4>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.4>\nfactorize(123)\n</cell>\n<code language=julia-1.4>\n\
    factorize(123)\n</cell>\n<code language=julia-1.4>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.4>\nfactorize(123)\n</cell>\n<code language=julia-1.4>\n\
    factorize(123)\n</cell>\n<code language=julia-1.4>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.4>\nfactorize(123)\n</cell>\n<code language=julia-1.4>\n\
    factorize(123)\n</cell>\n<code language=julia-1.4>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.4>\nfactorize(123)\n</cell>\n<code language=julia-1.4>\n\
    factorize(123)\n</cell>\n<code language=julia-1.4>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.4>\nfactorize(123)\n</cell>\n<code language=julia-1.4>\n\
    factorize(123)\n</cell>\n<code language=julia-1.4>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.4>\nfactorize(123)\n</cell>\n<code language=julia-1.4>\n\
    factorize(123)\n</cell>\n<code language=julia-1.4>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.4>\nfactorize(123)\n</cell>\n<code language=julia-1.4>\n\
    factorize(123)\n</cell>\n<code language=julia-1.4>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.4>\nfactorize(123)\n</cell>\n<code language=julia-1.4>\n\
    factorize(123)\n</cell>\n<code language=julia-1.4>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.4>\nfactorize(123)\n</cell>\n<code language=julia-1.4>\n\
    factorize(123)\n</cell>\n<code language=julia-1.4>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp172x9_7l.jl:12\nin expression starting at\
    \ /tmp/tmp172x9_7l.jl:12\n"
  stdout: ''
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpwcskrzvi.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpwcskrzvi.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdjc7s2zt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdjc7s2zt.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpmp3msfmx.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpmp3msfmx.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmp3msfmx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmp3msfmx.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmp3msfmx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmp3msfmx.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmp3msfmx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmp3msfmx.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmp3msfmx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmp3msfmx.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmp3msfmx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmp3msfmx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmp3msfmx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmp3msfmx.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmp3msfmx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748275
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*ones(length(factors))\n\
    \    factors = factors./sum(factors)\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp0_h41hd_.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp0_h41hd_.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0_h41hd_.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_h41hd_.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_h41hd_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0_h41hd_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0_h41hd_.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_h41hd_.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_h41hd_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0_h41hd_.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0_h41hd_.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_h41hd_.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_h41hd_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0_h41hd_.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0_h41hd_.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748277
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdjc7s2zt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdjc7s2zt.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdjc7s2zt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdjc7s2zt.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*ones(length(factors))\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpzfv1ici2.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpzfv1ici2.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = []\n    for factor in factorization\n        push!(factors, factor)\n    end\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmplg34q3l8.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmplg34q3l8.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpwcskrzvi.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpwcskrzvi.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaphihaq6.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaphihaq6.jl:1\n\
    in expression starting at /tmp/tmpaphihaq6.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = []\n    for factor in factorization\n        if factor == 1\n            factors.push(factor)\n\
    \        else\n            factors.push(factor * factorization[factor])\n    \
    \    end\n    end\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    factorize(10^6)\n</cell>\n<code language=julia-1.5>\nfactorize(10^7)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(10^8)\n</cell>\n<code language=julia-1.5>\n\
    factorize(10^9)\n</cell>\n<code language=julia-1.5>\nfactorize(10^10)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(10^11)\n</cell>\n<code language=julia-1.5>\n\
    factorize(10^12)\n</cell>\n<code language=julia-1.5>\nfactorize(10^13)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(10^14)\n</cell>\n<code language=julia-1.5>\n\
    factorize(10^15)\n</cell>\n<code language=julia-1.5>\nfactorize(10^16)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(10^17)\n</cell>\n<code language=julia-1.5>\n\
    factorize(10^18)\n</cell>\n<code language=julia-1.5>\nfactorize(10^19)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(10^20)\n</cell>\n<code language=julia-1.5>\n\
    factorize(10^21)\n</cell>\n<code language=julia-1.5>\nfactorize(10^22)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(10^23)\n</cell>\n<code language=julia-1.5>\n\
    factorize(10^24)\n</cell>\n<code language=julia-1.5>\nfactorize(10^25)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(10^26)\n</cell>\n<code language=julia-1.5>\n\
    factorize(10^27)\n</cell>\n<code language=julia-1.5>\nfactorize(10^28)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(10^29)\n</cell>\n<code language=julia-1.5>\n\
    factorize(10^30)\n</cell>\n<code language=julia-1.5>\nfactorize(10^31)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(10^32)\n</cell>\n<code language=julia-1.5>\n\
    factorize(10^33)\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0513b2o3.jl:17\nin expression starting at\
    \ /tmp/tmp0513b2o3.jl:17\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factor_counts\
    \ = Dict{Int64, Int64}()\n    for factor in factors\n        factor_counts[factor]\
    \ = factor_counts[factor] + 1 if factor_counts[factor] == 0 else factor_counts[factor]\n\
    \    end\n    factor_counts = collect(factor_counts)\n    factor_counts = sort(factor_counts,\
    \ by=x->x)\n    factor_counts = reverse(factor_counts)\n    return factor_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp1w8avwkm.jl:8 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1w8avwkm.jl:9\n\
    in expression starting at /tmp/tmp1w8avwkm.jl:9\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpc_r6ozar.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpc_r6ozar.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    factors = factors.*ones(length(factors))\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpi0q_d2g8.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpi0q_d2g8.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpi0q_d2g8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0q_d2g8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0q_d2g8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi0q_d2g8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpi0q_d2g8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0q_d2g8.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0q_d2g8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi0q_d2g8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpi0q_d2g8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0q_d2g8.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0q_d2g8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi0q_d2g8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpi0q_d2g8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factor_counts\
    \ = Dict{Int64, Int64}()\n    for factor in factors\n        factor_counts[factor]\
    \ = factor_counts[factor] + 1 if factor_counts[factor] == 0 else factor_counts[factor]\n\
    \    end\n    factor_counts = collect(factor_counts)\n    factor_counts = sort(factor_counts,\
    \ by = x -> x[1])\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = \nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpsovaxzww.jl:8 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsovaxzww.jl:9\n\
    in expression starting at /tmp/tmpsovaxzww.jl:9\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*ones(length(factors))\n\
    \    factors = factors./sum(factors)\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp0_h41hd_.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp0_h41hd_.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0_h41hd_.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_h41hd_.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_h41hd_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0_h41hd_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0_h41hd_.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_h41hd_.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_h41hd_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0_h41hd_.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0_h41hd_.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_h41hd_.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_h41hd_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0_h41hd_.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0_h41hd_.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748277
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdjc7s2zt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdjc7s2zt.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpld0gehfz.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpld0gehfz.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpld0gehfz.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld0gehfz.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpld0gehfz.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpld0gehfz.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpld0gehfz.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld0gehfz.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpld0gehfz.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpld0gehfz.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpld0gehfz.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld0gehfz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpld0gehfz.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpld0gehfz.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpld0gehfz.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = factors.*ones(length(factors))\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpwo3sarrx.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpwo3sarrx.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwo3sarrx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwo3sarrx.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwo3sarrx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwo3sarrx.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwo3sarrx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwo3sarrx.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwo3sarrx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwo3sarrx.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwo3sarrx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwo3sarrx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwo3sarrx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwo3sarrx.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwo3sarrx.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748277
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9agvg6lb.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp9agvg6lb.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = []\n    for factor in factorization\n        factors = factors ++ [factor]\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp44cvmsij.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp44cvmsij.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp44cvmsij.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44cvmsij.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44cvmsij.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp44cvmsij.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp44cvmsij.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44cvmsij.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44cvmsij.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp44cvmsij.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp44cvmsij.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44cvmsij.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44cvmsij.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp44cvmsij.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp44cvmsij.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748277
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdjc7s2zt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdjc7s2zt.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n\
    </cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(123)\n</cell>\n<code language=julia-1.5>\n\
    factorize(123)\n</cell>\n<code language=julia-1.5>\nfactorize(123)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwky106t2.jl:12\nin expression starting at\
    \ /tmp/tmpwky106t2.jl:12\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = []\n    for factor in factorization\n        push!(factors, factor)\n    end\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmplg34q3l8.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmplg34q3l8.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = []\n    for factor in factorization\n        factors = factors ++ [factor]\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp44cvmsij.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp44cvmsij.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp44cvmsij.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44cvmsij.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44cvmsij.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp44cvmsij.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp44cvmsij.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44cvmsij.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44cvmsij.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp44cvmsij.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp44cvmsij.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44cvmsij.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44cvmsij.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp44cvmsij.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp44cvmsij.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748277
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaphihaq6.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaphihaq6.jl:1\n\
    in expression starting at /tmp/tmpaphihaq6.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = Vector{Int64}(factors)\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppoav5wey.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmppoav5wey.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppoav5wey.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoav5wey.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppoav5wey.jl:15\ntest set:\
    \ Error During Test at /tmp/tmppoav5wey.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppoav5wey.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoav5wey.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppoav5wey.jl:15\ntest set:\
    \ Error During Test at /tmp/tmppoav5wey.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppoav5wey.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoav5wey.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppoav5wey.jl:15\ntest set:\
    \ Error During Test at /tmp/tmppoav5wey.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppoav5wey.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpld0gehfz.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpld0gehfz.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpld0gehfz.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld0gehfz.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpld0gehfz.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpld0gehfz.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpld0gehfz.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld0gehfz.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpld0gehfz.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpld0gehfz.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpld0gehfz.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld0gehfz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpld0gehfz.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpld0gehfz.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpld0gehfz.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpc_r6ozar.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpc_r6ozar.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*ones(length(factors))\n\
    \    factors = factors./sum(factors)\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp0_h41hd_.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp0_h41hd_.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0_h41hd_.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_h41hd_.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_h41hd_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0_h41hd_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0_h41hd_.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_h41hd_.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_h41hd_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0_h41hd_.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0_h41hd_.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_h41hd_.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_h41hd_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0_h41hd_.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0_h41hd_.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748277
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = factorization[1]\n    factorization[1] = []\n    factorization[2] = factorization[2]\n\
    \    factorization[3] = factorization[3]\n    factorization[4] = factorization[4]\n\
    \    factorization[5] = factorization[5]\n    factorization[6] = factorization[6]\n\
    \    factorization[7] = factorization[7]\n    factorization[8] = factorization[8]\n\
    \    factorization[9] = factorization[9]\n    factorization[10] = factorization[10]\n\
    \    factorization[11] = factorization[11]\n    factorization[12] = factorization[12]\n\
    \    factorization[13] = factorization[13]\n    factorization[14] = factorization[14]\n\
    \    factorization[15] = factorization[15]\n    factorization[16] = factorization[16]\n\
    \    factorization[17] = factorization[17]\n    factorization[18] = factorization[18]\n\
    \    factorization[19] = factorization[19]\n    factorization[20] = factorization[20]\n\
    \    factorization[21] = factorization[21]\n    factorization[22] = factorization[22]\n\
    \    factorization[23] = factorization[23]\n    factorization[24] = factorization[24]\n\
    \    factorization[25] = factorization[25]\n    factorization[26] = factorization[26]\n\
    \    factorization[27] = factorization[27]\n    factorization[28] = factorization[28]\n\
    \    factorization[29] = factorization[29]\n    factorization[30] = factorization[30]\n\
    \    factorization[31] = factorization[31]\n    factorization[32] = factorization[32]\n\
    \    factorization[33] = factorization[33]\n    factorization[34] = factorization[34]\n\
    \    factorization[35] = factorization[35]\n    factorization[36] = factorization[36]\n\
    \    factorization[37] = factorization[37]\n    factorization[38] = factorization[38]\n\
    \    factorization[39] = factorization[39]\n    factorization[40] = factorization[40]\n\
    \    factorization[41] = factorization[41]\n    factorization[42] = factorization[42]\n\
    \    factorization[43] = factorization[43]\n    factorization[44] = factorization[44]\n\
    \    factorization[45] = factorization[45]\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpewvc_gqb.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpewvc_gqb.jl:1\n\
    in expression starting at /tmp/tmpewvc_gqb.jl:1\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factor_counts\
    \ = Dict{Int64, Int64}()\n    for factor in factors\n        factor_counts[factor]\
    \ = factor_counts[factor] + 1 if factor_counts[factor] == nil else factor_counts[factor]\n\
    \    end\n    factor_counts = sort(collect(factor_counts)) \n    factor_counts\
    \ = reverse(factor_counts)\n    return factor_counts\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp3jcikv1l.jl:8 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3jcikv1l.jl:9\n\
    in expression starting at /tmp/tmp3jcikv1l.jl:9\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    factorization\
    \ = unique(factorization)\n    factorization = sort(factorization)\n    factorization\
    \ = reverse(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = reverse(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr8y4ote7.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr8y4ote7.jl:1\n\
    in expression starting at /tmp/tmpr8y4ote7.jl:1\n"
  stdout: ''
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpwcskrzvi.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpwcskrzvi.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9agvg6lb.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp9agvg6lb.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9agvg6lb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9agvg6lb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9agvg6lb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9agvg6lb.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*ones(length(factors))\n\
    \    factors = factors.*ones(length(factors))\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnxy9_otv.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpnxy9_otv.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnxy9_otv.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnxy9_otv.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnxy9_otv.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpnxy9_otv.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnxy9_otv.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnxy9_otv.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnxy9_otv.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpnxy9_otv.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnxy9_otv.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnxy9_otv.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnxy9_otv.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpnxy9_otv.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnxy9_otv.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748277
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    factors = factors.*ones(length(factors))\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpi0q_d2g8.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpi0q_d2g8.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpi0q_d2g8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0q_d2g8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0q_d2g8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi0q_d2g8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpi0q_d2g8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0q_d2g8.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0q_d2g8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi0q_d2g8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpi0q_d2g8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0q_d2g8.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0q_d2g8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi0q_d2g8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpi0q_d2g8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = []\n    for factor in factorization\n        push!(factors, factor)\n    end\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmplg34q3l8.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmplg34q3l8.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpzuei1lgo.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpzuei1lgo.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzuei1lgo.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzuei1lgo.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzuei1lgo.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzuei1lgo.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzuei1lgo.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzuei1lgo.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzuei1lgo.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzuei1lgo.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzuei1lgo.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzuei1lgo.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzuei1lgo.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzuei1lgo.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzuei1lgo.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748277
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = Vector{Int64}()\n    for factor in factors\n  \
    \      push!(factors, factor)\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpv2sasksd.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpv2sasksd.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpv2sasksd.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv2sasksd.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv2sasksd.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpv2sasksd.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpv2sasksd.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv2sasksd.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv2sasksd.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpv2sasksd.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpv2sasksd.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv2sasksd.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv2sasksd.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpv2sasksd.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpv2sasksd.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748277
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdjc7s2zt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdjc7s2zt.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpc_r6ozar.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpc_r6ozar.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_r6ozar.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_r6ozar.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc_r6ozar.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc_r6ozar.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*(1:length(factors))\n\
    \    factors = sort(factors)\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp0pgm9b88.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp0pgm9b88.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0pgm9b88.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0pgm9b88.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0pgm9b88.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0pgm9b88.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0pgm9b88.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0pgm9b88.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0pgm9b88.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0pgm9b88.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0pgm9b88.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0pgm9b88.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0pgm9b88.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0pgm9b88.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0pgm9b88.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748277
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*ones(length(factors))\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpzfv1ici2.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpzfv1ici2.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = []\n    for factor in factorization\n        push!(factors, factor)\n    end\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmplg34q3l8.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmplg34q3l8.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplg34q3l8.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg34q3l8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplg34q3l8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplg34q3l8.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = Vector{Int64}(factors)\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppoav5wey.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmppoav5wey.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppoav5wey.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoav5wey.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppoav5wey.jl:15\ntest set:\
    \ Error During Test at /tmp/tmppoav5wey.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppoav5wey.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoav5wey.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppoav5wey.jl:15\ntest set:\
    \ Error During Test at /tmp/tmppoav5wey.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppoav5wey.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppoav5wey.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppoav5wey.jl:15\ntest set:\
    \ Error During Test at /tmp/tmppoav5wey.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppoav5wey.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybo_0ovl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybo_0ovl.jl:1\n\
    in expression starting at /tmp/tmpybo_0ovl.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factor_counts\
    \ = Dict{Int64, Int64}()\n    for factor in factors\n        factor_counts[factor]\
    \ = factor_counts[factor] + 1 if factor_counts[factor] > 0 else 1\n    end\n \
    \   factor_counts = sort(collect(factor_counts))\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpr0w5rmq2.jl:8 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr0w5rmq2.jl:9\n\
    in expression starting at /tmp/tmpr0w5rmq2.jl:9\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factors(n)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n    factorization\
    \ = sort(factorization)\n    factorization = unique(factorization)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmufm_4c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmufm_4c4.jl:1\n\
    in expression starting at /tmp/tmpmufm_4c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factorization = factor(n)\n    factors\
    \ = []\n    for factor in factorization\n        if factor != 1\n            push!(factors,\
    \ factor)\n        end\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9fun5zew.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp9fun5zew.jl:20\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9fun5zew.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9fun5zew.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9fun5zew.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9fun5zew.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9fun5zew.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9fun5zew.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9fun5zew.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9fun5zew.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9fun5zew.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9fun5zew.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9fun5zew.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9fun5zew.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9fun5zew.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748277
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpwcskrzvi.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpwcskrzvi.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcskrzvi.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcskrzvi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwcskrzvi.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwcskrzvi.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = unique(factors)\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>\nfactorize(125)\n\
    </cell>\n<code language=julia-1.5>\nfactorize(125)\n</cell>\n<code language=julia-1.5>\n\
    factorize(125)\n</cell>\n<code language=julia-1.5>\nfactorize(125)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(125)\n</cell>\n<code language=julia-1.5>\n\
    factorize(125)\n</cell>\n<code language=julia-1.5>\nfactorize(125)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(125)\n</cell>\n<code language=julia-1.5>\n\
    factorize(125)\n</cell>\n<code language=julia-1.5>\nfactorize(125)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(125)\n</cell>\n<code language=julia-1.5>\n\
    factorize(125)\n</cell>\n<code language=julia-1.5>\nfactorize(125)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(125)\n</cell>\n<code language=julia-1.5>\n\
    factorize(125)\n</cell>\n<code language=julia-1.5>\nfactorize(125)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(125)\n</cell>\n<code language=julia-1.5>\n\
    factorize(125)\n</cell>\n<code language=julia-1.5>\nfactorize(125)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(125)\n</cell>\n<code language=julia-1.5>\n\
    factorize(125)\n</cell>\n<code language=julia-1.5>\nfactorize(125)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(125)\n</cell>\n<code language=julia-1.5>\n\
    factorize(125)\n</cell>\n<code language=julia-1.5>\nfactorize(125)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(125)\n</cell>\n<code language=julia-1.5>\n\
    factorize(125)\n</cell>\n<code language=julia-1.5>\nfactorize(125)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(125)\n</cell>\n<code language=julia-1.5>\n\
    factorize(125)\n</cell>\n<code language=julia-1.5>\nfactorize(125)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(12\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpem41rhe3.jl:12\nin expression starting at\
    \ /tmp/tmpem41rhe3.jl:12\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors.*ones(length(factors))\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpzfv1ici2.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpzfv1ici2.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfv1ici2.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfv1ici2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzfv1ici2.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpzfv1ici2.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdjc7s2zt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdjc7s2zt.jl:16\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjc7s2zt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjc7s2zt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdjc7s2zt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdjc7s2zt.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd0avxp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd0avxp.jl:17\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjd0avxp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjd0avxp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnjd0avxp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnjd0avxp.jl:6\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  timestamp: 1659748274
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = factor(n)\n    factors =\
    \ sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9t256c4.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9t256c4.jl:1\n\
    in expression starting at /tmp/tmpd9t256c4.jl:1\n"
  stdout: ''
  timestamp: 1659748272
