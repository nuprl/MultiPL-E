name: HumanEval_44_change_base
language: jl
prompt: "\"\"\"Change numerical base of input number x to base.\n    return string\
  \ representation after the conversion.\n    base numbers are less than 10.\n   \
  \             \"\"\"\nfunction change_base(x::Int64, base::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
  \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
  \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
  \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
  \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\"\
  )\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7,\
  \ 8) == \"7\")\nend\n"
completions: ["    if base == 10 \n        then return toString(x)\n        else return\
    \ change_base(toInt(x), base-1)\nend\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1),\
    \ 10)\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1), 2)\n</cell>\n\
    <code language=julia-1.0>\nchange_base(toInt(1), 3)\n</cell>\n<code language=julia-1.0>\n\
    change_base(toInt(1), 4)\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1),\
    \ 5)\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1), 6)\n</cell>\n\
    <code language=julia-1.0>\nchange_base(toInt(1), 7)\n</cell>\n<code language=julia-1.0>\n\
    change_base(toInt(1), 8)\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1),\
    \ 9)\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1), 10)\n</cell>\n\
    <code language=julia-1.0>\nchange_base(toInt(1), 11)\n</cell>\n<code language=julia-1.0>\n\
    change_base(toInt(1), 12)\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1),\
    \ 13)\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1), 14)\n</cell>\n\
    <code language=julia-1.0>\nchange_base(toInt(1), 15)\n</cell>\n<code language=julia-1.0>\n\
    change_base(toInt(1), 16)\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1),\
    \ 17)\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1), 18)\n</cell>\n\
    <code language=julia-1.0>\nchange_base(toInt(1), 19)\n</cell>\n<code language=julia-1.0>\n\
    change_base(toInt(1), 20)\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1),\
    \ 21)\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1), 22)\n</cell>\n\
    <code language=julia-1.0>\nchange_base(toInt(1), 23)\n</cell>\n<code language=julia-1.0>\n\
    change_base(toInt(1), 24)\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1),\
    \ 25)\n</cell>\n<code language=julia-1.0>\nchange_base(toInt(1), 26)\n</cell>\n\
    <code language=julia-1.0>\nchange_base(toInt(1), 27)\n</cell>\n<code language=julia-1.0>\n\
    change_base(toInt(1), 28)\n</cell>\n<code language=julia-1.0", "    if base <\
    \ 10 \n        error(\"base must be greater than or equal to 10\")\n    elseif\
    \ base == 10 \n        return toString(x)\n    elseif base == 2 \n        return\
    \ toString(2*x)\n    elseif base == 8 \n        return toString(8*x)\n    elseif\
    \ base == 16 \n        return toString(16*x)\n    elseif base == 10 \n       \
    \ return toString(10*x)\n    elseif base == 2 \n        return toString(2*x)\n\
    \    elseif base == 8 \n        return toString(8*x)\n    elseif base == 16 \n\
    \        return toString(16*x)\n    elseif base == 10 \n        return toString(10*x)\n\
    \    elseif base == 2 \n        return toString(2*x)\n    elseif base == 8 \n\
    \        return toString(8*x)\n    elseif base == 16 \n        return toString(16*x)\n\
    \    elseif base == 10 \n        return toString(10*x)\n    elseif base == 2 \n\
    \        return toString(2*x)\n    elseif base == 8 \n        return toString(8*x)\n\
    \    elseif base == 16 \n        return toString(16*x)\n    elseif base == 10\
    \ \n        return toString(10*x)\n    elseif base == 2 \n        return toString(2*x)\n\
    \    elseif base == 8 \n        return toString(8*x)\n    elseif base == 16 \n\
    \        return toString(16*x)\n    elseif base == 10 \n        return toString(10*x)\n\
    \    elseif base == 2 \n        return toString(2*x)\n    elseif base == 8 \n\
    \        return toString(8*x)\n    elseif base == 16 \n        return toString(16*x)\n\
    \    elseif base == 10 \n        return toString(10*x)\n    elseif base == 2 \n\
    \        return toString(2*x)\n    elseif base == 8 \n        return toString(8*x)\n\
    \    elseif base == 16 \n        return toString(16*x)\n    elseif base == 10\
    \ \n        return toString(10*x)\n    elseif base == 2 \n        return toString(2*x)\n\
    \    elseif base == 8 \n        return toString(8*x)\n    elseif base == 16 \n\
    \        return toString(16*x)\n    elseif base == 10 \n        return toString(10*x)\n\
    \    elseif base == 2 \n        return toString(2*x)\n    elseif base == 8 \n\
    \        return toString(8*x)\n    elseif base == 16 \n        return toString(16*x)\n\
    \    elseif base == 10 \n        return toString(10*x)\n    elseif base == 2 \n\
    \        return toString(2*x)\n    elseif base == 8 \n        return toString(8*x)\n\
    \    elseif base == 16 \n        return toString(16*x)\n    elseif base == 10\
    \ \n        return toString(10*x)\n    elseif base == 2 \n        return toString(2*x)\n\
    \    elseif base == 8 \n        return toString(8*x)\n    elseif base == 16 ",
  "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"Base must be between 2 and 36\"))\n\
    \    end\n    if base == 10\n        return string(x)\n    end\n    if base ==\
    \ 16\n        return string(x, base = 16)\n    end\n    if base == 8\n       \
    \ return string(x, base = 8)\n    end\n    if base == 2\n        return string(x,\
    \ base = 2)\n    end\n    if base == 36\n        return string(x, base = 10)\n\
    \    end\n    if base == 64\n        return string(x, base = 16)\n    end\n  \
    \  if base == 128\n        return string(x, base = 8)\n    end\n    if base ==\
    \ 256\n        return string(x, base = 2)\n    end\n    if base == 512\n     \
    \   return string(x, base = 16)\n    end\n    if base == 1024\n        return\
    \ string(x, base = 8)\n    end\n    if base == 2048\n        return string(x,\
    \ base = 2)\n    end\n    if base == 4096\n        return string(x, base = 16)\n\
    \    end\n    if base == 8192\n        return string(x, base = 8)\n    end\n \
    \   if base == 16384\n        return string(x, base = 2)\n    end\n    if base\
    \ == 32768\n        return string(x, base = 16)\n    end\n    if base == 65536\n\
    \        return string(x, base = 8)\n    end\n    if base == 131072\n        return\
    \ string(x, base = 2)\n    end\n    if base == 262144\n        return string(x,\
    \ base = 16)\n    end\n    if base == 524288\n        return string(x, base =\
    \ 8)\n    end\n    if base == 1048576\n        return string(x, base = 2)\n  \
    \  end\n    if base == 2097152\n        return string(x, base = 16)\n    end\n\
    \    if base == 4194304\n        return string(x, base = 8)\n    end\n    if base\
    \ == 8388608\n        return string(x, base = 2)\n    end\n    if base == 16777216\n\
    \        return string(x, base = 16)\n    end\n    if base == 33554432\n     \
    \   return string(x, base = 8)\n    end\n    if base == 67108864\n        return\
    \ string(x, base = 2)\n    end\n    if base == 134217728\n        return string(x,\
    \ base = 16)\n    end\n    if base == 268435456\n        return string(x, base\
    \ = 8)\n    end\n    if base == 536870912\n        return string(x, base = 2)\n\
    \    end\n    if base == 1073741824\n        return string(x, base = 16)\n   \
    \ end\n    if base == -2147483648\n        return string(x, base = 8)\n    end\n\
    \    if base == -2147483648\n        return string(x, base = 2)\n    end\n   \
    \ if base == -2147483648\n        return string(x, base = 16)\n    end\n    if\
    \ base == -2147483648\n        return string(x, base = 8)\n    end", "    if base\
    \ == 10 \n        then return String(x)\n        else return change_base(Int(x\
    \ / base), base) * base + String(x%base)\n    end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,string |>\n<code>", "    if base == 10 \n        then return\
    \ toString(x)\n        else return change_base(toInt(x), base-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a number from one base to another.", "   \
    \ if base == 10 \n        then return to_string(x)\n        else return change_base(x\
    \ / base, base) * base + change_base(x % base, base)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nchange_base(123, 2)\n</cell>\n<code language=julia-1.4>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.4>\nchange_base(123, 16)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(123, 8)\n</cell>\n<code language=julia-1.4>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.4>\nchange_base(123, 16)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(123, 8)\n</cell>\n<code language=julia-1.4>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.4>\nchange_base(123, 16)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(123, 8)\n</cell>\n<code language=julia-1.4>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.4>\nchange_base(123, 16)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(123, 8)\n</cell>\n<code language=julia-1.4>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.4>\nchange_base(123, 16)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(123, 8)\n</cell>\n<code language=julia-1.4>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.4>\nchange_base(123, 16)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(123, 8)\n</cell>\n<code language=julia-1.4>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.4>\nchange_base(123, 16)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(123, 8)\n</cell>\n<code language=julia-1.4>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.4>\nchange_base(123, 16)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(123, 8)\n</cell>\n<code language=julia-1.4>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.4>\nchange_base(123, 16)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(123, 8)\n</cell>\n<code language=julia-1.4>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.4>\nchange_base(123, 16)\n",
  "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base < 2 ||\
    \ base > 36\n        error(\"Base must be between 2 and 36\")\n    end\n    digits\
    \ = digits(x)\n    digits = digits[digits.length - digits[digits.length - 1] -\
    \ 1]\n    digits = digits[digits.length - digits[digits.length - 2] + 2:end]\n\
    \    digits = digits[digits.length - digits[digits.length - 3] + 2:end]\n    digits\
    \ = digits[digits.length - digits[digits.length - 4] + 2:end]\n    digits = digits[digits.length\
    \ - digits[digits.length - 5] + 2:end]\n    digits = digits[digits.length - digits[digits.length\
    \ - 6] + 2:end]\n    digits = digits[digits.length - digits[digits.length - 7]\
    \ + 2:end]\n    digits = digits[digits.length - digits[digits.length - 8] + 2:end]\n\
    \    digits = digits[digits.length - digits[digits.length - 9] + 2:end]\n    digits\
    \ = digits[digits.length - digits[digits.length - 10] + 2:end]\n    digits = digits[digits.length\
    \ - digits[digits.length - 11] + 2:end]\n    digits = digits[digits.length - digits[digits.length\
    \ - 12] + 2:end]\n    digits = digits[digits.length - digits[digits.length - 13]\
    \ + 2:end]\n    digits = digits[digits.length - digits[digits.length - 14] + 2:end]\n\
    \    digits = digits[digits.length - digits[digits.length - 15] + 2:end]\n   \
    \ digits = digits[digits.length - digits[digits.length - 16] + 2:end]\n    digits\
    \ = digits[digits.length - digits[digits.length - 17] + 2:end]\n    digits = digits[digits.length\
    \ - digits[digits.length - 18] + 2:end]\n    digits = digits[digits.length - digits[digits.length\
    \ - 19] + 2:end]\n    digits = digits[digits.length - digits[digits.length - 20]\
    \ + 2:end]\n    digits = digits[digits.length - digits[digits.length - 21] + 2:end]\n\
    \    digits = digits[digits.length - digits[digits.length - 22] + 2:end]\n   \
    \ digits = digits[digits.length - digits[digits.length - 23] + 2:end]\n    digits\
    \ = digits[digits.length - digits[digits.length - 24] + 2:end]\n    digits = digits[digits.length\
    \ - digits[digits.length - 25] + 2:end]\n    digits = digits[digits.length - digits[digits.length\
    \ - 26] + 2:end]\n    digits = digits[digits.length - digits[digits.length - 27]\
    \ + 2:end]\n    ", "    if base == 10 \n        then return to_string(x)\n   \
    \     else return change_base(x / base, base) + string(base) + change_base(x %\
    \ base, base)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `change_base(-11, 2)` returns `\"-110\"` instead\
    \ of `\"-11\"`.\n<|/ c |>\n<| c |>\nI fixed the negative number issue. Thanks!\n\
    <|/ c |>\n<| a tags=julia,string |>\nI wrote a package for this:\nhttps://github.com/jrm/julia-string\n\
    <code>\njulia> using JuliaString", "    if base == 10 \n        return to_string(x)\n\
    \    else \n        return change_base(x / base, base) + string(base) + change_base(x\
    \ % base, base)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string |>\n\
    I wrote a package for this: https://github.com/jrm/JuliaStringTools\n<code>\n\
    using JuliaStringTools", "    if base < 10 \n        error(\"Base must be less\
    \ than 10\")\n    else if base == 10 \n        return toString(x)\n    else \n\
    \        return toString(change_base(floor(x/base), base) + x % base)\nend", " \
    \   if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    end\n    \n    if base == 10\n        return string(x)\n \
    \   end\n    \n    if base == 16\n        return string(x, base = 16)\n    end\n\
    \    \n    if base == 8\n        return string(x, base = 8)\n    end\n    \n \
    \   if base == 2\n        return string(x, base = 2)\n    end\n    \n    if base\
    \ == 1\n        return string(x, base = 1)\n    end\n    \n    if base == 8\n\
    \        return string(x, base = 8)\n    end\n    \n    if base == 16\n      \
    \  return string(x, base = 16)\n    end\n    \n    if base == 10\n        return\
    \ string(x, base = 10)\n    end\n    \n    if base == 16\n        return string(x,\
    \ base = 16)\n    end\n    \n    if base == 10\n        return string(x, base\
    \ = 10)\n    end\n    \n    if base == 16\n        return string(x, base = 16)\n\
    \    end\n    \n    if base == 10\n        return string(x, base = 10)\n    end\n\
    \    \n    if base == 16\n        return string(x, base = 16)\n    end\n    \n\
    \    if base == 10\n        return string(x, base = 10)\n    end\n    \n    if\
    \ base == 16\n        return string(x, base = 16)\n    end\n    \n    if base\
    \ == 10\n        return string(x, base = 10)\n    end\n    \n    if base == 16\n\
    \        return string(x, base = 16)\n    end\n    \n    if base == 10\n     \
    \   return string(x, base = 10)\n    end\n    \n    if base == 16\n        return\
    \ string(x, base = 16)\n    end\n    \n    if base == 10\n        return string(x,\
    \ base = 10)\n    end\n    \n    if base == 16\n        return string(x, base\
    \ = 16)\n    end\n    \n    if base == 10\n        return string(x, base = 10)\n\
    \    end\n    \n    if base == 16\n        return string(x, base = 16)\n    end\n\
    \    \n    if base == 10\n        return string(x, base = 10)\n    end\n    \n\
    \    if base == 16\n        return string(x, base = 16)\n    end\n    \n    if\
    \ base == 10\n        return string(x, base = 10)\n    end\n    \n    if base\
    \ == 16\n        return string(x, base = 16)\n    end\n    \n    if base == 10\n\
    \        return string(x, base = 10)\n    end\n    \n    if base == 16\n     \
    \   return string(x, base = 16)\n    end\n    \n    if base == 10\n        return\
    \ string(x, base = 10)\n    end\n    \n    if base == 16\n        return string(x,\
    \ base = 16)\n    end\n    \n    if base == 10\n        return string(x, base\
    \ = 10)\n    end\n    \n    if base == 16\n        return string(x, base = ",
  "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base < 10 \n\
    \        error(\"base must be greater than or equal to 10\")\n    else if base\
    \ == 10 \n        return toString(x)\n    else \n        return toString(change_base(x,\
    \ base-1))\nend\n</cell>\n<code language=julia-1.4>\nchange_base(1234, 2)\n</cell>\n\
    <code language=julia-1.4>\nchange_base(1234, 3)\n</cell>\n<code language=julia-1.4>\n\
    change_base(1234, 4)\n</cell>\n<code language=julia-1.4>\nchange_base(1234, 5)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(1234, 6)\n</cell>\n<code language=julia-1.4>\n\
    change_base(1234, 7)\n</cell>\n<code language=julia-1.4>\nchange_base(1234, 8)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(1234, 9)\n</cell>\n<code language=julia-1.4>\n\
    change_base(1234, 10)\n</cell>\n<code language=julia-1.4>\nchange_base(1234, 11)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(1234, 12)\n</cell>\n<code language=julia-1.4>\n\
    change_base(1234, 13)\n</cell>\n<code language=julia-1.4>\nchange_base(1234, 14)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(1234, 15)\n</cell>\n<code language=julia-1.4>\n\
    change_base(1234, 16)\n</cell>\n<code language=julia-1.4>\nchange_base(1234, 17)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(1234, 18)\n</cell>\n<code language=julia-1.4>\n\
    change_base(1234, 19)\n</cell>\n<code language=julia-1.4>\nchange_base(1234, 20)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(1234, 21)\n</cell>\n<code language=julia-1.4>\n\
    change_base(1234, 22)\n</cell>\n<code language=julia-1.4>\nchange_base(1234, 23)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(1234, 24)\n</cell>\n<code language=julia-1.4>\n\
    change_base(1234, 25)\n</cell>\n<code language=julia-1.4>\nchange_base(1234, 26)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(1234, 27)\n</cell>\n<code language=julia-1.4>\n\
    change_base(1234, 28)\n</cell>\n<code language=julia-1.4>\nchange_base(1234, 29)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(1234, 30)\n</cell>", "    if base\
    \ == 10 \n        then return toString(x)\n        else return change_base(x /\
    \ base, base) + toString(x%base)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 10)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from one base to another. \nFor example, change_base(123, 16) should\
    \ return \"1110\".", "    if base == 10 \n        digits = digits(x)\n       \
    \ digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digit", " \
    \   if base == 10 \n        digits = digits(x)\n        return digits[1] + digits[2]\
    \ + digits[3] + digits[4] + digits[5] + digits[6] + digits[7] + digits[8] + digits[9]\
    \ + digits[10]\n    else \n        digits = digits(x)\n        digits_base10 =\
    \ digits[10]\n        digits_base2 = digits[2:10]\n        digits_base10 = digits_base10\
    \ - digits_base2\n        digits_base10 = digits_base10 * base\n        digits_base10\
    \ = digits_base10 + digits_base2\n        digits_base10 = digits_base10 / base\n\
    \        digits_base10 = digits_base10 % base\n        digits_base10 = digits_base10\
    \ + digits_base2\n        digits_base10 = digits_base10 / base\n        digits_base10\
    \ = digits_base10 % base\n        digits_base10 = digits_base10 + digits_base2\n\
    \        digits_base10 = digits_base10 / base\n        digits_base10 = digits_base10\
    \ % base\n        digits_base10 = digits_base10 + digits_base2\n        digits_base10\
    \ = digits_base10 / base\n        digits_base10 = digits_base10 % base\n     \
    \   digits_base10 = digits_base10 + digits_base2\n        digits_base10 = digits_base10\
    \ / base\n        digits_base10 = digits_base10 % base\n        digits_base10\
    \ = digits_base10 + digits_base2\n        digits_base10 = digits_base10 / base\n\
    \        digits_base10 = digits_base10 % base\n        digits_base10 = digits_base10\
    \ + digits_base2\n        digits_base10 = digits_base10 / base\n        digits_base10\
    \ = digits_base10 % base\n        digits_base10 = digits_base10 + digits_base2\n\
    \        digits_base10 = digits_base10 / base\n        digits_base10 = digits_base10\
    \ % base\n        digits_base10 = digits_base10 + digits_base2\n        digits_base10\
    \ = digits_base10 / base\n        digits_base10 = digits_base10 % base\n     \
    \   digits_base10 = digits_base10 + digits_base2\n        digits_base10 = digits_base10\
    \ / base\n        digits_base10 = digits_base10 % base\n        digits_base10\
    \ = digits_base10 + digits_base2\n        ", "    if base == 10 \n        return\
    \ toString(x)\n    elseif base == 2 \n        return toString(x*10)\n    elseif\
    \ base == 8 \n        return toString(x*100)\n    elseif base == 16 \n       \
    \ return toString(x*1000)\n    elseif base == 2 || base == 8 || base == 16\n \
    \       return toString(x*10000)\n    elseif base == 4 || base == 8 || base ==\
    \ 16\n        return toString(x*100000)\n    elseif base == 16\n        return\
    \ toString(x*1000000)\n    elseif base == 32\n        return toString(x*10000000)\n\
    \    elseif base == 64\n        return toString(x*100000000)\n    elseif base\
    \ == 128\n        return toString(x*1000000000)\n    elseif base == 256\n    \
    \    return toString(x*10000000000)\n    elseif base == 512\n        return toString(x*100000000000)\n\
    \    elseif base == 1024\n        return toString(x*1000000000000)\n    elseif\
    \ base == 2048\n        return toString(x*10000000000000)\n    elseif base ==\
    \ 4096\n        return toString(x*100000000000000)\n    elseif base == 8192\n\
    \        return toString(x*1000000000000000)\n    elseif base == 16384\n     \
    \   return toString(x*10000000000000000)\n    elseif base == 32768\n        return\
    \ toString(x*100000000000000000)\n    elseif base == 65536\n        return toString(x*1000000000000000000)\n\
    \    elseif base == 131072\n        return toString(x*10000000000000000000)\n\
    \    elseif base == 262144\n        return toString(x*100000000000000000000)\n\
    \    elseif base == 524288\n        return toString(x*1000000000000000000000)\n\
    \    elseif base == 1048576\n        return toString(x*10000000000000000000000)\n\
    \    elseif base == 2097152\n        return toString(x*100000000000000000000000)\n\
    \    elseif base == 4194304\n        return toString(x*1000000000000000000000000)\n\
    \    elseif base == 8388608\n        return toString(x*10000000000000000000000000)\n\
    \    elseif base == 16777216\n        return toString(x*100000000000000000000000000)\n\
    \    elseif base == 33554432\n        return toString(x*1000000000000000000000000000)\n\
    \    elseif base == 67108864\n        return toString(x*10000000000000000000000000000)\n\
    \    elseif base == 134217728\n        return toString(x*100000000000000000000000000000)\n\
    \    elseif base == 268435456\n        return toString(x*1000000000000000000000000000000)\n\
    \    elseif base == 536870912\n        return toString(x*10000000000000000000000000000000)\n\
    \    elseif base == 1073741824\n        return toString(x", "    if base == 10\
    \ \n        digits = digits(x)\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digit", "    if base == 10 \n        then\
    \ return toString(x)\n    else \n        digits = toString(x)\n        digits\
    \ = digits[2:end]\n        digits = digits[digits.length - base:end]\n       \
    \ digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[digits.length - base:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[digits.length - base:end]\n       \
    \ digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[digits.length - base:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[digits.length - base:end]\n       \
    \ digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[digits.length - base:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[digits.length - base:end]\n       \
    \ digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[digits.length - base:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[digits.length - base:end]\n       \
    \ digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[digits.length - base:end]\n        digits\
    \ = digits[2:end]\n        digits = digit", "    if base == 10 \n        then\
    \ return toString(x)\n    else \n        digits = digits(x)\n        base = digits[end]\n\
    \        digits = digits[2:end]\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:",
  "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base == 10 \n\
    \        digits = digits(x)\n        digits = digits[2:end]\n        return join(digits,\
    \ \"\")\n    else\n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(123, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 256)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 65536)\n</cell>\n<code language=julia-1.5>\nchange_base(123,\
    \ 16777216)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 1048576)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(123, 1073741824)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 2147483648)\n</cell>\n<code language=julia-1.5>\nchange_base(123,\
    \ 9223372036854775808)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 18446744073709551616)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 1000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 100000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 1000000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10000000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 1000000000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 1000000000000000000000000000000000001)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 100000000000000000000000000010)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 100000000000000000000000000011)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 100000000000000000000000000012)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 100000000000000000000000000013)\n\
    </cell>\n<code language=julia-", "    if base == 10 \n        return toString(x)\n\
    \    elseif base == 2 \n        return toString(toInt(x))\n    elseif base ==\
    \ 8 \n        return toString(toInt(x)*2)\n    elseif base == 16 \n        return\
    \ toString(toInt(x)*4)\n    elseif base == 10 \n        return toString(toInt(x)*8)\n\
    \    elseif base == 16 \n        return toString(toInt(x)*16)\n    elseif base\
    \ == 2 \n        return toString(toInt(x)*10)\n    elseif base == 8 \n       \
    \ return toString(toInt(x)*100)\n    elseif base == 10 \n        return toString(toInt(x)*1000)\n\
    \    elseif base == 16 \n        return toString(toInt(x)*10000)\n    elseif base\
    \ == 2 \n        return toString(toInt(x)*100000)\n    elseif base == 8 \n   \
    \     return toString(toInt(x)*1000000)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*10000000)\n    elseif base == 16 \n        return toString(toInt(x)*100000000)\n\
    \    elseif base == 2 \n        return toString(toInt(x)*1000000000)\n    elseif\
    \ base == 8 \n        return toString(toInt(x)*10000000000)\n    elseif base ==\
    \ 10 \n        return toString(toInt(x)*100000000000)\n    elseif base == 16 \n\
    \        return toString(toInt(x)*1000000000000)\n    elseif base == 2 \n    \
    \    return toString(toInt(x)*10000000000000)\n    elseif base == 8 \n       \
    \ return toString(toInt(x)*10000000000000)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*1000000000000000)\n    elseif base == 16 \n        return\
    \ toString(toInt(x)*10000000000000000)\n    elseif base == 2 \n        return\
    \ toString(toInt(x)*100000000000000000)\n    elseif base == 8 \n        return\
    \ toString(toInt(x)*1000000000000000000)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*10000000000000000000)\n    elseif base == 16 \n        return\
    \ toString(toInt(x)*100000000000000000000)\n    elseif base == 2 \n        return\
    \ toString(toInt(x)*1000000000000000000000)\n    elseif base == 8 \n        return\
    \ toString(toInt(x)*1000000000000000000000)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*10000000000000000000000)\n    elseif base == 16 \n       \
    \ return toString(toInt(x)*1000000000000000000000000)\n    elseif base == 2 \n\
    \        return toString(toInt(x)*10000000000000000000000000)\n    elseif base\
    \ == 8 \n        return toString(toInt(x)*100000000000000000000000000)\n    elseif\
    \ base == 10 \n        return toString(toInt(x)*1000000000000000000000000000)\n\
    \    elseif ", "    if base < 2 || base > 36\n        error(\"Base must be between\
    \ 2 and 36\")\n    end\n    \n    if base == 10\n        return string(x)\n  \
    \  end\n    \n    if base == 16\n        return string(x, base = 16)\n    end\n\
    \    \n    if base == 8\n        return string(x, base = 8)\n    end\n    \n \
    \   if base == 2\n        return string(x, base = 2)\n    end\n    \n    if base\
    \ == 1\n        return string(x, base = 1)\n    end\n    \n    if base == 16\n\
    \        return string(x, base = 16)\n    end\n    \n    if base == 8\n      \
    \  return string(x, base = 8)\n    end\n    \n    if base == 2\n        return\
    \ string(x, base = 2)\n    end\n    \n    if base == 1\n        return string(x,\
    \ base = 1)\n    end\n    \n    if base == 16\n        return string(x, base =\
    \ 16)\n    end\n    \n    if base == 8\n        return string(x, base = 8)\n \
    \   end\n    \n    if base == 2\n        return string(x, base = 2)\n    end\n\
    \    \n    if base == 1\n        return string(x, base = 1)\n    end\n    \n \
    \   if base == 16\n        return string(x, base = 16)\n    end\n    \n    if\
    \ base == 8\n        return string(x, base = 8)\n    end\n    \n    if base ==\
    \ 2\n        return string(x, base = 2)\n    end\n    \n    if base == 1\n   \
    \     return string(x, base = 1)\n    end\n    \n    if base == 16\n        return\
    \ string(x, base = 16)\n    end\n    \n    if base == 8\n        return string(x,\
    \ base = 8)\n    end\n    \n    if base == 2\n        return string(x, base =\
    \ 2)\n    end\n    \n    if base == 1\n        return string(x, base = 1)\n  \
    \  end\n    \n    if base == 16\n        return string(x, base = 16)\n    end\n\
    \    \n    if base == 8\n        return string(x, base = 8)\n    end\n    \n \
    \   if base == 2\n        return string(x, base = 2)\n    end\n    \n    if base\
    \ == 1\n        return string(x, base = 1)\n    end\n    \n    if base == 16\n\
    \        return string(x, base = 16)\n    end\n    \n    if base == 8\n      \
    \  return string(x, base = 8)\n    end\n    \n    if base == 2\n        return\
    \ string(x, base = 2)\n    end\n    \n    if base == 1\n        return string(x,\
    \ base = 1)\n    end\n    \n    if base == 16\n        return string(x, base =\
    \ 16)\n    end\n    \n    if base == 8\n        return string(x, base = 8)\n \
    \   end\n    \n    if base == 2\n        return string(x, base = 2)\n    end\n\
    \    \n    if base == 1\n        return string(x, base = 1)\n    end", "    if\
    \ base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base == 10 \n\
    \        then return \"0\"\n    else \n        digits = digits(x)\n        digits\
    \ = digits[digits.length - base:]\n        digits = digits[0 : digits.length -\
    \ base]\n        digits = digits[0 : digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        digits = digits[0 : digits.length - base]\n\
    \        digits = digits[0 : digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        digits = digits[0 : digits.length - base]\n\
    \        digits = digits[0 : digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        digits = digits[0 : digits.length - base]\n\
    \        digits = digits[0 : digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        digits = digits[0 : digits.length - base]\n\
    \        digits = digits[0 : digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        digits = digits[0 : digits.length - base]\n\
    \        digits = digits[0 : digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        digits = digits[0 : digits.length - base]\n\
    \        digits = digits[0 : digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        digits = digits[0 : digits.length - base]\n\
    \        digits = digits[0 : digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        digits = digits[0 : digits.length - base]\n\
    \        digits = digits[0 : digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        digits = digits[0 : digits.length - base]\n\
    \        digits = digits[0 : digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        digits = digits[0 : digits.length - base]\n\
    \        digits = digits[0 : digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        digits = digits[0 : digits.length - base]\n\
    \        digits = digits[0 : digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        digits = digits[0 : digits.length - base]\n\
    \        digits = digits[0 : digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        digits = digits[0 : digits.length - base]\n",
  "    if base == 10 \n        then return tostring(x)\n        else return change_base(tostring(x),base-1)\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a |>\n<code>", "    if base < 2 || base\
    \ > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n    end\n\
    \    if x < 0\n        throw(ArgumentError(\"x must be positive\"))\n    end\n\
    \    if base == 10\n        return string(x)\n    end\n    if base == 2\n    \
    \    return string(x::Int64)\n    end\n    if base == 8\n        return string(x::Int64,\
    \ \"b\")\n    end\n    if base == 16\n        return string(x::Int64, \"h\")\n\
    \    end\n    if base == 32\n        return string(x::Int64, \"o\")\n    end\n\
    \    if base == 64\n        return string(x::Int64, \"l\")\n    end\n    if base\
    \ == 128\n        return string(x::Int64, \"q\")\n    end\n    if base == 256\n\
    \        return string(x::Int64, \"t\")\n    end\n    if base == 512\n       \
    \ return string(x::Int64, \"p\")\n    end\n    if base == 1024\n        return\
    \ string(x::Int64, \"m\")\n    end\n    if base == 2048\n        return string(x::Int64,\
    \ \"g\")\n    end\n    if base == 4096\n        return string(x::Int64, \"y\"\
    )\n    end\n    if base == 8192\n        return string(x::Int64, \"k\")\n    end\n\
    \    if base == 16384\n        return string(x::Int64, \"m\")\n    end\n    if\
    \ base == 32768\n        return string(x::Int64, \"g\")\n    end\n    if base\
    \ == 65536\n        return string(x::Int64, \"y\")\n    end\n    if base == 131072\n\
    \        return string(x::Int64, \"k\")\n    end\n    if base == 262144\n    \
    \    return string(x::Int64, \"m\")\n    end\n    if base == 524288\n        return\
    \ string(x::Int64, \"g\")\n    end\n    if base == 1048576\n        return string(x::Int64,\
    \ \"y\")\n    end\n    if base == 2097152\n        return string(x::Int64, \"\
    k\")\n    end\n    if base == 4194304\n        return string(x::Int64, \"m\")\n\
    \    end\n    if base == 8388608\n        return string(x::Int64, \"g\")\n   \
    \ end\n    if base == 16777216\n        return string(x::Int64, \"y\")\n    end\n\
    \    if base == 33554432\n        return string(x::Int64, \"k\")\n    end\n  \
    \  if base == 67108864\n        return string(x::Int64, \"m\")\n    end\n    if\
    \ base == 134217728\n        return string(x::Int64, \"k\")\n    end\n", "   \
    \ if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base == 10 \n\
    \        digits = digits(x)\n        digits = digits[2:end]\n        digits =\
    \ digits[2:end]\n        return join(digits)\n    else \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        return\
    \ join(digits, base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nchange_base(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123456789, 5)\n</cell>\n<code language=julia-1.5>\nchange_base(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\nchange_base(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123456789, 9)\n</cell>\n<code language=julia-1.5>\nchange_base(123456789,\
    \ 10)\n</cell>\n<code language=julia-1.5>\nchange_base(123456789, 11)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(123456789, 12)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123456789, 13)\n</cell>\n<code language=julia-1.5>\nchange_base(123456789,\
    \ 14)\n</cell>\n<code language=julia-1.5>\nchange_base(123456789, 15)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(123456789, 16)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123456789, 17)\n</cell>\n<code language=julia-1.5>\nchange_base(123456789,\
    \ 18)\n</cell>\n<code language=julia-1.5>\nchange_base(123456789, 19)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(123456789, 20)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123456789, 21)\n</cell>\n<code language=julia-1.5>\nchange_base(123456789,\
    \ 22)\n</cell>\n<code language=julia-1.5>\nchange_base(123456789, 23)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(123456789, 24)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123456789, 25)\n</cell>\n<code language=julia-1.5>\nchange_base(123456789,\
    \ 26)\n</cell>\n<code language=julia-1.5>\nchange_base(123456789, 27)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(123456789, 28)\n</cell>\n<code language=julia-1.5",
  "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base == 10 \n\
    \        then return \"0\" + to_string(x)\n        else return to_string(x)\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    if\
    \ base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base < 10\n\
    \        return string(x)\n    else\n        return change_base(x / base, base)\
    \ + string(x % base)\nend\n</cell>\n<code language=julia-1.3>\nchange_base(123,\
    \ 10)\n</cell>\n<text>\nExercise\nWrite a function that converts binary numbers\
    \ to decimal numbers. \nThe input is a string with binary digits. \nThe output\
    \ is a string with the decimal digits.\nThe function should ignore leading zeros.\n\
    The function should ignore leading 0s.\nThe function should ignore trailing zeros.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe function should ignore leading 0s.\n\
    The function should ignore trailing 0s.\nThe ", "    if base < 2 || base > 36\n\
    \        throw(ArgumentError(\"base must be between 2 and 36\"))\n    end\n  \
    \  \n    if base == 10\n        return string(x)\n    end\n    \n    if base ==\
    \ 16\n        return string(x, base = 2)\n    end\n    \n    if base == 8\n  \
    \      return string(x, base = 16)\n    end\n    \n    if base == 2\n        return\
    \ string(x, base = 8)\n    end\n    \n    if base == 36\n        return string(x,\
    \ base = 10)\n    end\n    \n    if base == 64\n        return string(x, base\
    \ = 16)\n    end\n    \n    if base == 128\n        return string(x, base = 8)\n\
    \    end\n    \n    if base == 256\n        return string(x, base = 2)\n    end\n\
    \    \n    if base == 512\n        return string(x, base = 16)\n    end\n    \n\
    \    if base == 1024\n        return string(x, base = 8)\n    end\n    \n    if\
    \ base == 2048\n        return string(x, base = 2)\n    end\n    \n    if base\
    \ == 4096\n        return string(x, base = 16)\n    end\n    \n    if base ==\
    \ 8192\n        return string(x, base = 8)\n    end\n    \n    if base == 16384\n\
    \        return string(x, base = 2)\n    end\n    \n    if base == 32768\n   \
    \     return string(x, base = 16)\n    end\n    \n    if base == 65536\n     \
    \   return string(x, base = 8)\n    end\n    \n    if base == 131072\n       \
    \ return string(x, base = 2)\n    end\n    \n    if base == 262144\n        return\
    \ string(x, base = 16)\n    end\n    \n    if base == 524288\n        return string(x,\
    \ base = 8)\n    end\n    \n    if base == 1048576\n        return string(x, base\
    \ = 2)\n    end\n    \n    if base == 2097152\n        return string(x, base =\
    \ 16)\n    end\n    \n    if base == 4194304\n        return string(x, base =\
    \ 8)\n    end\n    \n    if base == 8388608\n        return string(x, base = 2)\n\
    \    end\n    \n    if base == 16777216\n        return string(x, base = 16)\n\
    \    end\n    \n    if base == 33554432\n        return string(x, base = 8)\n\
    \    end\n    \n    if base == 67108864\n        return string(x, base = 2)\n\
    \    end\n    \n    if base == 134217728\n        return string(x, base = 16)\n\
    \    end\n    \n    if base == 268435456\n        return string(x, base = 8)\n\
    \    end\n    \n    if base == 536870912\n        return string(x, base = 2)\n\
    \    end\n    \n    if base == 1073741824\n        return string(x, base = 16)\n\
    \    end\n    \n    if ", "    if base == 10 \n        then return to_string(x)\n\
    \        else return change_base(x / base, base) * base + change_base(x % base,\
    \ base)\n    end\nend\n</code>\n<|/ a tags=julia,type-conversion |>\n<| c |>\n\
    Thanks for your answer. Unfortunately this doesn't work for me because I need\
    \ the base to be a parameter. I've edited my question to reflect this.\n<|/ c\
    \ |>\n<| c |>\nI edited my answer to include a solution for your new requirements.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't work for\
    \ me because I need the base to be a parameter. I've edited my question to reflect\
    \ this.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution for your\
    \ new requirements.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't work for me because I need the base to be a parameter. I've edited\
    \ my question to reflect this.\n<|/ c |>\n<| a tags=julia,type-conversion |>\n\
    A more general solution that works for any base is this:\n<code>", "    if base\
    \ < 2 || base > 36\n        throw(ArgumentError(\"Invalid base\"))\n    elseif\
    \ base == 10\n        return toString(x)\n    else\n        return toString(change_base(div(x,\
    \ base), base))\nend", "    if base == 10 \n        then return toString(x)\n\
    \    else \n        digits = toString(x%base)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n", "    if base == 10 \n\
    \        digits = digits(x)\n        digits = digits[2:end]\n        digits =\
    \ digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digit", "    if base == 10 \n        then\
    \ return to_string(x)\n    else \n        digits = digits(x)\n        base = digits[end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[", "    if base < 10\n        error(\"Base must be greater\
    \ than or equal to 10\")\n    end\n    \n    if base == 10\n        return string(x)\n\
    \    end\n    \n    if base == 16\n        return string(x, \"hex\")\n    end\n\
    \    \n    if base == 8\n        return string(x, \"oct\")\n    end\n    \n  \
    \  if base == 2\n        return string(x, \"dec\")\n    end\n    \n    error(\"\
    Base must be one of 2, 8, 10, 16\")\nend", "    if base < 10 \n        error(\"\
    base must be greater than or equal to 10\")\n    elseif base > 64 \n        error(\"\
    base must be less than or equal to 64\")\n    elseif base == 10 \n        return\
    \ string(x)\n    elseif base == 2 \n        return string(x*2)\n    elseif base\
    \ == 8 \n        return string(x*8)\n    elseif base == 16 \n        return string(x*16)\n\
    \    elseif base == 10 \n        return string(x*10)\n    elseif base == 16 \n\
    \        return string(x*16)\n    elseif base == 2 \n        return string(x*2)\n\
    \    elseif base == 8 \n        return string(x*8)\n    elseif base == 16 \n \
    \       return string(x*16)\n    elseif base == 10 \n        return string(x*10)\n\
    \    elseif base == 16 \n        return string(x*16)\n    elseif base == 2 \n\
    \        return string(x*2)\n    elseif base == 8 \n        return string(x*8)\n\
    \    elseif base == 16 \n        return string(x*16)\n    elseif base == 10 \n\
    \        return string(x*10)\n    elseif base == 16 \n        return string(x*16)\n\
    \    elseif base == 2 \n        return string(x*2)\n    elseif base == 8 \n  \
    \      return string(x*8)\n    elseif base == 16 \n        return string(x*16)\n\
    \    elseif base == 10 \n        return string(x*10)\n    elseif base == 16 \n\
    \        return string(x*16)\n    elseif base == 2 \n        return string(x*2)\n\
    \    elseif base == 8 \n        return string(x*8)\n    elseif base == 16 \n \
    \       return string(x*16)\n    elseif base == 10 \n        return string(x*10)\n\
    \    elseif base == 16 \n        return string(x*16)\n    elseif base == 2 \n\
    \        return string(x*2)\n    elseif base == 8 \n        return string(x*8)\n\
    \    elseif base == 16 \n        return string(x*16)\n    elseif base == 10 \n\
    \        return string(x*10)\n    elseif base == 16 \n        return string(x*16)\n\
    \    elseif base == 2 \n        return string(x*2)\n    elseif base == 8 \n  \
    \      return string(x*8)\n    elseif base == 16 \n        return string(x*16)\n\
    \    elseif base == 10 \n        return string(x*10)\n    elseif base == 16 \n\
    \        return string(x*16)\n    elseif base == 2 \n        return string(x*2)\n\
    \    elseif base == 8 \n        return string(x*8)\n    elseif base == 16 \n \
    \       return string(x*16)\n    elseif base == 10 \n        return string(x*10)\n\
    \    elseif base ", "    if base == 10 \n        digits = digits(x)\n        digits\
    \ = digits[2:end]\n        return join(digits, \"\")\n    else \n        digits\
    \ = digits(x)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.0>\n\
    change_base(123, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. \nThe input is a string containing only 0s\
    \ and 1s.\nThe output is a string containing the decimal representation of the\
    \ binary number.\nThe input string may contain leading zeros.\nThe output string\
    \ may contain leading zeros.\nThe input string may contain trailing zeros.\nThe\
    \ output string may contain trailing zeros.\nThe input string may contain leading\
    \ or trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain any number of leading zeros.\nThe output string may\
    \ contain any number of leading zeros.\nThe input string may contain any number\
    \ of trailing zeros.\nThe output string may contain any number of trailing zeros.\n\
    The input string may contain any number of leading or trailing spaces.\nThe output\
    \ string may contain any number of leading or trailing spaces.\nThe input string\
    \ may contain any number of leading or trailing spaces.\nThe output string may\
    \ contain any number of leading or trailing spaces.\nThe input string may contain\
    \ any number of leading or trailing spaces.\nThe output string may contain any\
    \ number of leading or trailing spaces.\nThe input string may contain any number\
    \ of leading or trailing spaces.\nThe output string may contain any number of\
    \ leading or trailing spaces.\nThe input string may contain any number of leading\
    \ or trailing spaces.\nThe output string may contain any number of leading or\
    \ trailing spaces.\nThe input string may contain any number of leading or trailing\
    \ spaces.\nThe output string may contain any number of leading or trailing spaces.\n\
    The input string may contain any number of leading or trailing spaces.\nThe output\
    \ string may contain any number of leading or trailing spaces.\nThe input string\
    \ may contain any number of leading or trailing spaces.\nThe output string may\
    \ contain any number of leading or trailing spaces.\nThe input string may contain\
    \ any number of leading or trailing spaces.\nThe output string may contain any\
    \ number of leading or trailing spaces.\nThe input string may contain any number\
    \ of leading or trailing spaces.\nThe output string may contain any number of\
    \ leading or trailing spaces.\nThe input string may contain any number of leading\
    \ or trailing spaces.\nThe output string may contain any number of leading or\
    \ trailing spaces.\nThe input string may contain ", "    if base < 10 \n     \
    \   error(\"base must be greater than or equal to 10\")\n    else if base == 10\
    \ \n        return toString(x)\n    else \n        return toString(change_base(x\
    \ / base, base))\nend\n</cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 4)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 5)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 6)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 7)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 9)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 11)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 12)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 13)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 14)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 15)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 17)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 18)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 19)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 20)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 21)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 22)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 23)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 24)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 25)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 26)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 27)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 28)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 29)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 30)\n</cell", "    if base\
    \ < 10\n        error(\"base must be greater than or equal to 10\")\n    elseif\
    \ base > 36\n        error(\"base must be less than or equal to 36\")\n    else\n\
    \        str = to_string(x)\n        str = str[start:end]\n    end\n    return\
    \ str\nend\n</cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that converts binary numbers to decimal.\n\
    The input is a string that consists of only 0s and 1s.\nThe output is a decimal\
    \ number.\nThe function should raise an error if the input is not binary or if\
    \ the input string is not valid.\nThe function should raise an error if the input\
    \ string contains more than one binary digit.\nThe function should raise an error\
    \ if the input string contains more than one decimal digit.\nThe function should\
    \ raise an error if the input string contains more than one binary digit followed\
    \ by a decimal digit.\nThe function should raise an error if the input string\
    \ contains more than one decimal digit followed by a binary digit.\nThe function\
    \ should raise an error if the input string contains more than one binary digit\
    \ followed by a decimal digit followed by a binary digit.\nThe function should\
    \ raise an error if the input string contains more than one decimal digit followed\
    \ by a binary digit followed by a decimal digit.\nThe function should raise an\
    \ error if the input string contains more than one decimal digit followed by a\
    \ binary digit followed by a decimal digit followed by a binary digit.\nThe function\
    \ should raise an error if the input string contains more than one decimal digit\
    \ followed by a binary digit followed by a decimal digit followed by a binary\
    \ digit followed by a decimal digit.\nThe function should raise an error if the\
    \ input string contains more than one decimal digit followed by a binary digit\
    \ followed by a decimal digit followed by a binary digit followed by a decimal\
    \ digit followed by a binary digit.\nThe function should raise an error if the\
    \ input string contains more than one decimal digit followed by a binary digit\
    \ followed by a decimal digit followed by a binary digit followed by a decimal\
    \ digit followed by a binary digit followed by a decimal digit.\nThe function\
    \ should raise an error if the input string contains more than one decimal digit\
    \ followed by a binary digit followed by a decimal digit followed by a binary\
    \ digit followed by a decimal digit followed by a binary digit followed by a decimal\
    \ digit followed by a binary digit followed by a decimal digit.\nThe function\
    \ should raise an error if the input string contains more than one decimal digit\
    \ followed by a binary digit followed by a decimal digit followed by a binary\
    \ digit followed by a decimal digit followed by a binary digit followed by a decimal\
    \ digit followed by a binary digit followed by a decimal digit followed by a binary\
    \ digit followed by a decimal digit.\nThe function should raise an error if the\
    \ input string contains more than one decimal digit followed by a binary digit\
    \ followed by a decimal digit followed by a binary digit followed by a decimal\
    \ digit followed by a binary digit followed by a decimal digit followed by a binary\
    \ digit followed by a decimal digit followed by a binary digit followed by a decimal\
    \ digit ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must\
    \ be between 2 and 36\"))\n    end\n    if base == 10\n        return string(x)\n\
    \    end\n    if base == 16\n        return hex(x)\n    end\n    if base == 8\n\
    \        return oct(x)\n    end\n    if base == 2\n        return dec(x, base)\n\
    \    end\n    if base == 36\n        return dec(x) # base is 36\n    end\n   \
    \ if base == 10\n        return dec(x) # base is 10\n    end\n    if base == 16\n\
    \        return dec(x) # base is 16\n    end\n    if base == 8\n        return\
    \ dec(x) # base is 8\n    end\n    if base == 2\n        return dec(x) # base\
    \ is 2\n    end\n    if base == 36\n        return dec(x) # base is 36\n    end\n\
    \    if base == 10\n        return dec(x) # base is 10\n    end\n    if base ==\
    \ 16\n        return dec(x) # base is 16\n    end\n    if base == 8\n        return\
    \ dec(x) # base is 8\n    end\n    if base == 2\n        return dec(x) # base\
    \ is 2\n    end\n    if base == 36\n        return dec(x) # base is 36\n    end\n\
    \    if base == 10\n        return dec(x) # base is 10\n    end\n    if base ==\
    \ 16\n        return dec(x) # base is 16\n    end\n    if base == 8\n        return\
    \ dec(x) # base is 8\n    end\n    if base == 2\n        return dec(x) # base\
    \ is 2\n    end\n    if base == 36\n        return dec(x) # base is 36\n    end\n\
    \    if base == 10\n        return dec(x) # base is 10\n    end\n    if base ==\
    \ 16\n        return dec(x) # base is 16\n    end\n    if base == 8\n        return\
    \ dec(x) # base is 8\n    end\n    if base == 2\n        return dec(x) # base\
    \ is 2\n    end\n    if base == 36\n        return dec(x) # base is 36\n    end\n\
    \    if base == 10\n        return dec(x) # base is 10\n    end\n    if base ==\
    \ 16\n        return dec(x) # base is 16\n    end\n    if base == 8\n        return\
    \ dec(x) # base is 8\n    end\n    if base == 2\n        return dec(x) # base\
    \ is 2\n    end\n    if base == 36\n        return dec(x) # base is 36\n    end\n\
    \    if base == 10\n        return dec(x) # base is 10\n    end\n    if base ==\
    \ 16\n        return dec(x) # base is 16\n    end\n    if base == 8\n        return\
    \ dec(x) # base is 8\n    end\n    if base == 2\n        return dec(x", "    if\
    \ base == 10 \n        return toString(x)\n    else \n        return toString(change_base(div(x,\
    \ base), base))\nend\n</cell>\n<code language=julia-1.6>\nchange_base(123, 2)\n\
    </cell>\n<code language=julia-1.6>\nchange_base(123, 3)\n</cell>\n<code language=julia-1.6>\n\
    change_base(123, 4)\n</cell>\n<code language=julia-1.6>\nchange_base(123, 5)\n\
    </cell>\n<code language=julia-1.6>\nchange_base(123, 6)\n</cell>\n<code language=julia-1.6>\n\
    change_base(123, 7)\n</cell>\n<code language=julia-1.6>\nchange_base(123, 8)\n\
    </cell>\n<code language=julia-1.6>\nchange_base(123, 9)\n</cell>\n<code language=julia-1.6>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.6>\nchange_base(123, 11)\n\
    </cell>\n<code language=julia-1.6>\nchange_base(123, 12)\n</cell>\n<code language=julia-1.6>\n\
    change_base(123, 13)\n</cell>\n<code language=julia-1.6>\nchange_base(123, 14)\n\
    </cell>\n<code language=julia-1.6>\nchange_base(123, 15)\n</cell>\n<code language=julia-1.6>\n\
    change_base(123, 16)\n</cell>\n<code language=julia-1.6>\nchange_base(123, 17)\n\
    </cell>\n<code language=julia-1.6>\nchange_base(123, 18)\n</cell>\n<code language=julia-1.6>\n\
    change_base(123, 19)\n</cell>\n<code language=julia-1.6>\nchange_base(123, 20)\n\
    </cell>\n<code language=julia-1.6>\nchange_base(123, 21)\n</cell>\n<code language=julia-1.6>\n\
    change_base(123, 22)\n</cell>\n<code language=julia-1.6>\nchange_base(123, 23)\n\
    </cell>\n<code language=julia-1.6>\nchange_base(123, 24)\n</cell>\n<code language=julia-1.6>\n\
    change_base(123, 25)\n</cell>\n<code language=julia-1.6>\nchange_base(123, 26)\n\
    </cell>\n<code language=julia-1.6>\nchange_base(123, 27)\n</cell>\n<code language=julia-1.6>\n\
    change_base(123, 28)\n</cell>\n<code language=julia-1.6>\nchange_base(123, 29)\n\
    </cell>\n<code language=julia-1.6>\nchange_base(123, 30)\n</cell>\n<code language=julia-1.6>\n\
    change_base(123, 31)", "    if base < 10\n        error(\"Base must be less than\
    \ 10\")\n    elseif base > 36\n        error(\"Base must be less than 36\")\n\
    \    else\n        str = to_string(x)\n        str = str[start:end]\n        str\
    \ = str * base\n        str = str + str[end]\n        return str\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 36)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary to decimal.", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 10\n        return toString(x)\n\
    \    else\n        return toString(toBase(x, base))\nend", "    if base < 10 \n\
    \        error(\"Base must be greater than or equal to 10\")\n    end\n    if\
    \ base == 10 \n        return string(x)\n    end\n    digits = zeros(Int, base\
    \ - 1)\n    digits[digits(end) == 0] = Int(10^(base - digits(end)))\n    digits\
    \ = digits[1:end]\n    digits = digits[digits(:) < x]\n    digits = digits[digits(:)\
    \ > 0]\n    digits = digits[digits(:) < base]\n    digits = digits[digits(:) >\
    \ 0]\n    digits = digits[digits(:) < base]\n    digits = digits[digits(:) > 0]\n\
    \    digits = digits[digits(:) < base]\n    digits = digits[digits(:) > 0]\n \
    \   digits = digits[digits(:) < base]\n    digits = digits[digits(:) > 0]\n  \
    \  digits = digits[digits(:) < base]\n    digits = digits[digits(:) > 0]\n   \
    \ digits = digits[digits(:) < base]\n    digits = digits[digits(:) > 0]\n    digits\
    \ = digits[digits(:) < base]\n    digits = digits[digits(:) > 0]\n    digits =\
    \ digits[digits(:) < base]\n    digits = digits[digits(:) > 0]\n    digits = digits[digits(:)\
    \ < base]\n    digits = digits[digits(:) > 0]\n    digits = digits[digits(:) <\
    \ base]\n    digits = digits[digits(:) > 0]\n    digits = digits[digits(:) < base]\n\
    \    digits = digits[digits(:) > 0]\n    digits = digits[digits(:) < base]\n \
    \   digits = digits[digits(:) > 0]\n    digits = digits[digits(:) < base]\n  \
    \  digits = digits[digits(:) > 0]\n    digits = digits[digits(:) < base]\n   \
    \ digits = digits[digits(:) > 0]\n    digits = digits[digits(:) < base]\n    digits\
    \ = digits[digits(:) > 0]\n    digits = digits[digits(:) < base]\n    digits =\
    \ digits[digits(:) > 0]\n    digits = digits[digits(:) < base]\n    digits = digits[digits(:)\
    \ > 0]\n    digits = digits[digits(:) < base]\n    digits = digits[digits(:) >\
    \ 0]\n    digits = digits[digits(:) < base]\n    ", "    if base < 2 || base >\
    \ 36\n        throw(ArgumentError(\"Invalid base\"))\n    end\n    if base ==\
    \ 10\n        return string(x)\n    end\n    digits = zeros(Int, base - 1)\n \
    \   digits[1] = x\n    digits[2] = digits[1] / base\n    digits[3] = digits[1]\
    \ % base\n    digits[4] = digits[2] / base\n    digits[5] = digits[2] % base\n\
    \    digits[6] = digits[3] / base\n    digits[7] = digits[3] % base\n    digits[8]\
    \ = digits[4] / base\n    digits[9] = digits[4] % base\n    digits[10] = digits[5]\
    \ / base\n    digits[11] = digits[5] % base\n    digits[12] = digits[6] / base\n\
    \    digits[13] = digits[6] % base\n    digits[14] = digits[7] / base\n    digits[15]\
    \ = digits[7] % base\n    digits[16] = digits[8] / base\n    digits[17] = digits[8]\
    \ % base\n    digits[18] = digits[9] / base\n    digits[19] = digits[9] % base\n\
    \    digits[20] = digits[10] / base\n    digits[21] = digits[10] % base\n    digits[22]\
    \ = digits[11] / base\n    digits[23] = digits[11] % base\n    digits[24] = digits[12]\
    \ / base\n    digits[25] = digits[12] % base\n    digits[26] = digits[13] / base\n\
    \    digits[27] = digits[13] % base\n    digits[28] = digits[14] / base\n    digits[29]\
    \ = digits[14] % base\n    digits[30] = digits[15] / base\n    digits[31] = digits[15]\
    \ % base\n    digits[32] = digits[16] / base\n    digits[33] = digits[16] % base\n\
    \    digits[34] = digits[17] / base\n    digits[35] = digits[17] % base\n    digits[36]\
    \ = digits[18] / base\n    digits[37] = digits[18] % base\n    digits[38] = digits[19]\
    \ / base\n    digits[39] = digits[19] % base\n    digits[40] = digits[20] / base\n\
    \    digits[41] = digits[20] % base\n    digits[42] = digits[21] / base\n    digits[43",
  "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    else\n\
    \        digits = digits(x)\n        digits = digits[2:end]\n        digits =\
    \ digits[2:end]\n        digits = digits[2:end]\n        return join(digits, \"\
    \")\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI wrote a Julia\
    \ package that does this and more. Check it out here: https://github.com/jerome-allison/JuliaNumbers\n\
    <|/ a tags=julia,numbers,string |>\n<| a |>\nI wrote a package that does this\
    \ and more. Check it out here: https://github.com/jerome-allison/JuliaNumbers\n\
    <code>\nusing JuliaNumbers\njulia> to_string(123456789)\n\"123456789\"\njulia>\
    \ to_string(123456789, base=10)\n\"123456789\"\njulia> to_string(123456789, base=10)\n\
    \"123456789\"\njulia> to_string(123456789, base=10)\n\"123456789\"\njulia> to_string(123456789,\
    \ base=10)\n\"123456789\"\njulia> to_string(123456789, base=10)\n\"123456789\"\
    \njulia> to_string(123456789, base=10)\n\"123456789\"\njulia> to_string(123456789,\
    \ base=10)\n\"123456789\"\njulia> to_string(123456789, base=10)\n\"123456789\"\
    \njulia> to_string(123456789, base=10)\n\"123456789\"\njulia> to_string(123456789,\
    \ base=10)\n\"123456789\"\njulia> to_string(123456789, base=10)\n\"123456789\"\
    \njulia> to_string(123456789, base=10)\n\"123456789\"\njulia> to_string(123456789,\
    \ base=10)\n\"123456789\"\njulia> to_string(123456789, base=10)\n\"123456789\"\
    \njulia> to_string(123456789, base=10)\n\"123456789\"\njulia> to_string(123456789,\
    \ base=10)\n\"123456789\"\njulia> to_string(123456789, base=10)\n\"123456789\"\
    \njulia> to_string(123456789, base=10)\n\"123456789\"\njulia> to_string(123456789,\
    \ base=10)\n\"123456789\"\njulia> to_string(123456789, base=10)\n\"123456789\"\
    \njulia> to_string(123456789, base=10)\n\"123456789\"\njulia> to_string(123456789,\
    \ base=10)\n\"123456789\"\njulia> to_string(123456789, base=10)\n\"123456789\"\
    \njulia", "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base == 10 \n\
    \        return toString(x)\n    else \n        return toString(change_base(div(x,\
    \ base), base))\nend\n</cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a number from base\
    \ 10 to base 16. \nThe function should take two arguments: a string and a number.\
    \ \nThe function should return a string representation of the number in base 16.\n\
    The function should return an error if the number is not in base 10.\nThe function\
    \ should return an error if the number is not in base 16.\nThe function should\
    \ return an error if the number is negative.\nThe function should return an error\
    \ if the number is too big.\nThe function should return an error if the number\
    \ is too small.\nThe function should return an error if the number is too small.\n\
    The function should return an error if the number is too big.\nThe function should\
    \ return an error if the number is too small.\nThe function should return an error\
    \ if the number is too big.\nThe function should return an error if the number\
    \ is too small.\nThe function should return an error if the number is too big.\n\
    The function should return an error if the number is too small.\nThe function\
    \ should return an error if the number is too big.\nThe function should return\
    \ an error if the number is too small.\nThe function should return an error if\
    \ the number is too big.\nThe function should return an error if the number is\
    \ too small.\nThe function should return an error if the number is too big.\n\
    The function should return an error if the number is too small.\nThe function\
    \ should return an error if the number is too big.\nThe function should return\
    \ an error if the number is too small.\nThe function should return an error if\
    \ the number is too big.\nThe function should return an error if the number is\
    \ too small.\nThe function should return an error if the number is too big.\n\
    The function should return an error if the number is too small.\nThe function\
    \ should return an error if the number is too big.\nThe function should return\
    \ an error if the number is too small.\nThe function should return an error if\
    \ the number is too big.\nThe function should return an error if the number is\
    \ too small.\nThe function should return an error if the number is too big.\n\
    The function should return an error if the number is too small.\nThe function\
    \ should return an error if the number is too big.\nThe function should return\
    \ an error if the number is too small.\nThe function should return an error if\
    \ the number is too big.\nThe function should return an error if the number is\
    \ too small.\nThe function should return an error if the number is too big.\n\
    The function should return an error if the number is too small.\nThe function\
    \ should return an error if the number is too big.\nThe function should return\
    \ an error if the number is too small.\nThe function should return an error ",
  "    if base == 10 \n        then return to_string(x)\n        else return change_base(x\
    \ / base, base * base)\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"Base must be between\
    \ 2 and 36\"))\n    elseif base == 10\n        return toString(x)\n    else\n\
    \        return toString(toBase(x, base))\nend", "    if base < 2 || base > 36\n\
    \        throw(ArgumentError(\"base must be between 2 and 36\"))\n    end\n  \
    \  if base == 10\n        return string(x)\n    end\n    digits = string(x)\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n", "    if base == 10\
    \ \n        digits = digits(x)\n        return digits[1]\n    else \n        digits\
    \ = digits(x)\n        digits[1] = digits[1] * base\n        digits[2] = digits[2]\
    \ * base\n        digits[3] = digits[3] * base\n        digits[4] = digits[4]\
    \ * base\n        digits[5] = digits[5] * base\n        digits[6] = digits[6]\
    \ * base\n        digits[7] = digits[7] * base\n        digits[8] = digits[8]\
    \ * base\n        digits[9] = digits[9] * base\n        digits[10] = digits[10]\
    \ * base\n        digits[11] = digits[11] * base\n        digits[12] = digits[12]\
    \ * base\n        digits[13] = digits[13] * base\n        digits[14] = digits[14]\
    \ * base\n        digits[15] = digits[15] * base\n        digits[16] = digits[16]\
    \ * base\n        digits[17] = digits[17] * base\n        digits[18] = digits[18]\
    \ * base\n        digits[19] = digits[19] * base\n        digits[20] = digits[20]\
    \ * base\n        digits[21] = digits[21] * base\n        digits[22] = digits[22]\
    \ * base\n        digits[23] = digits[23] * base\n        digits[24] = digits[24]\
    \ * base\n        digits[25] = digits[25] * base\n        digits[26] = digits[26]\
    \ * base\n        digits[27] = digits[27] * base\n        digits[28] = digits[28]\
    \ * base\n        digits[29] = digits[29] * base\n        digits[30] = digits[30]\
    \ * base\n        digits[31] = digits[31] * base\n        digits[32] = digits[32]\
    \ * base\n        digits[33] = digits[33] * base\n        digits[34] = digits[34]\
    \ * base\n        digits[35] = digits[35] * base\n        digits[36] = digits[36]\
    \ * base\n        digits[37] = digits[37] * base\n        digits[38] = digits[38]\
    \ * base\n        digits[39] = digits[39] * base\n        digits[40] = digits[40]\
    \ * base\n        digits[41] = digits[41] * base\n        digits[42] = digits[42]\
    \ * base\n        digits[43] = digits[43] * base\n        digits[44] = digits[44]\
    \ * base\n        digits[45] = digit", "    if base < 10 \n        error(\"base\
    \ must be greater than or equal to 10\")\n    elseif base == 10 \n        return\
    \ toString(x)\n    elseif base == 2 \n        return toBin(x)\n    elseif base\
    \ == 8 \n        return toOct(x)\n    elseif base == 16 \n        return toHex(x)\n\
    \    elseif base == 10 \n        return toDec(x)\n    elseif base == 16 \n   \
    \     return toBin(x)\n    elseif base == 8 \n        return toOct(x)\n    elseif\
    \ base == 2 \n        return toHex(x)\n    elseif base == 10 \n        return\
    \ toDec(x)\n    elseif base == 16 \n        return toHex(x)\n    elseif base ==\
    \ 8 \n        return toDec(x)\n    elseif base == 2 \n        return toBin(x)\n\
    \    elseif base == 10 \n        return toOct(x)\n    elseif base == 16 \n   \
    \     return toHex(x)\n    elseif base == 8 \n        return toDec(x)\n    elseif\
    \ base == 2 \n        return toHex(x)\n    elseif base == 10 \n        return\
    \ toDec(x)\n    elseif base == 16 \n        return toHex(x)\n    elseif base ==\
    \ 8 \n        return toDec(x)\n    elseif base == 2 \n        return toBin(x)\n\
    \    elseif base == 10 \n        return toOct(x)\n    elseif base == 16 \n   \
    \     return toHex(x)\n    elseif base == 8 \n        return toDec(x)\n    elseif\
    \ base == 2 \n        return toHex(x)\n    elseif base == 10 \n        return\
    \ toDec(x)\n    elseif base == 16 \n        return toHex(x)\n    elseif base ==\
    \ 8 \n        return toDec(x)\n    elseif base == 2 \n        return toBin(x)\n\
    \    elseif base == 10 \n        return toOct(x)\n    elseif base == 16 \n   \
    \     return toHex(x)\n    elseif base == 8 \n        return toDec(x)\n    elseif\
    \ base == 2 \n        return toHex(x)\n    elseif base == 10 \n        return\
    \ toDec(x)\n    elseif base == 16 \n        return toHex(x)\n    elseif base ==\
    \ 8 \n        return toDec(x)\n    elseif base == 2 \n        return toBin(x)\n\
    \    elseif base == 10 \n        return toOct(x)\n    elseif base == 16 \n   \
    \     return toHex(x)\n    elseif base == 8 \n        return toDec(x)\n    elseif\
    \ base == 2 \n        return toHex(x)\n    elseif base == 10 \n        return\
    \ toDec(x)\n    elseif base == 16 \n        return toHex(x)\n    elseif base ==\
    \ 8 \n        return toDec(x)\n    elseif base == 2 \n        return toBin(x)\n\
    \    elseif base == 10 \n        return toOct(x)\n    elseif base ", "    if base\
    \ == 10 \n        then return \"0\"\n    else \n        digits = digits(x)\n \
    \       digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length", "    if base == 10 \n     \
    \   then return String(x)\n        else return change_base(x / base, base) + String(x%base)\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string |>\nIn Julia 1.5.2 you\
    \ can use the function Base.string(x::Number):\n<code>\njulia> Base.string(1)\n\
    \"1\"", "    if base == 10 \n        then return to_string(x)\n        else return\
    \ change_base(x / base, base) * base + change_base(x % base, base)\n    end\n\
    end", "    if base < 2 || base > 36\n        error(\"Base must be between 2 and\
    \ 36\")\n    end\n    \n    if base == 10\n        return string(x)\n    end\n\
    \    \n    if base == 16\n        return hex(x)\n    end\n    \n    if base ==\
    \ 8\n        return oct(x)\n    end\n    \n    if base == 2\n        return dec(x,\
    \ base)\n    end\n    \n    if base == 36\n        return dec(x)\n    end\n  \
    \  \n    if base == 10\n        return string(x)\n    end\n    \n    if base ==\
    \ 16\n        return hex(x)\n    end\n    \n    if base == 8\n        return oct(x)\n\
    \    end\n    \n    if base == 2\n        return dec(x, base)\n    end\n    \n\
    \    if base == 36\n        return dec(x)\n    end\n    \n    if base == 10\n\
    \        return string(x)\n    end\n    \n    if base == 16\n        return hex(x)\n\
    \    end\n    \n    if base == 8\n        return oct(x)\n    end\n    \n    if\
    \ base == 2\n        return dec(x, base)\n    end\n    \n    if base == 36\n \
    \       return dec(x)\n    end\n    \n    if base == 10\n        return string(x)\n\
    \    end\n    \n    if base == 16\n        return hex(x)\n    end\n    \n    if\
    \ base == 8\n        return oct(x)\n    end\n    \n    if base == 2\n        return\
    \ dec(x, base)\n    end\n    \n    if base == 36\n        return dec(x)\n    end\n\
    \    \n    if base == 10\n        return string(x)\n    end\n    \n    if base\
    \ == 16\n        return hex(x)\n    end\n    \n    if base == 8\n        return\
    \ oct(x)\n    end\n    \n    if base == 2\n        return dec(x, base)\n    end\n\
    \    \n    if base == 36\n        return dec(x)\n    end\n    \n    if base ==\
    \ 10\n        return string(x)\n    end\n    \n    if base == 16\n        return\
    \ hex(x)\n    end\n    \n    if base == 8\n        return oct(x)\n    end\n  \
    \  \n    if base == 2\n        return dec(x, base)\n    end\n    \n    if base\
    \ == 36\n        return dec(x)\n    end\n    \n    if base == 10\n        return\
    \ string(x)\n    end\n    \n    if base == 16\n        return hex(x)\n    end\n\
    \    \n    if base == 8\n        return oct(x)\n    end\n    \n    if base ==\
    \ 2\n        return dec(x, base)\n    end\n    \n    if base == 36\n        return\
    \ dec(x)\n    end\n    \n    if base == 10\n        return string(x)\n    end\n\
    \    \n    if base == 16\n        return hex(x)", "    if base < 2 || base > 36\n\
    \        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 10\n        return toString(x)\n    else\n        return toString(change_base(x,\
    \ base-1))\nend\n</cell>\n<code language=julia-1.5>\nchange_base(12, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(12, 36)\n</cell>\n<code language=julia-1.5>\n\
    change_base(12, 10)\n</cell>\n<code language=julia-1.5>\nchange_base(12, 36)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a number from one\
    \ base to another.", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 10\n        return toString(x)\n\
    \    else\n        return toString(change_base(x, base-1))\nend", "    if base\
    \ == 10 \n        then return to_string(x)\n        else return change_base(x\
    \ / base, base * base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(123,\
    \ 10)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(123, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 4)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 5)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 6)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 7)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 9)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 11)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 12)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 13)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 14)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 15)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 17)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 18)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 19)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 20)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 21)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 22)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 23)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 24)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 25)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 26)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 27)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 28)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 29)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 30)\n</cell>", "    if base\
    \ < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    elseif base == 10\n        return toString(x)\n    else\n        return\
    \ toString(change_base(x, base-1))\nend", "    if base == 10 \n        then return\
    \ \"0\" \n        else return (x % base) + change_base(x / base, base)\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a string to a floating point number using\
    \ Julia's parse.", "    if base < 10 \n        error(\"base must be greater than\
    \ or equal to 10\")\n    elseif base == 10 \n        return toString(x)\n    elseif\
    \ base == 2 \n        return toBin(x)\n    elseif base == 8 \n        return toOct(x)\n\
    \    elseif base == 16 \n        return toHex(x)\n    elseif base == 10 \n   \
    \     return toDec(x)\n    else\n        error(\"base must be 10, 2, 8, 16 or\
    \ 10\")\n    end\nend\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers to\
    \ decimal.", "    if base < 10\n        error(\"Base must be greater than or equal\
    \ to 10\")\n    end\n    \n    if base == 10\n        return string(x)\n    end\n\
    \    \n    if base == 2\n        return string(x * 2)\n    end\n    \n    if base\
    \ == 8\n        return string(x * 8)\n    end\n    \n    if base == 16\n     \
    \   return string(x * 16)\n    end\n    \n    if base == 32\n        return string(x\
    \ * 32)\n    end\n    \n    if base == 64\n        return string(x * 64)\n   \
    \ end\n    \n    if base == 128\n        return string(x * 128)\n    end\n   \
    \ \n    if base == 256\n        return string(x * 256)\n    end\n    \n    if\
    \ base == 512\n        return string(x * 512)\n    end\n    \n    if base == 1024\n\
    \        return string(x * 1024)\n    end\n    \n    if base == 2048\n       \
    \ return string(x * 2048)\n    end\n    \n    if base == 4096\n        return\
    \ string(x * 4096)\n    end\n    \n    if base == 8192\n        return string(x\
    \ * 8192)\n    end\n    \n    if base == 16384\n        return string(x * 16384)\n\
    \    end\n    \n    if base == 32768\n        return string(x * 32768)\n    end\n\
    \    \n    if base == 65536\n        return string(x * 65536)\n    end\n    \n\
    \    if base == 131072\n        return string(x * 131072)\n    end\n    \n   \
    \ if base == 262144\n        return string(x * 262144)\n    end\n    \n    if\
    \ base == 524288\n        return string(x * 524288)\n    end\n    \n    if base\
    \ == 1048576\n        return string(x * 1048576)\n    end\n    \n    if base ==\
    \ 2097152\n        return string(x * 2097152)\n    end\n    \n    if base == 4194304\n\
    \        return string(x * 4194304)\n    end\n    \n    if base == 8388608\n \
    \       return string(x * 8388608)\n    end\n    \n    if base == 16777216\n \
    \       return string(x * 16777216)\n    end\n    \n    if base == 33554432\n\
    \        return string(x * 33554432)\n    end\n    \n    if base == 67108864\n\
    \        return string(x * 67108864)\n    end\n    \n    if base == 134217728\n\
    \        return string(x * 134217728)\n    end\n    \n    if base == 268435456\n\
    \        return string(x * 268435456)\n    end\n    \n    if ", "    if base ==\
    \ 10 \n        then return to_string(x)\n    else \n        digits = digits(x)\n\
    \        digits = digits[digits.length - base]\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n        digits = digits:reverse()\n        digits\
    \ = digits:reverse()\n        digits = digits:reverse()\n        digits = digits:reverse()\n\
    \        digits = digits:reverse()\n        digits = digits:reverse()\n      \
    \  digits = digits:reverse()\n", "    if base == 10 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digit", "    if base < 2 || base > 36\n        throw(ArgumentError(\"Invalid\
    \ base\"))\n    end\n    if x == 0\n        return \"\"\n    end\n    if base\
    \ == 10\n        return string(x)\n    end\n    digits = digits(x)\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[2:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[2:end]\n    digits = digits[digits[1]:end]\n    digits =\
    \ digits[2:end]\n    digits = digits[digits[1]:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[2:end]\n    digits =\
    \ digits[digits[1]:end]\n    digits = digits[2:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[2:end]\n    digits = digits[digits[1]:end]\n    digits =\
    \ digits[2:end]\n    digits = digits[digits[1]:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[2:end]\n    digits =\
    \ digits[digits[1]:end]\n    digits = digits[2:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[2:end]\n    digits = digits[digits[1]:end]\n    digits =\
    \ digits[2:end]\n    digits = digits[digits[1]:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[2:end]\n    digits =\
    \ digits[digits[1]:end]\n    digits = digits[2:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[2:end]\n    digits = digits[digits[1]:end]\n    digits =\
    \ digits[2:end]\n    digits = digits[digits[1]:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[2:end]\n    digits =\
    \ digits[digits[1]:end]\n    digits = digits[2:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[2:end]\n    digits = digits[digits[1]:end]\n    digits =\
    \ digits[2:end]\n    digits = digits[digits[1]:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[2:end]\n    digits =\
    \ digits[digits[1]:end]\n    digits = digits[", "    if base < 2 || base > 36\n\
    \        throw(ArgumentError(\"Invalid base\"))\n    end\n    if x == 0\n    \
    \    return \"\"\n    end\n    if base == 10\n        return string(x)\n    end\n\
    \    digits = string(x)\n    digits = digits[2:end]\n    digits = digits[digits[end-1]\
    \ .. end]\n    digits = digits[digits[end-2] .. end]\n    digits = digits[digits[end-3]\
    \ .. end]\n    digits = digits[digits[end-4] .. end]\n    digits = digits[digits[end-5]\
    \ .. end]\n    digits = digits[digits[end-6] .. end]\n    digits = digits[digits[end-7]\
    \ .. end]\n    digits = digits[digits[end-8] .. end]\n    digits = digits[digits[end-9]\
    \ .. end]\n    digits = digits[digits[end-10] .. end]\n    digits = digits[digits[end-11]\
    \ .. end]\n    digits = digits[digits[end-12] .. end]\n    digits = digits[digits[end-13]\
    \ .. end]\n    digits = digits[digits[end-14] .. end]\n    digits = digits[digits[end-15]\
    \ .. end]\n    digits = digits[digits[end-16] .. end]\n    digits = digits[digits[end-17]\
    \ .. end]\n    digits = digits[digits[end-18] .. end]\n    digits = digits[digits[end-19]\
    \ .. end]\n    digits = digits[digits[end-20] .. end]\n    digits = digits[digits[end-21]\
    \ .. end]\n    digits = digits[digits[end-22] .. end]\n    digits = digits[digits[end-23]\
    \ .. end]\n    digits = digits[digits[end-24] .. end]\n    digits = digits[digits[end-25]\
    \ .. end]\n    digits = digits[digits[end-26] .. end]\n    digits = digits[digits[end-27]\
    \ .. end]\n    digits = digits[digits[end-28] .. end]\n    digits = digits[digits[end-29]\
    \ .. end]\n    digits = digits[digits[end-30] .. end]\n    digits = digits[digits[end-31]\
    \ .. end]\n    digits = digits[digits[end-32] .. end]\n    digits = digits[digits[end-33]\
    \ .. end]\n    digits = digits[digits[end-34] .. end]\n    digits = digits[digits[end-35]\
    \ .. end]\n    digit", "    if base == 10 \n        return toString(x)\n    elseif\
    \ base == 2 \n        return toString(Int64(x/2))\n    elseif base == 8 \n   \
    \     return toString(Int64(x/8))\n    elseif base == 16 \n        return toString(Int64(x/16))\n\
    \    elseif base == 10 \n        return toString(Int64(x/10))\n    elseif base\
    \ == 2 \n        return toString(Int64(x/2))\n    elseif base == 8 \n        return\
    \ toString(Int64(x/8))\n    elseif base == 16 \n        return toString(Int64(x/16))\n\
    \    elseif base == 10 \n        return toString(Int64(x/10))\n    elseif base\
    \ == 2 \n        return toString(Int64(x/2))\n    elseif base == 8 \n        return\
    \ toString(Int64(x/8))\n    elseif base == 16 \n        return toString(Int64(x/16))\n\
    \    elseif base == 10 \n        return toString(Int64(x/10))\n    elseif base\
    \ == 2 \n        return toString(Int64(x/2))\n    elseif base == 8 \n        return\
    \ toString(Int64(x/8))\n    elseif base == 16 \n        return toString(Int64(x/16))\n\
    \    elseif base == 10 \n        return toString(Int64(x/10))\n    elseif base\
    \ == 2 \n        return toString(Int64(x/2))\n    elseif base == 8 \n        return\
    \ toString(Int64(x/8))\n    elseif base == 16 \n        return toString(Int64(x/16))\n\
    \    elseif base == 10 \n        return toString(Int64(x/10))\n    elseif base\
    \ == 2 \n        return toString(Int64(x/2))\n    elseif base == 8 \n        return\
    \ toString(Int64(x/8))\n    elseif base == 16 \n        return toString(Int64(x/16))\n\
    \    elseif base == 10 \n        return toString(Int64(x/10))\n    elseif base\
    \ == 2 \n        return toString(Int64(x/2))\n    elseif base == 8 \n        return\
    \ toString(Int64(x/8))\n    elseif base == 16 \n        return toString(Int64(x/16))\n\
    \    elseif base == 10 \n        return toString(Int64(x/10))\n    elseif base\
    \ == 2 \n        return toString(Int64(x/2))\n    elseif base == 8 \n        return\
    \ toString(Int64(x/8))\n    elseif base == 16 \n        return toString(Int64(x/16))\n\
    \    elseif base == 10 \n        return toString(Int64(x/10))\n    elseif base\
    \ == 2 \n        return toString(Int64(x/2))\n    elseif base == 8 \n        return\
    \ toString(Int64(x/8))\n    elseif base == 16 \n        return toString(Int64(x/16))\n\
    \    elseif base == ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 10\n        return toString(x)\n\
    \    else\n        return toString(change_base(x, base-1))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(42, 10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary to decimal.\nThe function should take a string\
    \ as input.\nThe function should return an Int64.\nThe function should throw an\
    \ error if the input string is not in binary format.\nThe function should throw\
    \ an error if the input string contains more than 1 '1'.\nThe function should\
    \ throw an error if the input string contains more than 1 '0'.\nThe function should\
    \ throw an error if the input string contains more than 2 digits.\nThe function\
    \ should throw an error if the input string contains more than 2 digits.\nThe\
    \ function should throw an error if the input string contains more than 3 digits.\n\
    The function should throw an error if the input string contains more than 3 digits.\n\
    The function should throw an error if the input string contains more than 4 digits.\n\
    The function should throw an error if the input string contains more than 4 digits.\n\
    The function should throw an error if the input string contains more than 5 digits.\n\
    The function should throw an error if the input string contains more than 5 digits.\n\
    The function should throw an error if the input string contains more than 6 digits.\n\
    The function should throw an error if the input string contains more than 6 digits.\n\
    The function should throw an error if the input string contains more than 7 digits.\n\
    The function should throw an error if the input string contains more than 7 digits.\n\
    The function should throw an error if the input string contains more than 8 digits.\n\
    The function should throw an error if the input string contains more than 8 digits.\n\
    The function should throw an error if the input string contains more than 9 digits.\n\
    The function should throw an error if the input string contains more than 9 digits.\n\
    The function should throw an error if the input string contains more than 10 digits.\n\
    The function should throw an error if the input string contains more than 10 digits.\n\
    The function should throw an error if the input string contains more than 11 digits.\n\
    The function should throw an error if the input string contains more than 11 digits.\n\
    The function should throw an error if the input string contains more than 12 digits.\n\
    The function should throw an error if the input string contains more than 12 digits.\n\
    The function should throw an error if the input string contains more than 13 digits.\n\
    The function should throw an error if the input string contains more than 13 digits.\n\
    The function should throw an error if the input string contains more than 14 digits.\n\
    The function should throw an error if the input string contains more than 14 digits.\n\
    The function should throw an error if the input string contains more than 15 digits.\n\
    The function should throw an error if the input string contains more than 15 digits.\n\
    The function should throw an error if the input string contains more than 16 ",
  "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base == 10 \n\
    \        return toString(x)\n    else \n        return toString(change_base(x,\
    \ base-1))\nend\n</cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal.\nThe input is a string that consists of 0s and 1s.\n\
    The output is a decimal number.\nThe function should ignore the leading zeros.\n\
    The function should ignore the trailing zeros.\nThe function should ignore the\
    \ leading minus sign.\nThe function should ignore the trailing minus sign.\nThe\
    \ function should ignore the leading plus sign.\nThe function should ignore the\
    \ trailing plus sign.\nThe function should ignore the leading minus sign.\nThe\
    \ function should ignore the trailing minus sign.\nThe function should ignore\
    \ the leading plus sign.\nThe function should ignore the trailing plus sign.\n\
    The function should ignore the leading minus sign.\nThe function should ignore\
    \ the trailing minus sign.\nThe function should ignore the leading plus sign.\n\
    The function should ignore the trailing plus sign.\nThe function should ignore\
    \ the leading minus sign.\nThe function should ignore the trailing minus sign.\n\
    The function should ignore the leading plus sign.\nThe function should ignore\
    \ the trailing plus sign.\nThe function should ignore the leading minus sign.\n\
    The function should ignore the trailing minus sign.\nThe function should ignore\
    \ the leading plus sign.\nThe function should ignore the trailing plus sign.\n\
    The function should ignore the leading minus sign.\nThe function should ignore\
    \ the trailing minus sign.\nThe function should ignore the leading plus sign.\n\
    The function should ignore the trailing plus sign.\nThe function should ignore\
    \ the leading minus sign.\nThe function should ignore the trailing minus sign.\n\
    The function should ignore the leading plus sign.\nThe function should ignore\
    \ the trailing plus sign.\nThe function should ignore the leading minus sign.\n\
    The function should ignore the trailing minus sign.\nThe function should ignore\
    \ the leading plus sign.\nThe function should ignore the trailing plus sign.\n\
    The function should ignore the leading minus sign.\nThe function should ignore\
    \ the trailing minus sign.\nThe function should ignore the leading plus sign.\n\
    The function should ignore the trailing plus sign.\nThe function should ignore\
    \ the leading minus sign.\nThe function should ignore the trailing minus sign.\n\
    The function should ignore the leading plus sign.\nThe function should ignore\
    \ the trailing plus sign.\nThe function should ignore the ", "    if base == 10\
    \ \n        digits = digits(x)\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digit", "    if base < 2 || base > 36\n  \
    \      throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return to_string(x)\n    else\n        return to_string(x / base)\
    \ * base\nend\n</cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(123, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 4)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 5)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 6)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 7)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 9)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 11)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 12)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 13)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 14)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 15)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 17)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 18)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 19)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 20)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 21)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 22)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 23)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 24)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 25)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 26)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 27)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 28)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 29)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 30)", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"Base must be between 2 and 36\"))\n\
    \    end\n    \n    if base == 2\n        return string(x)\n    end\n    \n  \
    \  if base == 10\n        return string(x)\n    end\n    \n    if base == 16\n\
    \        return string(x, \"hex\")\n    end\n    \n    if base == 8\n        return\
    \ string(x, \"octal\")\n    end\n    \n    if base == 16\n        return string(x,\
    \ \"hex\")\n    end\n    \n    if base == 10\n        return string(x, \"octal\"\
    )\n    end\n    \n    if base == 16\n        return string(x, \"hex\")\n    end\n\
    \    \n    if base == 10\n        return string(x, \"octal\")\n    end\n    \n\
    \    if base == 16\n        return string(x, \"hex\")\n    end\n    \n    if base\
    \ == 10\n        return string(x, \"octal\")\n    end\n    \n    if base == 16\n\
    \        return string(x, \"hex\")\n    end\n    \n    if base == 10\n       \
    \ return string(x, \"octal\")\n    end\n    \n    if base == 16\n        return\
    \ string(x, \"hex\")\n    end\n    \n    if base == 10\n        return string(x,\
    \ \"octal\")\n    end\n    \n    if base == 16\n        return string(x, \"hex\"\
    )\n    end\n    \n    if base == 10\n        return string(x, \"octal\")\n   \
    \ end\n    \n    if base == 16\n        return string(x, \"hex\")\n    end\n \
    \   \n    if base == 10\n        return string(x, \"octal\")\n    end\n    \n\
    \    if base == 16\n        return string(x, \"hex\")\n    end\n    \n    if base\
    \ == 10\n        return string(x, \"octal\")\n    end\n    \n    if base == 16\n\
    \        return string(x, \"hex\")\n    end\n    \n    if base == 10\n       \
    \ return string(x, \"octal\")\n    end\n    \n    if base == 16\n        return\
    \ string(x, \"hex\")\n    end\n    \n    if base == 10\n        return string(x,\
    \ \"octal\")\n    end\n    \n    if base == 16\n        return string(x, \"hex\"\
    )\n    end\n    \n    if base == 10\n        return string(x, \"octal\")\n   \
    \ end\n    \n    if base == 16\n        return string(x, \"hex\")\n    end\n \
    \   \n    if base == 10\n        return string(x, \"octal\")\n    end\n    \n\
    \    if base == 16\n        return string(x, \"hex\")\n    end\n    \n    if base\
    \ == 10\n        return string(x, \"octal\")\n    end\n    ", "    if base ==\
    \ 10 \n        then return \"0\" + to_string(x)\n    else \n        digits = digits(x)\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base, base = base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(123, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 4)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 5)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 6)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 7)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 9)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 11)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 12)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 13)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 14)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 15)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 17)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 18)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 19)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 20)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 21)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 22)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 23)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 24)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 25)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 26)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 27)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 28)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 29)\n</cell>\n<code language=julia-1.5>\n\
    change_base(12", "    if base < 10\n        error(\"base must be less than 10\"\
    )\n    end\n    digits = split(string(x), \"\")\n    digits = digits[digits.length\
    \ - digits[end].digits:end]\n    digits = digits[digits.length - digits[end].digits:end]\n\
    \    digits = digits[digits.length - digits[end].digits:end]\n    digits = digits[digits.length\
    \ - digits[end].digits:end]\n    digits = digits[digits.length - digits[end].digits:end]\n\
    \    digits = digits[digits.length - digits[end].digits:end]\n    digits = digits[digits.length\
    \ - digits[end].digits:end]\n    digits = digits[digits.length - digits[end].digits:end]\n\
    \    digits = digits[digits.length - digits[end].digits:end]\n    digits = digits[digits.length\
    \ - digits[end].digits:end]\n    digits = digits[digits.length - digits[end].digits:end]\n\
    \    digits = digits[digits.length - digits[end].digits:end]\n    digits = digits[digits.length\
    \ - digits[end].digits:end]\n    digits = digits[digits.length - digits[end].digits:end]\n\
    \    digits = digits[digits.length - digits[end].digits:end]\n    digits = digits[digits.length\
    \ - digits[end].digits:end]\n    digits = digits[digits.length - digits[end].digits:end]\n\
    \    digits = digits[digits.length - digits[end].digits:end]\n    digits = digits[digits.length\
    \ - digits[end].digits:end]\n    digits = digits[digits.length - digits[end].digits:end]\n\
    \    digits = digits[digits.length - digits[end].digits:end]\n    digits = digits[digits.length\
    \ - digits[end].digits:end]\n    digits = digits[digits.length - digits[end].digits:end]\n\
    \    digits = digits[digits.length - digits[end].digits:end]\n    digits = digits[digits.length\
    \ - digits[end].digits:end]\n    digits = digits[digits.length - digits[end].digits:end]\n\
    \    digits = digits[digits.length - digits[end].digits:end]\n    digits = digits[digits.length\
    \ - digits[end].digits:end]\n    digits = digits[digits.length - digits[end].digits:end]\n\
    \    digits = digits[digits.length - digits[end].digits:end]\n    digits = digits[digits.length\
    \ - digit", "    if base < 2 || base > 36\n        throw(ArgumentError(\"base\
    \ must be between 2 and 36\"))\n    elseif base == 10\n        return toString(x)\n\
    \    else\n        return toString(toBase(x, base))\nend", "    if base < 10\n\
    \        error(\"base must be greater than or equal to 10\")\n    end\n    if\
    \ base == 10\n        return string(x)\n    end\n    if base == 16\n        return\
    \ string(x, digits=16)\n    end\n    if base == 8\n        return string(x, digits=8)\n\
    \    end\n    if base == 2\n        return string(x, digits=2)\n    end\n    if\
    \ base == 1\n        return string(x, digits=1)\n    end\n    error(\"base must\
    \ be 1, 2, 8, 10, or 16\")\nend\n</cell>\n<code language=julia-1.5>\nchange_base(123,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<text>\nExercise\nWrite a function that converts\
    \ binary to decimal.", "    if base == 10 \n        digits = digits(x)\n     \
    \   return digits[1] + digits[2] + digits[3] + digits[4] + digits[5] + digits[6]\
    \ + digits[7] + digits[8] + digits[9] + digits[10]\n    else \n        digits\
    \ = digits(x)\n        digits = digits[base::end]\n        return join(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts binary numbers to decimal numbers.\
    \ \nThe function should take a string of binary digits and return the decimal\
    \ number represented by the binary string.\nThe function should also take a string\
    \ of binary digits and return the decimal number represented by the binary string.\n\
    The function should also take a string of binary digits and return the decimal\
    \ number represented by the binary string.\nThe function should also take a string\
    \ of binary digits and return the decimal number represented by the binary string.\n\
    The function should also take a string of binary digits and return the decimal\
    \ number represented by the binary string.\nThe function should also take a string\
    \ of binary digits and return the decimal number represented by the binary string.\n\
    The function should also take a string of binary digits and return the decimal\
    \ number represented by the binary string.\nThe function should also take a string\
    \ of binary digits and return the decimal number represented by the binary string.\n\
    The function should also take a string of binary digits and return the decimal\
    \ number represented by the binary string.\nThe function should also take a string\
    \ of binary digits and return the decimal number represented by the binary string.\n\
    The function should also take a string of binary digits and return the decimal\
    \ number represented by the binary string.\nThe function should also take a string\
    \ of binary digits and return the decimal number represented by the binary string.\n\
    The function should also take a string of binary digits and return the decimal\
    \ number represented by the binary string.\nThe function should also take a string\
    \ of binary digits and return the decimal number represented by the binary string.\n\
    The function should also take a string of binary digits and return the decimal\
    \ number represented by the binary string.\nThe function should also take a string\
    \ of binary digits and return the decimal number represented by the binary string.\n\
    The function should also take a string of binary digits and return the decimal\
    \ number represented by the binary string.\nThe function should also take a string\
    \ of binary digits and return the decimal number represented by the binary string.\n\
    The function should also take a string of binary digits and return the decimal\
    \ number represented by the binary string.\nThe function should also take a string\
    \ of binary digits and return the decimal number represented by the binary string.\n\
    The function should also take a string of binary digits and return the decimal\
    \ number represented by the binary string.\nThe function should also take a string\
    \ of binary digits and return the decimal number represented by the binary string.\n\
    The function should ", "    if base == 10 \n        digits = digits(x)\n     \
    \   digits = digits[2:end]\n        return join(digits, \"\")\n    else\n    \
    \    digits = digits(x)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        return join(digits, \"\")\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(1234, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from base 10 to base 16. \nThe function should take two arguments:\
    \ x is the number to be converted, and base is the base of the number to be converted.\n\
    The function should return a string representation of the number in base 16.\n\
    The function should return an error if the base is not 10 or 16.", "    if base\
    \ == 10 \n        return toString(x)\n    else \n        return toString(change_base(x,\
    \ base-1))\nend\n</cell>\n<code language=julia-1.4>\nchange_base(123, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.\
    \ \nThe input is a string containing only 0s and 1s.\nThe output is a string containing\
    \ the decimal representation of the binary number.\nThe function should ignore\
    \ leading zeros.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.\nThe function should\
    \ ignore leading 0s.\nThe function should ignore leading 0s.", "    if base ==\
    \ 10 \n        digits = digits(x)\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digit", "    if base < 2 || base > 36\n  \
    \      throw(ArgumentError(\"base must be between 2 and 36\"))\n    end\n    if\
    \ base == 10\n        return string(x)\n    end\n    if base == 16\n        return\
    \ string(x, \"hex\")\n    end\n    if base == 8\n        return string(x, \"oct\"\
    )\n    end\n    if base == 2\n        return string(x, \"dec\")\n    end\n   \
    \ if base == 36\n        return string(x, \"hex\")\n    end\n    if base == 64\n\
    \        return string(x, \"oct\")\n    end\n    if base == 128\n        return\
    \ string(x, \"dec\")\n    end\n    if base == 256\n        return string(x, \"\
    hex\")\n    end\n    if base == 512\n        return string(x, \"oct\")\n    end\n\
    \    if base == 1024\n        return string(x, \"dec\")\n    end\n    if base\
    \ == 2048\n        return string(x, \"hex\")\n    end\n    if base == 4096\n \
    \       return string(x, \"oct\")\n    end\n    if base == 8192\n        return\
    \ string(x, \"dec\")\n    end\n    if base == 16384\n        return string(x,\
    \ \"hex\")\n    end\n    if base == 32768\n        return string(x, \"oct\")\n\
    \    end\n    if base == 65536\n        return string(x, \"dec\")\n    end\n \
    \   if base == 131072\n        return string(x, \"hex\")\n    end\n    if base\
    \ == 262144\n        return string(x, \"oct\")\n    end\n    if base == 524288\n\
    \        return string(x, \"dec\")\n    end\n    if base == 1048576\n        return\
    \ string(x, \"hex\")\n    end\n    if base == 2097152\n        return string(x,\
    \ \"oct\")\n    end\n    if base == 4194304\n        return string(x, \"dec\"\
    )\n    end\n    if base == 8388608\n        return string(x, \"hex\")\n    end\n\
    \    if base == 16777216\n        return string(x, \"oct\")\n    end\n    if base\
    \ == 33554432\n        return string(x, \"dec\")\n    end\n    if base == 67108864\n\
    \        return string(x, \"hex\")\n    end\n    if base == 134217728\n      \
    \  return string(x, \"oct\")\n    end\n    if base == 268435456\n        return\
    \ string(x, \"dec\")\n    end\n    if base == 536870912\n        return string(x,\
    \ \"hex\")\n    end\n    if base == 1073741824\n        return string(x, \"oct\"\
    )\n    end\n    if base == -2147483648\n        return string(x, \"dec\")\n  \
    \  end\n    if base == -2147483648\n        return string(x, \"hex\")\n    end\n",
  "    if base == 10 \n        then return to_string(x)\n    else \n        digits\
    \ = digits(x)\n        digits = digits[digits.length - base:digits.length]\n \
    \       digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        ", "    if base == 10 \n\
    \        then return to_string(x)\n        else return change_base(x / base, base)\
    \ + string(base) + change_base(x % base, base)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(123, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123, 10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a number from one\
    \ base to another.", "    if base == 10 \n        then return String(x)\n    else\
    \ \n        digits = digits(x)\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        ", "    if base < 2 || base\
    \ > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n    end\n\
    \    if base == 2\n        return string(x)\n    end\n    digits = zeros(Int,\
    \ 36)\n    digits[1] = 1\n    digits[2] = 2\n    digits[3] = 3\n    digits[4]\
    \ = 4\n    digits[5] = 5\n    digits[6] = 6\n    digits[7] = 7\n    digits[8]\
    \ = 8\n    digits[9] = 9\n    digits[10] = 10\n    digits[11] = 10\n    digits[12]\
    \ = 10\n    digits[13] = 10\n    digits[14] = 10\n    digits[15] = 10\n    digits[16]\
    \ = 10\n    digits[17] = 10\n    digits[18] = 10\n    digits[19] = 10\n    digits[20]\
    \ = 10\n    digits[21] = 10\n    digits[22] = 10\n    digits[23] = 10\n    digits[24]\
    \ = 10\n    digits[25] = 10\n    digits[26] = 10\n    digits[27] = 10\n    digits[28]\
    \ = 10\n    digits[29] = 10\n    digits[30] = 10\n    digits[31] = 10\n    digits[32]\
    \ = 10\n    digits[33] = 10\n    digits[34] = 10\n    digits[35] = 10\n    digits[36]\
    \ = 10\n    digits[37] = 10\n    digits[38] = 10\n    digits[39] = 10\n    digits[40]\
    \ = 10\n    digits[41] = 10\n    digits[42] = 10\n    digits[43] = 10\n    digits[44]\
    \ = 10\n    digits[45] = 10\n    digits[46] = 10\n    digits[47] = 10\n    digits[48]\
    \ = 10\n    digits[49] = 10\n    digits[50] = 10\n    digits[51] = 10\n    digits[52]\
    \ = 10\n    digits[53] = 10\n    digits[54] = 10\n    digits[55] = 10\n    digits[56]\
    \ = 10\n    digits[57] = 10\n    digits[58] = 10\n    digits[59] = 10\n    digits[60]\
    \ = 10\n    digits[61] = 10\n    digits[62] = 10\n    digits[63] = 10\n    digits[64]\
    \ = 10\n    digits[65] = 10\n    digits[66] = 10\n    digits[67] = 10\n    digits[68]\
    \ = 10\n", "    if base == 10 \n        then return toString(x)\n    else \n \
    \       base = toInt(base)\n        digits = toChar(x)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digit", "    if base == 10 \n        then return\
    \ toString(x)\n        else return change_base(x / base, base) + toString(x%base)\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI wrote a Julia package to\
    \ solve this problem (https://github.com/jrwls/JuliaNumberBase).\n<code>\nusing\
    \ JuliaNumberBase", "    if base == 10 \n        digits = digits(x)\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digit", " \
    \   if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    end\n    if base == 10\n        return string(x)\n    end\n\
    \    if base == 16\n        return string(x, base=16)\n    end\n    if base ==\
    \ 8\n        return string(x, base=8)\n    end\n    if base == 2\n        return\
    \ string(x, base=10)\n    end\n    if base == 36\n        return string(x, base=16)\n\
    \    end\n    if base == 64\n        return string(x, base=8)\n    end\n    if\
    \ base == 128\n        return string(x, base=10)\n    end\n    if base == 256\n\
    \        return string(x, base=16)\n    end\n    if base == 512\n        return\
    \ string(x, base=8)\n    end\n    if base == 1024\n        return string(x, base=10)\n\
    \    end\n    if base == 2048\n        return string(x, base=16)\n    end\n  \
    \  if base == 4096\n        return string(x, base=8)\n    end\n    if base ==\
    \ 8192\n        return string(x, base=10)\n    end\n    if base == 16384\n   \
    \     return string(x, base=16)\n    end\n    if base == 32768\n        return\
    \ string(x, base=8)\n    end\n    if base == 65536\n        return string(x, base=10)\n\
    \    end\n    if base == 131072\n        return string(x, base=16)\n    end\n\
    \    if base == 262144\n        return string(x, base=8)\n    end\n    if base\
    \ == 524288\n        return string(x, base=10)\n    end\n    if base == 1048576\n\
    \        return string(x, base=16)\n    end\n    if base == 2097152\n        return\
    \ string(x, base=8)\n    end\n    if base == 4194304\n        return string(x,\
    \ base=10)\n    end\n    if base == 8388608\n        return string(x, base=16)\n\
    \    end\n    if base == 16777216\n        return string(x, base=8)\n    end\n\
    \    if base == 33554432\n        return string(x, base=10)\n    end\n    if base\
    \ == 67108864\n        return string(x, base=16)\n    end\n    if base == 134217728\n\
    \        return string(x, base=8)\n    end\n    if base == 268435456\n       \
    \ return string(x, base=10)\n    end\n    if base == 536870912\n        return\
    \ string(x, base=16)\n    end\n    if base == 1073741824\n        return string(x,\
    \ base=8)\n    end\n    if base == -2147483648\n        return string(x, base=10)\n\
    \    end\n    if base == -2147483648\n        return string(x, base=16)\n    end\n\
    \    if base == -2147483648\n        return string(x, base=8)\n    end\n    if\
    \ base == -2147483648\n        return string(x, base=10)\n    end", "    if base\
    \ == 10 \n        then return \"0\" + to_string(x)\n        else return to_string(x)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nchange_base(101, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from one base to another.\n\
    The input number x and the base number base are both integers.\nThe output string\
    \ representation after the conversion is returned.\nThe conversion should work\
    \ for any base from 2 to 36.\nThe function should work for negative numbers as\
    \ well.\nThe function should work for any base from 2 to 36.\nThe function should\
    \ work for any base from 2 to 36.\nThe function should work for any base from\
    \ 2 to 36.\nThe function should work for any base from 2 to 36.\nThe function\
    \ should work for any base from 2 to 36.\nThe function should work for any base\
    \ from 2 to 36.\nThe function should work for any base from 2 to 36.\nThe function\
    \ should work for any base from 2 to 36.\nThe function should work for any base\
    \ from 2 to 36.\nThe function should work for any base from 2 to 36.\nThe function\
    \ should work for any base from 2 to 36.\nThe function should work for any base\
    \ from 2 to 36.\nThe function should work for any base from 2 to 36.\nThe function\
    \ should work for any base from 2 to 36.\nThe function should work for any base\
    \ from 2 to 36.\nThe function should work for any base from 2 to 36.\nThe function\
    \ should work for any base from 2 to 36.\nThe function should work for any base\
    \ from 2 to 36.\nThe function should work for any base from 2 to 36.\nThe function\
    \ should work for any base from 2 to 36.\nThe function should work for any base\
    \ from 2 to 36.\nThe function should work for any base from 2 to 36.\nThe function\
    \ should work for any base from 2 to 36.\nThe function should work for any base\
    \ from 2 to 36.\nThe function should work for any base from 2 to 36.\nThe function\
    \ should work for any base from 2 to 36.\nThe function should work for any base\
    \ from 2 to 36.\nThe function should work for any base from 2 to 36.\nThe function\
    \ should work for any base from 2 to 36.\nThe function should work for any base\
    \ from 2 to 36.\nThe function should work for any base from 2 to 36.\nThe function\
    \ should work for any base from 2 to 36.\nThe function should work for any base\
    \ from 2 to 36.\nThe function should work for any base from 2 to 36.\nThe function\
    \ should work for any base from 2 to 36.\nThe function should work for any base\
    \ from 2 to 36.\nThe function should work for any base from 2 to 36.\nThe ", " \
    \   if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base == 10 \n\
    \        then return toString(x)\n        else return change_base(toInt(x), base)\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n\
    \    elseif base == 10\n        return toString(x)\n    else\n        return toString(change_base(x,\
    \ base-1))\nend", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Invalid base\"))\n    end\n    if x < 0\n        throw(ArgumentError(\"Invalid\
    \ input\"))\n    end\n    if base == 10\n        return string(x)\n    end\n \
    \   digits = zeros(Int64, 10)\n    digits[1] = x\n    digits[2] = digits[1] /\
    \ base\n    digits[3] = digits[1] % base\n    digits[4] = digits[2] / base\n \
    \   digits[5] = digits[2] % base\n    digits[6] = digits[3] / base\n    digits[7]\
    \ = digits[3] % base\n    digits[8] = digits[4] / base\n    digits[9] = digits[4]\
    \ % base\n    digits[10] = digits[5] / base\n    digits[11] = digits[5] % base\n\
    \    digits[12] = digits[6] / base\n    digits[13] = digits[6] % base\n    digits[14]\
    \ = digits[7] / base\n    digits[15] = digits[7] % base\n    digits[16] = digits[8]\
    \ / base\n    digits[17] = digits[8] % base\n    digits[18] = digits[9] / base\n\
    \    digits[19] = digits[9] % base\n    digits[20] = digits[10] / base\n    digits[21]\
    \ = digits[10] % base\n    digits[22] = digits[11] / base\n    digits[23] = digits[11]\
    \ % base\n    digits[24] = digits[12] / base\n    digits[25] = digits[12] % base\n\
    \    digits[26] = digits[13] / base\n    digits[27] = digits[13] % base\n    digits[28]\
    \ = digits[14] / base\n    digits[29] = digits[14] % base\n    digits[30] = digits[15]\
    \ / base\n    digits[31] = digits[15] % base\n    digits[32] = digits[16] / base\n\
    \    digits[33] = digits[16] % base\n    digits[34] = digits[17] / base\n    digits[35]\
    \ = digits[17] % base\n    digits[36] = digits[18] / base\n    digits[37] = digits[18]\
    \ % base\n    digits[38] = digits[19] / base\n    digits[39] = digits[19] % base\n\
    \    digits[40] = digits[20] / base\n    digits[41] = digits[20] % base\n    digits[",
  "    if base < 2 || base > 36\n        error(\"Invalid base\")\n    elseif base\
    \ == 10\n        return string(x)\n    else\n        return string(x/base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base^base*base",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 10\n        return toString(x)\n    else\n\
    \        digits = digits(x)\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[0 : digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digit", "    if base == 10 \n        digits = digits(x)\n   \
    \     digits = digits[2:end]\n        digits = digits[2:end]\n        return join(digits,\
    \ \"\")\n    elseif base == 2 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        return join(digits, \"\")\n    elseif base == 8 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 16 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n    elseif base == 10 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 2 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 8 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 16 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n    elseif base == 10 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 2 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 8 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 16 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n    elseif base == 10 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 2 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 8 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 16 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n    elseif base == 10 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 2 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 8 \n        digits = digits(x)\n\
    \        digits = digits[2:", "    if base == 10 \n        then return toString(x)\n\
    \        else return change_base(x / base, base) + toString(x%base)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nchange_base(123, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts a number from one base to another.\
    \ \nFor example, a number in base 10 can be converted to base 2 by multiplying\
    \ it by 10 and then dividing it by 2.\nWrite a function that converts a number\
    \ from one base to another. \nFor example, a number in base 10 can be converted\
    \ to base 2 by multiplying it by 10 and then dividing it by 2.", "    if base\
    \ == 10 \n        digits = digits(x)\n        return digits[1] + digits[2] + digits[3]\n\
    \    else \n        digits = digits(x)\n        digits = digits[base-1:end]\n\
    \        return join(digits, \"\")\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    I added a more general solution that works for any base and any number of digits.\n\
    <|/ c |>\n<| a dscore=2 |>\nHere's a solution using Julia's built-in string manipulation\
    \ functions:\n<code>", "    if base == 10 \n        then return toString(x)\n\
    \        else return change_base(x / base, base) + toString(x%base)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nchange_base(123, 10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts binary numbers to decimal numbers.",
  "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base == 10 \n\
    \        then return toString(x)\n    else \n        digits = toString(x%base)\n\
    \        digits = digits[2:end]\n        return digits + change_base(x/base, base)\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `change_base(-11, 2)` returns `11` instead of `-1`.\n<|/ c |>\n<| c\
    \ |>\nI added a version that works for negative numbers. I tested it on Julia\
    \ 1.5.2\n<|/ c |>\n<| a |>\nThe other answers here are great, but they don't work\
    \ for negative numbers. Here's a version that does:\n<code>", "    if base ==\
    \ 10 \n        digits = digits(x)\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digit", "    if base == 10 \n        then\
    \ return to_string(x)\n        else return change_base(x / base, base) + string(base)\
    \ + change_base(x % base, base)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(105, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. \nThe function should take two arguments:\
    \ a string of binary digits and a base (2 to 36).\nThe function should return\
    \ the decimal number represented by the binary string.\nThe function should raise\
    \ an error if the base is not in the range 2 to 36.\nThe function should raise\
    \ an error if the string contains more than one binary digit.\nThe function should\
    \ raise an error if the string contains leading zeros.\nThe function should raise\
    \ an error if the string contains leading zeros.\nThe function should raise an\
    \ error if the string contains leading zeros.\nThe function should raise an error\
    \ if the string contains leading zeros.\nThe function should raise an error if\
    \ the string contains leading zeros.\nThe function should raise an error if the\
    \ string contains leading zeros.\nThe function should raise an error if the string\
    \ contains leading zeros.\nThe function should raise an error if the string contains\
    \ leading zeros.\nThe function should raise an error if the string contains leading\
    \ zeros.\nThe function should raise an error if the string contains leading zeros.\n\
    The function should raise an error if the string contains leading zeros.\nThe\
    \ function should raise an error if the string contains leading zeros.\nThe function\
    \ should raise an error if the string contains leading zeros.\nThe function should\
    \ raise an error if the string contains leading zeros.\nThe function should raise\
    \ an error if the string contains leading zeros.\nThe function should raise an\
    \ error if the string contains leading zeros.\nThe function should raise an error\
    \ if the string contains leading zeros.\nThe function should raise an error if\
    \ the string contains leading zeros.\nThe function should raise an error if the\
    \ string contains leading zeros.\nThe function should raise an error if the string\
    \ contains leading zeros.\nThe function should raise an error if the string contains\
    \ leading zeros.\nThe function should raise an error if the string contains leading\
    \ zeros.\nThe function should raise an error if the string contains leading zeros.\n\
    The function should raise an error if the string contains leading zeros.\nThe\
    \ function should raise an error if the string contains leading zeros.\nThe function\
    \ should raise an error if the string contains leading zeros.\nThe function should\
    \ raise an error if the string contains leading zeros.\nThe function should raise\
    \ an error if the string contains leading zeros.\nThe function should raise an\
    \ error if the string contains leading zeros.\nThe function should raise an error\
    \ if the string contains leading zeros.\nThe function should raise an error if\
    \ the string contains leading zeros.\nThe function should raise an error if the\
    \ string contains leading zeros.", "    if base == 10 \n        return tostring(x)\n\
    \    else \n        return change_base(div(x, base), base) + tostring(x)\nend\n\
    </cell>\n<code language=julia-1.4>\nchange_base(1234, 10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a number from binary to decimal.\nThe input\
    \ number x is represented as a string in binary (base 2). \nThe output number\
    \ y is represented as a string in decimal (base 10).\nThe function should work\
    \ for any base (2 to 36).\nThe function should raise an error if the input string\
    \ does not represent a binary number.\nThe function should raise an error if the\
    \ input string does not represent a decimal number.\nThe function should raise\
    \ an error if the input string does not represent a binary number or decimal number.\n\
    The function should raise an error if the input string does not represent a binary\
    \ number or decimal number.\nThe function should raise an error if the input string\
    \ does not represent a binary number or decimal number.\nThe function should raise\
    \ an error if the input string does not represent a binary number or decimal number.\n\
    The function should raise an error if the input string does not represent a binary\
    \ number or decimal number.\nThe function should raise an error if the input string\
    \ does not represent a binary number or decimal number.\nThe function should raise\
    \ an error if the input string does not represent a binary number or decimal number.\n\
    The function should raise an error if the input string does not represent a binary\
    \ number or decimal number.\nThe function should raise an error if the input string\
    \ does not represent a binary number or decimal number.\nThe function should raise\
    \ an error if the input string does not represent a binary number or decimal number.\n\
    The function should raise an error if the input string does not represent a binary\
    \ number or decimal number.\nThe function should raise an error if the input string\
    \ does not represent a binary number or decimal number.\nThe function should raise\
    \ an error if the input string does not represent a binary number or decimal number.\n\
    The function should raise an error if the input string does not represent a binary\
    \ number or decimal number.\nThe function should raise an error if the input string\
    \ does not represent a binary number or decimal number.\nThe function should raise\
    \ an error if the input string does not represent a binary number or decimal number.\n\
    The function should raise an error if the input string does not represent a binary\
    \ number or decimal number.\nThe function should raise an error if the input string\
    \ does not represent a binary number or decimal number.\nThe function should raise\
    \ an error if the input string does not represent a binary number or decimal number.\n\
    The function should raise an error if the input string does not represent a binary\
    \ number or decimal number.\nThe function should raise an error if the input string\
    \ does not represent a binary number or decimal number.\nThe function should raise\
    \ an error if the input string does not represent a binary number or decimal number.\n\
    The ", "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base == 10 \n\
    \        return toString(x)\n    elseif base == 2 \n        return toString(toInt(x))\n\
    \    elseif base == 8 \n        return toString(toInt(x)*2)\n    elseif base ==\
    \ 16 \n        return toString(toInt(x)*4)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*8)\n    elseif base == 2 \n        return toString(toInt(x)*16)\n\
    \    elseif base == 8 \n        return toString(toInt(x)*32)\n    elseif base\
    \ == 16 \n        return toString(toInt(x)*64)\n    elseif base == 10 \n     \
    \   return toString(toInt(x)*128)\n    elseif base == 2 \n        return toString(toInt(x)*256)\n\
    \    elseif base == 8 \n        return toString(toInt(x)*512)\n    elseif base\
    \ == 16 \n        return toString(toInt(x)*1024)\n    elseif base == 10 \n   \
    \     return toString(toInt(x)*2048)\n    elseif base == 2 \n        return toString(toInt(x)*4096)\n\
    \    elseif base == 8 \n        return toString(toInt(x)*8192)\n    elseif base\
    \ == 16 \n        return toString(toInt(x)*16384)\n    elseif base == 10 \n  \
    \      return toString(toInt(x)*32768)\n    elseif base == 2 \n        return\
    \ toString(toInt(x)*65536)\n    elseif base == 8 \n        return toString(toInt(x)*131072)\n\
    \    elseif base == 16 \n        return toString(toInt(x)*262144)\n    elseif\
    \ base == 10 \n        return toString(toInt(x)*524288)\n    elseif base == 2\
    \ \n        return toString(toInt(x)*1048576)\n    elseif base == 8 \n       \
    \ return toString(toInt(x)*2097152)\n    elseif base == 16 \n        return toString(toInt(x)*4194304)\n\
    \    elseif base == 10 \n        return toString(toInt(x)*8388608)\n    elseif\
    \ base == 2 \n        return toString(toInt(x)*16777216)\n    elseif base == 8\
    \ \n        return toString(toInt(x)*33554432)\n    elseif base == 16 \n     \
    \   return toString(toInt(x)*67108864)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*134217728)\n    elseif base == 2 \n        return toString(toInt(x)*268435456)\n\
    \    elseif base == 8 \n        return toString(toInt(x)*536870912)\n    elseif\
    \ base == 16 \n        return toString(toInt(x)*1073741824)\n    elseif base ==\
    \ 10 \n        return toString(toInt(x)*2147483648)\n    elseif ", "    if base\
    \ == 10 \n        then return to_string(x)\n        else return change_base(x\
    \ / base, base) + string(base) + change_base(x % base, base)\n    end\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| a dscore=0 |>\nI wanted to add an answer that uses\
    \ no loops and no string concatenation. \n<code>", "    if base == 10 \n     \
    \   then return \"0\" + to_string(x)\n        else return to_string(base) + to_string(x)\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that converts a number from one base to another.",
  "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base == 10 \n\
    \        then return toString(x)\n    else \n        digits = digits(x)\n    \
    \    digits = digits[digits.length - base:digits.length]\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        ",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    end\n    \n    if base == 10\n        return string(x)\n \
    \   end\n    \n    digits = zeros(Int64, x)\n    digits[digits == 0] = base\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    return string(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 4)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 5)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 6)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 7)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 9)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 11)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 12)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 13)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 14)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 15)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 17)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 18)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 19)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 20)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 21)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 22)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 23)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 24)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 25)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 26)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 27)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 28)",
  "    if base == 10 \n        then return toString(x)\n        else return change_base(x\
    \ / base, base) + toString(x%base)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(123, 10)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number to a string with leading zeros up to a certain number of digits. For\
    \ example, a number 123456 would be converted to \"000123456\".", "    if base\
    \ == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n       \
    \ digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digit", "    if base == 10 \n        return\
    \ toString(x)\n    elseif base == 2 \n        return toBin(x)\n    elseif base\
    \ == 8 \n        return toOct(x)\n    elseif base == 16 \n        return toHex(x)\n\
    \    elseif base == 16 \n        return toDec(x)\n    elseif base == 2 \n    \
    \    return toBin(x)\n    elseif base == 8 \n        return toOct(x)\n    elseif\
    \ base == 16 \n        return toHex(x)\n    elseif base == 16 \n        return\
    \ toDec(x)\n    elseif base == 2 \n        return toBin(x)\n    elseif base ==\
    \ 8 \n        return toOct(x)\n    elseif base == 16 \n        return toHex(x)\n\
    \    elseif base == 16 \n        return toDec(x)\n    elseif base == 2 \n    \
    \    return toBin(x)\n    elseif base == 8 \n        return toOct(x)\n    elseif\
    \ base == 16 \n        return toHex(x)\n    elseif base == 16 \n        return\
    \ toDec(x)\n    elseif base == 2 \n        return toBin(x)\n    elseif base ==\
    \ 8 \n        return toOct(x)\n    elseif base == 16 \n        return toHex(x)\n\
    \    elseif base == 16 \n        return toDec(x)\n    elseif base == 2 \n    \
    \    return toBin(x)\n    elseif base == 8 \n        return toOct(x)\n    elseif\
    \ base == 16 \n        return toHex(x)\n    elseif base == 16 \n        return\
    \ toDec(x)\n    elseif base == 2 \n        return toBin(x)\n    elseif base ==\
    \ 8 \n        return toOct(x)\n    elseif base == 16 \n        return toHex(x)\n\
    \    elseif base == 16 \n        return toDec(x)\n    elseif base == 2 \n    \
    \    return toBin(x)\n    elseif base == 8 \n        return toOct(x)\n    elseif\
    \ base == 16 \n        return toHex(x)\n    elseif base == 16 \n        return\
    \ toDec(x)\n    elseif base == 2 \n        return toBin(x)\n    elseif base ==\
    \ 8 \n        return toOct(x)\n    elseif base == 16 \n        return toHex(x)\n\
    \    elseif base == 16 \n        return toDec(x)\n    elseif base == 2 \n    \
    \    return toBin(x)\n    elseif base == 8 \n        return toOct(x)\n    elseif\
    \ base == 16 \n        return toHex(x)\n    elseif base == 16 \n        return\
    \ toDec(x)\n    elseif base == 2 \n        return toBin(x)\n    elseif base ==\
    \ 8 \n        return toOct(x)\n    elseif base == 16 \n        return toHex(x)\n\
    \    elseif base == 16 \n        return toDec(x)\n    elseif base == 2 \n    \
    \    return toBin(x)\n    elseif base == 8 \n        return to", "    if base\
    \ == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n       \
    \ digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digit", "    if base == 10 \n        then\
    \ return to_string(x)\n        else return change_base(x / base, base) + string(base)\
    \ + change_base(x % base, base)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(102, 10)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal.", "    if base == 10 \n        then return to_string(x)\n\
    \        else return change_base(x / base, base * 10)\n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to work. `change_base(123, 2)` returns\
    \ `123` instead of `1230`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ the code to the answer.\n<|/ c |>\n<| c |>\nIt doesn't work for me on Julia\
    \ 1.5.1. `change_base(123, 2)` returns `123` instead of `1230`.\n<|/ c |>\n<|\
    \ c |>\nI tested it on Julia 1.5.1 too. `change_base(123, 2)` returns `1230`.\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 1.5.1 too. `change_base(123, 2)` returns\
    \ `1230`.\n<|/ c |>\n<| a tags=julia |>\nHere's a solution that doesn't require\
    \ any packages:\n<code>", "    if base == 10 \n        then return to_string(x)\n\
    \    else \n        digits = digits(x)\n        digits = digits[digits.length-1+base-1::end]\n\
    \        return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 3)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 4)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 5)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 6)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 7)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 9)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 11)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 12)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 13)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 14)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 15)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 17)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 18)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 19)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 20)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 21)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 22)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 23)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 24)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 25)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 26)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 27)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 28)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 29)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 30)",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"Base must be between\
    \ 2 and 36\"))\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n\
    \    digits[2] = 2\n    digits[3] = 3\n    digits[4] = 4\n    digits[5] = 5\n\
    \    digits[6] = 6\n    digits[7] = 7\n    digits[8] = 8\n    digits[9] = 9\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = digits[digits:digits:end]\n    \n    digits = digits[digits:digits:end]\n\
    \    \n    digits = ", "    if base == 10 \n        then return toString(x)\n\
    \    else \n        local digits = digits(x)\n        local basedigits = digits(base)\n\
    \        local basedigit = basedigits[end]\n        local digit = digits[end]\n\
    \        local newdigit = digit\n        local newbasedigit = basedigit\n    \
    \    while newdigit > basedigit\n            do newbasedigit = newbasedigit -\
    \ 1\n                newdigit = newdigit - basedigit\n            end\n      \
    \  end\n        return toString(newdigit) + toString(newbasedigit)\nend\n</cell>\n\
    <code language=julia-1.5>\nchange_base(123, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a number from base 10 to base 16 (hexadecimal).\n\
    The function should take two arguments: the number to be converted and the base\
    \ to be converted to.\nThe function should return a string representation of the\
    \ number in hexadecimal.\nThe function should throw an error if the base is not\
    \ in the range [16...255].\nThe function should throw an error if the number is\
    \ negative.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too ", "    if base == 10 \n        return tostring(x)\n\
    \    else \n        return change_base(div(x,base), base) + tostring(x)\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(5,2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a number from base 10 to base 16 (hexadecimal).\n\
    Hint: use tostring and parse.", "    if base == 10 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digit", "    if base == 10 \n        digits = digits(x)\n        digits =\
    \ digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digit", " \
    \   if base < 10\n        error(\"Base must be greater than or equal to 10\")\n\
    \    elseif base > 36\n        error(\"Base must be less than or equal to 36\"\
    )\n    elseif base == 10\n        return string(x)\n    else\n        return string(x/base^base,\
    \ base = base)\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `change_base(-2, 10)` returns `2` instead\
    \ of `-2`.\n<|/ c |>\n<| c |>\nThanks, I fixed the negative number issue.\n<|/\
    \ c |>\n<| a dscore=2 |>\nThe easiest way is to use Base.string(x::Int64, base::Int64):\n\
    <code>\njulia> Base.string(-2, 10)\n\"-2\"\n</code>\n<|/ a tags=julia,string |>\n\
    <| c |>\nThis doesn't work for negative numbers. `Base.string(-2, 10)` returns\
    \ `2` instead of `-2`.\n<|/ c |>\n<| c |>\nThanks, I fixed the negative number\
    \ issue.\n<|/ c |>\n<| a tags=julia,string |>\nI wrote a package to handle this\
    \ kind of problems. You can install it using Pkg.add(\"BaseString\")\n<code>\n\
    julia> using BaseString", "    if base == 10 \n        then return to_string(x)\n\
    \        else return change_base(x / base, base) * base + change_base(x % base,\
    \ base)\n    end\nend\n</cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 8)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 16)\n", "    if base == 10 \n        then return \"0\" + to_string(x)\n\
    \    else \n        digits = digits(x)\n        digits = digits[digits.length\
    \ - base::Int64]\n        digits = digits[digits.length - base::Int64]\n     \
    \   digits = digits[digits.length - base::Int64]\n        digits = digits[digits.length\
    \ - base::Int64]\n        digits = digits[digits.length - base::Int64]\n     \
    \   digits = digits[digits.length - base::Int64]\n        digits = digits[digits.length\
    \ - base::Int64]\n        digits = digits[digits.length - base::Int64]\n     \
    \   digits = digits[digits.length - base::Int64]\n        digits = digits[digits.length\
    \ - base::Int64]\n        digits = digits[digits.length - base::Int64]\n     \
    \   digits = digits[digits.length - base::Int64]\n        digits = digits[digits.length\
    \ - base::Int64]\n        digits = digits[digits.length - base::Int64]\n     \
    \   digits = digits[digits.length - base::Int64]\n        digits = digits[digits.length\
    \ - base::Int64]\n        digits = digits[digits.length - base::Int64]\n     \
    \   digits = digits[digits.length - base::Int64]\n        digits = digits[digits.length\
    \ - base::Int64]\n        digits = digits[digits.length - base::Int64]\n     \
    \   digits = digits[digits.length - base::Int64]\n        digits = digits[digits.length\
    \ - base::Int64]\n        digits = digits[digits.length - base::Int64]\n     \
    \   digits = digits[digits.length - base::Int64]\n        digits = digits[digits.length\
    \ - base::Int64]\n        digits = digits[digits.length - base::Int64]\n     \
    \   digits = digits[digits.length - base::Int64]\n        digits = digits[digits.length\
    \ - base::Int64]\n        digits = digits[digits.length - base::Int64]\n     \
    \   digits = digits[digits.length - base::Int64]\n        digits = digits[digits.length\
    \ - base::Int64]\n        digits = digits[digits.length - base::Int64]\n     \
    \   digits = digits[digits.length - base::Int64]\n        digits = digits[digits.length\
    \ - base::Int64]\n        digits = digits[digits.length - base::Int64", "    if\
    \ base == 10 \n        then return to_string(x)\n        else return change_base(x\
    \ / base, base * base)\nend\n</cell>\n<code language=julia-1.4>\nchange_base(42,\
    \ 10)\n</cell>\n<code language=julia-1.4>\nchange_base(42, 2)\n</cell>\n<text>\n\
    Exercise\nWrite a function that converts a number from base 10 to base 16 (hexadecimal).",
  "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        return join(digits, \"\")\n    else\n        digits = digits(x)\n   \
    \     digits = digits[2:end]\n        digits = digits[digits[1]:end]\n       \
    \ return join(digits, base)\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>", "    if base == 10 \n        digits = digits(x)\n        return digits[digits.length-1]\n\
    \    else \n        digits = digits(x)\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digits.length-1]\n        digits = digits[digits.length-1]\n\
    \        digits = digits[digit", "    if base == 10 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 2 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 8 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 16 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n    elseif base == 2 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 8 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 16 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 2 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 8 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 16 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n    elseif base == 2 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 8 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 16 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 2 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 8 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 16 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n    elseif base == 2 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 8 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 16 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n", "    if\
    \ base == 10 \n        then return toString(x)\n    else \n        digits = toString(x)\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[digits.length - digits.length % base]\n        digits =\
    \ digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[digits.length - digits.length % base]\n        digits =\
    \ digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[digits.length - digits.length % base]\n        digits =\
    \ digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[digits.length - digits.length % base]\n        digits =\
    \ digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[digits.length - digits.length % base]\n        digits =\
    \ digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[digits.length - digits.length % base]\n        digits =\
    \ digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digit", "    if base == 10 \n        then return toString(x)\n        else\
    \ return change_base(x / base, base) + toString(x%base)\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>", "    if base == 10 \n        then return to_string(x)\n\
    \        else return change_base(x / base, base * base)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nThe function below will convert a number from base 10\
    \ to base 16 (hexadecimal).\n<code>", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 10\n        return toString(x)\n\
    \    else\n        return toString(change_base(x / base, base))\nend", "    if\
    \ base == 10 \n        then return to_string(x)\n        else return change_base(to_string(x\
    \ / base), base)\n    end\nend\n</cell>\n<code language=julia-1.3>\nchange_base(123,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers\
    \ to decimal numbers.", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend", "    if base == 10 \n       \
    \ then return to_string(x)\n        else return change_base(x / base, base * base)\n\
    end\n</code>\n<|/ a |>\n<| a tags=julia,type-conversion |>\nI wrote a package\
    \ for converting between different bases:\nhttps://github.com/kamiyamane/BaseConvert\n\
    <code>\nusing BaseConvert", "    if base == 10 \n        then return to_string(x)\n\
    \        else return change_base(x / base, base * base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from base 10 to base 16. \nThe input number x is assumed to be a positive\
    \ integer.\nThe output string representation is returned as a string.\nThe input\
    \ number x is assumed to be a positive integer.\nThe output string representation\
    \ is returned as a string.\nThe input number x is assumed to be a positive integer.\n\
    The output string representation is returned as a string.\nThe input number x\
    \ is assumed to be a positive integer.\nThe output string representation is returned\
    \ as a string.\nThe input number x is assumed to be a positive integer.\nThe output\
    \ string representation is returned as a string.\nThe input number x is assumed\
    \ to be a positive integer.\nThe output string representation is returned as a\
    \ string.\nThe input number x is assumed to be a positive integer.\nThe output\
    \ string representation is returned as a string.\nThe input number x is assumed\
    \ to be a positive integer.\nThe output string representation is returned as a\
    \ string.\nThe input number x is assumed to be a positive integer.\nThe output\
    \ string representation is returned as a string.\nThe input number x is assumed\
    \ to be a positive integer.\nThe output string representation is returned as a\
    \ string.\nThe input number x is assumed to be a positive integer.\nThe output\
    \ string representation is returned as a string.\nThe input number x is assumed\
    \ to be a positive integer.\nThe output string representation is returned as a\
    \ string.\nThe input number x is assumed to be a positive integer.\nThe output\
    \ string representation is returned as a string.\nThe input number x is assumed\
    \ to be a positive integer.\nThe output string representation is returned as a\
    \ string.\nThe input number x is assumed to be a positive integer.\nThe output\
    \ string representation is returned as a string.\nThe input number x is assumed\
    \ to be a positive integer.\nThe output string representation is returned as a\
    \ string.\nThe input number x is assumed to be a positive integer.\nThe output\
    \ string representation is returned as a string.\nThe input number x is assumed\
    \ to be a positive integer.\nThe output string representation is returned as a\
    \ string.\nThe input number x is assumed to be a positive integer.\nThe output\
    \ string representation is returned as a string.\nThe input number x is assumed\
    \ to be a positive integer.\nThe output string representation is returned as a\
    \ string.\nThe input number x is assumed to be a positive integer.\nThe output\
    \ string representation is returned as a string.\nThe input number x is assumed\
    \ to be a positive integer.\nThe output string representation is returned as a\
    \ string.\nThe input number x is assumed to be a positive ", "    if base == 10\
    \ \n        then return to_string(x)\n        else return change_base(x / base,\
    \ base * base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(12, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    end\n    \n    if x == 0\n        return\
    \ \"\"\n    end\n    \n    if base == 10\n        return string(x)\n    end\n\
    \    \n    if base == 16\n        return string(x, \"hex\")\n    end\n    \n \
    \   if base == 8\n        return string(x, \"oct\")\n    end\n    \n    if base\
    \ == 2\n        return string(x, \"dec\")\n    end\n    \n    if base == 36\n\
    \        return string(x, \"hex\")\n    end\n    \n    if base == 62\n       \
    \ return string(x, \"dec\")\n    end\n    \n    if base == 64\n        return\
    \ string(x, \"oct\")\n    end\n    \n    if base == 10\n        return string(x,\
    \ \"dec\")\n    end\n    \n    if base == 16\n        return string(x, \"hex\"\
    )\n    end\n    \n    if base == 8\n        return string(x, \"oct\")\n    end\n\
    \    \n    if base == 2\n        return string(x, \"dec\")\n    end\n    \n  \
    \  if base == 36\n        return string(x, \"hex\")\n    end\n    \n    if base\
    \ == 62\n        return string(x, \"dec\")\n    end\n    \n    if base == 64\n\
    \        return string(x, \"oct\")\n    end\n    \n    if base == 10\n       \
    \ return string(x, \"dec\")\n    end\n    \n    if base == 16\n        return\
    \ string(x, \"hex\")\n    end\n    \n    if base == 8\n        return string(x,\
    \ \"oct\")\n    end\n    \n    if base == 2\n        return string(x, \"dec\"\
    )\n    end\n    \n    if base == 36\n        return string(x, \"hex\")\n    end\n\
    \    \n    if base == 62\n        return string(x, \"dec\")\n    end\n    \n \
    \   if base == 64\n        return string(x, \"oct\")\n    end\n    \n    if base\
    \ == 10\n        return string(x, \"dec\")\n    end\n    \n    if base == 16\n\
    \        return string(x, \"hex\")\n    end\n    \n    if base == 8\n        return\
    \ string(x, \"oct\")\n    end\n    \n    if base == 2\n        return string(x,\
    \ \"dec\")\n    end\n    \n    if base == 36\n        return string(x, \"hex\"\
    )\n    end\n    \n    if base == 62\n        return string(x, \"dec\")\n    end\n\
    \    \n    if base == 64\n        return string(x, \"oct\")\n    end\n    \n \
    \   if base == 10\n        return string(x, \"dec\")\n    end\n    \n    if base\
    \ == 16\n        return string(x, \"hex\")\n    end\n    ", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"Invalid base\"))\n    end\n    if base\
    \ == 10\n        return string(x)\n    end\n    if base == 16\n        return\
    \ string(x, base = 16)\n    end\n    if base == 8\n        return string(x, base\
    \ = 8)\n    end\n    if base == 2\n        return string(x, base = 2)\n    end\n\
    \    if base == 36\n        return string(x, base = 10)\n    end\n    if base\
    \ == 64\n        return string(x, base = 16)\n    end\n    if base == 128\n  \
    \      return string(x, base = 16)\n    end\n    if base == 256\n        return\
    \ string(x, base = 16)\n    end\n    if base == 512\n        return string(x,\
    \ base = 16)\n    end\n    if base == 1024\n        return string(x, base = 16)\n\
    \    end\n    if base == 2048\n        return string(x, base = 16)\n    end\n\
    \    if base == 4096\n        return string(x, base = 16)\n    end\n    if base\
    \ == 8192\n        return string(x, base = 16)\n    end\n    if base == 16384\n\
    \        return string(x, base = 16)\n    end\n    if base == 32768\n        return\
    \ string(x, base = 16)\n    end\n    if base == 65536\n        return string(x,\
    \ base = 16)\n    end\n    if base == 131072\n        return string(x, base =\
    \ 16)\n    end\n    if base == 262144\n        return string(x, base = 16)\n \
    \   end\n    if base == 524288\n        return string(x, base = 16)\n    end\n\
    \    if base == 1048576\n        return string(x, base = 16)\n    end\n    if\
    \ base == 2097152\n        return string(x, base = 16)\n    end\n    if base ==\
    \ 4194304\n        return string(x, base = 16)\n    end\n    if base == 8388608\n\
    \        return string(x, base = 16)\n    end\n    if base == 16777216\n     \
    \   return string(x, base = 16)\n    end\n    if base == 33554432\n        return\
    \ string(x, base = 16)\n    end\n    if base == 67108864\n        return string(x,\
    \ base = 16)\n    end\n    if base == 134217728\n        return string(x, base\
    \ = 16)\n    end\n    if base == 268435456\n        return string(x, base = 16)\n\
    \    end\n    if base == 536870912\n        return string(x, base = 16)\n    end\n\
    \    if base == 1073741824\n        return string(x, base = 16)\n    end\n   \
    \ if base == -2147483648\n        return string(x, base = 16)\n    end\n    if\
    \ base == -268435456\n        return string(x, base = 16)\n    end\n    if base\
    \ == -536870912\n        return string(x, base = 16)\n    end\n    if base ==\
    \ -1073741824\n        return string(x, base = 16)\n    end", "    if base < 2\
    \ || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    elseif base == 10\n        return toString(x)\n    else\n        return\
    \ toString(change_base(div(x, base), base))\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers to\
    \ decimal numbers.", "    if base == 10 \n        digits = digits(x)\n       \
    \ digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digit", " \
    \   if base == 10 \n        return toString(x)\n    else \n        return toString(change_base(div(x,\
    \ base), base))\nend\n</cell>\n<code language=julia-1.3>\nchange_base(102, 10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a number from one\
    \ base to another.", "    if base == 10 \n        then return toString(x)\n  \
    \      else return change_base(x / base, base) + toString(x%base)\nend\n</code>\n\
    <|/ a tags=julia,type-conversion,string |>\n<| a |>\nThe other answers here are\
    \ great, but I thought I'd add my own solution. \n<code>", "    if base == 10\
    \ \n        return toString(x)\n    elseif base == 2 \n        return toString(toInt(x))\n\
    \    elseif base == 8 \n        return toString(toInt(x)*2)\n    elseif base ==\
    \ 16 \n        return toString(toInt(x)*4)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*8)\n    elseif base == 16 \n        return toString(toInt(x)*16)\n\
    \    elseif base == 2 \n        return toString(toInt(x)*4)\n    elseif base ==\
    \ 8 \n        return toString(toInt(x)*2)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*8)\n    elseif base == 16 \n        return toString(toInt(x)*16)\n\
    \    elseif base == 2 \n        return toString(toInt(x)*4)\n    elseif base ==\
    \ 8 \n        return toString(toInt(x)*2)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*8)\n    elseif base == 16 \n        return toString(toInt(x)*16)\n\
    \    elseif base == 2 \n        return toString(toInt(x)*4)\n    elseif base ==\
    \ 8 \n        return toString(toInt(x)*2)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*8)\n    elseif base == 16 \n        return toString(toInt(x)*16)\n\
    \    elseif base == 2 \n        return toString(toInt(x)*4)\n    elseif base ==\
    \ 8 \n        return toString(toInt(x)*2)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*8)\n    elseif base == 16 \n        return toString(toInt(x)*16)\n\
    \    elseif base == 2 \n        return toString(toInt(x)*4)\n    elseif base ==\
    \ 8 \n        return toString(toInt(x)*2)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*8)\n    elseif base == 16 \n        return toString(toInt(x)*16)\n\
    \    elseif base == 2 \n        return toString(toInt(x)*4)\n    elseif base ==\
    \ 8 \n        return toString(toInt(x)*2)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*8)\n    elseif base == 16 \n        return toString(toInt(x)*16)\n\
    \    elseif base == 2 \n        return toString(toInt(x)*4)\n    elseif base ==\
    \ 8 \n        return toString(toInt(x)*2)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*8)\n    elseif base == 16 \n        return toString(toInt(x)*16)\n\
    \    elseif base == 2 \n        return toString(toInt(x)*4)\n    elseif base ==\
    \ 8 \n        return toString(toInt(x)*2)\n    elseif base == 10 \n        return\
    \ toString(toInt(x)*8)\n    else", "    if base == 10 \n        then return \"\
    0\" + to_string(x)\n        else return to_string(x)\n    else if base == 2 \n\
    \        then return \"0b\" + to_string(x)\n        else if base == 8 \n     \
    \       then return \"0o\" + to_string(x)\n            else if base == 16 \n \
    \               then return \"0x\" + to_string(x)\n                else return\
    \ \"unknown\"\nend\n</cell>\n<code language=julia-1.5>\nchange_base(5,2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(5,8)\n</cell>\n<code language=julia-1.5>\n\
    change_base(5,16)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from hexadecimal to decimal.\nThe input is a string that consists of\
    \ two hexadecimal digits, each of which must be in range [0,9].\nThe output is\
    \ a string that consists of two decimal digits, each of which must be in range\
    \ [0,9].\nThe function should return an error if the input string does not contain\
    \ exactly two hexadecimal digits, each of which must be in range [0,9].\nThe function\
    \ should return an error if the input string contains any character other than\
    \ [0-9a-f].\nThe function should return an error if the input string contains\
    \ any character other than [0-9a-f].\nThe function should return an error if the\
    \ input string contains any character other than [0-9a-f].\nThe function should\
    \ return an error if the input string contains any character other than [0-9a-f].\n\
    The function should return an error if the input string contains any character\
    \ other than [0-9a-f].\nThe function should return an error if the input string\
    \ contains any character other than [0-9a-f].\nThe function should return an error\
    \ if the input string contains any character other than [0-9a-f].\nThe function\
    \ should return an error if the input string contains any character other than\
    \ [0-9a-f].\nThe function should return an error if the input string contains\
    \ any character other than [0-9a-f].\nThe function should return an error if the\
    \ input string contains any character other than [0-9a-f].\nThe function should\
    \ return an error if the input string contains any character other than [0-9a-f].\n\
    The function should return an error if the input string contains any character\
    \ other than [0-9a-f].\nThe function should return an error if the input string\
    \ contains any character other than [0-9a-f].\nThe function should return an error\
    \ if the input string contains any character other than [0-9a-f].\nThe function\
    \ should return an error if the input string contains any character other than\
    \ [0-9a-f].\nThe function should return an error if the input string contains\
    \ any character other than [0-9a-f].\nThe function should return an error if the\
    \ input string contains any character other than [0-9a-f].\nThe function should\
    \ return an error if the input string contains any character other than [0-9a-f].\n\
    The function should return an error if the input string contains any ", "    if\
    \ base == 10 \n        then return toString(x)\n        else return change_base(toInt(x),\
    \ base)\nend\n</cell>\n<code language=julia-1.3>\nchange_base(123, 10)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(123, 2)\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts a number from one base to another.", "    if base\
    \ < 10 \n        error(\"Base must be less than 10\")\n    else if base == 10\
    \ \n        return toString(x)\n    else \n        return toString(change_base(x,\
    \ base-1))\nend\n</cell>\n<code language=julia-1.3>\nchange_base(123, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    end\n    if base == 10\n        return string(x)\n    end\n\
    \    if base == 16\n        return string(x, base=16)\n    end\n    if base ==\
    \ 8\n        return string(x, base=8)\n    end\n    if base == 2\n        return\
    \ string(x, base=10)\n    end\n    if base == 36\n        return string(x, base=36)\n\
    \    end\n    if base == 64\n        return string(x, base=64)\n    end\n    if\
    \ base == 128\n        return string(x, base=128)\n    end\n    if base == 256\n\
    \        return string(x, base=256)\n    end\n    if base == 512\n        return\
    \ string(x, base=512)\n    end\n    if base == 1024\n        return string(x,\
    \ base=1024)\n    end\n    if base == 2048\n        return string(x, base=2048)\n\
    \    end\n    if base == 4096\n        return string(x, base=4096)\n    end\n\
    \    if base == 8192\n        return string(x, base=8192)\n    end\n    if base\
    \ == 16384\n        return string(x, base=16384)\n    end\n    if base == 32768\n\
    \        return string(x, base=32768)\n    end\n    if base == 65536\n       \
    \ return string(x, base=65536)\n    end\n    if base == 131072\n        return\
    \ string(x, base=131072)\n    end\n    if base == 262144\n        return string(x,\
    \ base=262144)\n    end\n    if base == 524288\n        return string(x, base=524288)\n\
    \    end\n    if base == 1048576\n        return string(x, base=1048576)\n   \
    \ end\n    if base == 2097152\n        return string(x, base=2097152)\n    end\n\
    \    if base == 4194304\n        return string(x, base=4194304)\n    end\n   \
    \ if base == 8388608\n        return string(x, base=8388608)\n    end\n    if\
    \ base == 16777216\n        return string(x, base=16777216)\n    end\n    if base\
    \ == 33554432\n        return string(x, base=33554432)\n    end\n    if base ==\
    \ 67108864\n        return string(x, base=67108864)\n    end\n    if base == 134217728\n\
    \        return string(x, base=134217728)\n    end\n    if base == 268435456\n\
    \        return string(x, base=268435456)\n    end\n    if base == 536870912\n\
    \        return string(x, base=536870912)\n    end\n    if base == 1073741824\n\
    \        return string(x, base=1073741824)\n    end\n    if base == -2147483648\n\
    \        return string(x, ", "    if base == 10 \n        return toString(x)\n\
    \    elseif base == 2 \n        return toString(toInt(x))\n    elseif base ==\
    \ 8 \n        return toString(toInt(x)*256)\n    elseif base == 16 \n        return\
    \ toString(toInt(x)*65536)\n    elseif base == 10 \n        return toString(toInt(x)*10^9)\n\
    \    elseif base == 16 \n        return toString(toInt(x)*10^12)\n    elseif base\
    \ == 2 \n        return toString(toInt(x)*10^6)\n    elseif base == 8 \n     \
    \   return toString(toInt(x)*10^3)\n    elseif base == 10 \n        return toString(toInt(x)*10^6)\n\
    \    elseif base == 16 \n        return toString(toInt(x)*10^9)\n    elseif base\
    \ == 2 \n        return toString(toInt(x)*10^3)\n    elseif base == 8 \n     \
    \   return toString(toInt(x)*10^6)\n    elseif base == 10 \n        return toString(toInt(x)*10^9)\n\
    \    elseif base == 16 \n        return toString(toInt(x)*10^12)\n    elseif base\
    \ == 2 \n        return toString(toInt(x)*10^6)\n    elseif base == 8 \n     \
    \   return toString(toInt(x)*10^3)\n    elseif base == 10 \n        return toString(toInt(x)*10^6)\n\
    \    elseif base == 16 \n        return toString(toInt(x)*10^9)\n    elseif base\
    \ == 2 \n        return toString(toInt(x)*10^3)\n    elseif base == 8 \n     \
    \   return toString(toInt(x)*10^6)\n    elseif base == 10 \n        return toString(toInt(x)*10^9)\n\
    \    elseif base == 16 \n        return toString(toInt(x)*10^12)\n    elseif base\
    \ == 2 \n        return toString(toInt(x)*10^6)\n    elseif base == 8 \n     \
    \   return toString(toInt(x)*10^3)\n    elseif base == 10 \n        return toString(toInt(x)*10^6)\n\
    \    elseif base == 16 \n        return toString(toInt(x)*10^9)\n    elseif base\
    \ == 2 \n        return toString(toInt(x)*10^3)\n    elseif base == 8 \n     \
    \   return toString(toInt(x)*10^6)\n    elseif base == 10 \n        return toString(toInt(x)*10^9)\n\
    \    elseif base == 16 \n        return toString(toInt(x)*10^12)\n    elseif base\
    \ == 2 \n        return toString(toInt(x)*10^6)\n    elseif base == 8 \n     \
    \   return toString(toInt(x)*10^3)\n    elseif base == 10 \n        return toString(toInt(x)*10",
  "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n\
    \    elseif base == 10\n        return toString(x)\n    else\n        return toString(change_base(x,\
    \ base-1))\nend", "    if base == 10 \n        then return to_string(x)\n    else\
    \ \n        digits = digits(x)\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digits.length]\n        digits = digits[digits.length-1::digits.length]\n\
    \        digits = digits[digits.length-1::digit", "    if base == 10 \n      \
    \  then return to_string(x)\n        else return change_base(x / base, base) *\
    \ base + change_base(x % base, base)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers.", "    if base < 2 || base > 36\n       \
    \ throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base ==\
    \ 2\n        return string(x)\n    else\n        return string(x, base)\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 36)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers.", "   \
    \ if base == 10 \n        then return string(x)\n    else \n        digits = string(x)\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length]\n\
    \        digits = digits[digits.length-1..digits.length]\n        digits = digits[digits.length-1..digits.length",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"Base must be between\
    \ 2 and 36\"))\n    end\n    \n    if base == 2\n        return string(x)\n  \
    \  elseif base == 10\n        return string(x::Int64)\n    elseif base == 16\n\
    \        return string(x::Int64, \"hex\")\n    elseif base == 8\n        return\
    \ string(x::Int64, \"octal\")\n    elseif base == 16\n        return string(x::Int64,\
    \ \"hex\")\n    elseif base == 10\n        return string(x::Int64, \"decimal\"\
    )\n    else\n        throw(ArgumentError(\"Base must be between 2 and 36\"))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nchange_base(42, 10)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(42, 16)\n</cell>\n<code language=julia-1.5>\n\
    change_base(42, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(42, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(42, 36)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a string to a floating point number in scientific\
    \ notation.", "    if base == 10 \n        digits = digits(x)\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digit", " \
    \   if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x, base)\nend", "    if base == 10 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digit", "    if base == 10 \n        digits = digits(x)\n        digits =\
    \ digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digit", " \
    \   if base < 10 \n        error(\"base must be greater than or equal to 10\"\
    )\n    else if base == 10 \n        return \"0\"\n    else \n        return show(Int64(x/base))\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts a number from base 10 to base 16. \n\
    The function should take two arguments: the number to be converted and the base\
    \ to be converted to.\nThe function should return a string representing the number\
    \ in base 16.\nThe function should raise an error if the base is not 10 or 16.\n\
    The function should raise an error if the number is not an integer.\nThe function\
    \ should raise an error if the number is not in the range 0 to 65535.\nThe function\
    \ should raise an error if the number is negative.\nThe function should raise\
    \ an error if the number is out of range.\nThe function should raise an error\
    \ if the number is zero.\nThe function should raise an error if the number is\
    \ out of range.\nThe function should raise an error if the number is out of range.\n\
    The function should raise an error if the number is out of range.\nThe function\
    \ should raise an error if the number is out of range.\nThe function should raise\
    \ an error if the number is out of range.\nThe function should raise an error\
    \ if the number is out of range.\nThe function should raise an error if the number\
    \ is out of range.\nThe function should raise an error if the number is out of\
    \ range.\nThe function should raise an error if the number is out of range.\n\
    The function should raise an error if the number is out of range.\nThe function\
    \ should raise an error if the number is out of range.\nThe function should raise\
    \ an error if the number is out of range.\nThe function should raise an error\
    \ if the number is out of range.\nThe function should raise an error if the number\
    \ is out of range.\nThe function should raise an error if the number is out of\
    \ range.\nThe function should raise an error if the number is out of range.\n\
    The function should raise an error if the number is out of range.\nThe function\
    \ should raise an error if the number is out of range.\nThe function should raise\
    \ an error if the number is out of range.\nThe function should raise an error\
    \ if the number is out of range.\nThe function should raise an error if the number\
    \ is out of range.\nThe function should raise an error if the number is out of\
    \ range.\nThe function should raise an error if the number is out of range.\n\
    The function should raise an error if the number is out of range.\nThe function\
    \ should raise an error if the number is out of range.\nThe function should raise\
    \ an error if the number is out of range.\nThe function should raise an error\
    \ if the number is out of range.\nThe function should raise an error if the number\
    \ is out of range.\nThe function should raise an error if the number is out of\
    \ range.\nThe function should raise an error if the number is out of range.\n\
    The function should raise an error if the number is out of range.\nThe function\
    \ should raise an error if the number is out of range.\nThe function should raise\
    \ an error if the number is out of range.\nThe function should raise an error\
    \ if the number is out of range.\n", "    if base == 10 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digit", "    if base == 10 \n        return tostring(x)\n    else \n     \
    \   return tostring(change_base(x, base-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 10)\n</cell>\n<text>\nExercise: Write a function that converts\
    \ binary numbers to decimal numbers.", "    if base < 10 \n        error(\"base\
    \ must be less than 10\")\n    elseif base == 2 \n        return string(x)\n \
    \   elseif base == 8 \n        return string(x, 'b')\n    elseif base == 10 \n\
    \        return string(x, 'o')\n    elseif base == 16 \n        return string(x,\
    \ 'x')\n    elseif base == 2 || base == 8 || base == 10 || base == 16\n      \
    \  return string(x, 'g')\n    else\n        error(\"base must be 2, 8, 10, or\
    \ 16\")\n    end\nend\n</cell>\n<code language=julia-1.4>\nchange_base(123, 2)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(123, 8)\n</cell>\n<code language=julia-1.4>\n\
    change_base(123, 10)\n</cell>\n<code language=julia-1.4>\nchange_base(123, 16)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers to\
    \ decimal.", "    if base < 10 \n        error(\"Base must be greater than or\
    \ equal to 10\")\n    elseif base == 10 \n        return toString(x)\n    else\n\
    \        return toString(change_base(x / base, base))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nchange_base(123, 2)\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts binary numbers to decimal numbers.", "    if base\
    \ == 10 \n        digits = digits(x)\n        return digits[digits.length - 1]\n\
    \    else \n        digits = digits(x)\n        digits = digits[digits.length\
    \ - base]\n        return digits[digits.length - 1]\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(123456789, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789,\
    \ 10)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789, 16)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(123456789, 8)\n</cell>\n<code language=julia-1.3>\n\
    change_base(123456789, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(123456789, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(123456789, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(123456789, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(123456789, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(123456789, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(123456789, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(123456789, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(123456789, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(123456789, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(123456789, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nchange_base(123456789, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(123456789, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(123456789, 2)", "    if base == 10 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digit", "    if base == 10 \n        digits = digits(x)\n        digits =\
    \ digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digit", " \
    \   if base == 10 \n        then return to_string(x)\n        else return change_base(x\
    \ / base, base * base)\nend", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    end\n    digits = digits(x)\n    digits\
    \ = digits[digits.length - digits[1]:digits[1]]\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digit",
  "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        return join(digits, \"\")\n    elseif base == 2 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 8 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 16 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 2 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 8 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 16 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n    elseif base == 2 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 8 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 16 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 2 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 8 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 16 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n    elseif base == 2 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 8 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 16 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 2 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 8 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 16 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n", "    if base == 10 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digit", "    if base == 10 \n        digits = digits(x)\n        digits =\
    \ digits[2:end]\n        return join(digits, \"\")\n    elseif base == 2 \n  \
    \      digits = digits(x)\n        digits = digits[2:end]\n        return join(digits,\
    \ \"\")\n    elseif base == 8 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        return join(digits, \"\")\n    elseif base == 16 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n    elseif base == 2 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 8 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 16 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n    elseif base == 2 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 8 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 16 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n    elseif base == 2 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 8 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n    elseif base == 16 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n  \
    \      return join(digits, \"\")\n    elseif base == 2 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        return join(digits, \"\")\n    elseif\
    \ base == 8 \n        digits = digits(x)\n        digits = digits[2:end]\n   \
    \     return join(digits, \"\")\n", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 10\n        return toString(x)\n\
    \    else\n        return toString(change_base(x, base-1))\nend", "    if base\
    \ < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    elseif base == 10\n        return toString(x)\n    else\n        digits\
    \ = digits(x)\n        digits = digits[digits.length - base:digits.length]\n \
    \       digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:", "    if base == 10 \n       \
    \ digits = digits(x)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digit", "    if base == 10 \n        digits = digits(x)\n  \
    \      digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digit", "    if base == 10 \n        then return to_string(x)\n        else\
    \ return change_base(x / base, base) + string(base) + change_base(x % base, base)\n\
    \    end\nend", "    if base == 10 \n        then return to_string(x)\n      \
    \  else return change_base(x / base, base) + string(base) + change_base(x % base,\
    \ base)\n    end\nend\n</cell>\n<code language=julia-1.5>\nchange_base(123, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nWrite a function that ", "    if base == 10 \n\
    \        digits = digits(x)\n        digits = digits[2:end]\n        digits =\
    \ digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digit", "    if base < 10 \n        error(\"\
    Base must be greater than or equal to 10\")\n    else if base > 36\n        error(\"\
    Base must be less than or equal to 36\")\n    else\n        str = String(digits(x))\n\
    \        str = str[start:end]\n        str = str * base\n        str = str + digits(x)\n\
    \        str = str[start:end]\n        return str\nend\n</cell>\n<code language=julia-1.4>\n\
    change_base(123, 2)\n</cell>\n<code language=julia-1.4>\nchange_base(123, 10)\n\
    </cell>\n<code language=julia-1.4>\nchange_base(123, 36)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary to decimal.\nThe function should take\
    \ a string as input and return an integer.\nThe input string should only contain\
    \ '0' and '1'.\nThe function should raise an error if the input string contains\
    \ anything else.\nThe function should raise an error if the input string contains\
    \ more than 10 characters.\nThe function should raise an error if the input string\
    \ contains more than 10 digits.\nThe function should raise an error if the input\
    \ string contains more than 10 binary digits.\nThe function should raise an error\
    \ if the input string contains more than 10 hexadecimal digits.\nThe function\
    \ should raise an error if the input string contains more than 10 octal digits.\n\
    The function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 alphanumeric digits.\nThe function should raise an error if the input\
    \ string contains more than 10 alphanumeric characters (including spaces).\nThe\
    \ function should raise an error if the input string contains more than 10 alphanumeric\
    \ characters (including spaces and numbers).\nThe function should raise an error\
    \ if the input string contains more than 10 alphanumeric characters (including\
    \ spaces and numbers and letters).\nThe function should raise an error if the\
    \ input string contains more than 10 alphanumeric characters (including spaces\
    \ and numbers and letters and symbols).\nThe function should raise an error if\
    \ the input string contains more than 10 alphanumeric characters (including spaces\
    \ and numbers and letters and symbols and punctuation).\nThe function should raise\
    \ an error if the input string contains more than 10 alphanumeric characters (including\
    \ spaces and numbers and letters and symbols and punctuation and numbers).\nThe\
    \ function should raise an error if the input string contains more than 10 alphanumeric\
    \ characters (including spaces and numbers and letters and symbols and punctuation\
    \ and numbers and letters).\nThe function should raise an error if the input string\
    \ contains more than 10 alphanumeric characters (including spaces and numbers\
    \ and letters and symbols and punctuation and numbers and letters and symbols).\n\
    The function should raise an error if the input string contains more than 10 alphanumeric\
    \ character", "    if base == 10 \n        then return toString(x)\n        else\
    \ return change_base(toInt(x), base-1)\nend\n</cell>\n<code language=julia-1.0>\n\
    change_base(123, 10)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from one base to another. \nFor example, base 10 numbers can be converted\
    \ to base 2 numbers by multiplying them by 10.", "    if base < 10\n        error(\"\
    Base must be greater than or equal to 10\")\n    end\n    if base == 10\n    \
    \    return string(x)\n    end\n    if base == 16\n        return string(x, base\
    \ = 16)\n    end\n    if base == 8\n        return string(x, base = 8)\n    end\n\
    \    if base == 2\n        return string(x, base = 2)\n    end\n    if base ==\
    \ 1\n        return string(x)\n    end\n    if base == -1\n        return string(x,\
    \ base = -1)\n    end\n    if base == -2\n        return string(x, base = 2)\n\
    \    end\n    if base == -3\n        return string(x, base = 2)\n    end\n   \
    \ if base == -4\n        return string(x, base = 2)\n    end\n    if base == -5\n\
    \        return string(x, base = 2)\n    end\n    if base == -6\n        return\
    \ string(x, base = 2)\n    end\n    if base == -7\n        return string(x, base\
    \ = 2)\n    end\n    if base == -8\n        return string(x, base = 2)\n    end\n\
    \    if base == -9\n        return string(x, base = 2)\n    end\n    if base ==\
    \ -10\n        return string(x, base = 2)\n    end\n    if base == -11\n     \
    \   return string(x, base = 2)\n    end\n    if base == -12\n        return string(x,\
    \ base = 2)\n    end\n    if base == -13\n        return string(x, base = 2)\n\
    \    end\n    if base == -14\n        return string(x, base = 2)\n    end\n  \
    \  if base == -15\n        return string(x, base = 2)\n    end\n    if base ==\
    \ -16\n        return string(x, base = 2)\n    end\n    if base == -17\n     \
    \   return string(x, base = 2)\n    end\n    if base == -18\n        return string(x,\
    \ base = 2)\n    end\n    if base == -19\n        return string(x, base = 2)\n\
    \    end\n    if base == -20\n        return string(x, base = 2)\n    end\n  \
    \  if base == -21\n        return string(x, base = 2)\n    end\n    if base ==\
    \ -22\n        return string(x, base = 2)\n    end\n    if base == -23\n     \
    \   return string(x, base = 2)\n    end\n    if base == -24\n        return string(x,\
    \ base = 2)\n    end\n    if base == -25\n        return string(x, base = 2)\n\
    \    end\n    if base == -26\n        return string(x, base = 2)\n    end\n  \
    \  if base == -27\n        return string(x, base = 2)\n    end\n    if base ==\
    \ -28\n        return string(x, base = 2)\n    end\n    if base == -29\n     \
    \   return string(x, base = 2)\n    end\n    if base == -30\n        return string(x,\
    \ base = 2)\n    end\n    if base == -31\n        return string(x, base = 2)\n\
    \    end\n    if base == -32\n        return string(x, base = 2)\n    end\n  \
    \  if base == -33\n        return ", "    if base == 10 \n        digits = digits(x)\n\
    \        return digits[1]\n    else \n        digits = digits(x)\n        digits[1]\
    \ = digits[1] - base\n        return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(123, 16)\n</cell>\n<code language=julia-1.5>\n\
    change_base(123, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(123, 10)\n\
    </cell>\n<code language=juli", "    if base == 10 \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digit"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
