language: jl
name: HumanEval_53_add
results:
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0\n        error(\"x must be positive\")\n   \
    \ else if y < 0\n        error(\"y must be positive\")\n    else if x == 0 &&\
    \ y == 0\n        error(\"x and y cannot be 0\")\n    else if x == 0\n       \
    \ return x\n    else if y == 0\n        return y\n    else\n        return x +\
    \ y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2958_8f.jl:6\nin expression starting at /tmp/tmpl2958_8f.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ add(2, 3)\n</cell>\n<text>\nJulia has many more built-in functions. You can\
    \ find them in the Julia documentation. Here are some examples:\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4u_6zfn4.jl:6\nin expression starting at /tmp/tmp4u_6zfn4.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y < 0 \n        error(\"add: x or y is negative\"\
    )\n    else if x == 0 || y == 0 \n        error(\"add: x or y is zero\")\n   \
    \ else \n        return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0n0kx9u1.jl:6\nin expression starting at /tmp/tmp0n0kx9u1.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n\"\"\"\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9vv4nr8t.jl:6\nin expression starting at /tmp/tmp9vv4nr8t.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1.0,2.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.0>\n@code_native \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp83jt9ssw.jl:6\nin expression starting at /tmp/tmp83jt9ssw.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nThe @code_warntype macro will warn you if your function\
    \ does not return a value at the end of a function.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk00evcf.jl:6\nin expression starting at /tmp/tmpzk00evcf.jl:6\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ add(3, 4)\n</cell>\n<text>\nJulia has many built-in functions. Some are very\
    \ useful, others are not. Here are some of them:\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx540_ums.jl:6\nin expression starting at /tmp/tmpx540_ums.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x == 0 || y == 0 \n        then 0\n        else x\
    \ + y\n    end\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,0)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(0,0)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,0)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(0,1)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(0,0)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,1)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,1)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.0\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw79kx4yf.jl:5\nin expression starting at /tmp/tmpw79kx4yf.jl:5\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_native\
    \ add(3, 4)\n</cell>\n<text>\nJulia has many more built-in functions. Check out\
    \ the documentation for more!\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3n4kj4er.jl:6\nin expression starting at /tmp/tmp3n4kj4er.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y < 0\n        error(\"Invalid input\")\n\
    \    end\n    return x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,0)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(0,1)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(0,0)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,-1)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,1)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,3)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,4)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,5)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,6)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,7)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,8)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,9)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,10)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,11)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,12)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,13)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,14)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,15)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,16)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,17)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,18)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,19)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,20)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,21)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,22)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,23)\n</cell>\n<code language=julia-1.0>\n@code_native add(\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\
    \t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph42biqwa.jl:9\nin expression starting at /tmp/tmph42biqwa.jl:9\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t\
    @test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ov265re.jl:6\nin expression starting at /tmp/tmp0ov265re.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747431
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0\n        error(\"x must be positive\")\n   \
    \ else if y < 0\n        error(\"y must be positive\")\n    else if x == 0\n \
    \       error(\"x must be positive\")\n    else if y == 0\n        error(\"y must\
    \ be positive\")\n    else\n        return x + y\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(2, 3)\n</cell>\n<code language=julia-1.5>\n@code_native add(2,\
    \ -3)\n</cell>\n<code language=julia-1.5>\n@code_native add(2, 0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_native add(-2, 3)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(-2, -3)\n</cell>\n<code language=julia-1.5>\n@code_native add(-2,\
    \ 0)\n</cell>\n<code language=julia-1.5>\n@code_native add(2, -2)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_native add(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(-2, -2)\n</cell>\n<code language=julia-1.5>\n@code_native add(-2,\
    \ 2)\n</cell>\n<code language=julia-1.5>\n@code_native add(2, 2)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_native add(-2, 2)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(-2, -2)\n</cell>\n<code language=julia-1.5>\n@code_native add(-2,\
    \ -2)\n</cell>\n<code language=julia-1.5>\n@code_native add(-2, -2)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(-2, -2)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(-2, -2)\n</cell>\n<code language=julia-1.5>\n@code_native add(-2,\
    \ -2)\n</cell>\n<code language=julia-1.5>\n@code_native add(-2, -2)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(-2, -2)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(-2, -2)\n</cell>\n<code language=julia-1.5>\n@code_native add(-2,\
    \ -2)\n</cell>\n<code language=julia-1.5>\n@code_native add(-2, -2)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(-2, -2)\n</cell>\n<code language=julia-1.5>\n\
    @code_\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2pey7lde.jl:6\nin expression starting at /tmp/tmp2pey7lde.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x == 0 || y == 0 \n        then 0\n        else x\
    \ + y\n    end\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n\
    </cell>\n<text>\nJulia has two types of functions: those that take a single argument\
    \ and those that take multiple arguments. In the first case, Julia will automatically\
    \ unpack the arguments. In the second case, Julia will require you to explicitly\
    \ unpack the arguments.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvy6o0_ux.jl:5\nin expression starting at /tmp/tmpvy6o0_ux.jl:5\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t\
    @test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ov265re.jl:6\nin expression starting at /tmp/tmp0ov265re.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t\
    @test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ku40odg.jl:10\nin expression starting at\
    \ /tmp/tmp1ku40odg.jl:10\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.3>\n@code_native\
    \ add(4, 5)\n</cell>\n<text>\nJulia has many built-in functions to do common tasks.\
    \ Here are some examples:\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkpf6_u53.jl:6\nin expression starting at /tmp/tmpkpf6_u53.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you try\
    \ to add two numbers that are not of the same type. In the example above we get\
    \ an error because Julia cannot add two Int64 numbers. We can fix this by explicitly\
    \ specifying the type of the numbers:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3dut0qxw.jl:6\nin expression starting at /tmp/tmp3dut0qxw.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 \n        then return x + y\n        else return\
    \ x - y\n    end\nend\n\"\"\"\n\"\"\"\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\
    \t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_iud3qc7.jl:5\nin expression starting at /tmp/tmp_iud3qc7.jl:5\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y < 0\n        error(\"add: negative numbers\"\
    )\n    elseif x == 0 || y == 0\n        error(\"add: zero numbers\")\n    else\n\
    \        return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcmcaoddu.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcmcaoddu.jl:1\n\
    in expression starting at /tmp/tmpcmcaoddu.jl:1\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 \n        then return x + y\n        else return\
    \ x - y\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_native add(10,\
    \ -2)\n</cell>\n<code language=julia-1.5>\n@code_native add(10, 2)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(10, 0)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(10, -10)\n</cell>\n<code language=julia-1.5>\n@code_native add(10,\
    \ 10)\n</cell>\n<code language=julia-1.5>\n@code_native add(10, -10)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(10, 10)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(10, -10)\n</cell>\n<code language=julia-1.5>\n@code_native add(10,\
    \ 10)\n</cell>\n<code language=julia-1.5>\n@code_native add(10, -10)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(10, 10)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(10, -10)\n</cell>\n<code language=julia-1.5>\n@code_native add(10,\
    \ 10)\n</cell>\n<code language=julia-1.5>\n@code_native add(10, -10)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(10, 10)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(10, -10)\n</cell>\n<code language=julia-1.5>\n@code_native add(10,\
    \ 10)\n</cell>\n<code language=julia-1.5>\n@code_native add(10, -10)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(10, 10)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(10, -10)\n</cell>\n<code language=julia-1.5>\n@code_native add(10,\
    \ 10)\n</cell>\n<code language=julia-1.5>\n@code_native add(10, -10)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(10, 10)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(10, -10)\n</cell>\n<code language=julia-1.5>\n@code_native add(10,\
    \ 10)\n</cell>\n<code language=julia-1.5>\n@code_native add(10, -10)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(10, 10)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(10, -10)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1wo6ii_c.jl:5\nin expression starting at /tmp/tmp1wo6ii_c.jl:5\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3, 4)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warn\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnhmrb27_.jl:6\nin expression starting at /tmp/tmpnhmrb27_.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ add(2, 3)\n</cell>\n<code language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype add(2.5, 3.5)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ add(2.5, 3.5)\n</cell>\n<code language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype add(2.5, 3.5)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ add(2.5, 3.5)\n</cell>\n<code language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype add(2.5, 3.5)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ add(2.5, 3.5)\n</cell>\n<code language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype add(2.5, 3.5)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ add(2.5, 3.5)\n</cell>\n<code language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype add(2.5, 3.5)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype add(2.5, 3.5)\n</cell>\n<code language=julia-1.\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqvh4zgcf.jl:6\nin expression starting at /tmp/tmpqvh4zgcf.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ add(2, 3)\n</cell>\n<text>\nJulia has many more built-in functions than Python,\
    \ and many of them are faster than Python equivalents. For example, Julia has\
    \ built-in functions for computing logarithms, trigonometry, exponential and so\
    \ on. These functions are called \"built-in\" because they are part of the core\
    \ language and are optimized for the specific machine architecture.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphp7uwtrj.jl:6\nin expression starting at /tmp/tmphp7uwtrj.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n\"\"\"\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9vv4nr8t.jl:6\nin expression starting at /tmp/tmp9vv4nr8t.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvbr9ks1f.jl:6\nin expression starting at /tmp/tmpvbr9ks1f.jl:6\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(1.0,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmper4rflyb.jl:6\nin expression starting at /tmp/tmper4rflyb.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3, 4)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warn\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnhmrb27_.jl:6\nin expression starting at /tmp/tmpnhmrb27_.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y <0\n        error(\"Invalid input\")\n\
    \    elseif x == 0 && y == 0\n        error(\"Invalid input\")\n    else\n   \
    \     return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo7ly1_vz.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo7ly1_vz.jl:1\n\
    in expression starting at /tmp/tmpo7ly1_vz.jl:1\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747431
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747431
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < y \n        then x + y \n        else y + x \n\
    \    else x + y\nend\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpddk7wqme.jl:5\nin expression starting at /tmp/tmpddk7wqme.jl:5\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you try\
    \ to add two numbers of different types. This is useful if you accidentally mix\
    \ Int64 and Float64. Here is an example:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvhdw8e19.jl:6\nin expression starting at /tmp/tmpvhdw8e19.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y < 0 \n        error(\"Invalid input\")\n\
    \    else if x == 0 && y == 0 \n        error(\"Invalid input\")\n    else \n\
    \        return x + y\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Subtract\
    \ two numbers x and y\n            \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpns1g9zt3.jl:6\nin expression starting at /tmp/tmpns1g9zt3.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y < 0 \n        error(\"Invalid input\")\n\
    \    else \n        return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfkdjcpj7.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfkdjcpj7.jl:1\n\
    in expression starting at /tmp/tmpfkdjcpj7.jl:1\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t\
    @test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ov265re.jl:6\nin expression starting at /tmp/tmp0ov265re.jl:6\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1,2.0)\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype add(1.0,2)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1.0,2.5)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.5)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.5)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1.0,2.5)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.5)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.5)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1.0,2.5)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.5)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.5)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1.0,2.5)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.5)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.5)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1.0,2.5)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.5)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpooipm4_o.jl:6\nin expression starting at /tmp/tmpooipm4_o.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y < 0 \n        error(\"Invalid input\")\
    \ \n    else \n        return x + y \nend\n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\
    \t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpro9ws9x7.jl:1\nin expression starting at /tmp/tmpro9ws9x7.jl:1\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_native\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_native \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq7m5jj2p.jl:6\nin expression starting at /tmp/tmpq7m5jj2p.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n\"\"\"\n    ```\n    \"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ add(1,2)\n</cell>\n<text>\nJulia has many built-in functions. Here are some\
    \ examples:\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp46tl2uoz.jl:6\nin expression starting at /tmp/tmp46tl2uoz.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747431
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_native\
    \ add(1,2)\n</cell>\n<text>\nJulia has many more built-in functions. You can find\
    \ them in the Julia documentation here.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpraql33rd.jl:6\nin expression starting at /tmp/tmpraql33rd.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(1.0,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmper4rflyb.jl:6\nin expression starting at /tmp/tmper4rflyb.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you try\
    \ to add two numbers of different types. This is useful if you accidentally mix\
    \ Int64 and Float64 or if you accidentally mix Int64 and Float32. Julia will warn\
    \ you about this mistake for you:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp981d9laz.jl:6\nin expression starting at /tmp/tmp981d9laz.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnp7h24yf.jl:6\nin expression starting at /tmp/tmpnp7h24yf.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y < 0\n        error(\"Negative numbers not\
    \ allowed\")\n    elseif x == 0 || y == 0\n        error(\"Zero numbers not allowed\"\
    )\n    else\n        return x + y\n    end\nend\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\n\"\"\n\n\
    Stacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmplpntttvs.jl:12\nin expression starting at /tmp/tmplpntttvs.jl:12\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_native\
    \ add(1,2)\n</cell>\n<text>\nJulia has many built in functions to help us work\
    \ with numbers. Here are some examples:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe9853yyn.jl:6\nin expression starting at /tmp/tmpe9853yyn.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t\
    @test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ku40odg.jl:10\nin expression starting at\
    \ /tmp/tmp1ku40odg.jl:10\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(x,y)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(1,y)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(y,1)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(y,y)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(y,y)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2jg1jzfn.jl:6\nin expression starting at /tmp/tmp2jg1jzfn.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n\"\"\"\n    ```\n    \"\"\"\n    ```julia\n\
    \    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n   \
    \ ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n \
    \   julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n   \
    \ ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n \
    \   julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n   \
    \ ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n \
    \   julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n   \
    \ ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n \
    \   julia> add(1, 2)\n    3\n    ```\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: parsing command `julia\njulia> add(1, 2)\n3\n`: special\
    \ characters \"#{}()[]<>|&*?~;\" must be quoted in commands\nStacktrace:\n [1]\
    \ error(s::String)\n   @ Base ./error.jl:33\n [2] shell_parse(str::String, interpolate::Bool;\
    \ special::String, filename::String)\n   @ Base ./shell.jl:114\n [3] var\"@cmd\"\
    (__source__::LineNumberNode, __module__::Module, str::Any)\n   @ Base ./cmd.jl:442\n\
    \ [4] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n [5] macroexpand\n   @ ./expr.jl:114\
    \ [inlined]\n [6] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any,\
    \ define::Bool) (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [7] var\"\
    @doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\n\
    in expression starting at /tmp/tmpvlace2f4.jl:6\nin expression starting at /tmp/tmpvlace2f4.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_native\
    \ add(1,2)\n</cell>\n<text>\nJulia has many more built-in functions. You can find\
    \ them in the Julia documentation here.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpraql33rd.jl:6\nin expression starting at /tmp/tmpraql33rd.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you try\
    \ to add two numbers that are not of the same type. For example, if you try to\
    \ add two Int64 numbers, you will get a warning:\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0wlmbja1.jl:6\nin expression starting at /tmp/tmp0wlmbja1.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n\"\"\"\n    ```\n    \"\"\"\n    ```julia\n\
    \    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n   \
    \ ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n \
    \   julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n   \
    \ ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n \
    \   julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n   \
    \ ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n \
    \   julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n   \
    \ ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n \
    \   julia> add(1, 2)\n    3\n    ```\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: parsing command `julia\njulia> add(1, 2)\n3\n`: special\
    \ characters \"#{}()[]<>|&*?~;\" must be quoted in commands\nStacktrace:\n [1]\
    \ error(s::String)\n   @ Base ./error.jl:33\n [2] shell_parse(str::String, interpolate::Bool;\
    \ special::String, filename::String)\n   @ Base ./shell.jl:114\n [3] var\"@cmd\"\
    (__source__::LineNumberNode, __module__::Module, str::Any)\n   @ Base ./cmd.jl:442\n\
    \ [4] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n [5] macroexpand\n   @ ./expr.jl:114\
    \ [inlined]\n [6] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any,\
    \ define::Bool) (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [7] var\"\
    @doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\n\
    in expression starting at /tmp/tmpcr87wyoj.jl:6\nin expression starting at /tmp/tmpcr87wyoj.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t\
    @test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ku40odg.jl:10\nin expression starting at\
    \ /tmp/tmp1ku40odg.jl:10\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nJulia has two types of functions: those that take\
    \ a single argument and those that take multiple arguments. In the first case,\
    \ Julia will automatically unpack the arguments into the function arguments. In\
    \ the second case, Julia will require you to explicitly unpack the arguments yourself.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\
    \t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvtha_p84.jl:6\nin expression starting at /tmp/tmpvtha_p84.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x == 0 || y == 0 \n        then 0\n        else x\
    \ + y\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpob0x4by3.jl:5\nin expression starting at /tmp/tmpob0x4by3.jl:5\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxx2eyptd.jl:6\nin expression starting at /tmp/tmpxx2eyptd.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < y \n        then x + y \n        else y + x \n\
    \    else x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,3)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,4)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,5)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,6)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,7)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,8)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,9)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,10)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,11)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,12)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,13)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,14)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,15)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,16)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,17)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,18)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,19)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,20)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,21)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,22)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,23)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,24)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,25)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,26)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,27)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,28)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,29)\n\
    </cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7gdxguq1.jl:5\nin expression starting at /tmp/tmp7gdxguq1.jl:5\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you try\
    \ to add two numbers that are not of the same type. Here we see that Julia has\
    \ inferred that x and y are Int64, so we get a warning from @code_warntype.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\
    \t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx8fm0atk.jl:6\nin expression starting at /tmp/tmpx8fm0atk.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you try\
    \ to add two numbers that do not have the same type. For example, if you try to\
    \ add two Int64 numbers, you will get a warning:\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprp89qhx4.jl:6\nin expression starting at /tmp/tmprp89qhx4.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1,2)\n</cell\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93ibnkue.jl:6\nin expression starting at /tmp/tmp93ibnkue.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y <= 0\n        error(\"Invalid input\")\n\
    \    end\n    return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp4osc117w.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmp4osc117w.jl:15\n  Test threw exception\n\
    \  Expression: candidate(1, 0) == 1\n  Invalid input\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] add(x::Int64, y::Int64)\n     @ Main /tmp/tmp4osc117w.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4osc117w.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4osc117w.jl:13\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    4      1      5\n"
  timestamp: 1659747446
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you try\
    \ to add two numbers of different types. This is useful if you accidentally mix\
    \ integers with floats or vice versa. Here is an example where we mix integers\
    \ with floats:\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkob7ez4t.jl:6\nin expression starting at /tmp/tmpkob7ez4t.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(1.0,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmper4rflyb.jl:6\nin expression starting at /tmp/tmper4rflyb.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n\"\"\"\n    ```\n    \"\"\"\n    ```julia\n\
    \    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n   \
    \ ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n \
    \   julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n   \
    \ ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n \
    \   julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n   \
    \ ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n \
    \   julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n   \
    \ ```julia\n    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n \
    \   julia> add(1, 2)\n    3\n    ```\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: parsing command `julia\njulia> add(1, 2)\n3\n`: special\
    \ characters \"#{}()[]<>|&*?~;\" must be quoted in commands\nStacktrace:\n [1]\
    \ error(s::String)\n   @ Base ./error.jl:33\n [2] shell_parse(str::String, interpolate::Bool;\
    \ special::String, filename::String)\n   @ Base ./shell.jl:114\n [3] var\"@cmd\"\
    (__source__::LineNumberNode, __module__::Module, str::Any)\n   @ Base ./cmd.jl:442\n\
    \ [4] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n [5] macroexpand\n   @ ./expr.jl:114\
    \ [inlined]\n [6] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any,\
    \ define::Bool) (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [7] var\"\
    @doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\n\
    in expression starting at /tmp/tmpvlace2f4.jl:6\nin expression starting at /tmp/tmpvlace2f4.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t\
    @test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ku40odg.jl:10\nin expression starting at\
    \ /tmp/tmp1ku40odg.jl:10\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t\
    @test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ku40odg.jl:10\nin expression starting at\
    \ /tmp/tmp1ku40odg.jl:10\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you're\
    \ trying to use an incompatible type. For example, if you try to add two Int64\
    \ numbers, Julia will warn you that you're doing something wrong.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfuijb0a2.jl:6\nin expression starting at /tmp/tmpfuijb0a2.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ add(2, 3)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you try\
    \ to add two numbers of different types. This is useful when you are trying to\
    \ debug your code.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo6fs58ev.jl:6\nin expression starting at /tmp/tmpo6fs58ev.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ add(1,2)\n</cell>\n<text>\nJulia supports multiple dispatch which means it can\
    \ choose the most appropriate function based on the types of the arguments. In\
    \ this case it chooses the add function because both arguments are of type Int64.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\
    \t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuzurh2wn.jl:6\nin expression starting at /tmp/tmpuzurh2wn.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_native\
    \ add(3, 4)\n</cell>\n<code language=julia-1.5>\n@code_native add(3, 4.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(3.0, 4)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_native add(3.0,\
    \ 4.0)\n</cell>\n<code language=julia-1.5>\n@code_native add(3.0, 4.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_native add(3.0,\
    \ 4.0)\n</cell>\n<code language=julia-1.5>\n@code_native add(3.0, 4.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_native add(3.0,\
    \ 4.0)\n</cell>\n<code language=julia-1.5>\n@code_native add(3.0, 4.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_native add(3.0,\
    \ 4.0)\n</cell>\n<code language=julia-1.5>\n@code_native add(3.0, 4.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_native add(3.0,\
    \ 4.0)\n</cell>\n<code language=julia-1.5>\n@code_native add(3.0, 4.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_native add(3.0,\
    \ 4.0)\n</cell>\n<code language=julia-1.5>\n@code_native add(3.0, 4.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(3.0, 4.0)\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzrmim3kp.jl:6\nin expression starting at /tmp/tmpzrmim3kp.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n\"\"\"\n    ```\n    \"\"\"\n    ```julia\n\
    \    julia> add(1, 2)\n    3\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 3)\n    4\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 4)\n    5\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 5)\n    6\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 6)\n    7\n    ```\n    \"\"\"\n   \
    \ ```julia\n    julia> add(1, 7)\n    8\n    ```\n    \"\"\"\n    ```julia\n \
    \   julia> add(1, 8)\n    9\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1,\
    \ 9)\n    10\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 10)\n    11\n\
    \    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 11)\n    12\n    ```\n \
    \   \"\"\"\n    ```julia\n    julia> add(1, 12)\n    13\n    ```\n    \"\"\"\n\
    \    ```julia\n    julia> add(1, 13)\n    14\n    ```\n    \"\"\"\n    ```julia\n\
    \    julia> add(1, 14)\n    15\n    ```\n    \"\"\"\n    ```julia\n    julia>\
    \ add(1, 15)\n    16\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 16)\n\
    \    17\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 17)\n    18\n  \
    \  ```\n    \"\"\"\n    ```julia\n    julia> add(1, 18)\n    19\n    ```\n   \
    \ \"\"\"\n    ```julia\n    julia> add(1, 19)\n    20\n    ```\n    \"\"\"\n \
    \   ```julia\n    julia> add(1, 20)\n    21\n    ```\n    \"\"\"\n    ```julia\n\
    \    julia> add(1, 21)\n    22\n    ```\n    \"\"\"\n    ```julia\n    julia>\
    \ add(1, 22)\n    23\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 23)\n\
    \    24\n    ```\n    \"\"\"\n    ```julia\n    julia> add(1, 24)\n    25\n  \
    \  ```\n    \"\"\"\n    ```julia\n    julia> add(1, 25)\n    26\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: parsing command `julia\njulia> add(1, 2)\n3\n`: special\
    \ characters \"#{}()[]<>|&*?~;\" must be quoted in commands\nStacktrace:\n [1]\
    \ error(s::String)\n   @ Base ./error.jl:33\n [2] shell_parse(str::String, interpolate::Bool;\
    \ special::String, filename::String)\n   @ Base ./shell.jl:114\n [3] var\"@cmd\"\
    (__source__::LineNumberNode, __module__::Module, str::Any)\n   @ Base ./cmd.jl:442\n\
    \ [4] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n [5] macroexpand\n   @ ./expr.jl:114\
    \ [inlined]\n [6] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any,\
    \ define::Bool) (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [7] var\"\
    @doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\n\
    in expression starting at /tmp/tmp4cktx5bd.jl:6\nin expression starting at /tmp/tmp4cktx5bd.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y < 0 \n        error(\"Invalid input\")\n\
    \    elseif x == 0 || y == 0 \n        0\n    else\n        x + y\n    end\nend\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp671arfz4.jl:12\nin expression starting at\
    \ /tmp/tmp671arfz4.jl:12\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3, 4)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3.0, 4.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4g9u01dc.jl:6\nin expression starting at /tmp/tmp4g9u01dc.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y < 0 \n        error(\"Invalid input\")\n\
    \    elseif x == 0 && y == 0 \n        error(\"Invalid input\")\n    elseif x\
    \ == 0 \n        return y\n    elseif y == 0 \n        return x\n    else\n  \
    \      return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz447zd_p.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz447zd_p.jl:1\n\
    in expression starting at /tmp/tmpz447zd_p.jl:1\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvbr9ks1f.jl:6\nin expression starting at /tmp/tmpvbr9ks1f.jl:6\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(1.0,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.5)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.5)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.5)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.5)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.5)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.5)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.5)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.5)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.5)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.5)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ob4vm3b.jl:6\nin expression starting at /tmp/tmp1ob4vm3b.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvbr9ks1f.jl:6\nin expression starting at /tmp/tmpvbr9ks1f.jl:6\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you try\
    \ to add two numbers of different types. This is useful if you accidentally mix\
    \ up Int64 and Float64. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two Int64 numbers\
    \ and a Float64 number. Julia will warn you if you try to add two \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplror67s0.jl:6\nin expression starting at /tmp/tmplror67s0.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(1.0,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<text>\nThe @code_warntype macro will warn\
    \ you about any type mismatches, including those that would otherwise be caught\
    \ by the compiler. For example, if you try to add two Int64 numbers, you will\
    \ get a type mismatch error.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgenj1b7s.jl:6\nin expression starting at /tmp/tmpgenj1b7s.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747431
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nThe @code_warntype macro will warn you about type\
    \ mismatches. This is useful if you know that your function will return a value\
    \ of type Int64, but you know that it will only ever be called with values of\
    \ type Int64 or Float64. For example:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpebeh6t4y.jl:6\nin expression starting at /tmp/tmpebeh6t4y.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ add(2, 3)\n</cell>\n<code language=julia-1.0>\n@code_native add(2, 3.0)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(2.0, 3)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(2.0, 3.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(2,\
    \ 3.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(2.0, 3)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(2.0, 3.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(2, 3.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(2.0,\
    \ 3)\n</cell>\n<code language=julia-1.0>\n@code_native add(2.0, 3.0)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(2, 3.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(2.0, 3)\n</cell>\n<code language=julia-1.0>\n@code_native add(2.0,\
    \ 3.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(2, 3.0)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(2.0, 3)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(2.0, 3.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(2,\
    \ 3.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(2.0, 3)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(2.0, 3.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(2, 3.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(2.0,\
    \ 3)\n</cell>\n<code language=julia-1.0>\n@code_native add(2.0, 3.0)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(2, 3.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(2.0, 3)\n</cell>\n<code language=julia-1.0>\n@code_native add(2.0,\
    \ 3.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(2, 3.0)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(2.0, 3)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(2.0, 3.0)\n</cell>\n<code language=julia-1.0>\n@code_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t\
    @test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnl5a2w9.jl:6\nin expression starting at /tmp/tmphnl5a2w9.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y < 0 \n        error(\"Invalid input\")\n\
    \    elseif x == 0 || y == 0 \n        error(\"Invalid input\")\n    else\n  \
    \      return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9l7aiqsv.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9l7aiqsv.jl:1\n\
    in expression starting at /tmp/tmp9l7aiqsv.jl:1\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_native add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_native \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnp7h24yf.jl:6\nin expression starting at /tmp/tmpnp7h24yf.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(x,y)\n</cell>\n\
    <text>\nThe @code_warntype macro will warn you if you're trying to use an incompatible\
    \ type or if you're trying to use a function that doesn't exist.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzd7wedsy.jl:6\nin expression starting at /tmp/tmpzd7wedsy.jl:6\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(2, 3)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(2., 3)\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype add(\"2\", \"3\")\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(\"2\", \"3.\")\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(\"2\", \"3.1\")\n</cell>\n<code language=julia-1.3>\n@code_warntype add(\"\
    2\", \"3.10\")\n</cell>\n<code language=julia-1.3>\n@code_warntype add(\"2\",\
    \ \"3.10\")\n</cell>\n<code language=julia-1.3>\n@code_warntype add(\"2\", \"\
    3.10\")\n</cell>\n<code language=julia-1.3>\n@code_warntype add(\"2\", \"3.10\"\
    )\n</cell>\n<code language=julia-1.3>\n@code_warntype add(\"2\", \"3.10\")\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype add(\"2\", \"3.10\")\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype add(\"2\", \"3.10\")\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(\"2\", \"3.10\")\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(\"2\", \"3.10\")\n</cell>\n<code language=julia-1.3>\n@code_warntype add(\"\
    2\", \"3.10\")\n</cell>\n<code language=julia-1.3>\n@code_warntype add(\"2\",\
    \ \"3.10\")\n</cell>\n<code language=julia-1.3>\n@code_warntype add(\"2\", \"\
    3.10\")\n</cell>\n<code language=julia-1.3>\n@code_warntype add(\"2\", \"3.10\"\
    )\n</cell>\n<code language=julia-1.3>\n@code_warntype add(\"2\", \"3.10\")\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype add(\"2\", \"3.10\")\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype add(\"2\", \"3.10\")\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(\"2\", \"3.10\")\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(\"2\", \"3.10\")\n</cell>\n<code language=julia-1.3>\n@code_warntype add(\"\
    2\", \"3.10\")\n</cell>\n<code language=julia-1.3>\n@\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7tho1jn.jl:6\nin expression starting at /tmp/tmpr7tho1jn.jl:6\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y <= 0\n        error(\"Invalid input\")\n\
    \    else\n        return x + y\nend\n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t\
    @test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqrfw7lc0.jl:1\nin expression starting at /tmp/tmpqrfw7lc0.jl:1\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2.0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(1.0,2.0)\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvbr9ks1f.jl:6\nin expression starting at /tmp/tmpvbr9ks1f.jl:6\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ add(1,2)\n</cell>\n<text>\nThe @code_native macro will generate native code\
    \ for the function add. Let's try it out on a few examples:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1l7yqkg.jl:6\nin expression starting at /tmp/tmpk1l7yqkg.jl:6\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ add(1,2)\n</cell>\n<text>\nJulia has many more built-in functions. Here are\
    \ some examples:\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4s6fd32k.jl:6\nin expression starting at /tmp/tmp4s6fd32k.jl:6\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y <= 0\n        error(\"Invalid input\")\n\
    \    else\n        return x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsbt1mjns.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsbt1mjns.jl:1\n\
    in expression starting at /tmp/tmpsbt1mjns.jl:1\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(3, 4)\n</cell>\n<text>\nThe @code_warntype macro will warn you about any\
    \ type mismatches. This is particularly useful when you are writing a function\
    \ that will later be used in a larger Julia program.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) ==\
    \ 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7,\
    \ 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2ruizsm.jl:6\nin expression starting at /tmp/tmpl2ruizsm.jl:6\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ add(4, 5)\n</cell>\n<code language=julia-1.0>\n@code_native add(4.0, 5.0)\n\
    </cell>\n<code language=julia-1.0>\n@code_native add(4.0, 5.0)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_native add(4.0, 5.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(4.0, 5.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(4.0,\
    \ 5.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(4.0, 5.0)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(4.0, 5.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(4.0, 5.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(4.0,\
    \ 5.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(4.0, 5.0)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(4.0, 5.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(4.0, 5.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(4.0,\
    \ 5.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(4.0, 5.0)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(4.0, 5.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(4.0, 5.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(4.0,\
    \ 5.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(4.0, 5.0)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(4.0, 5.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(4.0, 5.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(4.0,\
    \ 5.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(4.0, 5.0)\n</cell>\n\
    <code language=julia-1.0>\n@code_native add(4.0, 5.0)\n</cell>\n<code language=julia-1.0>\n\
    @code_native add(4.0, 5.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(4.0,\
    \ 5.0)\n</cell>\n<code language=julia-1.0>\n@code_native add(\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1yce8b0.jl:6\nin expression starting at /tmp/tmpb1yce8b0.jl:6\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y <= 0\n        error(\"Invalid input\")\n\
    \    else\n        return x + y\nend\n</cell>\n<code language=julia-1.3>\nadd(1,2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function called subtract that takes two numbers\
    \ and returns the difference between them.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_tnrmn3a.jl:9\nin expression starting at /tmp/tmp_tnrmn3a.jl:9\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you try\
    \ to add two numbers of different types. In this case it warns us that we can't\
    \ add Int64 and Float64.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplm62q_0_.jl:6\nin expression starting at /tmp/tmplm62q_0_.jl:6\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nThe @code_warntype macro will warn you if your function\
    \ does not return a value.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbj7ad_8m.jl:6\nin expression starting at /tmp/tmpbj7ad_8m.jl:6\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y <= 0\n        error(\"add: x or y is negative\"\
    )\n    end\n    return x + y\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(2, 3)\n</cell>\n<text>\nJulia has many built-in types and functions. Here\
    \ are some examples:\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi7agzhyx.jl:9\nin expression starting at /tmp/tmpi7agzhyx.jl:9\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(3, 4)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you try\
    \ to add two numbers that are not of the same type. In the example above we see\
    \ that Julia is warning us about this by raising a TypeError exception. Julia\
    \ will also warn us about this if we try to add two numbers that are not of the\
    \ same type but are of the same subtype.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl400ks08.jl:6\nin expression starting at /tmp/tmpl400ks08.jl:6\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(1,2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(1,2)\n</cell\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxx2eyptd.jl:6\nin expression starting at /tmp/tmpxx2eyptd.jl:6\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y <= 0\n        error(\"Invalid input\")\n\
    \    else\n        return x + y\nend\n\"\"\"\n\"\"\"\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoua3ylus.jl:1\nin expression starting at /tmp/tmpoua3ylus.jl:1\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x == 0 || y == 0 \n        then 0\n        else x\
    \ + y\n    end\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,2)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,0)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(0,0)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(0,1)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,1)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,2)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,3)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,4)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,5)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,6)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,7)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,8)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,9)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,10)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,11)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,12)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,13)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,14)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,15)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,16)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,17)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,18)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,19)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,20)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(1,21)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(1,22)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(1,23)\n</cell>\n<code language=juli\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2w1ysody.jl:5\nin expression starting at /tmp/tmp2w1ysody.jl:5\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    if x < 0 || y <= 0\n        error(\"add: x or y must\
    \ be positive\")\n    elseif x == 0 && y > 0\n        error(\"add: x must be positive\"\
    )\n    elseif y == 0 && x > 0\n        error(\"add: y must be positive\")\n  \
    \  else\n        x + y\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_native\
    \ add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,0)\n</cell>\n\
    <code language=julia-1.5>\n@code_native add(0,1)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(0,0)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,-1)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,1)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,2)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,3)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,4)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,5)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,6)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,7)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,8)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,9)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,10)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,11)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,12)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,13)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,14)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,15)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,16)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,17)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,18)\n\
    </cell>\n<code language=julia-1.5>\n@code_native add(1,19)\n</cell>\n<code language=julia-1.5>\n\
    @code_native add(1,20)\n</cell>\n<code language=julia-1.5>\n@code_native add(1,21)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphe_fsa6y.jl:14\nin expression starting at\
    \ /tmp/tmphe_fsa6y.jl:14\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.5>\n@code_native\
    \ add(3, 4)\n</cell>\n<text>\nJulia supports multiple dispatch, allowing us to\
    \ write functions with multiple implementations for the same function type. For\
    \ example, we can write a function which can add two numbers of different types.\
    \ We do this by defining a function which takes two arguments of the same type,\
    \ and which then dispatches based on the type of the arguments. We can then define\
    \ multiple implementations of this function, one for each type of argument. For\
    \ example:\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vp4lqhq.jl:6\nin expression starting at /tmp/tmp2vp4lqhq.jl:6\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t\
    @test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ku40odg.jl:10\nin expression starting at\
    \ /tmp/tmp1ku40odg.jl:10\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1,2)\n</cell>\n<text>\nJulia has many more built in functions. Here are\
    \ some of them:\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxemuy04j.jl:6\nin expression starting at /tmp/tmpxemuy04j.jl:6\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1,2)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1,2.0)\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(1.0,2.0)\n</cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.0)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype add(1.0,2.0)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype add(1.0,2.0)\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1,\
    \ 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t\
    @test(candidate(7, 5) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmps23j8q.jl:6\nin expression starting at /tmp/tmpmps23j8q.jl:6\n"
  stdout: ''
  timestamp: 1659747446
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    x + y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747442
- exit_code: 0
  program: "\"\"\"Add two numbers x and y\n            \"\"\"\nfunction add(x::Int64,\
    \ y::Int64)::Int64 \n    return x + y\nend\n\"\"\"\n    ```\n    \"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659747446
