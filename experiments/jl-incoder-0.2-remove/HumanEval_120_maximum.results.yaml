language: jl
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum([arr[k]]; k=k)\n    maximum = maximum([arr[k]]; k=k+1)\n\
    \    maximum = maximum([arr[k]]; k=k+2)\n    maximum = maximum([arr[k]]; k=k+3)\n\
    \    maximum = maximum([arr[k]]; k=k+4)\n    maximum = maximum([arr[k]]; k=k+5)\n\
    \    maximum = maximum([arr[k]]; k=k+6)\n    maximum = maximum([arr[k]]; k=k+7)\n\
    \    maximum = maximum([arr[k]]; k=k+8)\n    maximum = maximum([arr[k]]; k=k+9)\n\
    \    maximum = maximum([arr[k]]; k=k+10)\n    maximum = maximum([arr[k]]; k=k+11)\n\
    \    maximum = maximum([arr[k]]; k=k+12)\n    maximum = maximum([arr[k]]; k=k+13)\n\
    \    maximum = maximum([arr[k]]; k=k+14)\n    maximum = maximum([arr[k]]; k=k+15)\n\
    \    maximum = maximum([arr[k]]; k=k+16)\n    maximum = maximum([arr[k]]; k=k+17)\n\
    \    maximum = maximum([arr[k]]; k=k+18)\n    maximum = maximum([arr[k]]; k=k+19)\n\
    \    maximum = maximum([arr[k]]; k=k+20)\n    maximum = maximum([arr[k]]; k=k+21)\n\
    \    maximum = maximum([arr[k]]; k=k+22)\n    maximum = maximum([arr[k]]; k=k+23)\n\
    \    maximum = maximum([arr[k]]; k=k+24)\n    maximum = maximum([arr[k]]; k=k+25)\n\
    \    maximum = maximum([arr[k]]; k=k+26)\n    maximum = maximum([arr[k]]; k=k+27)\n\
    \    maximum = maximum([arr[k]]; k=k+28)\n    maximum = maximum([arr[k]]; k=k+29)\n\
    \    maximum = maximum([arr[k]]; k=k+30)\n    maximum = maximum([arr[k]]; k=k+31)\n\
    \    maximum = maximum([arr[k]]; k=k+32)\n    maximum = maximum([arr[k]]; k=k+33)\n\
    \    maximum = maximum([arr[k]]; k=k+34)\n    maximum = maximum([arr[k]]; k=k+35)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmzfv8_i5.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmzfv8_i5.jl:1\n\
    in expression starting at /tmp/tmpmzfv8_i5.jl:1\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv4x7180u.jl:26\nin expression starting at\
    \ /tmp/tmpv4x7180u.jl:26\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        return [] \n    else \n        maximum =\
    \ arr[k] \n        for i in k+1:length(arr) \n            if maximum < arr[i]\
    \ \n                maximum = arr[i] \n            else \n                break\
    \ \n        end \n        return arr[k:k+k+1] \n    end \nend \n\"\"\"\n    Given\
    \ an array arr of integers and a positive integer k, return a sorted list \n \
    \   of length k with the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaz_ic1fb.jl:1\nin expression starting at /tmp/tmpaz_ic1fb.jl:1\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        return [] \n    else \n        maximum =\
    \ arr \n        for i = k+1:length(arr) \n            maximum[i] = maximum(maximum,\
    \ arr[i]) \n        end\n        return maximum \n    end\nend\n\"\"\"\n    Given\
    \ an array arr of integers and a positive integer k, return a sorted list \n \
    \   of length k with the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6y0i80os.jl:30\nin expression starting at\
    \ /tmp/tmp6y0i80os.jl:30\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr)\n        return arr\n    end\n    maximum = arr[k-1]\n\
    \    for i in k+1:length(arr)\n        if arr[i] > maximum\n            maximum\
    \ = arr[i]\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpyk829j23.jl:36\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    Cannot `convert` an object of type Int64 to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpyk829j23.jl:29\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyk829j23.jl:36 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyk829j23.jl:35\ntest set: Error
    During Test at /tmp/tmpyk829j23.jl:37\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object of type Int64
    to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpyk829j23.jl:29\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n  '
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(arr[end], k-1)\n        return maximum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyk551mh_.jl:28\nin expression starting at\
    \ /tmp/tmpyk551mh_.jl:28\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    end\n    \n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4g1mnet7.jl:72\nin expression starting at\
    \ /tmp/tmp4g1mnet7.jl:72\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum(k,length(arr))\n    maximum = maximum.(arr)\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the minimum number in a given\
    \ array of integers. \nThe function should take in a vector of integers and a\
    \ positive integer k. \nThe function should return a sorted vector of length k\
    \ with the minimum k numbers in arr. \nThe function should return an empty vector\
    \ if k is less than or equal to 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vwv97ka.jl:24\nin expression starting at\
    \ /tmp/tmp7vwv97ka.jl:24\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        maximum[i] = maximum(maximum,\
    \ arr[i])\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum number in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphrlx3px7.jl:26\nin expression starting at\
    \ /tmp/tmphrlx3px7.jl:26\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    \n    maximum = zeros(k)\n    maximum[1] = arr[1]\n    for i = 2:k\n \
    \       maximum[i] = maximum(maximum(arr[i-1:end], arr[i-1:end-1]), maximum[i-1])\n\
    \    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeuaqg8g_.jl:28\nin expression starting at\
    \ /tmp/tmpeuaqg8g_.jl:28\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum([arr[i]+1 for i in 1:k])\n    maximum = maximum + maximum[k:]\n\
    \    return maximum\nend\n\"\"\"\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the minimum k numbers\
    \ in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"k:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp34w23f75.jl:21\nin expression\
    \ starting at /tmp/tmp34w23f75.jl:21\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(arr[end], k-1)\n        return maximum\n\
    end\n\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the minimum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpakhs6_a4.jl:1\nin expression starting at /tmp/tmpakhs6_a4.jl:1\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, k)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptx8xe1du.jl:26\nin expression starting at\
    \ /tmp/tmptx8xe1du.jl:26\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        error(\"k must be less than or equal to length(arr)\"\
    ) \n    else \n        maximum = arr \n        for i = k+1:length(arr) \n    \
    \        maximum[i] = maximum(maximum, arr[i]) \n        end\n        return maximum\
    \ \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Test Failed at /tmp/tmpkk_5m3eo.jl:35\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpkk_5m3eo.jl:35 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpkk_5m3eo.jl:34\ntest set: Error
    During Test at /tmp/tmpkk_5m3eo.jl:36\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpkk_5m3eo.jl:25\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpkk_5m3eo.jl:36 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpkk_5m3eo.jl:34\ntest set: Error During Test at
    /tmp/tmpkk_5m3eo.jl:37\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpkk_5m3eo.jl:25\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkk_5m3eo.jl:37 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkk_5m3eo.jl:34\ntest set: Error
    During Test at /tmp/tmpkk_5m3eo.jl:38\n  Test threw exception\n  Expression: candidate([123,
    -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodE'
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(maximum(arr,k-1),k-1)[end]\n        return maximum\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpkpz7jec8.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpkpz7jec8.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpkpz7jec8.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkpz7jec8.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkpz7jec8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkpz7jec8.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpkpz7jec8.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkpz7jec8.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkpz7jec8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkpz7jec8.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpkpz7jec8.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkpz7jec8.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkpz7jec8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkpz7jec8.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximums = zeros(Int, k)\n    for i = 1:k\n        maximums[i] = maximum(arr)\
    \ - arr[i]\n    end\n    return maximums\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp99km01g0.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp99km01g0.jl:31\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp99km01g0.jl:19\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp99km01g0.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99km01g0.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99km01g0.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp99km01g0.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp99km01g0.jl:19\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp99km01g0.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99km01g0.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99km01g0.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp99km01g0.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp99km01g0.jl:19\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp99km01g0.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  timestamp: 1659747198
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(arr,k-1)[end]\n        return maximum\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmphn7x_ao7.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmphn7x_ao7.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmphn7x_ao7.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphn7x_ao7.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphn7x_ao7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphn7x_ao7.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmphn7x_ao7.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphn7x_ao7.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphn7x_ao7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphn7x_ao7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmphn7x_ao7.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphn7x_ao7.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphn7x_ao7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphn7x_ao7.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k)\
    \ \n        maximum[end] = maximum(arr,k-1) \n        return maximum \n    end\n\
    end\n\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the minimum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5lzzbspp.jl:28\nin expression starting at\
    \ /tmp/tmp5lzzbspp.jl:28\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ minimum number in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxg70jmaa.jl:26\nin expression starting at\
    \ /tmp/tmpxg70jmaa.jl:26\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr)\n        return arr\n    else\n        maximum = arr\n\
    \        for i = k+1:length(arr)\n            if maximum[i] > maximum[i-1]\n \
    \               maximum = maximum[i-1:end]\n            else\n               \
    \ break\n        end\n        return maximum\n    end\nend\n\"\"\"\n    Given\
    \ an array arr of integers and a positive integer k, return a sorted list \n \
    \   of length k with the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7w_r6zsy.jl:1\nin expression starting at /tmp/tmp7w_r6zsy.jl:1\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        return Vector{Int64}() \n    else \n    \
    \    maximum = arr[k] \n        for i in k+1:length(arr) \n            if maximum\
    \ < arr[i] \n                maximum = arr[i] \n            end \n        end\
    \ \n        return Vector{Int64}([maximum]) \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 4)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 5)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 6)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 7)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 8)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 9)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 10)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 11)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 12)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 13)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 14)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 15)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 16)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 17)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 18)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 19)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 20)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 21)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 22)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 23)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 24)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 25)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 26)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 27)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 28)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 29)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 30)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 31)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 32)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 33)\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3s25ukp9.jl:32\nin expression starting at\
    \ /tmp/tmp3s25ukp9.jl:32\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        maximum[i] = maximum(maximum,\
    \ arr[i])\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpmg83rk3t.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpmg83rk3t.jl:31\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmg83rk3t.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmg83rk3t.jl:30\ntest set: Error\
    \ During Test at /tmp/tmpmg83rk3t.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpmg83rk3t.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg83rk3t.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg83rk3t.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmg83rk3t.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type\
    \ Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpmg83rk3t.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg83rk3t.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg83rk3t.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmg83rk3t.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects\
    \ of type Vector{Int64} are not calla"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a\
    \ positive integer k and returns the first k numbers of the Fibonacci sequence.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkr8f2lxx.jl:30\nin expression starting at\
    \ /tmp/tmpkr8f2lxx.jl:30\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(arr,k-1)[end]\n        return maximum\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmphn7x_ao7.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmphn7x_ao7.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmphn7x_ao7.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphn7x_ao7.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphn7x_ao7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphn7x_ao7.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmphn7x_ao7.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphn7x_ao7.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphn7x_ao7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphn7x_ao7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmphn7x_ao7.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphn7x_ao7.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphn7x_ao7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphn7x_ao7.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k)\
    \ \n        maximum[end] = maximum(arr[end],k) \n        return maximum \n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_3t_40f.jl:28\nin expression starting at\
    \ /tmp/tmpf_3t_40f.jl:28\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpfp5_49tx.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfp5_49tx.jl:1\n\
    in expression starting at /tmp/tmpfp5_49tx.jl:1\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr[i])\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.0>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprwebu5ye.jl:26\nin expression starting at\
    \ /tmp/tmprwebu5ye.jl:26\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k)\
    \ \n        maximum[end] = maximum(arr,k-1) \n        return maximum \n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpg35w4edg.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpg35w4edg.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpg35w4edg.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg35w4edg.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg35w4edg.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpg35w4edg.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpg35w4edg.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg35w4edg.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg35w4edg.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpg35w4edg.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpg35w4edg.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg35w4edg.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg35w4edg.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpg35w4edg.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = zeros(Int64, k)\n    for i = 1:k\n        maximum[i] = maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55pifsff.jl:25\nin expression starting at\
    \ /tmp/tmp55pifsff.jl:25\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum(k,length(arr))\n    maximum = maximum.(arr)\n    return\
    \ maximum\nend\n\"\"\"\n    Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8bnhsx4.jl:24\nin expression starting at\
    \ /tmp/tmpv8bnhsx4.jl:24\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximums = zeros(Int, k)\n    for i = 1:k\n        maximums[i] = maximum(arr)\
    \ - arr[i]\n    end\n    return maximums\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp99km01g0.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp99km01g0.jl:31\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp99km01g0.jl:19\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp99km01g0.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99km01g0.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99km01g0.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp99km01g0.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp99km01g0.jl:19\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp99km01g0.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99km01g0.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99km01g0.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp99km01g0.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp99km01g0.jl:19\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp99km01g0.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  timestamp: 1659747198
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum = maximum(maximum, arr)\n        return maximum\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpo_twycsk.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpo_twycsk.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpo_twycsk.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_twycsk.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_twycsk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpo_twycsk.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpo_twycsk.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_twycsk.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_twycsk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpo_twycsk.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpo_twycsk.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_twycsk.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_twycsk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpo_twycsk.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpoywrl8a5.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpoywrl8a5.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpoywrl8a5.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoywrl8a5.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoywrl8a5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpoywrl8a5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpoywrl8a5.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoywrl8a5.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoywrl8a5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpoywrl8a5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpoywrl8a5.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoywrl8a5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoywrl8a5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpoywrl8a5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum(k,length(arr))\n    maximum = maximum.(arr)\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpy7ionnq7.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpy7ionnq7.jl:29\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpy7ionnq7.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = zeros(Int64, k)\n    for i = 1:k\n        maximum[i] = maximum(maximum(arr,\
    \ i), arr[i])\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmptxtvtn4e.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmptxtvtn4e.jl:31\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n   \
    \  @ Main /tmp/tmptxtvtn4e.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptxtvtn4e.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptxtvtn4e.jl:30\ntest set:\
    \ Error During Test at /tmp/tmptxtvtn4e.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmptxtvtn4e.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptxtvtn4e.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptxtvtn4e.jl:30\ntest set:\
    \ Error During Test at /tmp/tmptxtvtn4e.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type\
    \ Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmptxtvtn4e.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptxtvtn4e.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptxtvtn4e.jl:30\ntest set:\
    \ Er"
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(arr,k-1)[end]\n        return maximum\nend\n\"\
    \"\"\n    Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n    of length k with the minimum k numbers in arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphvpoon7b.jl:1\nin expression starting at /tmp/tmphvpoon7b.jl:1\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        throw(ArgumentError(\"k must be less than\
    \ or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum[i] = maximum(maximum(maximum, arr[i]), arr[i])\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Test Failed at /tmp/tmp8ptgsths.jl:34\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ptgsths.jl:34 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ptgsths.jl:33\ntest set: Error
    During Test at /tmp/tmp8ptgsths.jl:35\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp8ptgsths.jl:25\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8ptgsths.jl:35 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8ptgsths.jl:33\ntest set: Error During Test at
    /tmp/tmp8ptgsths.jl:36\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp8ptgsths.jl:25\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8ptgsths.jl:36 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8ptgsths.jl:33\ntest set: Error
    During Test at /tmp/tmp8ptgsths.jl:37\n  Test threw exception\n  Expression: candidate([123,
    -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodE'
  timestamp: 1659747201
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximums = Vector{Int64}()\n    for x in arr\n        if x > maximums[k]\n\
    \            maximums[k] = x\n        end\n    end\n    return maximums\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpcx2sygb6.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpcx2sygb6.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpcx2sygb6.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcx2sygb6.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcx2sygb6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpcx2sygb6.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpcx2sygb6.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcx2sygb6.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcx2sygb6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpcx2sygb6.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n   \
    \  @ Main /tmp/tmpcx2sygb6.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcx2sygb6.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcx2"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum number in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_chv27f.jl:26\nin expression starting at\
    \ /tmp/tmpr_chv27f.jl:26\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(arr[end], k-1)\n        return maximum\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpbr164sx3.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpbr164sx3.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpbr164sx3.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpbr164sx3.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpbr164sx3.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(arr[end], k-1)\n        return maximum\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpbr164sx3.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpbr164sx3.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpbr164sx3.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpbr164sx3.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpbr164sx3.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphx5a6xyx.jl:67\nin expression starting at\
    \ /tmp/tmphx5a6xyx.jl:67\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    \n    maximum = zeros(Int64, k)\n    maximum[1] = arr[1]\n    maximum[2]\
    \ = maximum(maximum(maximum(maximum, arr[2:end]), arr[2:end-1]), arr[3:end])\n\
    \    maximum[3] = maximum(maximum(maximum(maximum, arr[4:end]), arr[5:end-1]),\
    \ arr[6])\n    maximum[4] = maximum(maximum(maximum(maximum, arr[7:end]), arr[7:end-1]),\
    \ arr[8])\n    maximum[5] = maximum(maximum(maximum(maximum, arr[9:end]), arr[9:end-1]),\
    \ arr[10])\n    maximum[6] = maximum(maximum(maximum(maximum, arr[11:end]), arr[11:end-1]),\
    \ arr[12])\n    maximum[7] = maximum(maximum(maximum(maximum, arr[13:end]), arr[13:end-1]),\
    \ arr[14])\n    maximum[8] = maximum(maximum(maximum(maximum, arr[15:end]), arr[15:end-1]),\
    \ arr[16])\n    maximum[9] = maximum(maximum(maximum(maximum, arr[17:end]), arr[17:end-1]),\
    \ arr[18])\n    maximum[10] = maximum(maximum(maximum(maximum, arr[19:end]), arr[19:end-1]),\
    \ arr[20])\n    maximum[11] = maximum(maximum(maximum(maximum, arr[21:end]), arr[21:end-1]),\
    \ arr[21])\n    maximum[12] = maximum(maximum(maximum(maximum, arr[23:end]), arr[23:end-1]),\
    \ arr[24])\n    maximum[13] = maximum(maximum(maximum(maximum, arr[25:end]), arr[25:end-1]),\
    \ arr[26])\n    maximum[14] = maximum(maximum(maximum(maximum, arr[27:end]), arr[27:end-1]),\
    \ arr[28])\n    maximum[15] = maximum(maximum(maximum(maximum, arr[29:end]), arr[29:end-1]),\
    \ arr[30])\n    maximum[16] = maximum(maximum(maximum(maximum, arr[31:end]), arr[31:end-1]),\
    \ arr[31])\n    maximum[17] = maximum(maximum(maximum(maximum, arr[33:end]), arr[33:end-1]),\
    \ arr[34])\n    maximum[18] = maximum(maximum(maximum(maximum, arr[35:end]), arr[35:end-1]),\
    \ arr[36])\n    maximum[19] = maximum(maximum(maximum(maximum, arr[37:end]), arr[37:end-1]),\
    \ arr[38])\n    maximum[20] = maximum(maximum(maximum(maximum, arr[39:end]), arr[39:end-1]),\
    \ arr[40])\n    maximum[21] = maximum(maximum(maximum(maximum, arr[41:end]), arr[41:end-1]),\
    \ arr[42])\n    maximum[22] = maximum(maximum(maximum(maximum, arr[43:end]), arr[43:end-1]),\
    \ \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt8m2dhc1.jl:46\nin expression starting at\
    \ /tmp/tmpt8m2dhc1.jl:46\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vngs0oi.jl:26\nin expression starting at\
    \ /tmp/tmp1vngs0oi.jl:26\n"
  stdout: ''
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    end\n    \n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum\
    \ = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5sbkbhde.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5sbkbhde.jl:1\n\
    in expression starting at /tmp/tmp5sbkbhde.jl:1\n"
  stdout: ''
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum,\
    \ arr), i)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 4)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 5)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 6)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 7)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 8)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 9)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 10)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 11)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 12)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 13)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 14)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 15)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 16)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 17)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 18)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 19)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 20)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 21)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 22)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 23)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 24)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 25)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 26)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 27)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 28)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 29)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 30)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 31)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 32)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 33)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 34)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 35)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, \nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfam4pw9.jl:26\nin expression starting at\
    \ /tmp/tmplfam4pw9.jl:26\n"
  stdout: ''
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    elseif k == 1 \n        return arr\n\
    \    elseif k == length(arr) \n        return arr\n    end\n    \n    maximum\
    \ = maximum(maximum(arr,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-2),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-3),k-1)\n    maximum = maximum(maximum(maximum,k-4),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-5),k-1)\n    maximum = maximum(maximum(maximum,k-6),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-7),k-1)\n    maximum = maximum(maximum(maximum,k-8),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-9),k-1)\n    maximum = maximum(maximum(maximum,k-10),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-11),k-1)\n    maximum = maximum(maximum(maximum,k-12),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-13),k-1)\n    maximum = maximum(maximum(maximum,k-14),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-15),k-1)\n    maximum = maximum(maximum(maximum,k-16),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-17),k-1)\n    maximum = maximum(maximum(maximum,k-18),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-19),k-1)\n    maximum = maximum(maximum(maximum,k-20),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-21),k-1)\n    maximum = maximum(maximum(maximum,k-22),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-23),k-1)\n    maximum = maximum(maximum(maximum,k-24),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-25),k-1)\n    maximum = maximum(maximum(maximum,k-26),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-27),k-1)\n    maximum = maximum(maximum(maximum,k-28),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-29),k-1)\n    maximum = maximum(maximum(maximum,k-30),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-31),k-1)\n    maximum = maximum(maximum(maximum,k-32),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-33),k-1)\n    maximum = maximum(maximum(maximum,k-34),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-35),k-1)\n    maximum = maximum(maximum(maximum,k-36),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-37),k-1)\n    maximum\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd4anpcwq.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd4anpcwq.jl:1\n\
    in expression starting at /tmp/tmpd4anpcwq.jl:1\n"
  stdout: ''
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(arr[end],k-1)\n        return maximum\n    end\n\
    end\n\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the minimum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppu75a582.jl:28\nin expression starting at\
    \ /tmp/tmppu75a582.jl:28\n"
  stdout: ''
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2eo9kadu.jl:28\nin expression starting at\
    \ /tmp/tmp2eo9kadu.jl:28\n"
  stdout: ''
  timestamp: 1659747199
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum[i] = maximum(maximum,\
    \ arr[i])\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpwrl0o7d5.jl:31\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpwrl0o7d5.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwrl0o7d5.jl:31 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwrl0o7d5.jl:30\ntest set: Error
    During Test at /tmp/tmpwrl0o7d5.jl:32\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpwrl0o7d5.jl:22\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpwrl0o7d5.jl:32 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpwrl0o7d5.jl:30\ntest set: Error During Test at
    /tmp/tmpwrl0o7d5.jl:33\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpwrl0o7d5.jl:22\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwrl0o7d5.jl:33 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
  timestamp: 1659747202
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(maximum, k)\n        return maximum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaubchyas.jl:28\nin expression starting at\
    \ /tmp/tmpaubchyas.jl:28\n"
  stdout: ''
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr)\n        throw(ArgumentError(\"k must be less than\
    \ or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpajtz5ay1.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpajtz5ay1.jl:38\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpajtz5ay1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpajtz5ay1.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpajtz5ay1.jl:39\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpajtz5ay1.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpajtz5ay1.jl:37\ntest set: Error\
    \ During Test at /tmp/tmpajtz5ay1.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n   \
    \  @ Main /tmp/tmpajtz5ay1.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpajtz5ay1.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpajtz5ay1.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpajtz5ay1.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  BoundsError: attempt\
    \ to access 2-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpajtz5ay1.jl:25\n   [3] macro expansion\n     @ /shared/cento"
  timestamp: 1659747202
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximums = Vector{Int64}(undef, k)\n    maximums[1] = arr[1]\n    for\
    \ i = 2:k\n        maximums[i] = maximum(maximum(arr, i-1), i-1)\n    end\n  \
    \  return maximums\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyfn9ash.jl:27\nin expression starting at\
    \ /tmp/tmpsyfn9ash.jl:27\n"
  stdout: ''
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        error(\"k should be less than or equal to\
    \ length(arr)\") \n    else \n        maximum = arr \n        for i in k+1:length(arr)\
    \ \n            maximum[i] = maximum(maximum, arr[i]) \n        end\n        return\
    \ maximum \n    end\nend\n\"\"\"\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the minimum k numbers\
    \ in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9we0awjk.jl:30\nin expression starting at\
    \ /tmp/tmp9we0awjk.jl:30\n"
  stdout: ''
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(arr[end], k-1)\n        return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr5w2p7cs.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr5w2p7cs.jl:1\n\
    in expression starting at /tmp/tmpr5w2p7cs.jl:1\n"
  stdout: ''
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        throw(ArgumentError(\"k must be less than\
    \ or equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n \
    \   return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the minimum number\
    \ in the given array.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr50c_d2_.jl:29\nin expression starting at\
    \ /tmp/tmpr50c_d2_.jl:29\n"
  stdout: ''
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    end\n    \n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum\
    \ = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-1]), k-1)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5sbkbhde.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5sbkbhde.jl:1\n\
    in expression starting at /tmp/tmp5sbkbhde.jl:1\n"
  stdout: ''
  timestamp: 1659747199
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpxfo7hb3a.jl:31\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpxfo7hb3a.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxfo7hb3a.jl:31 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxfo7hb3a.jl:30\ntest set: Error
    During Test at /tmp/tmpxfo7hb3a.jl:32\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpxfo7hb3a.jl:22\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpxfo7hb3a.jl:32 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpxfo7hb3a.jl:30\ntest set: Error During Test at
    /tmp/tmpxfo7hb3a.jl:33\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpxfo7hb3a.jl:22\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxfo7hb3a.jl:33 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
  timestamp: 1659747204
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum.(arr, k)\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpxf_wa5vc.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpxf_wa5vc.jl:28\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpxf_wa5vc.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxf_wa5vc.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxf_wa5vc.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxf_wa5vc.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpxf_wa5vc.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxf_wa5vc.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxf_wa5vc.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxf_wa5vc.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpxf_wa5vc.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxf_wa5vc.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxf_wa5vc.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxf_wa5vc.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747202
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr)\n        throw(ArgumentError(\"k should be less than\
    \ or equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = max(maximum, arr[i])\n    end\n    return maximum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpky65estf.jl:34\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpky65estf.jl:34 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpky65estf.jl:33\ntest set: Error
    During Test at /tmp/tmpky65estf.jl:35\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: no method matching isless(::Int64, ::Vector{Int64})\n  Closest
    candidates are:\n    isless(!Matched::AbstractVector, ::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2550\n    isless(::Real,
    !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n    isless(::Real,
    !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n    ...\n  Stacktrace:\n   [1]
    max(x::Vector{Int64}, y::Int64)\n     @ Base ./operators.jl:492\n   [2] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpky65estf.jl:25\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpky65estf.jl:35 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpky65estf.jl:33\ntest set: Error During Test at
    /tmp/tmpky65estf.jl:36\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching isless(::Int64,
    ::Vector{Int64})\n  Closest candidates are:\n    isless(!Matched::AbstractVector,
    ::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2550\n    isless(::Real,
    !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operator'
  timestamp: 1659747204
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum(k,length(arr))\n    maximum = maximum.(arr)\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpy7ionnq7.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpy7ionnq7.jl:29\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpy7ionnq7.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(arr[end], k-1)\n        return maximum\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpbr164sx3.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpbr164sx3.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpbr164sx3.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpbr164sx3.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpbr164sx3.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum[i] = maximum[i-1]\n        end\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp43rn2sqb.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp43rn2sqb.jl:33\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43rn2sqb.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43rn2sqb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp43rn2sqb.jl:34\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4, -4, -4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43rn2sqb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43rn2sqb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp43rn2sqb.jl:35\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3, -3, -3, -3, -3, -3, -3] == [2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43rn2sqb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43rn2sqb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp43rn2sqb.jl:36\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 0, 0, -3] ==\
    \ [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43rn2sqb.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43rn2sqb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp43rn2sqb.jl:37\n  Expression: candidate([-123"
  timestamp: 1659747203
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    end\n    \n    if k == 1 \n      \
    \  return arr\n    end\n    \n    if k == length(arr) \n        return arr\n \
    \   end\n    \n    maximum = maximum(maximum(arr), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-1]), k-1)\n    maximum\
    \ = maximum(maximum(maximum, arr[k-2]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-3]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-4]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-5]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-6]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-7]), k-1)\n  \
    \  maximum = maximum(maximum(maximum, arr[k-8]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-9]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-10]), k-1)\n \
    \   maximum = maximum(maximum(maximum, arr[k-11]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-12]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-13]), k-1)\n\
    \    maximum = maximum(maximum(maximum, arr[k-14]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-15]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-16]), k-1)\n\
    \    maximum = maximum(maximum(maximum, arr[k-17]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-18]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-19]), k-1)\n\
    \    maximum = maximum(maximum(maximum, arr[k-20]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-21]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-22]), k-1)\n\
    \    maximum = maximum(maximum(maximum, arr[k-23]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-24]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-25]), k-1)\n\
    \    maximum = maximum(maximum(maximum, arr[k-26]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-27]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-28]), k-1)\n\
    \    maximum = maximum(maximum(maximum, arr[k-29]), k-1)\n    maximum = maximum(maximum(maximum,\
    \ arr[k-30]), k-1)\n    maximum = maximum(maximum(maximum, arr[k-31]), k-1)\n\
    \    maximum = maximum(\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplkwl4gz1.jl:68\nin expression starting at\
    \ /tmp/tmplkwl4gz1.jl:68\n"
  stdout: ''
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(arr[end], k-1)\n        return maximum\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpbr164sx3.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpbr164sx3.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpbr164sx3.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpbr164sx3.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpbr164sx3.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = zeros(Int, k)\n    for i = 1:k\n        maximum[i] = maximum(maximum(arr,\
    \ i), i)\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpmetlnn2d.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpmetlnn2d.jl:31\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n   \
    \  @ Main /tmp/tmpmetlnn2d.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmetlnn2d.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmetlnn2d.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmetlnn2d.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpmetlnn2d.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmetlnn2d.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmetlnn2d.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmetlnn2d.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type\
    \ Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpmetlnn2d.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmetlnn2d.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmetlnn2d.jl:30\ntest set:\
    \ Er"
  timestamp: 1659747203
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    elseif k == 1 \n        return arr[1]\n\
    \    else\n        maximum = maximum(arr[1:end-1], k-1)\n        maximum[1] =\
    \ maximum(maximum(arr[1:end-1], k-1), arr[1])\n        return maximum\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpxqu3tou1.jl:35\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError:
    maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpxqu3tou1.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxqu3tou1.jl:35 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxqu3tou1.jl:34\ntest set: Error
    During Test at /tmp/tmpxqu3tou1.jl:36\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpxqu3tou1.jl:25\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxqu3tou1.jl:36 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxqu3tou1.jl:34\ntest set: Error
    During Test at /tmp/tmpxqu3tou1.jl:37\n  Test threw exception\n  Expression: candidate([-3,
    2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: Cannot `convert` an object of type
    Int64 to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpxqu3tou1.jl:23\n   [2]
    macro '
  timestamp: 1659747204
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k)\
    \ \n        maximum[end] = maximum(arr[end],k) \n        return maximum \nend\n\
    \"\"\"\n    Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    of length k with the minimum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7cjeq1lb.jl:1\nin expression starting at /tmp/tmp7cjeq1lb.jl:1\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(maximum(arr,k-1),k-1)[end]\n        return maximum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj9x5g4zu.jl:28\nin expression starting at\
    \ /tmp/tmpj9x5g4zu.jl:28\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum([arr[i]+1 for i in 1:length(arr)], k)\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpvta9kxmf.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpvta9kxmf.jl:28\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpvta9kxmf.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvta9kxmf.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvta9kxmf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvta9kxmf.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpvta9kxmf.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvta9kxmf.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvta9kxmf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvta9kxmf.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpvta9kxmf.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvta9kxmf.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvta9kxmf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvta9kxmf.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747203
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum([arr[k]]; k+1)\n    return maximum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid keyword argument syntax \"(k + 1)\" around\
    \ /tmp/tmpj2by8mry.jl:20\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj2by8mry.jl:1\n\
    in expression starting at /tmp/tmpj2by8mry.jl:1\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum([arr[k]]; k=k)\n    for i = k+1:length(arr)\n      \
    \  maximum = maximum(maximum(arr[i], arr[i+1:k]), maximum)\n    end\n    maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n<text>\nFind\
    \ the second largest number in an array\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyqbss182.jl:26\nin expression starting at\
    \ /tmp/tmpyqbss182.jl:26\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr)\n        error(\"k must be less than or equal to the\
    \ length of arr\")\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum[i] = maximum(maximum(maximum, arr[i]), maximum[i])\n    end\n\
    \    return maximum\nend\n\"\"\"\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the minimum k numbers\
    \ in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3ns49mp.jl:29\nin expression starting at\
    \ /tmp/tmpj3ns49mp.jl:29\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(maximum(arr, k-1), k) \n        return\
    \ maximum \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmphnouvfe6.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmphnouvfe6.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmphnouvfe6.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnouvfe6.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnouvfe6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphnouvfe6.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmphnouvfe6.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnouvfe6.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnouvfe6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphnouvfe6.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmphnouvfe6.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnouvfe6.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnouvfe6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphnouvfe6.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747205
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpxfo7hb3a.jl:31\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpxfo7hb3a.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxfo7hb3a.jl:31 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxfo7hb3a.jl:30\ntest set: Error
    During Test at /tmp/tmpxfo7hb3a.jl:32\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpxfo7hb3a.jl:22\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpxfo7hb3a.jl:32 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpxfo7hb3a.jl:30\ntest set: Error During Test at
    /tmp/tmpxfo7hb3a.jl:33\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpxfo7hb3a.jl:22\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxfo7hb3a.jl:33 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
  timestamp: 1659747204
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum = maximum(maximum, k)\n        return maximum\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpdui8mrwk.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpdui8mrwk.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpdui8mrwk.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdui8mrwk.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdui8mrwk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpdui8mrwk.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpdui8mrwk.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdui8mrwk.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdui8mrwk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpdui8mrwk.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpdui8mrwk.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdui8mrwk.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdui8mrwk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpdui8mrwk.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747205
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    \n    maximum = zeros(Int64, k)\n    maximum[1] = maximum(arr, 1)\n  \
    \  for i = 2:k\n        maximum[i] = maximum(maximum(arr, i), 1)\n    end\n  \
    \  return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpje05wfac.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpje05wfac.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n   \
    \  @ Main /tmp/tmpje05wfac.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpje05wfac.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpje05wfac.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpje05wfac.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpje05wfac.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpje05wfac.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpje05wfac.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpje05wfac.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type\
    \ Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpje05wfac.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpje05wfac.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpje05wfac.jl:32\ntest set:\
    \ Er"
  timestamp: 1659747205
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        throw(ArgumentError(\"k must be less than\
    \ or equal to length(arr)\"))\n    else \n        maximum = arr\n        for i\
    \ = k+1:length(arr) \n            if maximum[i] > maximum[i-1] \n            \
    \    maximum = maximum[i-1:end]\n            else\n                break\n   \
    \     end\n        return maximum\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpad9rlm50.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpad9rlm50.jl:1\n\
    in expression starting at /tmp/tmpad9rlm50.jl:1\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(maximum(maximum(arr,k-1),k-1),k-1)[end]\n    \
    \    return maximum\n    end\nend\n\"\"\"\n    Given an array arr of integers\
    \ and a positive integer k, return a sorted list \n    of length k with the minimum\
    \ k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8o1hrbn.jl:28\nin expression starting at\
    \ /tmp/tmpv8o1hrbn.jl:28\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(maximum(arr, k-1), k) \n        return\
    \ maximum \nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4yjqbrsv.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4yjqbrsv.jl:1\n\
    in expression starting at /tmp/tmp4yjqbrsv.jl:1\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = zeros(Int64, k)\n    for i = 1:k\n        maximum[i] = maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55pifsff.jl:25\nin expression starting at\
    \ /tmp/tmp55pifsff.jl:25\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        return maximum(maximum, k)\n    end\nend\n</cell>\n<text>\n\
    maximum([1,2,3,4,5,6,7,8,9], 3)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9],\
    \ 4)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9], 5)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9],\
    \ 6)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9], 7)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9],\
    \ 8)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9], 9)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9],\
    \ 10)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9], 11)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9],\
    \ 12)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9], 13)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9],\
    \ 14)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9], 15)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9],\
    \ 16)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9], 17)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9],\
    \ 18)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9], 19)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9],\
    \ 20)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9], 21)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9],\
    \ 22)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9], 23)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9],\
    \ 24)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9], 25)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9],\
    \ 26)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9], 27)\n</cell>\n<text>\nmaximum([1,2,3,4,5,6,7,8,9],\
    \ 28)\n</cell>\n<text>\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeno95p0o.jl:27\nin expression starting at\
    \ /tmp/tmpeno95p0o.jl:27\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        error(\"k should be less than or equal to\
    \ the length of arr\")\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum[i] = maximum(maximum, arr[i])\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Test Failed at /tmp/tmp1xoptylm.jl:34\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xoptylm.jl:34 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xoptylm.jl:33\ntest set: Error
    During Test at /tmp/tmp1xoptylm.jl:35\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp1xoptylm.jl:25\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp1xoptylm.jl:35 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp1xoptylm.jl:33\ntest set: Error During Test at
    /tmp/tmp1xoptylm.jl:36\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp1xoptylm.jl:25\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1xoptylm.jl:36 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1xoptylm.jl:33\ntest set: Error
    During Test at /tmp/tmp1xoptylm.jl:37\n  Test threw exception\n  Expression: candidate([123,
    -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodE'
  timestamp: 1659747205
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpxfo7hb3a.jl:31\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpxfo7hb3a.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxfo7hb3a.jl:31 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxfo7hb3a.jl:30\ntest set: Error
    During Test at /tmp/tmpxfo7hb3a.jl:32\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpxfo7hb3a.jl:22\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpxfo7hb3a.jl:32 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpxfo7hb3a.jl:30\ntest set: Error During Test at
    /tmp/tmpxfo7hb3a.jl:33\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpxfo7hb3a.jl:22\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxfo7hb3a.jl:33 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
  timestamp: 1659747204
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2n8pa82f.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2n8pa82f.jl:1\n\
    in expression starting at /tmp/tmp2n8pa82f.jl:1\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum,\
    \ arr), i)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.4>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprmfkgnle.jl:26\nin expression starting at\
    \ /tmp/tmprmfkgnle.jl:26\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\n\"\"\"\n    Given an array\
    \ arr of integers and a positive integer k, return a sorted list \n    of length\
    \ k with the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9bf9vgos.jl:26\nin expression starting at\
    \ /tmp/tmp9bf9vgos.jl:26\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \n    end\nend\n</cell>\n<code language=julia-1.3>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ufj6kt8.jl:28\nin expression starting at\
    \ /tmp/tmp_ufj6kt8.jl:28\n"
  stdout: ''
  timestamp: 1659747203
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(arr,k-1)[end]\n        return maximum\n    end\n\
    end\n\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the minimum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7xr6kv0z.jl:28\nin expression starting at\
    \ /tmp/tmp7xr6kv0z.jl:28\n"
  stdout: ''
  timestamp: 1659747203
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpoywrl8a5.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpoywrl8a5.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpoywrl8a5.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoywrl8a5.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoywrl8a5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpoywrl8a5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpoywrl8a5.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoywrl8a5.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoywrl8a5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpoywrl8a5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpoywrl8a5.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoywrl8a5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoywrl8a5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpoywrl8a5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        maximum[i] = maximum(maximum,\
    \ arr[i])\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpmg83rk3t.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpmg83rk3t.jl:31\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmg83rk3t.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmg83rk3t.jl:30\ntest set: Error\
    \ During Test at /tmp/tmpmg83rk3t.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpmg83rk3t.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg83rk3t.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg83rk3t.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmg83rk3t.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type\
    \ Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpmg83rk3t.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg83rk3t.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg83rk3t.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmg83rk3t.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects\
    \ of type Vector{Int64} are not calla"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-2),k-1)\n        maximum = maximum(maximum,maximum(arr,k-3),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-4),k-1)\n        maximum = maximum(maximum,maximum(arr,k-5),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-6),k-1)\n        maximum = maximum(maximum,maximum(arr,k-7),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-8),k-1)\n        maximum = maximum(maximum,maximum(arr,k-9),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-10),k-1)\n        maximum = maximum(maximum,maximum(arr,k-11),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-12),k-1)\n        maximum = maximum(maximum,maximum(arr,k-13),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-14),k-1)\n        maximum = maximum(maximum,maximum(arr,k-15),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-16),k-1)\n        maximum = maximum(maximum,maximum(arr,k-17),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-18),k-1)\n        maximum = maximum(maximum,maximum(arr,k-19),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-20),k-1)\n        maximum = maximum(maximum,maximum(arr,k-21),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-22),k-1)\n        maximum = maximum(maximum,maximum(arr,k-23),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-24),k-1)\n        maximum = maximum(maximum,maximum(arr,k-25),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-26),k-1)\n        maximum = maximum(maximum,maximum(arr,k-27),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-28),k-1)\n        maximum = maximum(maximum,maximum(arr,k-29),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-30),k-1)\n        maximum = maximum(maximum,maximum(arr,k-31),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-32),k-1)\n        maximum = maximum(maximum,maximum(arr,k-33),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp801hk1db.jl:59\nin expression starting at\
    \ /tmp/tmp801hk1db.jl:59\n"
  stdout: ''
  timestamp: 1659747203
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum,\
    \ arr), i)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqh6c751a.jl:26\nin expression starting at\
    \ /tmp/tmpqh6c751a.jl:26\n"
  stdout: ''
  timestamp: 1659747203
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum(k,length(arr))\n    maximum = maximum.(arr)\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpy7ionnq7.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpy7ionnq7.jl:29\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpy7ionnq7.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(arr[end],k-1)\n        return maximum\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp9f9kf_z9.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp9f9kf_z9.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp9f9kf_z9.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9f9kf_z9.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9f9kf_z9.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9f9kf_z9.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp9f9kf_z9.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9f9kf_z9.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9f9kf_z9.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9f9kf_z9.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp9f9kf_z9.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9f9kf_z9.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9f9kf_z9.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9f9kf_z9.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747206
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        error(\"k should be less than or equal to\
    \ length(arr)\")\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n  \
    \      maximum = maximum(maximum(maximum, arr[i]), arr[i])\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that finds the minimum number in a given\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx570nh9i.jl:29\nin expression starting at\
    \ /tmp/tmpx570nh9i.jl:29\n"
  stdout: ''
  timestamp: 1659747203
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpfp5_49tx.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfp5_49tx.jl:1\n\
    in expression starting at /tmp/tmpfp5_49tx.jl:1\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        return maximum(maximum(maximum(arr, k-1), k-1), k-1)\n \
    \   end\nend\n</cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppf1svw7f.jl:27\nin expression starting at\
    \ /tmp/tmppf1svw7f.jl:27\n"
  stdout: ''
  timestamp: 1659747203
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv4x7180u.jl:26\nin expression starting at\
    \ /tmp/tmpv4x7180u.jl:26\n"
  stdout: ''
  timestamp: 1659747196
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpyds4fvgt.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpyds4fvgt.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyds4fvgt.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyds4fvgt.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpyds4fvgt.jl:36\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyds4fvgt.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyds4fvgt.jl:34\ntest set: Error\
    \ During Test at /tmp/tmpyds4fvgt.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n   \
    \  @ Main /tmp/tmpyds4fvgt.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyds4fvgt.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyds4fvgt.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpyds4fvgt.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  BoundsError: attempt\
    \ to access 2-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpyds4fvgt.jl:22\n   [3] macro expansion\n     @ /shared/cento"
  timestamp: 1659747207
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        return [] \n    else \n        maximum =\
    \ arr[k] \n        for i in k+1:length(arr) \n            if maximum < arr[i]\
    \ \n                maximum = arr[i] \n            end \n        end \n      \
    \  return arr[k:end] \n    end \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpxycpy66i.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpxycpy66i.jl:37\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5] == [-4, -3, 5]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxycpy66i.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxycpy66i.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxycpy66i.jl:38\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxycpy66i.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxycpy66i.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxycpy66i.jl:39\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxycpy66i.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxycpy66i.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxycpy66i.jl:40\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [20, 0, 1, 2, -3] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxycpy66i.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxycpy66i.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxycpy66i.jl:41\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == ["
  timestamp: 1659747206
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(maximum[end],k)\n        return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpflmgc2z7.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpflmgc2z7.jl:1\n\
    in expression starting at /tmp/tmpflmgc2z7.jl:1\n"
  stdout: ''
  timestamp: 1659747204
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(maximum(arr, k-1), k) \n        return\
    \ maximum \n    end\nend\n</cell>\n<code language=julia-1.3>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaj36wwk5.jl:28\nin expression starting at\
    \ /tmp/tmpaj36wwk5.jl:28\n"
  stdout: ''
  timestamp: 1659747204
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ minimum number in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptdw_c_ci.jl:26\nin expression starting at\
    \ /tmp/tmptdw_c_ci.jl:26\n"
  stdout: ''
  timestamp: 1659747204
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        error(\"k should be less than or equal to\
    \ length(arr)\") \n    else \n        maximum = arr \n        for i in k+1:length(arr)\
    \ \n            maximum[i] = maximum(maximum, arr[i]) \n        end\n        return\
    \ maximum \n    end\nend\n</cell>\n<text>\nQuestion 7\nWrite a function that takes\
    \ a positive integer n and returns the number of \npositive integers less than\
    \ or equal to n in an array.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr8brlio2.jl:30\nin expression starting at\
    \ /tmp/tmpr8brlio2.jl:30\n"
  stdout: ''
  timestamp: 1659747204
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpfp5_49tx.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfp5_49tx.jl:1\n\
    in expression starting at /tmp/tmpfp5_49tx.jl:1\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum([arr[k]]; k=k)\n    maximum = maximum + maximum\n  \
    \  return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp4xeqw9rf.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp4xeqw9rf.jl:29\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp4xeqw9rf.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4xeqw9rf.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4xeqw9rf.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp4xeqw9rf.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp4xeqw9rf.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4xeqw9rf.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4xeqw9rf.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp4xeqw9rf.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp4xeqw9rf.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4xeqw9rf.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4xeqw9rf.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp4xeqw9rf.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747207
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Test Failed at /tmp/tmpfr1kv2tw.jl:31\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpfr1kv2tw.jl:31 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpfr1kv2tw.jl:30\ntest set: Error
    During Test at /tmp/tmpfr1kv2tw.jl:32\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpfr1kv2tw.jl:22\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpfr1kv2tw.jl:32 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpfr1kv2tw.jl:30\ntest set: Error During Test at
    /tmp/tmpfr1kv2tw.jl:33\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpfr1kv2tw.jl:22\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfr1kv2tw.jl:33 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfr1kv2tw.jl:30\ntest set: Error
    During Test at /tmp/tmpfr1kv2tw.jl:34\n  Test threw exception\n  Expression: candidate([123,
    -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodE'
  timestamp: 1659747208
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(maximum(arr, k-1), k) \n        return\
    \ maximum \nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttarlpj3.jl:27\nin expression starting at\
    \ /tmp/tmpttarlpj3.jl:27\n"
  stdout: ''
  timestamp: 1659747205
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpfp5_49tx.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfp5_49tx.jl:1\n\
    in expression starting at /tmp/tmpfp5_49tx.jl:1\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    elseif k == 1 \n        return arr[1]\n\
    \    elseif k == length(arr) \n        return maximum(arr[1:end-1], length(arr)-1)\n\
    \    else\n        maximum = maximum(maximum(maximum(arr, arr[1]), arr[2]), arr[3])\n\
    \        return maximum(maximum(maximum(maximum(maximum(arr, arr[1]), arr[2]),\
    \ arr[3]), arr[4]), arr[5])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8sxtcp7s.jl:31\nin expression starting at\
    \ /tmp/tmp8sxtcp7s.jl:31\n"
  stdout: ''
  timestamp: 1659747205
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    \n    maximum = arr\n    maximum[k] = 0\n    \n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum[i] = maximum[i-1]\n\
    \        else\n            maximum[i] = maximum[i-1]\n        end\n    end\n \
    \   \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ k)\n</cell>\n<text>\nFind the minimum number in a given array\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkgbp093b.jl:34\nin expression starting at\
    \ /tmp/tmpkgbp093b.jl:34\n"
  stdout: ''
  timestamp: 1659747205
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum = maximum(maximum, k)\n        return maximum\n\
    \    end\nend\n\"\"\"\n    Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpovkvmnm9.jl:28\nin expression starting at\
    \ /tmp/tmpovkvmnm9.jl:28\n"
  stdout: ''
  timestamp: 1659747205
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(arr[end],k-1)\n        return maximum\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nmaximum(arr,3)\n</cell>\n<code language=julia-1.0>\n\
    maximum(maximum(arr,3),3)\n</cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(arr,3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(arr,3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(arr,3),3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(arr,3),3),3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,3),3),3),3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,3),3),3),3),3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,3),3),3),3),3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,3),3),3),3),3),3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,3),3),3),3),3),3),3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,3),3),3),3),3),3),3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,3),3),3),3),3),3),3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,3),3),3),3),3),3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,3),3),3),3),3),3),3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,3),3),3),3),3),3),3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,3),3),3),3),3),3),3),3),3),3),3)\n\
    </cell>\n<code language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp05noy7bg.jl:28\nin expression starting at\
    \ /tmp/tmp05noy7bg.jl:28\n"
  stdout: ''
  timestamp: 1659747205
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        error(\"k should be less than or equal to\
    \ length(arr)\") \n    else \n        maximum = arr \n        for i in 1:k-1 \n\
    \            maximum = maximum(maximum(maximum, arr[i]), arr[i+1]) \n        end\n\
    \        maximum\n    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum number\
    \ in a given array.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0km6i3pi.jl:30\nin expression starting at\
    \ /tmp/tmp0km6i3pi.jl:30\n"
  stdout: ''
  timestamp: 1659747205
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    end\n    \n    maximum = maximum(maximum(arr),\
    \ k-1)\n    maximum = maximum(maximum(maximum, arr), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(arr, k-1)), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(arr,\
    \ k-1), maximum(arr, k-1)), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1)), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(maximum(maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1)), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1)), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1), maximum(arr, k-1)), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1)), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(maximum(maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1)), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1)), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1), maximum(arr, k-1)), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1)), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(maximum(maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr, k-1), maximum(arr,\
    \ k-1)), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(arr,\
    \ k-1), \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp05nbtxlq.jl:28\nin expression starting at\
    \ /tmp/tmp05nbtxlq.jl:28\n"
  stdout: ''
  timestamp: 1659747205
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum,\
    \ arr), i)\n    end\n    maximum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmphcs8qt3p.jl:31\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmphcs8qt3p.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphcs8qt3p.jl:31 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphcs8qt3p.jl:30\ntest set: Error
    During Test at /tmp/tmphcs8qt3p.jl:32\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmphcs8qt3p.jl:22\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmphcs8qt3p.jl:32 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmphcs8qt3p.jl:30\ntest set: Test Failed at /tmp/tmphcs8qt3p.jl:33\n  Expression:
    candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1,
    -2, 1] == [2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmphcs8qt3p.jl:33 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmphcs8qt3p.jl:30\ntest set: Error
    During Test at /tmp/tmphcs8qt3p.jl:34\n  Test threw exception\n  Expression: candidate([123,
    -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  Me'
  timestamp: 1659747209
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximums = zeros(Int, k)\n    for i = 1:k\n        maximums[i] = maximum(arr)\
    \ - arr[i]\n    end\n    return maximums\nend\n\"\"\"\n    Given an array arr\
    \ of integers and a positive integer k, return a sorted list \n    of length k\
    \ with the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ye2op89.jl:26\nin expression starting at\
    \ /tmp/tmp6ye2op89.jl:26\n"
  stdout: ''
  timestamp: 1659747205
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2eo9kadu.jl:28\nin expression starting at\
    \ /tmp/tmp2eo9kadu.jl:28\n"
  stdout: ''
  timestamp: 1659747199
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpq880s_c6.jl:31\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpq880s_c6.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq880s_c6.jl:31 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq880s_c6.jl:30\ntest set: Error
    During Test at /tmp/tmpq880s_c6.jl:32\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpq880s_c6.jl:22\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpq880s_c6.jl:32 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpq880s_c6.jl:30\ntest set: Error During Test at
    /tmp/tmpq880s_c6.jl:33\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpq880s_c6.jl:22\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq880s_c6.jl:33 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
  timestamp: 1659747209
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = zeros(Int64, k)\n    for i = 1:k\n        maximum[i] = maximum(maximum(arr,\
    \ i), maximum(arr))\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpnikvvgfx.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpnikvvgfx.jl:31\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n   \
    \  @ Main /tmp/tmpnikvvgfx.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnikvvgfx.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnikvvgfx.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpnikvvgfx.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpnikvvgfx.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnikvvgfx.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnikvvgfx.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpnikvvgfx.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type\
    \ Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpnikvvgfx.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnikvvgfx.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnikvvgfx.jl:30\ntest set:\
    \ Er"
  timestamp: 1659747208
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    \n    maximum = zeros(Int64, k)\n    maximum[1] = arr[1]\n    for i =\
    \ 2:k\n        if maximum[i] > arr[i]\n            maximum[i] = arr[i]\n     \
    \   end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpl3rd2qn2.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpl3rd2qn2.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 0] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3rd2qn2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3rd2qn2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpl3rd2qn2.jl:36\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4, -4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3rd2qn2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3rd2qn2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpl3rd2qn2.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3rd2qn2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3rd2qn2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpl3rd2qn2.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3rd2qn2.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3rd2qn2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpl3rd2qn2.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n  "
  timestamp: 1659747208
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum(k,length(arr))\n    maximum = maximum.(arr)\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpy7ionnq7.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpy7ionnq7.jl:29\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpy7ionnq7.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        return maximum(maximum(maximum, arr), k-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpxeslx1yg.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpxeslx1yg.jl:32\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpxeslx1yg.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxeslx1yg.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxeslx1yg.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpxeslx1yg.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpxeslx1yg.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxeslx1yg.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxeslx1yg.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpxeslx1yg.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpxeslx1yg.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxeslx1yg.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxeslx1yg.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpxeslx1yg.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747209
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer k and returns\
    \ the number of \ntimes the number 2 is repeated in the array arr. \nFor example,\
    \ if the array arr = [1, 2, 2, 3] then your function should return 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3_ltneam.jl:28\nin expression starting at\
    \ /tmp/tmp3_ltneam.jl:28\n"
  stdout: ''
  timestamp: 1659747206
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        error(\"k should be less than or equal to\
    \ length(arr)\")\n    end\n    maximum = arr\n    for i = 1:k\n        maximum\
    \ = maximum(maximum(maximum, arr), arr[i])\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpdwlbn1eo.jl:34\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpdwlbn1eo.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdwlbn1eo.jl:34 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdwlbn1eo.jl:33\ntest set: Error
    During Test at /tmp/tmpdwlbn1eo.jl:35\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpdwlbn1eo.jl:25\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpdwlbn1eo.jl:35 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpdwlbn1eo.jl:33\ntest set: Error During Test at
    /tmp/tmpdwlbn1eo.jl:36\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpdwlbn1eo.jl:25\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdwlbn1eo.jl:36 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
  timestamp: 1659747210
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr)\n        return arr\n    else\n        maximum = arr\n\
    \        for i = k+1:length(arr)\n            if maximum[i] > maximum[k-1]\n \
    \               maximum = maximum[:i]\n            else\n                break\n\
    \            end\n        end\n        return maximum\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp0dszd2g8.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp0dszd2g8.jl:39\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dszd2g8.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dszd2g8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp0dszd2g8.jl:40\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4, -4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dszd2g8.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dszd2g8.jl:38\ntest set: Error\
    \ During Test at /tmp/tmp0dszd2g8.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access\
    \ 7-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n   \
    \  @ Main /tmp/tmp0dszd2g8.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0dszd2g8.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0dszd2g8.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp0dszd2g8.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  ArgumentError:\
    \ invalid index: :i of type Symbol\n  Stacktrace:\n    [1] to_index(i::Symbol)\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Symbol)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n"
  timestamp: 1659747209
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        maximum[i] = maximum(maximum,\
    \ arr[i])\n    end\n    return maximum\nend\n\"\"\"\n    Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n    of length k with\
    \ the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpozte8odw.jl:26\nin expression starting at\
    \ /tmp/tmpozte8odw.jl:26\n"
  stdout: ''
  timestamp: 1659747206
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximums = zeros(Int, k)\n    maximums[1] = arr[1]\n    for i = 2:k\n\
    \        maximums[i] = maximum(maximum(arr, i-1), i-1)\n    end\n    return maximums\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qhz3bze.jl:27\nin expression starting at\
    \ /tmp/tmp4qhz3bze.jl:27\n"
  stdout: ''
  timestamp: 1659747206
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2eo9kadu.jl:28\nin expression starting at\
    \ /tmp/tmp2eo9kadu.jl:28\n"
  stdout: ''
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        return Vector{Int64}(undef, 0) \n    else\
    \ \n        maximum = arr[k] \n        for i in k+1:length(arr) \n           \
    \ if maximum < arr[i] \n                maximum = arr[i] \n            end \n\
    \        end \n        return Vector{Int64}([maximum], k+1) \n    end \nend \n\
    \"\"\"\n    Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    of length k with the minimum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9inengeg.jl:32\nin expression starting at\
    \ /tmp/tmp9inengeg.jl:32\n"
  stdout: ''
  timestamp: 1659747206
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum = maximum(maximum, arr)\n        return maximum\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpo_twycsk.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpo_twycsk.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpo_twycsk.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_twycsk.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_twycsk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpo_twycsk.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpo_twycsk.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_twycsk.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_twycsk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpo_twycsk.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpo_twycsk.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_twycsk.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_twycsk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpo_twycsk.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr)\n        error(\"k should be less than or equal to\
    \ length(arr)\")\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n  \
    \      maximum[i] = maximum(maximum(maximum, arr[i]), maximum[i])\n    end\n \
    \   return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq0k1kw0.jl:29\nin expression starting at\
    \ /tmp/tmpwq0k1kw0.jl:29\n"
  stdout: ''
  timestamp: 1659747206
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        error(\"k should be less than or equal to\
    \ length(arr)\") \n    else \n        maximum = arr[k] \n        for i in k+1:length(arr)\
    \ \n            if maximum < arr[i] \n                maximum = arr[i] \n    \
    \        end \n        end \n        return maximum \n    end \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp2j__nnvo.jl:37\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    Cannot `convert` an object of type Int64 to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp2j__nnvo.jl:29\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2j__nnvo.jl:37 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2j__nnvo.jl:36\ntest set: Error
    During Test at /tmp/tmp2j__nnvo.jl:38\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object of type Int64
    to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp2j__nnvo.jl:29\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n  '
  timestamp: 1659747210
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum = maximum(maximum, k)\n        return maximum\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpdui8mrwk.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpdui8mrwk.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpdui8mrwk.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdui8mrwk.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdui8mrwk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpdui8mrwk.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpdui8mrwk.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdui8mrwk.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdui8mrwk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpdui8mrwk.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpdui8mrwk.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdui8mrwk.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdui8mrwk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpdui8mrwk.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747205
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k)\
    \ \n        maximum[end] = maximum(arr,k) \n        return maximum \nend\n\"\"\
    \"\n    Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n    of length k with the minimum k numbers in arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjcc2pf20.jl:1\nin expression starting at /tmp/tmpjcc2pf20.jl:1\n"
  stdout: ''
  timestamp: 1659747206
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum,\
    \ arr), i)\n    end\n    return maximum\nend\n\"\"\"\n    Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n    of length k with\
    \ the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp362s16n_.jl:26\nin expression starting at\
    \ /tmp/tmp362s16n_.jl:26\n"
  stdout: ''
  timestamp: 1659747207
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(arr[end],k-1)\n        return maximum\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp9f9kf_z9.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp9f9kf_z9.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp9f9kf_z9.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9f9kf_z9.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9f9kf_z9.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9f9kf_z9.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp9f9kf_z9.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9f9kf_z9.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9f9kf_z9.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9f9kf_z9.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp9f9kf_z9.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9f9kf_z9.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9f9kf_z9.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9f9kf_z9.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747206
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr)\n        return arr\n    end\n    \n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum(maximum(maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum,\
    \ maximum(maximum, maximum(maximum, maximum(maximum, maximum(maximum, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9a10mzw.jl:29\nin expression starting at\
    \ /tmp/tmpv9a10mzw.jl:29\n"
  stdout: ''
  timestamp: 1659747207
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr)\n        error(\"k must be less than or equal to length(arr)\"\
    )\n    end\n    maximum = arr\n    for i in 1:k\n        maximum = maximum(maximum(maximum(maximum,\
    \ maximum), maximum), maximum)\n    end\n    return maximum\nend\n\"\"\"\n   \
    \ Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n    of length k with the minimum k numbers in arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3n5dd372.jl:29\nin expression starting at\
    \ /tmp/tmp3n5dd372.jl:29\n"
  stdout: ''
  timestamp: 1659747207
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend\n\"\"\"\n    Given an array arr\
    \ of integers and a positive integer k, return a sorted list \n    of length k\
    \ with the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7dget0_1.jl:30\nin expression starting at\
    \ /tmp/tmp7dget0_1.jl:30\n"
  stdout: ''
  timestamp: 1659747207
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum([arr[k]]; k=k)\n    return maximum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp0ykwl3oj.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp0ykwl3oj.jl:28\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp0ykwl3oj.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0ykwl3oj.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0ykwl3oj.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0ykwl3oj.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp0ykwl3oj.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0ykwl3oj.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0ykwl3oj.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0ykwl3oj.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp0ykwl3oj.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0ykwl3oj.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0ykwl3oj.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0ykwl3oj.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747210
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    end\n    \n    maximum = maximum(maximum(arr,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k-1),k-1)\n    maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \    maximum = maximum(maximum(maximum,k\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpuiumk3.jl:66\nin expression starting at\
    \ /tmp/tmphpuiumk3.jl:66\n"
  stdout: ''
  timestamp: 1659747208
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(arr[end],k-1)\n        return maximum\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp9f9kf_z9.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp9f9kf_z9.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp9f9kf_z9.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9f9kf_z9.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9f9kf_z9.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9f9kf_z9.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp9f9kf_z9.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9f9kf_z9.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9f9kf_z9.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9f9kf_z9.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp9f9kf_z9.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9f9kf_z9.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9f9kf_z9.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9f9kf_z9.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747206
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        return maximum\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpgv2h5zb1.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpgv2h5zb1.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpgv2h5zb1.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgv2h5zb1.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgv2h5zb1.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpgv2h5zb1.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpgv2h5zb1.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgv2h5zb1.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgv2h5zb1.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpgv2h5zb1.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpgv2h5zb1.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgv2h5zb1.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgv2h5zb1.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpgv2h5zb1.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum([arr[k+1], arr[k]], k)\n    maximum = maximum([maximum,\
    \ arr[k]], k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum,\
    \ arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum =\
    \ maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]],\
    \ k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum,\
    \ arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum =\
    \ maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]],\
    \ k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum,\
    \ arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum =\
    \ maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]],\
    \ k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum,\
    \ arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum =\
    \ maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]],\
    \ k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum,\
    \ arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum =\
    \ maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]],\
    \ k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum,\
    \ arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum =\
    \ maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]],\
    \ k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum,\
    \ arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum =\
    \ maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum, arr[k+1]],\
    \ k)\n    maximum = maximum([maximum, arr[k+1]], k)\n    maximum = maximum([maximum,\
    \ arr[k+1]], k)\n    maximum = maximum([\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3tk6dhd.jl:1\nin expression starting at /tmp/tmpb3tk6dhd.jl:1\n"
  stdout: ''
  timestamp: 1659747208
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        throw(ArgumentError(\"k must be less than\
    \ or equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum[i] = maximum(maximum(maximum, arr[i]), arr[i])\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp10sb4pnf.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp10sb4pnf.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp10sb4pnf.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp10sb4pnf.jl:33\ntest set: Error\
    \ During Test at /tmp/tmp10sb4pnf.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp10sb4pnf.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp10sb4pnf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp10sb4pnf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp10sb4pnf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type\
    \ Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp10sb4pnf.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp10sb4pnf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp10sb4pnf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp10sb4pnf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects\
    \ of type Vector{Int64} are not calla"
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum = maximum(maximum, maximum(arr, k-1))\n        return\
    \ maximum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpicw2o77m.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpicw2o77m.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpicw2o77m.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpicw2o77m.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpicw2o77m.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpicw2o77m.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpicw2o77m.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpicw2o77m.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpicw2o77m.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpicw2o77m.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpicw2o77m.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpicw2o77m.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpicw2o77m.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpicw2o77m.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr)\n        throw(ArgumentError(\"k must be less than\
    \ or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum[i] = maximum(maximum(maximum, arr[i]), maximum[i])\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp_c9oe9xh.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp_c9oe9xh.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_c9oe9xh.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_c9oe9xh.jl:33\ntest set: Error\
    \ During Test at /tmp/tmp_c9oe9xh.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp_c9oe9xh.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_c9oe9xh.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_c9oe9xh.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_c9oe9xh.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type\
    \ Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp_c9oe9xh.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_c9oe9xh.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_c9oe9xh.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_c9oe9xh.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects\
    \ of type Vector{Int64} are not calla"
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    end\n    \n    maximum = maximum(maximum(arr),\
    \ k-1)\n    maximum = maximum(maximum(maximum, arr), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(arr), k-1), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(arr),\
    \ k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(maximum(maximum(maximum(maximum(maximum(arr), k-1), k-1), k-1), k-1),\
    \ k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr), k-1), k-1), k-1),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr), k-1),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1)\n   \
    \ maximum = maximum(maximum(maximum, maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1)\n\
    \    maximum = maximum(maximum(maximum, maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1),\
    \ k-1), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1),\
    \ k-1), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp4sx2881r.jl:19 expected\
    \ \"end\", got \")\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4sx2881r.jl:29\n\
    in expression starting at /tmp/tmp4sx2881r.jl:29\n"
  stdout: ''
  timestamp: 1659747208
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k)\
    \ \n        maximum[end] = maximum(arr,k) \n        return maximum \n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp3r4sfsrw.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp3r4sfsrw.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp3r4sfsrw.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3r4sfsrw.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3r4sfsrw.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3r4sfsrw.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp3r4sfsrw.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3r4sfsrw.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3r4sfsrw.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3r4sfsrw.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp3r4sfsrw.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3r4sfsrw.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3r4sfsrw.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3r4sfsrw.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        return Vector{Int64}() \n    else \n    \
    \    maximum = arr[k] \n        for i in k+1:length(arr) \n            if maximum\
    \ < arr[i] \n                maximum = arr[i] \n            end \n        end\
    \ \n        return Vector{Int64}([maximum]); \n    end \nend \n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 4)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 5)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 6)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 7)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 8)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 9)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 10)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 11)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 12)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 13)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 14)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 15)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 16)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 17)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 18)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 19)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 20)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 21)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 22)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 23)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 24)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 25)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 26)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 27)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 28)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 29)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 30)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 31)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 32)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 33)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyv3edy_r.jl:32\nin expression starting at\
    \ /tmp/tmpyv3edy_r.jl:32\n"
  stdout: ''
  timestamp: 1659747208
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        return [] \n    else \n        maximum =\
    \ arr[k] \n        for i in k+1:length(arr) \n            if maximum < arr[i]\
    \ \n                maximum = arr[i] \n            end \n        end \n      \
    \  return maximum::Vector{Int64} \n    end \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpbj75lyke.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpbj75lyke.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  TypeError: in typeassert,\
    \ expected Vector{Int64}, got a value of type Int64\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpbj75lyke.jl:29\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpbj75lyke.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbj75lyke.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpbj75lyke.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  TypeError: in typeassert, expected Vector{Int64},\
    \ got a value of type Int64\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpbj75lyke.jl:29\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpbj75lyke.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbj75lyke.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpbj75lyke.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  TypeError: in typeassert, expected\
    \ Vector{Int64}, got a value of type Int64\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpbj75lyke.jl:29\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpbj75lyke.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbj75lyke.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpbj75lyke.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([123, -"
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k)\
    \ \n        maximum[end] = maximum(arr,k) \n        return maximum \n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp3r4sfsrw.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp3r4sfsrw.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp3r4sfsrw.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3r4sfsrw.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3r4sfsrw.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3r4sfsrw.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp3r4sfsrw.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3r4sfsrw.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3r4sfsrw.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3r4sfsrw.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp3r4sfsrw.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3r4sfsrw.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3r4sfsrw.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3r4sfsrw.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747211
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        return arr\n    else \n        maximum =\
    \ maximum(maximum(arr,arr+k-1),arr+k) \n        return maximum\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpymmjlnwr.jl:32\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    no method matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition, use
    broadcasting with dot syntax: array .+ scalar\n  Closest candidates are:\n    +(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n    +(!Matched::T,
    ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpymmjlnwr.jl:23\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpymmjlnwr.jl:32 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpymmjlnwr.jl:31\ntest set: Error
    During Test at /tmp/tmpymmjlnwr.jl:33\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: no method matching +(::Vector{Int64}, ::Int64)\n  For
    element-wise addition, use broadcasting with dot syntax: array .+ scalar\n  Closest
    candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n    +(!Matched::T,
    ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpymmjlnwr.jl:23\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/juli'
  timestamp: 1659747212
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomu1f6et.jl:26\nin expression starting at\
    \ /tmp/tmpomu1f6et.jl:26\n"
  stdout: ''
  timestamp: 1659747209
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    maximum(arr, k)\n</cell>\n<text>\nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array arr. \nThe function maximum() will return the maximum\
    \ k numbers in the array \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvv0xzjgk.jl:30\nin expression starting at\
    \ /tmp/tmpvv0xzjgk.jl:30\n"
  stdout: ''
  timestamp: 1659747209
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2eo9kadu.jl:28\nin expression starting at\
    \ /tmp/tmp2eo9kadu.jl:28\n"
  stdout: ''
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum([arr[i]+1 for i in 1:k], k)\n    maximum = maximum([arr[i]-1\
    \ for i in 1:k], k)\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpdcrq73nt.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpdcrq73nt.jl:29\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpdcrq73nt.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdcrq73nt.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdcrq73nt.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdcrq73nt.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpdcrq73nt.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdcrq73nt.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdcrq73nt.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdcrq73nt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpdcrq73nt.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdcrq73nt.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdcrq73nt.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdcrq73nt.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747212
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(arr[end], k-1)\n        return maximum\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpbr164sx3.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpbr164sx3.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpbr164sx3.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpbr164sx3.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpbr164sx3.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbr164sx3.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbr164sx3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbr164sx3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k)\
    \ \n        maximum[k] = 0\n        return maximum \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedkp13j3.jl:28\nin expression starting at\
    \ /tmp/tmpedkp13j3.jl:28\n"
  stdout: ''
  timestamp: 1659747210
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum.(arr, k)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp7_9dy9ni.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp7_9dy9ni.jl:27\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp7_9dy9ni.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7_9dy9ni.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7_9dy9ni.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7_9dy9ni.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp7_9dy9ni.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7_9dy9ni.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7_9dy9ni.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7_9dy9ni.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp7_9dy9ni.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7_9dy9ni.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7_9dy9ni.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7_9dy9ni.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747212
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpfp5_49tx.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfp5_49tx.jl:1\n\
    in expression starting at /tmp/tmpfp5_49tx.jl:1\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomu1f6et.jl:26\nin expression starting at\
    \ /tmp/tmpomu1f6et.jl:26\n"
  stdout: ''
  timestamp: 1659747209
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k)\
    \ \n        maximum[end] = maximum(maximum(arr,k-1),k-1) \n        return maximum\
    \ \nend\n\"\"\"\n    Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n    of length k with the minimum k numbers in arr.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdz535hc2.jl:1\nin expression starting at /tmp/tmpdz535hc2.jl:1\n"
  stdout: ''
  timestamp: 1659747210
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(maximum(arr, k-1), k) \n        return\
    \ maximum \n    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmproowcv2h.jl:28\nin expression starting at\
    \ /tmp/tmproowcv2h.jl:28\n"
  stdout: ''
  timestamp: 1659747210
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum(k,length(arr))\n    maximum = maximum.(arr)\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpy7ionnq7.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpy7ionnq7.jl:29\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpy7ionnq7.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr)\n        throw(ArgumentError(\"k must be less than\
    \ or equal to the length of the array\"))\n    end\n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum number\
    \ in a given array of numbers.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi39ptuqn.jl:29\nin expression starting at\
    \ /tmp/tmpi39ptuqn.jl:29\n"
  stdout: ''
  timestamp: 1659747210
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        return [] \n    else \n        maximum =\
    \ arr[k] \n        for i in k+1:length(arr) \n            if maximum < arr[i]\
    \ \n                maximum = arr[i] \n            end \n        end \n      \
    \  return arr[k:end] \n    end \nend \n\"\"\"\n    Given an array arr of integers\
    \ and a positive integer k, return a sorted list \n    of length k with the minimum\
    \ k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvazurl39.jl:32\nin expression starting at\
    \ /tmp/tmpvazurl39.jl:32\n"
  stdout: ''
  timestamp: 1659747210
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpfp5_49tx.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfp5_49tx.jl:1\n\
    in expression starting at /tmp/tmpfp5_49tx.jl:1\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpoywrl8a5.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpoywrl8a5.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpoywrl8a5.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoywrl8a5.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoywrl8a5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpoywrl8a5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpoywrl8a5.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoywrl8a5.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoywrl8a5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpoywrl8a5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpoywrl8a5.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoywrl8a5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoywrl8a5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpoywrl8a5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum number in a given array of numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeo8d9d12.jl:26\nin expression starting at\
    \ /tmp/tmpeo8d9d12.jl:26\n"
  stdout: ''
  timestamp: 1659747210
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        maximum[i] = maximum(maximum,\
    \ arr[i])\n    end\n    maximum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp2eamnymq.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp2eamnymq.jl:31\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eamnymq.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eamnymq.jl:30\ntest set: Error\
    \ During Test at /tmp/tmp2eamnymq.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp2eamnymq.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2eamnymq.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2eamnymq.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2eamnymq.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type\
    \ Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp2eamnymq.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2eamnymq.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2eamnymq.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2eamnymq.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects\
    \ of type Vector{Int64} are not calla"
  timestamp: 1659747213
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        return Vector{Int64}() \n    else \n    \
    \    maximum = arr[k] \n        for i in k+1:length(arr) \n            if maximum\
    \ < arr[i] \n                maximum = arr[i] \n            end \n        end\
    \ \n        return Vector{Int64}([maximum]) \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum number in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4u2romuq.jl:32\nin expression starting at\
    \ /tmp/tmp4u2romuq.jl:32\n"
  stdout: ''
  timestamp: 1659747210
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = zeros(Int64, k)\n    for i = 1:k\n        maximum[i] = maximum(maximum(arr),\
    \ arr[i])\n    end\n    return maximum\nend\n\"\"\"\n    Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n    of length k with\
    \ the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphcntoim7.jl:26\nin expression starting at\
    \ /tmp/tmphcntoim7.jl:26\n"
  stdout: ''
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr) \n        error(\"k should be less than or equal to\
    \ length(arr)\") \n    else \n        maximum = arr \n        for i = k+1:length(arr)\
    \ \n            if maximum[i] > maximum[i-1] \n                maximum = maximum[i-1:k]\
    \ \n            else \n                maximum = maximum[i-1:k-1:-1] \n      \
    \      end \n        end \n        return maximum \n    end \nend \n\"\"\"\n \
    \   Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n    of length k with the minimum k numbers in arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2rjzynk9.jl:34\nin expression starting at\
    \ /tmp/tmp2rjzynk9.jl:34\n"
  stdout: ''
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-1),k-1)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpfp5_49tx.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfp5_49tx.jl:1\n\
    in expression starting at /tmp/tmpfp5_49tx.jl:1\n"
  stdout: ''
  timestamp: 1659747197
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    \n    maximum = zeros(k)\n    \n    for i = 1:k\n        maximum[i] =\
    \ maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt1zenf5l.jl:27\nin expression starting at\
    \ /tmp/tmpt1zenf5l.jl:27\n"
  stdout: ''
  timestamp: 1659747211
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum[i] = maximum(maximum,\
    \ arr[i])\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpwrl0o7d5.jl:31\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpwrl0o7d5.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwrl0o7d5.jl:31 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwrl0o7d5.jl:30\ntest set: Error
    During Test at /tmp/tmpwrl0o7d5.jl:32\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpwrl0o7d5.jl:22\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpwrl0o7d5.jl:32 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpwrl0o7d5.jl:30\ntest set: Error During Test at
    /tmp/tmpwrl0o7d5.jl:33\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpwrl0o7d5.jl:22\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwrl0o7d5.jl:33 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
  timestamp: 1659747202
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \nend\n\"\"\"\n    Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n    of length k with the minimum k numbers in arr.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnwai7zw.jl:1\nin expression starting at /tmp/tmphnwai7zw.jl:1\n"
  stdout: ''
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2eo9kadu.jl:28\nin expression starting at\
    \ /tmp/tmp2eo9kadu.jl:28\n"
  stdout: ''
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k > length(arr)\n        throw(ArgumentError(\"k must be less than\
    \ or equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, 4)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 5)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 6)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 7)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 8)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 9)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 10)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 11)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 12)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 13)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 14)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 15)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 16)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 17)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 18)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 19)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 20)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 21)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 22)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 23)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 24)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 25)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 26)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 27)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 28)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 29)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 30)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 31)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 32)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 33)\n</\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnz5_ucnp.jl:33\nin expression starting at\
    \ /tmp/tmpnz5_ucnp.jl:33\n"
  stdout: ''
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k)\
    \ \n        maximum[end] = maximum(arr,k-1) \n        return maximum \n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpg35w4edg.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpg35w4edg.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpg35w4edg.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg35w4edg.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg35w4edg.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpg35w4edg.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpg35w4edg.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg35w4edg.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg35w4edg.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpg35w4edg.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpg35w4edg.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg35w4edg.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg35w4edg.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpg35w4edg.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747200
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum(k,length(arr))\n    maximum = maximum.(arr)\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpy7ionnq7.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpy7ionnq7.jl:29\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpy7ionnq7.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = zeros(Int64, k)\n    maximum[1] = arr[1]\n    for i = 2:k\n\
    \        maximum[i] = maximum(maximum(arr[i-1:i+1], arr[i]), arr[i+1])\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a vector arr of integers\
    \ and a positive integer k and returns the k largest numbers in arr. \nThe function\
    \ should return a vector of length k and each element should be the largest number\
    \ in arr less than or equal to that element.\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpucr07g4v.jl:27\nin expression starting at\
    \ /tmp/tmpucr07g4v.jl:27\n"
  stdout: ''
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpyds4fvgt.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpyds4fvgt.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyds4fvgt.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyds4fvgt.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpyds4fvgt.jl:36\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyds4fvgt.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyds4fvgt.jl:34\ntest set: Error\
    \ During Test at /tmp/tmpyds4fvgt.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n   \
    \  @ Main /tmp/tmpyds4fvgt.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyds4fvgt.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyds4fvgt.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpyds4fvgt.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  BoundsError: attempt\
    \ to access 2-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpyds4fvgt.jl:22\n   [3] macro expansion\n     @ /shared/cento"
  timestamp: 1659747207
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    \n    if k == 0 \n        return arr\n    \n    if k == 1 \n        return\
    \ arr\n    \n    if k == length(arr) \n        return arr\n    \n    maximum =\
    \ maximum(maximum(arr, k-1), k-1)\n    \n    maximum = maximum(maximum(maximum,\
    \ arr), k-1)\n    \n    maximum = maximum(maximum(maximum, arr), k-1)\n    \n\
    \    maximum = maximum(maximum(maximum, arr), k-1)\n    \n    maximum = maximum(maximum(maximum,\
    \ arr), k-1)\n    \n    maximum = maximum(maximum(maximum, arr), k-1)\n    \n\
    \    maximum = maximum(maximum(maximum, arr), k-1)\n    \n    maximum = maximum(maximum(maximum,\
    \ arr), k-1)\n    \n    maximum = maximum(maximum(maximum, arr), k-1)\n    \n\
    \    maximum = maximum(maximum(maximum, arr), k-1)\n    \n    maximum = maximum(maximum(maximum,\
    \ arr), k-1)\n    \n    maximum = maximum(maximum(maximum, arr), k-1)\n    \n\
    \    maximum = maximum(maximum(maximum, arr), k-1)\n    \n    maximum = maximum(maximum(maximum,\
    \ arr), k-1)\n    \n    maximum = maximum(maximum(maximum, arr), k-1)\n    \n\
    \    maximum = maximum(maximum(maximum, arr), k-1)\n    \n    maximum = maximum(maximum(maximum,\
    \ arr), k-1)\n    \n    maximum = maximum(maximum(maximum, arr), k-1)\n    \n\
    \    maximum = maximum(maximum(maximum, arr), k-1)\n    \n    maximum = maximum(maximum(maximum,\
    \ arr), k-1)\n    \n    maximum = maximum(maximum(maximum, arr), k-1)\n    \n\
    \    maximum = maximum(maximum(maximum, arr), k-1)\n    \n    maximum = maximum(maximum(maximum,\
    \ arr), k-1)\n    \n    maximum = maximum(maximum(maximum, arr), k-1)\n    \n\
    \    maximum = maximum(maximum(maximum, arr), k-1)\n    \n    maximum = maximum(maximum(maximum,\
    \ arr), k-1)\n    \n    maximum = maximum(maximum(maximum, arr), k-1)\n    \n\
    \    maximum = maximum(maximum(maximum, arr), k-1)\n    \n    maximum = maximum(maximum(maximum,\
    \ arr), k-1)\n    \n    maximum = maximum(maximum(maximum, arr), k-1)\n    \n\
    \    maximum = maximum(maximum(maximum, arr), k-1)\n    \n    maximum = maximum(maximum(maximum,\
    \ arr), k-1)\n    \n    maximum = maximum(maximum(maximum, arr), k-1)\n    \n\
    \    maximum = maximum(maximum(maximum, arr), k-1)\n    \n    maximum = maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0tabcjnz.jl:101\nin expression starting at\
    \ /tmp/tmp0tabcjnz.jl:101\n"
  stdout: ''
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum(k,length(arr))\n    maximum = maximum.(arr)\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpy7ionnq7.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpy7ionnq7.jl:29\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpy7ionnq7.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbrv9krw.jl:26\nin expression starting at\
    \ /tmp/tmpjbrv9krw.jl:26\n"
  stdout: ''
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum.(arr, k)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp7_9dy9ni.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp7_9dy9ni.jl:27\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp7_9dy9ni.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7_9dy9ni.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7_9dy9ni.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7_9dy9ni.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp7_9dy9ni.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7_9dy9ni.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7_9dy9ni.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7_9dy9ni.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp7_9dy9ni.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7_9dy9ni.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7_9dy9ni.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7_9dy9ni.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747212
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum(k,length(arr))\n    maximum = maximum.(arr)\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpy7ionnq7.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpy7ionnq7.jl:29\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpy7ionnq7.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpy7ionnq7.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7ionnq7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7ionnq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy7ionnq7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(arr[end],k-1)\n        return maximum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbe31r6vc.jl:28\nin expression starting at\
    \ /tmp/tmpbe31r6vc.jl:28\n"
  stdout: ''
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ minimum number in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9hbtdrth.jl:26\nin expression starting at\
    \ /tmp/tmp9hbtdrth.jl:26\n"
  stdout: ''
  timestamp: 1659747212
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, k)\n</cell>\n<text>\nmaximum_by function\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpau6utk6l.jl:26\nin expression starting at\
    \ /tmp/tmpau6utk6l.jl:26\n"
  stdout: ''
  timestamp: 1659747211
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        maximum[i] = maximum(maximum,\
    \ arr[i])\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpmg83rk3t.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpmg83rk3t.jl:31\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmg83rk3t.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmg83rk3t.jl:30\ntest set: Error\
    \ During Test at /tmp/tmpmg83rk3t.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpmg83rk3t.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg83rk3t.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg83rk3t.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmg83rk3t.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type\
    \ Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpmg83rk3t.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg83rk3t.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg83rk3t.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmg83rk3t.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects\
    \ of type Vector{Int64} are not calla"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    end\n    \n    maximum = maximum(maximum(arr),\
    \ k-1)\n    maximum = maximum(maximum(maximum, arr), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(arr), k-1), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(arr),\
    \ k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(maximum(maximum(maximum(maximum(maximum(arr), k-1), k-1), k-1), k-1),\
    \ k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum, maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr), k-1), k-1), k-1),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr), k-1),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1)\n    maximum = maximum(maximum(maximum,\
    \ maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1)\n   \
    \ maximum = maximum(maximum(maximum, maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1),\
    \ k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1), k-1),\
    \ k-1), k-1), k-1), k-1), \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpqq6qynns.jl:19 expected\
    \ \"end\", got \")\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqq6qynns.jl:29\n\
    in expression starting at /tmp/tmpqq6qynns.jl:29\n"
  stdout: ''
  timestamp: 1659747212
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i])\n    end\n    return maximum\nend\n\"\"\"\n    Given an array\
    \ arr of integers and a positive integer k, return a sorted list \n    of length\
    \ k with the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi559shqx.jl:26\nin expression starting at\
    \ /tmp/tmpi559shqx.jl:26\n"
  stdout: ''
  timestamp: 1659747212
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    maximum = maximum.(arr, k)\nend\nmaximum.(arr::Vector{Int64}, k::Int64)\
    \ = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector{Int64},\
    \ k::Int64) = maximum.(arr[1:k], k) + maximum(arr[k+1:end], k)\nmaximum.(arr::Vector\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: arr not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy_kj5xfa.jl:22\nin expression starting at /tmp/tmpy_kj5xfa.jl:22\n"
  stdout: ''
  timestamp: 1659747212
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(maximum(arr,k-1),k-1)[end]\n        return maximum\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpkpz7jec8.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpkpz7jec8.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpkpz7jec8.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkpz7jec8.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkpz7jec8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkpz7jec8.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpkpz7jec8.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkpz7jec8.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkpz7jec8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkpz7jec8.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpkpz7jec8.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkpz7jec8.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkpz7jec8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkpz7jec8.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
  timestamp: 1659747199
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    \n    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr[i])\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that finds the\
    \ minimum number in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprap7p03r.jl:27\nin expression starting at\
    \ /tmp/tmprap7p03r.jl:27\n"
  stdout: ''
  timestamp: 1659747212
