language: jl
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0\n        0\n    else\n        (a * b) mod 10\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2, 3)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits of their product \n(e.g.: multiply(2, 3) == 2 * 3\
    \ * 10 == 60)\nAssume that the input is always valid.\nExamples:\nmultiply(2,\
    \ 3) == 60\nmultiply(2, 5) == 120\nmultiply(2, 7) == 180\nmultiply(2, 9) == 240\n\
    multiply(2, 11) == 300\nmultiply(2, 13) == 360\nmultiply(2, 15) == 420\nmultiply(2,\
    \ 17) == 480\nmultiply(2, 19) == 540\nmultiply(2, 21) == 600\nmultiply(2, 23)\
    \ == 660\nmultiply(2, 25) == 720\nmultiply(2, 27) == 780\nmultiply(2, 29) == 840\n\
    multiply(2, 31) == 900\nmultiply(2, 33) == 960\nmultiply(2, 35) == 1020\nmultiply(2,\
    \ 37) == 1080\nmultiply(2, 39) == 1140\nmultiply(2, 41) == 1200\nmultiply(2, 43)\
    \ == 1260\nmultiply(2, 45) == 1320\nmultiply(2, 47) == 1380\nmultiply(2, 49) ==\
    \ 1440\nmultiply(2, 51) == 1500\nmultiply(2, 53) == 1560\nmultiply(2, 55) == 1620\n\
    multiply(2, 57) == 1680\nmultiply(2, 59) == 1740\nmultiply(2, 61) == 1800\nmultiply(2,\
    \ 63) == 1860\nmultiply(2, 65) == 1920\nmultiply(2, 67) == 1980\nmultiply(2, 69)\
    \ == 2040\nmultiply(2, 71) == 2000\nmultiply(2, 73) == 2060\nmultiply(2, 75) ==\
    \ 2120\nmultiply(2, 77) == 2180 \nmultiply(2, 79) == 2240\nmultiply(2, 81) ==\
    \ 2200\nmultiply(2, 83) == 2260\nmultiply(2, 85) == 2320\nmultiply(2, 87) == 2280\n\
    multiply(2, 89) == 2340\nmultiply(2, 91) == 2300\nmultiply(2, 93) == 2360 \nmultiply(2,\
    \ 95) == 2420\nmultiply(2, 97) == 2380\nmultiply(2, 99) == 2440\nmultiply(2, 101)\
    \ == 2400\nmultiply(2, 103) == 2460\nmultiply(2, 105) == 2520\nmultiply(2, 107)\
    \ == 2580\nmultiply(2, 109) == 2540\nmultiply(2, 111) == 2500\nmultiply(2, 113)\
    \ == 2560\nmultiply(2, 115) == 2620\nmultiply(2, 117) == 2680\nmultiply(2, 119)\
    \ == 2640 \nmultiply(2, 121) == 2600\nmultiply(2, 123) == 2660\nmultiply(2, 125)\
    \ == 2720\nmultiply(2, 127) == 2780\nmultiply(2, 129) == 2740\nmultiply(2, \n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp0jaowuga.jl:7 expected \"end\"\
    , got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0jaowuga.jl:10\n\
    in expression starting at /tmp/tmp0jaowuga.jl:10\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    \n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(2, 3)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes two integers and returns the sum of the unit digits of their product\
    \ (without using any built-in functions).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi6rd05a0.jl:12\nin expression starting at\
    \ /tmp/tmpi6rd05a0.jl:12\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        throw(ArithmeticError(\"Cannot multiply by zero\"))\n\
    \    elseif b == 1\n        return a\n    else\n        return multiply(a/10,\
    \ b*10) + a%10*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n       \
    \             \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13yh5c_e.jl:15\nin expression starting at\
    \ /tmp/tmp13yh5c_e.jl:15\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: -1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a > b\n        multiply(b, a)\n    else\n        multiply(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659748827
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then 0\n    else \n        multiply(a/10,\
    \ b%10) * 10^(a%10) * 10^(b%10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    multiply(a::Int64, b::Int64)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf19np9xu.jl:8\nin expression starting at /tmp/tmpf19np9xu.jl:8\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a==0 || b==0 \n        then 0\n    else \n        multiply(a/10, b%10)*10\
    \ + a%10*b%10\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(2,3)\
    \ == 6\n@assert multiply(2,0) == 0\n@assert multiply(0,2) == 0\n@assert multiply(0,0)\
    \ == 0\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the digits of its input. \nAssume that the input is always valid.\nExamples:\n\
    add(123) = 1 + 2 + 3\nadd(12) = 1 + 2\nadd(0) = 0\nadd(123) = 1 + 2 + 3\nadd(123)\
    \ = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 +\
    \ 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123)\
    \ = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 +\
    \ 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123)\
    \ = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 +\
    \ 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123)\
    \ = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 +\
    \ 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123)\
    \ = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 +\
    \ 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123)\
    \ = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 +\
    \ 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123)\
    \ = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 + 3\nadd(123) = 1 + 2 +\
    \ 3\nadd(123) = 1 + 2 + 3\nadd(123) = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyaq36crh.jl:8\nin expression starting at /tmp/tmpyaq36crh.jl:8\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        error(\"Invalid input\")\n    elseif b == 1 \n        return a\n\
    \    else\n        return multiply(a/10, b%10)*10 + multiply(a/10, b%10)\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that\
    \ takes two integers and returns \n    the sum of the unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n                    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1p6pdhyf.jl:17\nin expression starting at\
    \ /tmp/tmp1p6pdhyf.jl:17\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0\n        0\n    else\n        (a * b) % 10\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2, 3)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(2, 0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(0, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ integers and returns the sum of the \n    unit digits of their product (without\
    \ using multiplication).\n    Examples:\n                    multiply(2, 3) =\
    \ 2 + 3\n                    multiply(2, 0) = 2 + 0\n                    multiply(0,\
    \ 0) = 0 + 0\n                    multiply(0, 2) = 0 + 2\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps697xlmc.jl:13\nin expression starting at\
    \ /tmp/tmps697xlmc.jl:13\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * 10^(b-1)) * (10^(b-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2,\
    \ 3)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp80g3t8tz.jl:13\nin expression starting at\
    \ /tmp/tmp80g3t8tz.jl:13\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    \n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4o4_m93p.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp4o4_m93p.jl:17\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:18\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:19\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:20\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:21\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659748824
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if b == 0\n        0\n    elseif b == 1\n        a\n    else\n \
    \       multiply(a, b / 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \                    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbqg8yn89.jl:16\nin expression starting at\
    \ /tmp/tmpbqg8yn89.jl:16\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    end\n \
    \   \n    if a == 0 || b == 0\n        return 0\n    end\n    \n    local digits\
    \ = zeros(Int64, 10)\n    \n    for i = 1:10\n        digits[i] = a%10 * b%10\n\
    \        a = a//10\n        b = b//10\n    end\n    \n    return sum(digits)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpabmco0qx.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpabmco0qx.jl:31\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  InexactError: Int64(194//25)\n  Stacktrace:\n\
    \   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] multiply(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpabmco0qx.jl:19\n   [5] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmpabmco0qx.jl:31 [inlined]\n   [7] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpabmco0qx.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpabmco0qx.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  InexactError: Int64(133//25)\n  Stacktrace:\n   [1]\
    \ Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] multiply(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpabmco0qx.jl:19\n   [5] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmpabmco0qx.jl:32 [inlined]\n   [7] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpabmco0qx.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpabmco0qx.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  InexactError: Int64(1//5)\n  Stacktrace:\n   [1]\
    \ Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] multiply(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpabmco0qx.jl:19\n   [5] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmpabmco0qx.jl:33 [inlined]\n   [7] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7."
  timestamp: 1659748826
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        return a\n    elseif b == 1 \n        return a\n    else\n     \
    \   return multiply(a/10, b*10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \                    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_k7q3kvn.jl:17\nin expression starting at\
    \ /tmp/tmp_k7q3kvn.jl:17\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    end\n \
    \   \n    mul = Int(0)\n    \n    while a != 0 || b != 0\n        \n        if\
    \ a > b\n            mul = mul * 10 + a - b\n            a = b\n        else\n\
    \            mul = mul * 10 + b - a\n            b = a\n        end\n    end\n\
    \    \n    return mul\nend\n</cell>\n<code language=julia-1.6>\nmultiply(2,3)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the sum of its unit digits.\nExamples:\nmultiply(2) returns 3\nmultiply(3) returns\
    \ 6\nmultiply(4) returns 10\nmultiply(5) returns 15\nmultiply(6) returns 21\n\
    multiply(7) returns 28\nmultiply(8) returns 36\nmultiply(9) returns 45\nmultiply(10)\
    \ returns 55\nmultiply(11) returns 66\nmultiply(12) returns 78\nmultiply(13) returns\
    \ 90\nmultiply(14) returns 105\nmultiply(15) returns 120\nmultiply(16) returns\
    \ 132\nmultiply(17) returns 150\nmultiply(18) returns 165\nmultiply(19) returns\
    \ 180\nmultiply(20) returns 195\nmultiply(21) returns 210\nmultiply(22) returns\
    \ 225\nmultiply(23) returns 240\nmultiply(24) returns 255\nmultiply(25) returns\
    \ 270\nmultiply(26) returns 285\nmultiply(27) returns 300\nmultiply(28) returns\
    \ 315\nmultiply(29) returns 330\nmultiply(30) returns 345\nmultiply(31) returns\
    \ 360\nmultiply(32) returns 375\nmultiply(33) returns 390\nmultiply(34) returns\
    \ 405\nmultiply(35) returns 420\nmultiply(36) returns 435\nmultiply(37) returns\
    \ 450\nmultiply(38) returns 465\nmultiply(39) returns 480\nmultiply(40) returns\
    \ 495\nmultiply(41) returns 510\nmultiply(42) returns 525\nmultiply(43) returns\
    \ 540\nmultiply(44) returns 555\nmultiply(45) returns 570\nmultiply(46) returns\
    \ 585\nmultiply(47) returns 600\nmultiply(48) returns 615\nmultiply(49) returns\
    \ 630\nmultiply(50) returns 645\nmultiply(51) returns 660\nmultiply(52) returns\
    \ 675\nmultiply(53) returns 690\nmultiply(54) returns 705\nmultiply(55) returns\
    \ 720\nmultiply(56) returns 735\nmultiply(57) returns 750\nmultiply(58) returns\
    \ 765\nmultiply(59) returns 780\nmultiply(60) returns 795\nmultiply(61) returns\
    \ 810\nmultiply(62) returns 825\nmultiply(63) returns 840\nmultiply(64) returns\
    \ 855\nmultiply(65) returns 870\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuca1avww.jl:27\nin expression starting at\
    \ /tmp/tmpuca1avww.jl:27\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    end\n \
    \   \n    local product = 1\n    \n    for i = 1, a \n        product = product\
    \ * b\n    end\n    \n    return product\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(2, 3) == 6\n@assert multiply(2, 0) == error(\"Invalid input\"\
    )\n@assert multiply(2, -1) == error(\"Invalid input\")\n@assert multiply(2, -2)\
    \ == error(\"Invalid input\")\n@assert multiply(2, 2) == 4\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is even or odd.\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkj5hvph.jl:15\nin expression starting at\
    \ /tmp/tmpmkj5hvph.jl:15\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a==0 || b==0 \n        then 0\n    else \n        multiply(a/10, b%10)\
    \ * 10 + a%10 * b%10\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ multiply(2, 3) == 6\n@assert multiply(2, 0) == 0\n@assert multiply(0, 2) ==\
    \ 0\n@assert multiply(0, 0) == 0\n@assert multiply(1, 0) == 1\n@assert multiply(1,\
    \ 1) == 1\n@assert multiply(2, 2) == 4\n@assert multiply(2, 3) == 6\n@assert multiply(2,\
    \ 4) == 8\n@assert multiply(2, 5) == 10\n@assert multiply(2, 6) == 12\n@assert\
    \ multiply(2, 7) == 14\n@assert multiply(2, 8) == 16\n@assert multiply(2, 9) ==\
    \ 18\n@assert multiply(2, 10) == 20\n@assert multiply(2, 11) == 22\n@assert multiply(2,\
    \ 12) == 24\n@assert multiply(2, 13) == 26\n@assert multiply(2, 14) == 28\n@assert\
    \ multiply(2, 15) == 30\n@assert multiply(2, 16) == 32\n@assert multiply(2, 17)\
    \ == 34\n@assert multiply(2, 18) == 36\n@assert multiply(2, 19) == 38\n@assert\
    \ multiply(2, 20) == 40\n@assert multiply(2, 21) == 42\n@assert multiply(2, 22)\
    \ == 44\n@assert multiply(2, 23) == 46\n@assert multiply(2, 24) == 48\n@assert\
    \ multiply(2, 25) == 50\n@assert multiply(2, 26) == 52\n@assert multiply(2, 27)\
    \ == 54\n@assert multiply(2, 28) == 56\n@assert multiply(2, 29) == 58\n@assert\
    \ multiply(2, 30) == 60\n@assert multiply(2, 31) == 62\n@assert multiply(2, 32)\
    \ == 64\n@assert multiply(2, 33) == 66\n@assert multiply(2, 34) == 68\n@assert\
    \ multiply(2, 35) == 70\n@assert multiply(2, 36) == 72\n@assert multiply(2, 37)\
    \ == 74\n@assert multiply(2, 38) == 76\n@assert multiply(2, 39) == 78\n@assert\
    \ multiply(2, 40) == 80\n@assert multiply(2, 41) == 82\n@assert multiply(2, 42)\
    \ == 84\n@assert multiply(2, 43) == 86\n@assert multiply(2, 44) == 88\n@assert\
    \ multiply(2, 45) == 90\n@assert multiply(2, 46) == 92\n@assert multiply(2, 47)\
    \ == 94\n@assert multiply(2, 48) == 96\n@assert multiply(2, 49) == 98\n@assert\
    \ multiply(2, 50) == 100\n@assert multiply(2, 51) == 102\n@assert multiply(2,\
    \ 52) == 104\n@assert multiply(2, 53) == 106\n@assert multiply(2, 54) == 108\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxtsfryn_.jl:8\nin expression starting at /tmp/tmpxtsfryn_.jl:8\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    \n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4o4_m93p.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp4o4_m93p.jl:17\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:18\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:19\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:20\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:21\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659748824
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * 10^(b-1)) * 10^(b-2)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(1, 1) == 10\n\
    @assert multiply(1, 2) == 20\n@assert multiply(1, 3) == 30\n@assert multiply(1,\
    \ 4) == 40\n@assert multiply(1, 5) == 50\n@assert multiply(1, 6) == 60\n@assert\
    \ multiply(1, 7) == 70\n@assert multiply(1, 8) == 80\n@assert multiply(1, 9) ==\
    \ 90\n@assert multiply(1, 10) == 100\n@assert multiply(1, 11) == 110\n@assert\
    \ multiply(1, 12) == 120\n@assert multiply(1, 13) == 130\n@assert multiply(1,\
    \ 14) == 140\n@assert multiply(1, 15) == 150\n@assert multiply(1, 16) == 160\n\
    @assert multiply(1, 17) == 170\n@assert multiply(1, 18) == 180\n@assert multiply(1,\
    \ 19) == 190\n@assert multiply(1, 20) == 200\n@assert multiply(1, 21) == 210\n\
    @assert multiply(1, 22) == 220\n@assert multiply(1, 23) == 230\n@assert multiply(1,\
    \ 24) == 240\n@assert multiply(1, 25) == 250\n@assert multiply(1, 26) == 260\n\
    @assert multiply(1, 27) == 270\n@assert multiply(1, 28) == 280\n@assert multiply(1,\
    \ 29) == 290\n@assert multiply(1, 30) == 300\n@assert multiply(1, 31) == 310\n\
    @assert multiply(1, 32) == 320\n@assert multiply(1, 33) == 330\n@assert multiply(1,\
    \ 34) == 340\n@assert multiply(1, 35) == 350\n@assert multiply(1, 36) == 360\n\
    @assert multiply(1, 37) == 370\n@assert multiply(1, 38) == 380\n@assert multiply(1,\
    \ 39) == 390\n@assert multiply(1, 40) == 400\n@assert multiply(1, 41) == 410\n\
    @assert multiply(1, 42) == 420\n@assert multiply(1, 43) == 430\n@assert multiply(1,\
    \ 44) == 440\n@assert multiply(1, 45) == 450\n@assert multiply(1, 46) == 460\n\
    @assert multiply(1, 47) == 470\n@assert multiply(1, 48) == 480\n@assert multiply(1,\
    \ 49) == 490\n@assert multiply(1, 50) == 500\n@assert multiply(1, 51) == 510\n\
    @assert multiply(1, 52) == 520\n@assert multiply(1, 53) == 530\n@assert multiply(1,\
    \ 54) == 540\n@assert multiply(1, 55) == 550\n@assert multiply(1, 56) == 560\n\
    @assert multiply(1, 57) == 570\n@assert multiply(1, 58) == 580\n@assert \nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1w_8y_pa.jl:13\nin expression starting at\
    \ /tmp/tmp1w_8y_pa.jl:13\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        multiply(a/10, b%10)*10 + a%10\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpy1_u_adb.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpy1_u_adb.jl:18\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  MethodError: no method matching multiply(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    multiply(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpy1_u_adb.jl:6\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmpy1_u_adb.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy1_u_adb.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy1_u_adb.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpy1_u_adb.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  MethodError: no method matching multiply(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    multiply(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpy1_u_adb.jl:6\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmpy1_u_adb.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy1_u_adb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy1_u_adb.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpy1_u_adb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  MethodError: no method matching multiply(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    multiply(!Matched::Int64, ::Int64)\
    \ at /tmp/tmpy1_u_adb.jl:6\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmpy1_u_adb.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy1_u_adb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  timestamp: 1659748826
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    \n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4o4_m93p.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp4o4_m93p.jl:17\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:18\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:19\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:20\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:21\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659748824
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = 1\n    local digit = 1\n    \n    while a > 0 do\n\
    \        digit = a % 10\n        result = result * digit + digit\n        a =\
    \ a // 10\n    end\n    \n    while b > 0 do\n        digit = b % 10\n       \
    \ result = result * digit + digit\n        b = b // 10\n    end\n    \n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3x2dqh99.jl:11\nin expression starting at /tmp/tmp3x2dqh99.jl:11\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int, 10)\n    mult_digits[1] = a\n    mult_digits[2]\
    \ = b\n    mult_digits[3] = (a * b) / 10\n    mult_digits[4] = (a * b) % 10\n\
    \    mult_digits[5] = (b * a) / 10\n    mult_digits[6] = (b * a) % 10\n    mult_digits[7]\
    \ = ((a * b) % 10) * (b / 10)\n    mult_digits[8] = ((a * b) % 10) * (b / 10)\
    \ % 10\n    mult_digits[9] = ((a * b) % 10) * (b / 10) % 10\n    \n    mult_digits\
    \ = mult_digits[2:end]\n    \n    return mult_digits[1] * mult_digits[2] * mult_digits[3]\
    \ * mult_digits[4] * mult_digits[5] * mult_digits[6] * mult_digits[7] * mult_digits[8]\
    \ * mult_digits[9]\nend\n</cell>\n<code language=julia-1.4>\nmultiply(1, 2)\n\
    </cell>\n<code language=julia-1.4>\nmultiply(1, 3)\n</cell>\n<code language=julia-1.4>\n\
    multiply(1, 4)\n</cell>\n<code language=julia-1.4>\nmultiply(1, 5)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(1, 6)\n</cell>\n<code language=julia-1.4>\n\
    multiply(1, 7)\n</cell>\n<code language=julia-1.4>\nmultiply(1, 8)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(1, 9)\n</cell>\n<code language=julia-1.4>\n\
    multiply(2, 3)\n</cell>\n<code language=julia-1.4>\nmultiply(2, 4)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(2, 5)\n</cell>\n<code language=julia-1.4>\n\
    multiply(2, 6)\n</cell>\n<code language=julia-1.4>\nmultiply(2, 7)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(2, 8)\n</cell>\n<code language=julia-1.4>\n\
    multiply(2, 9)\n</cell>\n<code language=julia-1.4>\nmultiply(3, 4)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(3, 5)\n</cell>\n<code language=julia-1.4>\n\
    multiply(3, 6)\n</cell>\n<code language=julia-1.4>\nmultiply(3, 7)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(3, 8)\n</cell>\n<code language=julia-1.4>\n\
    multiply(3, 9)\n</cell>\n<code language=julia-1.4>\nmultiply(4, 5)\n</cell>\n\
    <code language=julia-1.\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpql7fvt04.jl:23\nin expression starting at\
    \ /tmp/tmpql7fvt04.jl:23\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    \n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4o4_m93p.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp4o4_m93p.jl:17\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:18\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:19\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:20\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:21\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659748824
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = 1\n    for i = 1, a do\n        result = result *\
    \ b\n    end\n    return result\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of two integers, a and b. \nAssume the input is always\
    \ valid.\nExamples:\n$a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a +\
    \ b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n\
    $a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b\
    \ = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a\
    \ + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n\
    $a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b\
    \ = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a\
    \ + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n\
    $a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b\
    \ = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a\
    \ + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n\
    $a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b\
    \ = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a + b = 15$\n$a = 5$, $b = 10$\n$a\
    \ + b = 15$\n$a = 5$, $b = 10\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpragag4rf.jl:9\nin expression starting at /tmp/tmpragag4rf.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a*b).digits(10)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(a::Int64)::Array{Int64}\n\
    \    \n    Get the unit digits of the given integer.\n    \n    Arguments:\n \
    \   \n    - `a::Int64`: The integer to get the unit digits from.\n    \n    Returns:\n\
    \    \n    - `digits::Array{Int64}`: The unit digits of the given integer.\n \
    \   \n    Examples:\n    \n    ```julia\n    julia> digits(123456789)\n    123456789\n\
    \    julia> digits(1234567890)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    julia> digits(12345678901)\n\
    \    [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n    julia> digits(123456789012)\n    [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]\n    julia> digits(1234567890123)\n    [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 0, 1, 2]\n    julia> digits(12345678901234)\n    [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3]\n    julia> digits(12345678901234567)\n   \
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6]\n    julia> digits(123456789012345678)\n\
    \    [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8]\n    julia> digits(12345678901234567801)\n\
    \    [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0]\n    julia> digits(1234567890123456780123)\n\
    \    [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1]\n    julia>\
    \ digits(12345678901234567801234)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 0, 1, 2, 3]\n    julia> digits(12345678901234567801234567)\n\
    \    [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5,\
    \ 6]\n    julia> digits(123456789012345678012345678)\n    [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7, 8]\n    julia> digits(12345678901234567801234567801)\n\
    \    [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 0]\n    julia> digits(1234567890123456780123456780123)\n    [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0,\
    \ 1]\n    julia> digits(12345678901234567801234567801234)\n    [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3]\n\
    \    julia> digits(12345678901234567801234567801234567)\n    [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1_h18h_o.jl:13\nin expression starting at\
    \ /tmp/tmp1_h18h_o.jl:13\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a*b).digits\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n                    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl8axqlwl.jl:13\nin expression starting at\
    \ /tmp/tmpl8axqlwl.jl:13\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(b, a%b)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nmultiply(2,3)\n</cell>\n<code\
    \ language=julia-1.4>\nmultiply(2,0)\n</cell>\n<code language=julia-1.4>\nmultiply(0,2)\n\
    </cell>\n<code language=julia-1.4>\nmultiply(2,0)\n</cell>\n<code language=julia-1.4>\n\
    multiply(0,0)\n</cell>\n<code language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code\
    \ language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code language=julia-1.4>\nmultiply(0,0)\n\
    </cell>\n<code language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code language=julia-1.4>\n\
    multiply(0,0)\n</cell>\n<code language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code\
    \ language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code language=julia-1.4>\nmultiply(0,0)\n\
    </cell>\n<code language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code language=julia-1.4>\n\
    multiply(0,0)\n</cell>\n<code language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code\
    \ language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code language=julia-1.4>\nmultiply(0,0)\n\
    </cell>\n<code language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code language=julia-1.4>\n\
    multiply(0,0)\n</cell>\n<code language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code\
    \ language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code language=julia-1.4>\nmultiply(0,0)\n\
    </cell>\n<code language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code language=julia-1.4>\n\
    multiply(0,0)\n</cell>\n<code language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code\
    \ language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code language=julia-1.4>\nmultiply(0,0)\n\
    </cell>\n<code language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code language=julia-1.4>\n\
    multiply(0,0)\n</cell>\n<code language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code\
    \ language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code language=julia-1.4>\nmultiply(0,0)\n\
    </cell>\n<code language=julia-1.4>\nmultiply(0,0)\n</cell>\n<code language=julia-1.4>\n\
    multiply(0,\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsabufzsk.jl:8\nin expression starting at /tmp/tmpsabufzsk.jl:8\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        multiply(a/10, b%10)*10 + a%10\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers\
    \ and returns the sum of their unit digits.\nAssume the input is always valid.\n\
    Examples:\nmultiply(10, 5) == 50\nmultiply(10, 0) == 0\nmultiply(10, 1) == 10\n\
    multiply(10, 2) == 20\nmultiply(10, 3) == 30\nmultiply(10, 4) == 40\nmultiply(10,\
    \ 5) == 50\nmultiply(10, 6) == 60\nmultiply(10, 7) == 70\nmultiply(10, 8) == 80\n\
    multiply(10, 9) == 90\nmultiply(10, 10) == 100\nmultiply(10, 11) == 110\nmultiply(10,\
    \ 12) == 120\nmultiply(10, 13) == 130\nmultiply(10, 14) == 140\nmultiply(10, 15)\
    \ == 150\nmultiply(10, 16) == 160\nmultiply(10, 17) == 170\nmultiply(10, 18) ==\
    \ 180\nmultiply(10, 19) == 190\nmultiply(10, 20) == 200\nmultiply(10, 21) == 210\n\
    multiply(10, 22) == 220\nmultiply(10, 23) == 230\nmultiply(10, 24) == 240\nmultiply(10,\
    \ 25) == 250\nmultiply(10, 26) == 260\nmultiply(10, 27) == 270\nmultiply(10, 28)\
    \ == 280\nmultiply(10, 29) == 290\nmultiply(10, 30) == 300\nmultiply(10, 31) ==\
    \ 310\nmultiply(10, 32) == 320\nmultiply(10, 33) == 330\nmultiply(10, 34) == 340\n\
    multiply(10, 35) == 350\nmultiply(10, 36) == 360\nmultiply(10, 37) == 370\nmultiply(10,\
    \ 38) == 380\nmultiply(10, 39) == 390\nmultiply(10, 40) == 400\nmultiply(10, 41)\
    \ == 410\nmultiply(10, 42) == 420\nmultiply(10, 43) == 430\nmultiply(10, 44) ==\
    \ 440\nmultiply(10, 45) == 450\nmultiply(10, 46) == 460\nmultiply(10, 47) == 470\n\
    multiply(10, 48) == 480\nmultiply(10, 49) == 490\nmultiply(10, 50) == 500\nmultiply(10,\
    \ 51) == 510\nmultiply(10, 52) == 520\nmultiply(10, 53) == 530\nmultiply(10, 54)\
    \ == 540\nmultiply(10, 55) == 550\nmultiply(10, 56) == 560\nmultiply(10, 57) ==\
    \ 570\nmultiply(10, 58) == 580\nmultiply(10, 59) == 590\nmultiply(10, 60) == 600\n\
    multiply(10, 61) == 610\nmultiply(10, 62) == 620\nmultiply(10, 63) == 630\nmultiply(10,\
    \ 64) == 640\nmultiply(10, 65) == 650\nmultiply(10, 66) == 660\nmultiply(10, 67)\
    \ == 670\nmultiply(10, 68) == 680\nmultiply(10, 69) == 690\nmultiply(10, 70) ==\
    \ 700\nmultiply(10, 71) == 710\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppp7sm44t.jl:13\nin expression starting at\
    \ /tmp/tmppp7sm44t.jl:13\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int, 10)\n    \n    mult_digits[1] = a\n   \
    \ mult_digits[2] = b\n    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits\
    \ = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n    \n   \
    \ mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = \nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptzneqg8g.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptzneqg8g.jl:1\n\
    in expression starting at /tmp/tmptzneqg8g.jl:1\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        multiply(a/10, b%10)*10 + a%10\n\
    \    end\nend\n</code>\n<|/ a |>\n<| a tags=julia,recursion |>\nI believe this\
    \ can be done with just one recursive function and no loops. \n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwus3d6ke.jl:13\nin expression starting at\
    \ /tmp/tmpwus3d6ke.jl:13\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    elseif b == 1\n        a\n    else\n       \
    \ multiply(a/10, b*10)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(5,3)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the unit digits. \nAssume the input is\
    \ always valid.\nExamples:\n[1,2,3]\n[1,2,-3]\n[1,2,-3,-4]\n[1,2,-3,-4,-5]\n[1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]\n\
    [1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16]\n[1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23]\n\
    [1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25]\n\
    [1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40]\n\
    [1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80]\n\
    [1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_ndc1e2.jl:15\nin expression starting at\
    \ /tmp/tmpj_ndc1e2.jl:15\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b % 10)\
    \ * 10^(floor(log10(b)))\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(2,\
    \ 3) == 6\n@assert multiply(2, 0) == 0\n@assert multiply(0, 2) == 0\n@assert multiply(2,\
    \ 2) == 4\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers\
    \ and returns the sum of the \n    unit digits of their product (that is, the\
    \ product of their unit \n    digits).\n    Assume the input is always valid.\n\
    \    Examples:\n                    \n                    \n                 \
    \   \n                    \n                    \n                    \n     \
    \               \n                    \n                    \n               \
    \     \n                    \n                    \n                    \n   \
    \                 \n                    \n                    \n             \
    \       \n                    \n                    \n                    \n \
    \                   \n                    \n                    \n           \
    \         \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdd41k3w3.jl:12\nin expression starting at\
    \ /tmp/tmpdd41k3w3.jl:12\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a *\
    \ b\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(10, 5) == 50\n\
    @assert multiply(10, 0) == 10\n@assert multiply(10, -1) == 10\n@assert multiply(10,\
    \ -2) == 10\n@assert multiply(10, -3) == 10\n@assert multiply(10, -4) == 10\n\
    @assert multiply(10, -5) == 10\n@assert multiply(10, -6) == 10\n@assert multiply(10,\
    \ -7) == 10\n@assert multiply(10, -8) == 10\n@assert multiply(10, -9) == 10\n\
    @assert multiply(10, -10) == 10\n@assert multiply(10, -11) == 10\n@assert multiply(10,\
    \ -12) == 10\n@assert multiply(10, -13) == 10\n@assert multiply(10, -14) == 10\n\
    @assert multiply(10, -15) == 10\n@assert multiply(10, -16) == 10\n@assert multiply(10,\
    \ -17) == 10\n@assert multiply(10, -18) == 10\n@assert multiply(10, -19) == 10\n\
    @assert multiply(10, -20) == 10\n@assert multiply(10, -21) == 10\n@assert multiply(10,\
    \ -22) == 10\n@assert multiply(10, -23) == 10\n@assert multiply(10, -24) == 10\n\
    @assert multiply(10, -25) == 10\n@assert multiply(10, -26) == 10\n@assert multiply(10,\
    \ -27) == 10\n@assert multiply(10, -28) == 10\n@assert multiply(10, -29) == 10\n\
    @assert multiply(10, -30) == 10\n@assert multiply(10, -31) == 10\n@assert multiply(10,\
    \ -32) == 10\n@assert multiply(10, -33) == 10\n@assert multiply(10, -34) == 10\n\
    @assert multiply(10, -35) == 10\n@assert multiply(10, -36) == 10\n@assert multiply(10,\
    \ -37) == 10\n@assert multiply(10, -38) == 10\n@assert multiply(10, -39) == 10\n\
    @assert multiply(10, -40) == 10\n@assert multiply(10, -41) == 10\n@assert multiply(10,\
    \ -42) == 10\n@assert multiply(10, -43) == 10\n@assert multiply(10, -44) == 10\n\
    @assert multiply(10, -45) == 10\n@assert multiply(10, -46) == 10\n@assert multiply(10,\
    \ -47) == 10\n@assert multiply(10, -48) == 10\n@assert multiply(10, -49) == 10\n\
    @assert multiply(10, -50) == 10\n@assert multiply(10, -51) == 10\n@assert multiply(10,\
    \ -52) == 10\n@assert multiply(10, -53) == \nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsluiiuqw.jl:9\nin expression starting at /tmp/tmpsluiiuqw.jl:9\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return a * multiply(a/10,\
    \ b%10) \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(a::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_f97sihe.jl:12\nin expression starting at\
    \ /tmp/tmp_f97sihe.jl:12\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0\n        0\n    else\n        (a * b) % 10\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n@code_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwsvhhnts.jl:13\nin expression starting at\
    \ /tmp/tmpwsvhhnts.jl:13\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a > 0 \n        then \n            if b > 0 \n                then\
    \ \n                    multiply(a/10, b%10)*10 + multiply(a/10, b%10)\n     \
    \           else \n                    multiply(a/10, b%10)\n            else\
    \ \n                multiply(a/10, b%10)\n        else \n            0\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2, 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of the \n    unit digits of their product (without using multiplication).\n\
    \    Examples:\n                    multiply(2, 3) = 2*10 + 3*1\n            \
    \        multiply(2, 4) = 2*10 + 4*1\n                    multiply(2, 5) = 2*10\
    \ + 5*1\n                    multiply(2, 6) = 2*10 + 6*1\n                   \
    \ multiply(2, 7) = 2*10 + 7*1\n                    multiply(2, 8) = 2*10 + 8*1\n\
    \                    multiply(2, 9) = 2*10 + 9*1\n                    multiply(2,\
    \ 10) = 2*10 + 10*1\n                    multiply(2, 11) = 2*10 + 11*1\n     \
    \               multiply(2, 12) = 2*10 + 12*1\n                    multiply(2,\
    \ 13) = 2*10 + 13*1\n                    multiply(2, 14) = 2*10 + 14*1\n     \
    \               multiply(2, 15) = 2*10 + 15*1\n                    multiply(2,\
    \ 16) = 2*10 + 16*1\n                    multiply(2, 17) = 2*10 + 17*1\n     \
    \               multiply(2, 18) = 2*10 + 18*1\n                    multiply(2,\
    \ 19) = 2*10 + 19*1\n                    multiply(2, 20) = 2*10 + 20*1\n     \
    \               multiply(2, 21) = 2*10 + 21*1\n                    multiply(2,\
    \ 22) = 2*10 + 22*1\n                    multiply(2, 23) = 2*10 + 23*1\n     \
    \               multiply(2, 24) = 2*10 + 24*1\n                    multiply(2,\
    \ 25) = 2*10 + 25*1\n                    multiply(2, 26) = 2*10 + 26*1\n     \
    \               multiply(2, 27) = 2*10 + 27*1\n                    multiply(2,\
    \ 28) = 2*10 + 28*1\n                    multiply(2, 29) = 2*10 + 29*1\n     \
    \               multiply(2, 30) = 2*10 + 30*1\n                    multiply(2,\
    \ 31) = 2*10 + 31*1\n                    multiply(2, 32) = 2*10 + 32*1\n     \
    \               multiply(2, 33) = 2*10 + 33*1\n                    multiply(2,\
    \ 34) = 2*10 + 34*1\n                    multiply(2, 35) = 2*10 + 35*1\n     \
    \               multiply(2, \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpe2t0bqg0.jl:9 expected \"end\"\
    , got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe2t0bqg0.jl:14\n\
    in expression starting at /tmp/tmpe2t0bqg0.jl:14\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a *\
    \ b\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n                    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15hw1wl6.jl:9\nin expression starting at /tmp/tmp15hw1wl6.jl:9\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int64, 10)\n    \n    for i = 1:10\n       \
    \ mult_digits[i] = a%10 * b%10\n        a = floor(a/10)\n        b = floor(b/10)\n\
    \    end\n    \n    return sum(mult_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,3)\n</cell>\n<code language=julia-1.5>\nmultiply(2,4)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(2,5)\n</cell>\n<code language=julia-1.5>\nmultiply(2,6)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(2,7)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,8)\n</cell>\n<code language=julia-1.5>\nmultiply(2,9)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(2,10)\n</cell>\n<code language=julia-1.5>\nmultiply(2,11)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(2,12)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,13)\n</cell>\n<code language=julia-1.5>\nmultiply(2,14)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,15)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,16)\n</cell>\n<code language=julia-1.5>\nmultiply(2,17)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,18)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,19)\n</cell>\n<code language=julia-1.5>\nmultiply(2,20)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,21)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,22)\n</cell>\n<code language=julia-1.5>\nmultiply(2,23)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,24)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,25)\n</cell>\n<code language=julia-1.5>\nmultiply(2,26)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,27)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,28)\n</cell>\n<code language=julia-1.5>\nmultiply(2,29)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,30)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,31)\n</cell>\n<code language=julia-1.5>\nmultiply(2,32)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,33)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,34)\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsuxanpbe.jl:18\nin expression starting at\
    \ /tmp/tmpsuxanpbe.jl:18\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a *\
    \ b\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    multiply(a::Int64, b::Int64)::Int64\n\
    \    \n    Multiply two integers and return the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n                    multiply(1,\
    \ 2)\n                    multiply(1, 0)\n                    multiply(0, 0)\n\
    \                    multiply(-1, 2)\n                    multiply(-1, 0)\n  \
    \                  multiply(-1, 0)\n                    multiply(0, 2)\n     \
    \               multiply(0, -1)\n                    multiply(0, 0)\n        \
    \            multiply(1, -1)\n                    multiply(1, 0)\n           \
    \         multiply(2, -1)\n                    multiply(2, 0)\n              \
    \      multiply(-1, -1)\n                    multiply(-1, 0)\n               \
    \     multiply(0, -1)\n                    multiply(0, 0)\n                  \
    \  multiply(1, 2)\n                    multiply(2, 1)\n                    multiply(-1,\
    \ 2)\n                    multiply(-1, 1)\n                    multiply(2, -1)\n\
    \                    multiply(2, 1)\n                    multiply(-1, -1)\n  \
    \                  multiply(-1, 1)\n                    multiply(2, 2)\n     \
    \               multiply(2, 1)\n                    multiply(2, -1)\n        \
    \            multiply(2, 1)\n                    multiply(2, 2)\n            \
    \        multiply(2, 1)\n                    multiply(2, -1)\n               \
    \     multiply(2, 1)\n                    multiply(2, 2)\n                   \
    \ multiply(2, 1)\n                    multiply(2, -1)\n                    multiply(2,\
    \ 1)\n                    multiply(2, 2)\n                    multiply(2, 1)\n\
    \                    multiply(2, -1)\n                    multiply(2, 1)\n   \
    \                 multiply(2, 2)\n                    multiply(2, 1)\n       \
    \             multiply(2, -1)\n                    multiply(2, 1)\n          \
    \          multiply(2, 2)\n                    multiply(2, 1)\n              \
    \      multiply(2, -1)\n                    multiply(2, 1)\n                 \
    \   multiply(2, 2)\n                    multiply(2, 1)\n                    multiply(2,\
    \ -1)\n                    multiply(2, 1)\n                    multiply(2, 2)\n\
    \                    multiply(2, 1)\n                    multiply(2, -1)\n   \
    \                 multiply(2, 1)\n                    multiply(2, 2)\n       \
    \             multiply(2, 1)\n                    multiply(2, -1)\n          \
    \          multiply(2, 1)\n                    multiply(2, 2)\n              \
    \      multiply(2, 1)\n                    multiply(2, -1)\n                 \
    \   multiply(2, 1)\n                    multiply(2, 2)\n                    multiply(2,\
    \ 1)\n                    multiply(2, -1)\n                    multiply(2, 1)\n\
    \                    multiply(2, 2)\n                    multiply(2, 1)\n    \
    \                multiply(2, -1)\n                    multiply(2, 1)\n       \
    \             multiply(2, 2)\n                    multiply(2, 1)\n           \
    \         multiply(2, -1)\n                    multiply(2, 1)\n              \
    \      multiply(2, 2)\n                    multiply(2, 1)\n                  \
    \  multiply(2, -1)\n                    multiply(2, 1)\n                    multiply(2,\
    \ 2)\n                    multiply(2, 1)\n                    multiply(2, -1)\n\
    \                    multiply(2, 1)\n                    multiply(\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgwgxytjq.jl:9\nin expression starting at /tmp/tmpgwgxytjq.jl:9\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(a, b /\
    \ 10)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    multiply(a::Int64,\
    \ b::Int64)\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5joee74j.jl:8\nin expression starting at /tmp/tmp5joee74j.jl:8\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * multiply(a,\
    \ b - 1)) \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    product(a::Int64,\
    \ b::Int64)::Int64\n    \n    Compute the product of a and b. \n    \n    Assumes\
    \ a and b are valid integers. \n    \n    Examples:\n    \n    ```julia\n    product(1,\
    \ 1)\n    ```\n    \n    ```julia\n    product(2, 2)\n    ```\n    \n    ```julia\n\
    \    product(3, 3)\n    ```\n    \n    ```julia\n    product(4, 4)\n    ```\n\
    \    \n    ```julia\n    product(5, 5)\n    ```\n    \n    ```julia\n    product(6,\
    \ 6)\n    ```\n    \n    ```julia\n    product(7, 7)\n    ```\n    \n    ```julia\n\
    \    product(8, 8)\n    ```\n    \n    ```julia\n    product(9, 9)\n    ```\n\
    \    \n    ```julia\n    product(10, 10)\n    ```\n    \n    ```julia\n    product(11,\
    \ 11)\n    ```\n    \n    ```julia\n    product(12, 12)\n    ```\n    \n    ```julia\n\
    \    product(13, 13)\n    ```\n    \n    ```julia\n    product(14, 14)\n    ```\n\
    \    \n    ```julia\n    product(15, 15)\n    ```\n    \n    ```julia\n    product(16,\
    \ 16)\n    ```\n    \n    ```julia\n    product(17, 17)\n    ```\n    \n    ```julia\n\
    \    product(18, 18)\n    ```\n    \n    ```julia\n    product(19, 19)\n    ```\n\
    \    \n    ```julia\n    product(20, 20)\n    ```\n    \n    ```julia\n    product(21,\
    \ 21)\n    ```\n    \n    ```julia\n    product(22, 22)\n    ```\n    \n    ```julia\n\
    \    product(23, 23)\n    ```\n    \n    ```julia\n    product(24, 24)\n    ```\n\
    \    \n    ```julia\n    product(25, 25)\n    ```\n    \n    ```julia\n    product(26,\
    \ 26)\n    ```\n    \n    ```julia\n    product(27, 27)\n    ```\n    \n    ```julia\n\
    \    product(28, 28)\n    ```\n    \n    ```julia\n    product(29, 29)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ko95u3j.jl:12\nin expression starting at\
    \ /tmp/tmp3ko95u3j.jl:12\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        multiply(a, b / 10)\n    end\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes two integers and\
    \ returns the sum of the \n    unit digits of their product (that is, the product\
    \ of their unit \n    digits). Assume the input is always valid.\n    Examples:\n\
    \                    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8cqsjqoe.jl:13\nin expression starting at\
    \ /tmp/tmp8cqsjqoe.jl:13\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10^9\
    \ + 10^9\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    multiply(a::Int64,\
    \ b::Int64)\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp8end38ci.jl:7 expected \"end\"\
    , got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8end38ci.jl:10\n\
    in expression starting at /tmp/tmp8end38ci.jl:10\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        error(\"Invalid input\")\n    elseif b == 1 \n        return a\n\
    \    else\n        return multiply(a/10, b%10) * 10 + a%10\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the digits of its\
    \ input. \nAssume that the input is always valid.\nExamples:\nmultiply(123, 456)\
    \ = 2 + 5 + 3 = 12\nmultiply(123, 0) = 123\nmultiply(0, 0) = 0\nmultiply(123,\
    \ 0) = 123\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0, 0) = 0\nmultiply(0,\
    \ 0)\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93n7rxfz.jl:17\nin expression starting at\
    \ /tmp/tmp93n7rxfz.jl:17\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(a, b /\
    \ 10)\n    end\nend\n</cell>\n<code language=julia-1.4>\nmultiply(3, 4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of the \n    unit digits of their product (that is, the product of the unit\
    \ digits \n    of the two integers).\n    Assume the input is always valid.\n\
    \    Examples:\n                    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp35l_jawf.jl:8\nin expression starting at /tmp/tmp35l_jawf.jl:8\n"
  stdout: ''
  timestamp: 1659748826
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    \n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4o4_m93p.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp4o4_m93p.jl:17\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:18\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:19\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:20\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:21\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659748824
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        error(\"Invalid input\")\n    elseif b == 1 \n        return a\n\
    \    else\n        return multiply(a/10, b%10) * 10 + a%10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n                    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwbkjdt6v.jl:17\nin expression starting at\
    \ /tmp/tmpwbkjdt6v.jl:17\n"
  stdout: ''
  timestamp: 1659748826
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int64, 10)\n    \n    for digit in a:digits(10)\n\
    \        mult_digits[digit] = mult_digits[digit] + 1\n    end\n    \n    for digit\
    \ in b:digits(10)\n        mult_digits[digit] = mult_digits[digit] + 1\n    end\n\
    \    \n    return mult_digits[digits(10)]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(1, 1) == 1 \"Test failed\"\n@assert multiply(1, 2) == 2 \"Test\
    \ failed\"\n@assert multiply(1, 3) == 6 \"Test failed\"\n@assert multiply(1, 4)\
    \ == 24 \"Test failed\"\n@assert multiply(1, 5) == 120 \"Test failed\"\n@assert\
    \ multiply(1, 6) == 720 \"Test failed\"\n@assert multiply(1, 7) == 5040 \"Test\
    \ failed\"\n@assert multiply(1, 8) == 40320 \"Test failed\"\n@assert multiply(1,\
    \ 9) == 362880 \"Test failed\"\n@assert multiply(1, 10) == 3628800 \"Test failed\"\
    \n@assert multiply(1, 11) == 39916800 \"Test failed\"\n@assert multiply(1, 12)\
    \ == 479001600 \"Test failed\"\n@assert multiply(1, 13) == 6227020800 \"Test failed\"\
    \n@assert multiply(1, 14) == 87178291200 \"Test failed\"\n@assert multiply(1,\
    \ 15) == 13076743680000 \"Test failed\"\n@assert multiply(1, 16) == 20922789888000\n\
    @assert multiply(1, 17) == 355687428096000\n@assert multiply(1, 18) == 6402373705728000\n\
    @assert multiply(1, 19) == 121645100408832000\n@assert multiply(1, 20) == 2432902008176640000\n\
    @assert multiply(1, 21) == 51090942171709440000\n@assert multiply(1, 22) == 1124000727777607680000\n\
    @assert multiply(1, 23) == 25852016738884976640000\n@assert multiply(1, 24) ==\
    \ 620448401733239439360000\n@assert multiply(1, 25) == 15511210043330985984000000\n\
    @assert multiply(1, 26) == 403291461126605635584000000\n@assert multiply(1, 27)\
    \ == 10888869450418352160768000000\n@assert multiply(1, 28) == 304888344611713860501504000000\n\
    @assert multiply(1, 29) == 8841761993739701954543616000000\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ppnv_31.jl:20\nin expression starting at\
    \ /tmp/tmp3ppnv_31.jl:20\n"
  stdout: ''
  timestamp: 1659748827
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a < 0 || b < 0\n        error(\"The two numbers must be positive\"\
    )\n    end\n    \n    if a == 0 || b == 0\n        return 0\n    end\n    \n \
    \   digits = zeros(Int64, 10)\n    \n    digits[1] = a\n    digits[2] = b\n  \
    \  \n    product = 1\n    \n    for i = 2:length(digits)\n        product = product\
    \ * digits[i]\n    end\n    \n    return product\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 3)\n</cell>\n<code language=julia-1.5>\nmultiply(2, -3)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 1)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 2)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 4)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 5)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 6)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 7)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 8)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 9)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 10)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 11)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 12)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 13)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 14)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 15)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 16)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 17)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 18)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 19)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 20)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 21)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 22)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 23)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 24)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 25)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 26)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 27)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 28\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeynpsbla.jl:29\nin expression starting at\
    \ /tmp/tmpeynpsbla.jl:29\n"
  stdout: ''
  timestamp: 1659748827
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(a, b /\
    \ 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(10, 2)\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n                    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp45d2ralo.jl:8\nin expression starting at /tmp/tmp45d2ralo.jl:8\n"
  stdout: ''
  timestamp: 1659748827
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return a * b \nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    multiply(a::Int64, b::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1r3aiwy.jl:12\nin expression starting at\
    \ /tmp/tmpv1r3aiwy.jl:12\n"
  stdout: ''
  timestamp: 1659748827
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    \n    return result\nend\n</cell>\n<code\
    \ language=julia-1.3>\nmultiply(2,3)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes two integers and returns the sum of the unit digits of their product\
    \ \n    For example: multiply(2,3) = 2*3 = 6\n    \n    Complete the function\
    \ that takes two integers and returns the sum of the unit digits of their product\
    \ \n    For example: multiply(2,3) = 2*3 = 6\n    \n    Examples:\n          \
    \          \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5l6rdkn.jl:12\nin expression starting at\
    \ /tmp/tmpt5l6rdkn.jl:12\n"
  stdout: ''
  timestamp: 1659748826
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of characters in the string.\nExamples:\n\"hello\" returns 5\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb318oyov.jl:13\nin expression starting at\
    \ /tmp/tmpb318oyov.jl:13\n"
  stdout: ''
  timestamp: 1659748826
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    else\n      \
    \  return a*b\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    multiply(a::Int64,\
    \ b::Int64)\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp080ofr4g.jl:13\nin expression starting at\
    \ /tmp/tmp080ofr4g.jl:13\n"
  stdout: ''
  timestamp: 1659748826
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a == 0 || b == 0\n        return a * b\n    else\n        return\
    \ multiply(a/10, b*10) + a%10 * b%10\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 10)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(10, 30)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 40)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 50)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(10, 60)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 70)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 80)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(10, 90)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 100)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 1000)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(10, 10000)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 100000)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 1000000)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(10, 10000000)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 100000000)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 1000000000)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(10, 10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(10, 100000000000)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 1000000000000)\n</cell>\n<code language=julia-1.5>\nmultiply(10,\
    \ 1000000000000)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(10, 10000000000010)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(10, 100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 1000000000001000)\n</cell>\n<code language=julia-1.5>\nmultiply(10,\
    \ 10000000000010000)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 100000000000100000)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(10, 1000000000001000000)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(10, 10000000000010000000)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(10, 100000000000100000000)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp86spawyl.jl:13\nin expression starting at\
    \ /tmp/tmp86spawyl.jl:13\n"
  stdout: ''
  timestamp: 1659748827
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        return a\n    elseif b == 1 \n        return a\n    elseif b > a\
    \ \n        error(\"Invalid input\")\n    else\n        return a*b\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    multiply(a::Int64, b::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb6dm5np.jl:19\nin expression starting at\
    \ /tmp/tmpdb6dm5np.jl:19\n"
  stdout: ''
  timestamp: 1659748826
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if b == 0\n        0\n    elseif b == 1\n        a\n    else\n \
    \       multiply(a, b-1)*10 + a\n    end\nend\n</cell>\n<code language=julia-1.6>\n\
    multiply(2, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the digits of its input. \nAssume that the input is always valid.\nExamples:\n\
    multiply(2, 3) = 2 + 3 = 5\nmultiply(2, 0) = 0\nmultiply(0, 0) = 0\nmultiply(1,\
    \ 0) = 0\nmultiply(1, 1) = 1\nmultiply(1, 2) = 2\nmultiply(1, 3) = 3\nmultiply(1,\
    \ 4) = 4\nmultiply(1, 5) = 5\nmultiply(1, 6) = 6\nmultiply(1, 7) = 7\nmultiply(1,\
    \ 8) = 8\nmultiply(1, 9) = 9\nmultiply(1, 10) = 10\nmultiply(1, 11) = 11\nmultiply(1,\
    \ 12) = 12\nmultiply(1, 13) = 13\nmultiply(1, 14) = 14\nmultiply(1, 15) = 15\n\
    multiply(1, 16) = 16\nmultiply(1, 17) = 17\nmultiply(1, 18) = 18\nmultiply(1,\
    \ 19) = 19\nmultiply(1, 20) = 20\nmultiply(1, 21) = 21\nmultiply(1, 22) = 22\n\
    multiply(1, 23) = 23\nmultiply(1, 24) = 24\nmultiply(1, 25) = 25\nmultiply(1,\
    \ 26) = 26\nmultiply(1, 27) = 27\nmultiply(1, 28) = 28\nmultiply(1, 29) = 29\n\
    multiply(1, 30) = 30\nmultiply(1, 31) = 31\nmultiply(1, 32) = 32\nmultiply(1,\
    \ 33) = 33\nmultiply(1, 34) = 34\nmultiply(1, 35) = 35\nmultiply(1, 36) = 36\n\
    multiply(1, 37) = 37\nmultiply(1, 38) = 38\nmultiply(1, 39) = 39\nmultiply(1,\
    \ 40) = 40\nmultiply(1, 41) = 41\nmultiply(1, 42) = 42\nmultiply(1, 43) = 43\n\
    multiply(1, 44) = 44\nmultiply(1, 45) = 45\nmultiply(1, 46) = 46\nmultiply(1,\
    \ 47) = 47\nmultiply(1, 48) = 48\nmultiply(1, 49) = 49\nmultiply(1, 50) = 50\n\
    multiply(1, 51) = 51\nmultiply(1, 52) = 52\nmultiply(1, 53) = 53\nmultiply(1,\
    \ 54) = 54\nmultiply(1, 55) = 55\nmultiply(1, 56) = 56\nmultiply(1, 57) = 57\n\
    multiply(1, 58) = 58\nmultiply(1, 59) = 59\nmultiply(1, 60) = 60\nmultiply(1,\
    \ 61) = 61\nmultiply(1, 62) = 62\nmultiply(1, 63) = 63\nmultiply(1, 64) = 64\n\
    multiply(1, 65) = 65\nmultiply(1, 66) = 66\nmultiply(1, 67) = 67\nmultiply(1,\
    \ 68) = 68\nmultiply(1, 69) = 69\nmultiply(1, 7\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp81ejds7k.jl:16\nin expression starting at\
    \ /tmp/tmp81ejds7k.jl:16\n"
  stdout: ''
  timestamp: 1659748826
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int, 10)\n    mult_digits[1] = a\n    mult_digits[2]\
    \ = b\n    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp42tq6p94.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp42tq6p94.jl:1\n\
    in expression starting at /tmp/tmp42tq6p94.jl:1\n"
  stdout: ''
  timestamp: 1659748826
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        error(\"Invalid input\")\n    else\n        return a * b\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product (without using any built-in\
    \ functions).\n    Assume the input is always valid.\n    Examples:\n        \
    \            \n                    \n                    \n                  \
    \  \n                    \n                    \n                    \n      \
    \              \n                    \n                    \n                \
    \    \n                    \n                    \n                    \n    \
    \                \n                    \n                    \n              \
    \      \n                    \n                    \n                    \n  \
    \                  \n                    \n                    \n            \
    \        \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwyd0upit.jl:15\nin expression starting at\
    \ /tmp/tmpwyd0upit.jl:15\n"
  stdout: ''
  timestamp: 1659748826
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        multiply(a/10, b%10)*10 + a%10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(2,3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nExamples:\n\"Hello World\" => 11\n\"Hello World\" => 0\n\"\
    Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\"\
    \ => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello\
    \ World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" =>\
    \ 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello\
    \ World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" =>\
    \ 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello\
    \ World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" =>\
    \ 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello\
    \ World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" =>\
    \ 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello\
    \ World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" =>\
    \ 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello\
    \ World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" =>\
    \ 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello\
    \ World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" =>\
    \ 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello\
    \ World\" => 0\n\"Hello World\" => 0\n\"Hello World\" => 0\n\"Hello World\" =>\
    \ 0\n\"Hello World\" => 0\n\"Hello World\" \nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt8161bvk.jl:13\nin expression starting at\
    \ /tmp/tmpt8161bvk.jl:13\n"
  stdout: ''
  timestamp: 1659748826
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a*b).digits(2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n                    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq7wqd2x4.jl:13\nin expression starting at\
    \ /tmp/tmpq7wqd2x4.jl:13\n"
  stdout: ''
  timestamp: 1659748826
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0\n        0\n    else\n        (a * b) % 10\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 2)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(10, 1)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 3)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 5)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 6)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(10, 7)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 8)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 9)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 11)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(10, 12)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 13)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 14)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 15)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 16)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(10, 17)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 18)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 19)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 20)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 21)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(10, 22)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 23)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 24)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 25)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 26)\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6py62eo1.jl:13\nin expression starting at\
    \ /tmp/tmp6py62eo1.jl:13\n"
  stdout: ''
  timestamp: 1659748827
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a > 0 && b > 0 \n        then a*b\n        else 0\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n                    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6tvjepbg.jl:8\nin expression starting at /tmp/tmp6tvjepbg.jl:8\n"
  stdout: ''
  timestamp: 1659748827
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a > b\n        multiply(b, a)\n    else\n        multiply(a,\
    \ b)\n    end\n    \nend\n</cell>\n<code language=julia-1.5>\nmultiply(2, 3)\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n                    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgm75d8q.jl:15\nin expression starting at\
    \ /tmp/tmprgm75d8q.jl:15\n"
  stdout: ''
  timestamp: 1659748827
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(a, b /\
    \ 10)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n                    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplg_kmtiq.jl:8\nin expression starting at /tmp/tmplg_kmtiq.jl:8\n"
  stdout: ''
  timestamp: 1659748827
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"invalid input\")\n    else\n        return a*b\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers\
    \ and returns the sum of the unit digits of their product (e.g., multiply(3, 5)\
    \ == 3 * 5 == 15). The function should raise an error if the product is invalid.\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7twuuy1e.jl:9\nin expression starting at /tmp/tmp7twuuy1e.jl:9\n"
  stdout: ''
  timestamp: 1659748827
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        error(\"Invalid input\")\n    elseif b == 1\n        return a\n    else\n\
    \        return a*b\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\
    Complete the function that takes two integers and returns \n    the product of\
    \ their unit digits.\n    Assume the input is always valid.\n    Examples:\n \
    \                   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01m2x2jh.jl:17\nin expression starting at\
    \ /tmp/tmp01m2x2jh.jl:17\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int64, 10)\n    mult_digits[1] = a\n    mult_digits[2]\
    \ = b\n    mult_digits[3] = a * b\n    mult_digits[4] = a * b\n    mult_digits[5]\
    \ = a * b\n    mult_digits[6] = a * b\n    mult_digits[7] = a * b\n    mult_digits[8]\
    \ = a * b\n    mult_digits[9] = a * b\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = sum(mult_digits)\n    \n    return mult_digits\nend\n\
    </cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    @time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n\
    </cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    @time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n\
    </cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    @time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n\
    </cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    @time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n\
    </cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    @time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n\
    </cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    @time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n\
    </cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    @time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n\
    </cell>\n<code language=julia-1.5>\n@time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    @time multiply(2, 2)\n</cell>\n<code language=julia-1.5>\n@time \nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8u75cp5s.jl:25\nin expression starting at\
    \ /tmp/tmp8u75cp5s.jl:25\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    end\n\
    \    \n    local product = 1\n    \n    for i = 1, a \n        product = product\
    \ * b\n    end\n    \n    return product\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes an integer and returns the sum of the unit digits of that\
    \ integer.\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptiaettsu.jl:15\nin expression starting at\
    \ /tmp/tmptiaettsu.jl:15\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        return a\n    elseif b == 1 \n        return a\n    else\n     \
    \   return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n       \
    \             \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx10pygq.jl:17\nin expression starting at\
    \ /tmp/tmpsx10pygq.jl:17\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * 10^(b-1)) * (10^(b-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n                    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgbymbhzx.jl:13\nin expression starting at\
    \ /tmp/tmpgbymbhzx.jl:13\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        error(\"Invalid input\")\n    else\n        return a * b\n    end\nend\n\
    </cell>\n<text>\nExercise\nWrite a function that takes an integer and returns\
    \ the sum of the unit digits of that integer.\nExamples:\nmultiply(5, 10) == 5\n\
    multiply(5, 0) == 5\nmultiply(5, 1) == 5\nmultiply(5, -1) == 5\nmultiply(5, -2)\
    \ == 5\nmultiply(5, 3) == 10\nmultiply(5, 4) == 20\nmultiply(5, 5) == 50\nmultiply(5,\
    \ 6) == 100\nmultiply(5, 7) == 500\nmultiply(5, 8) == 1000\nmultiply(5, 9) ==\
    \ 5000\nmultiply(5, 10) == 10000\nmultiply(5, 11) == 100000\nmultiply(5, 12) ==\
    \ 1000000\nmultiply(5, 13) == 10000000\nmultiply(5, 14) == 100000000\nmultiply(5,\
    \ 15) == 1000000000\nmultiply(5, 16) == 10000000000\nmultiply(5, 17) == 100000000000\n\
    multiply(5, 18) == 1000000000000\nmultiply(5, 19) == 10000000000000\nmultiply(5,\
    \ 20) == 100000000000000\nmultiply(5, 21) == 1000000000000000\nmultiply(5, 22)\
    \ == 10000000000000000\nmultiply(5, 23) == 100000000000000000\nmultiply(5, 24)\
    \ == 1000000000000000000\nmultiply(5, 25) == 10000000000000000000\nmultiply(5,\
    \ 26) == 100000000000000000000\nmultiply(5, 27) == 1000000000000000000000\nmultiply(5,\
    \ 28) == 10000000000000000000000\nmultiply(5, 29) == 100000000000000000000000\n\
    multiply(5, 30) == 1000000000000000000000000\nmultiply(5, 31) == 10000000000000000000000000\n\
    multiply(5, 32) == 100000000000000000000000000\nmultiply(5, 33) == 1000000000000000000000000000\n\
    multiply(5, 34) == 10000000000000000000000000000\nmultiply(5, 35) == 100000000000000000000000000000\n\
    multiply(5, 36) == 1000000000000000000000000000000\nmultiply(5, 37) == 10000000000000000000000000000000\n\
    multiply(5, 38) == 100000000000000000000000000000000\nmultiply(5, 39) == 1000000000000000000000000000000000\n\
    multiply(5, 40) == 10000000000000000000000000000000000\nmultiply(5, 41) == 100000000000000000000000000000000000\n\
    multiply(5, 42) == 1000000000000000000000000000000000000\nmultiply(5, 43) == 10000000000000000000000000000000000000\n\
    multiply(5, 44) == 100000000000000000000000000000000000000\nmultiply(5, 45) ==\
    \ 1000000000000000000000000000000000000000\nmultiply(5, 46) == 10000000000000000000000000000000000000000\n\
    multiply(5, 47) == 100000000000000000000000000000000000000000\nmultiply(5, 48)\
    \ == 1000000000000000000000000000000000000000000\nmultiply(5, 49) == 10000000000000000000000000000000000000000000\n\
    multiply(5, 50) == 100000000000000000000000000000000000000000000\nmultiply(5,\
    \ 51) == 1000000000000000000000000000000000000000000000\nmultiply(5, 52) == 10000000000000000000000000000000000000000000000\n\
    multiply(5, 53) == 100000000000000000000000000000000000000000000000\nmultiply(5,\
    \ 54) == 1000000000000000000000000000000000000000000000000\nmultiply(5, 55\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp26ea4n2n.jl:15\nin expression starting at\
    \ /tmp/tmp26ea4n2n.jl:15\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_result = a*b\n    \n    return mult_result\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nmultiply(10, 10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number.\nExamples:\n\
    factorial(5)\nfactorial(10)\nfactorial(20)\nfactorial(30)\nfactorial(100)\nfactorial(1000)\n\
    factorial(10000)\nfactorial(100000)\nfactorial(1000000)\nfactorial(10000000)\n\
    factorial(100000000)\nfactorial(1000000000)\nfactorial(10000000000)\nfactorial(100000000000)\n\
    factorial(1000000000000)\nfactorial(10000000000000)\nfactorial(100000000000000)\n\
    factorial(1000000000000000)\nfactorial(10000000000000000)\nfactorial(100000000000000000)\n\
    factorial(1000000000000000000)\nfactorial(10000000000000000000)\nfactorial(100000000000000000000)\n\
    factorial(1000000000000000000000)\nfactorial(10000000000000000000000)\nfactorial(100000000000000000000000)\n\
    factorial(1000000000000000000000000)\nfactorial(10000000000000000000000000)\n\
    factorial(100000000000000000000000000)\nfactorial(1000000000000000000000000000)\n\
    factorial(10000000000000000000000000000)\nfactorial(100000000000000000000000000000)\n\
    factorial(1000000000000000000000000000000)\nfactorial(10000000000000000000000000000000)\n\
    factorial(100000000000000000000000000000000)\nfactorial(1000000000000000000000000000000000)\n\
    factorial(10000000000000000000000000000000000)\nfactorial(100000000000000000000000000000000000)\n\
    factorial(1000000000000000000000000000000000000)\nfactorial(10000000000000000000000000000000000000)\n\
    factorial(100000000000000000000000000000000000000)\nfactorial(1000000000000000000000000000000000000000)\n\
    factorial(10000000000000000000000000000000000000000)\nfactorial(100000000000000000000000000000000000000000)\n\
    factorial(1000000000000000000000000000000000000000000)\nfactorial(10000000000000000000000000000000000000000000)\n\
    factorial(100000000000000000000000000000000000000000000)\nfactorial(1000000000000000000000000000000000000000000000)\n\
    factorial(10000000000000000000000000000000000000000000000)\nfactorial(100000000000000000000000000000000000000000000000)\n\
    factorial(1000000000000000000000000000000000000000000000000)\nfactorial(10000000000000000000000000000000000000000000000000)\n\
    factorial(100000000000000000000000000000000000000000000000000)\nfactorial(1000000000000000000000000000000000000000000000000000)\n\
    factorial(10000000000000000000000000000000000000000000000000000)\nfactorial(100000000000000000000000000000000000000000000000000000)\n\
    factorial(1000000000000000000000000000000000000000000000000000000)\nfactorial(100000000000000000000000000000000000000000000000)\n\
    factorial(1000000000000000000000000000000000000000000000000)\nfactorial(10000000000000000000000000000000000000000000000000)\n\
    factorial(100000000000000000000000000000000000000000000000000\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5oygsc49.jl:12\nin expression starting at\
    \ /tmp/tmp5oygsc49.jl:12\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        error(\"Invalid input\")\n    else\n        return a * b\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    multiply(a::Int64, b::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj5htlrii.jl:15\nin expression starting at\
    \ /tmp/tmpj5htlrii.jl:15\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmk_bx01j.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpmk_bx01j.jl:16\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmk_bx01j.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk_bx01j.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpmk_bx01j.jl:17\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmk_bx01j.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk_bx01j.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpmk_bx01j.jl:18\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmk_bx01j.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk_bx01j.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpmk_bx01j.jl:19\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmk_bx01j.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmk_bx01j.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpmk_bx01j.jl:20\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659748829
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(a/10, b%10)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the sum of the unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n                    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplt6uh1wu.jl:8\nin expression starting at /tmp/tmplt6uh1wu.jl:8\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int64, 10)\n    \n    mult_digits[1] = a\n \
    \   mult_digits[2] = b\n    \n    mult_digits = mult_digits[2:end]\n    \n   \
    \ mult_digits = mult_digits * 10\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits + mult_digits[2:end]\n    \n    mult_digits\
    \ = mult_digits * 10\n    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits\
    \ = mult_digits + mult_digits[2:end]\n    \n    mult_digits = mult_digits * 10\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits\
    \ + mult_digits[2:end]\n    \n    mult_digits = mult_digits * 10\n    \n    mult_digits\
    \ = mult_digits[2:end]\n    \n    mult_digits = mult_digits + mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits * 10\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits + mult_digits[2:end]\n    \n    mult_digits\
    \ = mult_digits * 10\n    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits\
    \ = mult_digits + mult_digits[2:end]\n    \n    mult_digits = mult_digits * 10\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits\
    \ + mult_digits[2:end]\n    \n    mult_digits = mult_digits * 10\n    \n    mult_digits\
    \ = mult_digits[2:end]\n    \n    mult_digits = mult_digits + mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits * 10\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits + mult_digits[2:end]\n    \n    mult_digits\
    \ = mult_digits * 10\n    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits\
    \ = mult_digits + mult_digits[2:end]\n    \n    mult_digits = mult_digits * 10\n\
    \    \n    mult_digit\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4pddep8.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4pddep8.jl:1\n\
    in expression starting at /tmp/tmpy4pddep8.jl:1\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        throw(ArithmeticError(\"Cannot multiply by zero\"))\n\
    \    else\n        return a * b\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3f0_p5lk.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3f0_p5lk.jl:1\n\
    in expression starting at /tmp/tmp3f0_p5lk.jl:1\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0\n        0\n    else\n        (a * b) % 10\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer and returns\
    \ the sum of the unit digits of that integer.\nExamples:\n    multiply(123, 456)\n\
    \    multiply(123, 0)\n    multiply(0, 0)\n    multiply(123, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0, 0)\n    multiply(0,\
    \ 0)\n    multiply(0, 0)\n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjox1s3y.jl:13\nin expression starting at\
    \ /tmp/tmprjox1s3y.jl:13\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        -1\n    elseif b > 0\
    \ \n        a * multiply(a, -b)\n    else\n        error(\"Invalid input\")\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxj138czo.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpxj138czo.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: -148 == 16\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxj138czo.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxj138czo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxj138czo.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: -19 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxj138czo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxj138czo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxj138czo.jl:24\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: -2020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxj138czo.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxj138czo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxj138czo.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -1 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxj138czo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxj138czo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxj138czo.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: -76 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro exp"
  timestamp: 1659748829
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then 0\n    else\n        multiply(a/10,\
    \ b/10) * 10 + mod(a, 10) * 10 + mod(b, 10)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    mod\n    \n    Takes a number and a unit digit and returns its remainder\
    \ when divided by 10.\n    Examples:\n                    mod(5, 2)\n        \
    \            5 - 2 * 10\n                    mod(5, 3)\n                    5\
    \ - 3 * 10\n                    mod(5, 4)\n                    5 - 4 * 10\n  \
    \                  mod(5, 5)\n                    5 - 5 * 10\n               \
    \     mod(5, 6)\n                    5 - 6 * 10\n                    mod(5, 7)\n\
    \                    5 - 7 * 10\n                    mod(5, 8)\n             \
    \       5 - 8 * 10\n                    mod(5, 9)\n                    5 - 9 *\
    \ 10\n                    mod(5, 10)\n                    5 - 10 * 10\n      \
    \              mod(5, 11)\n                    5 - 11 * 10\n                 \
    \   mod(5, 12)\n                    5 - 12 * 10\n                    mod(5, 13)\n\
    \                    5 - 13 * 10\n                    mod(5, 14)\n           \
    \         5 - 14 * 10\n                    mod(5, 15)\n                    5 -\
    \ 15 * 10\n                    mod(5, 16)\n                    5 - 16 * 10\n \
    \                   mod(5, 17)\n                    5 - 17 * 10\n            \
    \        mod(5, 18)\n                    5 - 18 * 10\n                    mod(5,\
    \ 19)\n                    5 - 19 * 10\n                    mod(5, 20)\n     \
    \               5 - 20 * 10\n                    mod(5, 21)\n                \
    \    5 - 21 * 10\n                    mod(5, 22)\n                    5 - 22 *\
    \ 10\n                    mod(5, 23)\n                    5 - 23 * 10\n      \
    \              mod(5, 24)\n                    5 - 24 * 10\n                 \
    \   mod(5, 25)\n                    5 - 25 * 10\n                    mod(5, 26)\n\
    \                    5 - 26 * 10\n                    mod(5, 27)\n           \
    \         5 - 27 * 10\n                    mod(5, 28)\n                    5 -\
    \ 28 * 10\n                    mod(5, 29)\n                    5 - 29 * 10\n \
    \                   mod(5, 30)\n                    5 - 30 * 10\n            \
    \        mod(5, 31)\n                    5 - 31 * 10\n                    mod(5,\
    \ 32)\n                    5 - 32 * 10\n                    mod(5, 33)\n     \
    \               5 - 33 * 10\n                    mod(5, 34)\n                \
    \    5 - 34 * 10\n                    mod(5, 35)\n                    5 - 35 *\
    \ 10\n                    mod(5, 36)\n                    5 - 36 * 10\n      \
    \              mod(5, 37)\n                    5 - 37 * 10\n                 \
    \   mod(5, \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy86v61k_.jl:8\nin expression starting at /tmp/tmpy86v61k_.jl:8\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(a, b /\
    \ 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(10, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \n    For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\n    Use a while loop\
    \ to implement the function.\n    Examples:\n                    factorial(5)\n\
    \                    120\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp73dlrzsw.jl:8\nin expression starting at /tmp/tmp73dlrzsw.jl:8\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int64, 10)\n    \n    mult_digits[1] = a\n \
    \   mult_digits[2] = b\n    \n    mult_digits = mult_digits[2:end]\n    \n   \
    \ mult_digits = mult_digits .* 10\n    \n    mult_digits = sum(mult_digits)\n\
    \    \n    return mult_digits\nend\n</cell>\n<code language=julia-1.5>\nmultiply(2,3)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(2,4)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,5)\n</cell>\n<code language=julia-1.5>\nmultiply(2,6)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(2,7)\n</cell>\n<code language=julia-1.5>\nmultiply(2,8)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(2,9)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,10)\n</cell>\n<code language=julia-1.5>\nmultiply(2,11)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,12)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,13)\n</cell>\n<code language=julia-1.5>\nmultiply(2,14)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,15)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,16)\n</cell>\n<code language=julia-1.5>\nmultiply(2,17)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,18)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,19)\n</cell>\n<code language=julia-1.5>\nmultiply(2,20)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,21)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,22)\n</cell>\n<code language=julia-1.5>\nmultiply(2,23)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,24)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,25)\n</cell>\n<code language=julia-1.5>\nmultiply(2,26)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,27)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,28)\n</cell>\n<code language=julia-1.5>\nmultiply(2,29)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,30)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,31)\n</cell>\n<code language=julia-1.5>\nmultiply(2,32)\n</cell>\n\
    <code language=juli\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpde3ay8zl.jl:21\nin expression starting at\
    \ /tmp/tmpde3ay8zl.jl:21\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        error(\"Invalid input\")\n    elseif b == 1 \n        return a\n\
    \    else\n        return multiply(a/10, b%10)*10 + multiply(a/10, b%10)\n   \
    \ end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for the answer! I edited\
    \ my question to make it clearer. My problem is that I don't know how to implement\
    \ the function `multiply` recursively, and I don't know how to implement the function\
    \ `multiply` iteratively. Could you please help me with that?\n<|/ c |>\n<| c\
    \ |>\nI edited my answer to show you how to implement the function `multiply`\
    \ recursively.\n<|/ c |>\n<| c |>\nThanks for the answer! I edited my question\
    \ to make it clearer. My problem is that I don't know how to implement the function\
    \ `multiply` recursively, and I don't know how to implement the function `multiply`\
    \ iteratively. Could you please help me with that?\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to show you how to implement the function `multiply` iteratively.\n\
    <|/ c |>\n<| a |>\nI believe that your question is how to implement the function\
    \ multiply iteratively. The following code will do that:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6d7khpl.jl:17\nin expression starting at\
    \ /tmp/tmpl6d7khpl.jl:17\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local product = 1\n    \n    if a > 0 \n        product = product\
    \ * a\n    end\n    \n    if b > 0\n        product = product * b\n    end\n \
    \   \n    return product\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(2, 3)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2,\
    \ 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of the \n    unit digits of their product (that is, the product of their unit\
    \ digits).\n    Assume the input is always valid.\n    Examples:\n           \
    \         multiply(2, 3)\n                    multiply(2, 0)\n               \
    \     multiply(0, 0)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi97y7koe.jl:20\nin expression starting at\
    \ /tmp/tmpi97y7koe.jl:20\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    end\n    \n \
    \   mul = Int64(0)\n    \n    while a > 0 && b > 0\n        mul = mul * 10 + a\
    \ % 10 * b % 10\n        a = a // 10\n        b = b // 10\n    end\n    \n   \
    \ return mul\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nExamples:\n\"hello\"\
    \ returns 5\n\"helloworld\" returns 11\n\"helloworld\" returns 0\n\"helloworld\"\
    \ returns -1\n\"helloworld\" returns -2\n\"helloworld\" returns -3\n\"helloworld\"\
    \ returns -4\n\"helloworld\" returns -5\n\"helloworld\" returns -6\n\"helloworld\"\
    \ returns -7\n\"helloworld\" returns -8\n\"helloworld\" returns -9\n\"helloworld\"\
    \ returns -10\n\"helloworld\" returns -11\n\"helloworld\" returns -12\n\"helloworld\"\
    \ returns -13\n\"helloworld\" returns -14\n\"helloworld\" returns -15\n\"helloworld\"\
    \ returns -16\n\"helloworld\" returns -17\n\"helloworld\" returns -18\n\"helloworld\"\
    \ returns -19\n\"helloworld\" returns -20\n\"helloworld\" returns -21\n\"helloworld\"\
    \ returns -22\n\"helloworld\" returns -23\n\"helloworld\" returns -24\n\"helloworld\"\
    \ returns -25\n\"helloworld\" returns -26\n\"helloworld\" returns -27\n\"helloworld\"\
    \ returns -28\n\"helloworld\" returns -29\n\"helloworld\" returns -30\n\"helloworld\"\
    \ returns -31\n\"helloworld\" returns -32\n\"helloworld\" returns -33\n\"helloworld\"\
    \ returns -34\n\"helloworld\" returns -35\n\"helloworld\" returns -36\n\"helloworld\"\
    \ returns -37\n\"helloworld\" returns -38\n\"helloworld\" returns -39\n\"helloworld\"\
    \ returns -40\n\"helloworld\" returns -41\n\"helloworld\" returns -42\n\"helloworld\"\
    \ returns -43\n\"helloworld\" returns -44\n\"helloworld\" returns -45\n\"helloworld\"\
    \ returns -46\n\"helloworld\" returns -47\n\"helloworld\" returns -48\n\"helloworld\"\
    \ returns -49\n\"helloworld\" returns -50\n\"helloworld\" returns -51\n\"helloworld\"\
    \ returns -52\n\"helloworld\" returns -\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp4728bt7.jl:21\nin expression starting at\
    \ /tmp/tmpp4728bt7.jl:21\n"
  stdout: ''
  timestamp: 1659748828
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return a * b / b\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    multiply_unit(a::Int64, b::Int64)::Int64\n\
    \    \n    Complete the function that takes two integers and returns the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \                    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsox_trc3.jl:12\nin expression starting at\
    \ /tmp/tmpsox_trc3.jl:12\n"
  stdout: ''
  timestamp: 1659748829
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(a, b /\
    \ 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 2)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 1)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(10, 3)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 4)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 5)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 6)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 7)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(10, 8)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 9)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 10)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 11)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 12)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(10, 13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 14)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 16)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 17)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(10, 18)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 19)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 20)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 21)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 22)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(10, 23)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 24)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 25)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 26)\n\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo1gzclgq.jl:8\nin expression starting at /tmp/tmpo1gzclgq.jl:8\n"
  stdout: ''
  timestamp: 1659748829
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes two integers and returns the sum of the\
    \ unit digits of their product (as described above).\nExamples:\nmultiply(2, 3)\
    \ = 2 + 3*1\nmultiply(2, 0) = 2*0\nmultiply(0, 0) = 0*0\nmultiply(10, 0) = 10*0\n\
    multiply(10, 10) = 10*10\nmultiply(10, 100) = 2*10 + 10*1\nmultiply(10, 1000)\
    \ = 2*10 + 10*1 + 100*0\nmultiply(10, 10000) = 2*10 + 10*1 + 100*0 + 1000*0\n\
    multiply(10, 100000) = 2*10 + 10*1 + 100*0 + 1000*0 + 10000*0\nmultiply(10, 1000000)\
    \ = 2*10 + 10*1 + 100*0 + 1000*0 + 10000*0 + 100000*0\nmultiply(10, 10000000)\
    \ = 2*10 + 10*1 + 100*0 + 1000*0 + 10000*0 + 100000*0 + 1000000*0\nmultiply(10,\
    \ 100000000) = 2*10 + 10*1 + 100*0 + 1000*0 + 10000*0 + 100000*0 + 1000000*0 +\
    \ 10000000*0\nmultiply(10, 1000000000) = 2*10 + 10*1 + 100*0 + 1000*0 + 10000*0\
    \ + 100000*0 + 1000000*0 + 10000000*0 + 100000000*0\nmultiply(10, 10000000000)\
    \ = 2*10 + 10*1 + 100*0 + 1000*0 + 10000*0 + 100000*0 + 1000000*0 + 10000000*0\
    \ + 100000000*0 + 1000000000*0\nmultiply(10, 100000000000) = 2*10 + 10*1 + 100*0\
    \ + 1000*0 + 10000*0 + 100000*0 + 1000000*0 + 10000000*0 + 100000000*0 + 1000000000*0\
    \ + 10000000000*0\nmultiply(10, 1000000000000) = 2*10 + 10*1 + 100*0 + 1000*0\
    \ + 10000*0 + 100000*0 + 1000000*0 + 10000000*0 + 100000000*0 + 1000000000*0 +\
    \ 10000000000*0 + 100000000000*0\nmultiply(10, 10000000000000) = 2*10 + 10*1 +\
    \ 100*0 + 1000*0 + 10000*0 + 100000*0 + 1000000*0 + 10000000*0 + 100000000*0 +\
    \ 1000000000*0 + 10000000000*0 + 100000000000*0 + 1000000000000*0\nmultiply(10,\
    \ 100000000000000) = 2*10 + 10*1 + 100*0 + 1000*0 + 10000*0 + 100000*0 + 1000000*0\
    \ + 10000000*0 + 100000000*0 + 1000000000*0 + 10000000000*0 + 100\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvwswu17d.jl:15\nin expression starting at\
    \ /tmp/tmpvwswu17d.jl:15\n"
  stdout: ''
  timestamp: 1659748829
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a > 0 && b > 0\n        mult_digits = zeros(Int64, 10)\n        mult_digits[1]\
    \ = a\n        mult_digits[2] = b\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\n        mult_digits = mult_digits[2:end]\n\
    \        mult_digits = mult_digits[2:end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgcre70a.jl:1\nin expression starting at /tmp/tmphgcre70a.jl:1\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    else\n\
    \        return (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \                    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwabzrwu.jl:14\nin expression starting at\
    \ /tmp/tmpcwabzrwu.jl:14\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int64, 2)\n    mult_digits[1] = a%10\n    mult_digits[2]\
    \ = b%10\n    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits =\
    \ mult_digits[1]*mult_digits[2]\n    \n    return mult_digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@time multiply(123456789,987654321)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes two integers and returns the sum of the\
    \ unit digits of their product (e.g., $\\sum_{i=0}^{9}{\\prod_{j=0}^{9}{i\\cdot\
    \ j}}$).\nAs a reminder, here is the definition of the unit digit:\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2386jny_.jl:18\nin expression starting at\
    \ /tmp/tmp2386jny_.jl:18\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(a/10, b%10)*10\
    \ + a%10\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(10,\
    \ 2) == 20\n@assert multiply(10, 3) == 30\n@assert multiply(10, 4) == 40\n@assert\
    \ multiply(10, 5) == 50\n@assert multiply(10, 6) == 60\n@assert multiply(10, 7)\
    \ == 70\n@assert multiply(10, 8) == 80\n@assert multiply(10, 9) == 90\n@assert\
    \ multiply(10, 10) == 100\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of its unit digits.\nAs a reminder, the unit digit is the last\
    \ digit of a number that has \na unit digit and all digits before it are 0.\n\
    Examples:\n10+1 = 11\n11+1 = 12\n12+1 = 13\n13+1 = 14\n14+1 = 15\n15+1 = 16\n\
    16+1 = 17\n17+1 = 18\n18+1 = 19\n19+1 = 20\n20+1 = 21\n21+1 = 22\n22+1 = 23\n\
    23+1 = 24\n24+1 = 25\n25+1 = 26\n26+1 = 27\n27+1 = 28\n28+1 = 29\n29+1 = 30\n\
    30+1 = 31\n31+1 = 32\n32+1 = 33\n33+1 = 34\n34+1 = 35\n35+1 = 36\n36+1 = 37\n\
    37+1 = 38\n38+1 = 39\n39+1 = 40\n40+1 = 41\n41+1 = 42\n42+1 = 43\n43+1 = 44\n\
    44+1 = 45\n45+1 = 46\n46+1 = 47\n47+1 = 48\n48+1 = 49\n49+1 = 50\n50+1 = 51\n\
    51+1 = 52\n52+1 = 53\n53+1 = 54\n54+1 = 55\n55+1 = 56\n56+1 = 57\n57+1 = 58\n\
    58+1 = 59\n59+1 = 60\n60+1 = 61\n61+1 = 62\n62+1 = 63\n63+1 = 64\n64+1 = 65\n\
    65+1 = 66\n66+1 = 67\n67+1 = 68\n68+1 = 69\n69+1 = 70\n70+1 = 71\n71+1 = 72\n\
    72+1 = 73\n73+1 = 74\n74+1 = 75\n75+1 = 76\n76+1 = 77\n77+1 = 78\n78+1 = 79\n\
    79+1 = 80\n80\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1rammkp5.jl:8\nin expression starting at /tmp/tmp1rammkp5.jl:8\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(1, 2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(1, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(1,\
    \ -1)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(-1, 1)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(1, -2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(-2, 1)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(1, -3)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(-3,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(1, -4)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(-4, 1)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(1, -5)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(-5, 1)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(1,\
    \ -6)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(-6, 1)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(1, -7)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(-7, 1)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(1, -8)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(-8,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(1, -9)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(-9, 1)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(1, -10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(-10, 1)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(1,\
    \ -11)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(-11, 1)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype multiply(1, -12)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqosw_ok9.jl:13\nin expression starting at\
    \ /tmp/tmpqosw_ok9.jl:13\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        error(\"Invalid input\")\n    elseif b == 1 \n        return a\n\
    \    else\n        return multiply(a/10, b*10) + a%10*10 + b%10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmultiply(2, 3)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes two integers and returns the sum of the \n  \
    \  unit digits of their product (that is, the product of their unit \n    digits).\n\
    \    Assume the input is always valid.\n    Examples:\n                    multiply(2,\
    \ 3)\n                    => 6\n                    multiply(2, 0)\n         \
    \           => 2\n                    multiply(2, 1)\n                    => 2\n\
    \                    multiply(2, 4)\n                    => 6\n              \
    \      multiply(2, 5)\n                    => 2\n                    multiply(2,\
    \ 6)\n                    => 2\n                    multiply(2, 7)\n         \
    \           => 2\n                    multiply(2, 8)\n                    => 2\n\
    \                    multiply(2, 9)\n                    => 2\n              \
    \      multiply(2, 10)\n                    => 2\n                    multiply(2,\
    \ 11)\n                    => 2\n                    multiply(2, 12)\n       \
    \             => 2\n                    multiply(2, 13)\n                    =>\
    \ 2\n                    multiply(2, 14)\n                    => 2\n         \
    \           multiply(2, 15)\n                    => 2\n                    multiply(2,\
    \ 16)\n                    => 2\n                    multiply(2, 17)\n       \
    \             => 2\n                    multiply(2, 18)\n                    =>\
    \ 2\n                    multiply(2, 19)\n                    => 2\n         \
    \           multiply(2, 20)\n                    => 2\n                    multiply(2,\
    \ 21)\n                    => 2\n                    multiply(2, 22)\n       \
    \             => 2\n                    multiply(2, 23)\n                    =>\
    \ 2\n                    multiply(2, 24)\n                    => 2\n         \
    \           multiply(2, 25)\n                    => 2\n                    multiply(2,\
    \ 26)\n                    => 2\n                    multiply(2, 27)\n       \
    \             => 2\n                    multiply(2, 28)\n                    =>\
    \ 2\n                    multiply(2, 29)\n                    => 2\n         \
    \           multiply(2, 30)\n                    => 2\n                    multiply(2,\
    \ 31)\n                    => 2\n                    multiply(2, 32)\n       \
    \             => 2\n                    multiply(2, 33)\n                    =>\
    \ 2\n                    multiply(2, 34)\n                    => 2\n         \
    \           multiply(2, 35)\n                    => 2\n                    multiply(2,\
    \ 36)\n                    => 2\n                    multiply(2, 37)\n       \
    \             => 2\n                    multiply(2, 38)\n                    =>\
    \ 2\n                    multiply(2, 39)\n                    => 2\n         \
    \           multiply(2, 40)\n                    => 2\n                    multiply(2,\
    \ 41)\n                    => 2\n                    multiply(2, 42)\n       \
    \             => \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpib_saowo.jl:17\nin expression starting at\
    \ /tmp/tmpib_saowo.jl:17\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a > 0 && b > 0 \n        then return a * b\n    else \n        error(\"\
    Invalid input\")\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   multiply(a::Int64, b::Int64)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpta8cbc1u.jl:8\nin expression starting at /tmp/tmpta8cbc1u.jl:8\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int64, 10)\n    mult_digits[1] = a\n    mult_digits[2]\
    \ = b\n    \n    mult_digits = mult_digits .+ mult_digits .* 10\n    \n    mult_digits\
    \ = mult_digits .- mult_digits .* 10\n    \n    mult_digits = mult_digits .+ mult_digits\
    \ .* 100\n    \n    mult_digits = mult_digits .- mult_digits .* 100\n    \n  \
    \  mult_digits = mult_digits .+ mult_digits .* 1000\n    \n    mult_digits = mult_digits\
    \ .- mult_digits .* 1000\n    \n    mult_digits = mult_digits .+ mult_digits .*\
    \ 10000\n    \n    mult_digits = mult_digits .- mult_digits .* 10000\n    \n \
    \   mult_digits = mult_digits .+ mult_digits .* 100000\n    \n    mult_digits\
    \ = mult_digits .- mult_digits .* 100000\n    \n    mult_digits = mult_digits\
    \ .+ mult_digits .* 1000000\n    \n    mult_digits = mult_digits .- mult_digits\
    \ .* 1000000\n    \n    mult_digits = mult_digits .+ mult_digits .* 10000000\n\
    \    \n    mult_digits = mult_digits .- mult_digits .* 10000000\n    \n    mult_digits\
    \ = mult_digits .+ mult_digits .* 100000000\n    \n    mult_digits = mult_digits\
    \ .- mult_digits .* 100000000\n    \n    mult_digits = mult_digits .+ mult_digits\
    \ .* 1000000000\n    \n    mult_digits = mult_digits .- mult_digits .* 1000000000\n\
    \    \n    mult_digits = mult_digits .+ mult_digits .* 10000000000\n    \n   \
    \ mult_digits = mult_digits .- mult_digits .* 10000000000\n    \n    mult_digits\
    \ = mult_digits .+ mult_digits .* 100000000000\n    \n    mult_digits = mult_digits\
    \ .- mult_digits .* 100000000000\n    \n    mult_digits = mult_digits .+ mult_digits\
    \ .* 1000000000000\n    \n    mult_digits = mult_digits .- mult_digits .* 1000000000000\n\
    \    \n    mult_digits = mult_digits .+ mul\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppgey8cjq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppgey8cjq.jl:1\n\
    in expression starting at /tmp/tmppgey8cjq.jl:1\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10^(b-1))\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n                    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpto9kblkc.jl:13\nin expression starting at\
    \ /tmp/tmpto9kblkc.jl:13\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        error(\"Invalid input\")\n    elseif b > a \n        error(\"Invalid\
    \ input\")\n    elseif b == 0 \n        error(\"Invalid input\")\n    else\n \
    \       product = a % 10 * b\n        product /= 10\n        return product\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI believe this answer should\
    \ be the accepted one. Although it does use an external library, it is the most\
    \ elegant and efficient solution. Thanks!\n<|/ c |>\n<| a tags=julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyrw_baya.jl:21\nin expression starting at\
    \ /tmp/tmpyrw_baya.jl:21\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10^9\
    \ + 10^9\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2,\
    \ 3)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(2, 1)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(2, 2)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(2, 4)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2,\
    \ 5)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2, 6)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(2, 7)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(2, 8)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(2, 9)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2,\
    \ 10)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2, 11)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(2, 12)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(2, 13)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(2, 14)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2,\
    \ 15)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2, 16)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(2, 17)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(2, 18)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(2, 19)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2,\
    \ 20)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2, 21)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(2, 22)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(2, 23)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(2, 24)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2,\
    \ 25)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp1ifce90u.jl:7 expected \"end\"\
    , got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1ifce90u.jl:10\n\
    in expression starting at /tmp/tmp1ifce90u.jl:10\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    \n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4o4_m93p.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp4o4_m93p.jl:17\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:18\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:19\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:20\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:21\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659748824
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: -1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    if a > b\n        multiply(b, a)\n    else\n        multiply(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659748834
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    elseif b == 1\n        a\n    else\n       \
    \ multiply(a/10, b%10)*10 + multiply(a/10, b%10)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nmultiply(2,3)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer and returns the sum of its unit digits.\nExamples:\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\nmultiply(2)\n\
    multiply(\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3w61gz8.jl:15\nin expression starting at\
    \ /tmp/tmpr3w61gz8.jl:15\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * 10^(b-1)) * (10^(b-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2,\
    \ 3)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2, 0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(2, -3)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(2, -4)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(2, -5)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2,\
    \ -6)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2, -7)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(2, -8)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(2, -9)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(2, -10)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2,\
    \ -11)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2, -12)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype multiply(2, -13)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(2, -14)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(2, -15)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(2, -16)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2,\
    \ -17)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2, -18)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype multiply(2, -19)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(2, -20)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(2, -21)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(2, -22)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2,\
    \ -23)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2, -24)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype multiply(2, -25)\n</cell>\n\
    <code language=julia-1.5>\n@code_\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5v4sas2.jl:13\nin expression starting at\
    \ /tmp/tmps5v4sas2.jl:13\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"invalid input\")\n    end\n    \n \
    \   local product = 1\n    \n    for i = a:-1:1\n        product = product * b\n\
    \    end\n    \n    return product\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(2, 3) == 6\n@assert multiply(-2, 3) == 6\n@assert multiply(2,\
    \ -3) == -6\n@assert multiply(-2, -3) == -6\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (that is, the sum of the digits of the \n    product of the\
    \ two numbers). Assume the input is always valid.\n    Examples:\n           \
    \         \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiuwl7a40.jl:19\nin expression starting at\
    \ /tmp/tmpiuwl7a40.jl:19\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a==0 || b==0 \n        then return 0\n    else\n        multiply(a/10,\
    \ b/10)*10 + a*b%10\n    end\nend\n</cell>\n<code language=julia-1.0>\nmultiply(2,3)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ their sum.\nAssume the input is always valid.\nExamples:\nadd(2,3)\nadd(2,-3)\n\
    add(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\n\
    add(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\n\
    add(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\n\
    add(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\n\
    add(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\n\
    add(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\n\
    add(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\n\
    add(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\n\
    add(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\n\
    add(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\n\
    add(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\n\
    add(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\nadd(2,-3)\n\
    add(2,-\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt_bpir71.jl:9\nin expression starting at /tmp/tmpt_bpir71.jl:9\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnbcryldv.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnbcryldv.jl:1\n\
    in expression starting at /tmp/tmpnbcryldv.jl:1\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    elseif b == 1\n        a\n    else\n       \
    \ multiply(a/10, b%10)*10 + multiply(a/10, b%10)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nmultiply(2,3)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer and returns its factorial. \nExamples:\nfactorial(3)\n\
    factorial(5)\nfactorial(10)\nHint: use recursion.\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsbqw14gv.jl:15\nin expression starting at\
    \ /tmp/tmpsbqw14gv.jl:15\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        multiply(a/10, b%10)*10 + a%10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(2,3)\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the sum of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n                    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpstk2la05.jl:13\nin expression starting at\
    \ /tmp/tmpstk2la05.jl:13\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int, 10)\n    \n    for i = 1:10\n        mult_digits[i]\
    \ = mult_digits[i-1] + mult_digits[i-2]\n    end\n    \n    mult_digits[10] =\
    \ mult_digits[10] + mult_digits[11]\n    \n    mult_digits[a] = mult_digits[a]\
    \ + mult_digits[b]\n    \n    return mult_digits[10]\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers\
    \ and returns the sum of the \n    unit digits of their product (as described\
    \ above).\n    Assume the input is always valid.\n    Examples:\n            \
    \        \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8s0vtfwe.jl:20\nin expression starting at\
    \ /tmp/tmp8s0vtfwe.jl:20\n"
  stdout: ''
  timestamp: 1659748830
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return a * b * 10^(a-1)\
    \ * 10^(b-1)\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(2,3) ==\
    \ 6\n@assert multiply(2,0) == 0\n@assert multiply(0,2) == 0\n@assert multiply(0,0)\
    \ == 0\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the digits of its input. \nAssume that the input is always valid.\nExamples:\n\
    multiply(2,3) == 6\nmultiply(2,0) == 0\nmultiply(0,2) == 0\nmultiply(0,0) == 0\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1olxojd.jl:12\nin expression starting at\
    \ /tmp/tmpi1olxojd.jl:12\n"
  stdout: ''
  timestamp: 1659748831
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    else\n      \
    \  return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n       \
    \             \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr0ht4n7r.jl:13\nin expression starting at\
    \ /tmp/tmpr0ht4n7r.jl:13\n"
  stdout: ''
  timestamp: 1659748831
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) / b\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert multiply(2,3) == 6\n@assert multiply(2,0)\
    \ == 0\n@assert multiply(0,2) == 0\n@assert multiply(0,0) == 0\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the unit digits\
    \ of its input.\nExamples:\nmultiply(2,3) == 6\nmultiply(2,0) == 0\nmultiply(0,2)\
    \ == 0\nmultiply(0,0) == 0\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyaadg52u.jl:12\nin expression starting at\
    \ /tmp/tmpyaadg52u.jl:12\n"
  stdout: ''
  timestamp: 1659748831
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    \n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(2, 3)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes two integers and returns the sum of the \n    unit digits of their\
    \ product (without using multiplication).\n    Assume the input is always valid.\n\
    \    Examples:\n                    \n                    \n                 \
    \   \n                    \n                    \n                    \n     \
    \               \n                    \n                    \n               \
    \     \n                    \n                    \n                    \n   \
    \                 \n                    \n                    \n             \
    \       \n                    \n                    \n                    \n \
    \                   \n                    \n                    \n           \
    \         \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipj5n_gg.jl:12\nin expression starting at\
    \ /tmp/tmpipj5n_gg.jl:12\n"
  stdout: ''
  timestamp: 1659748831
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    end\n \
    \   \n    if a == 0 || b == 0\n        return 0\n    end\n    \n    product =\
    \ 1\n    \n    for d in digits(a)\n        product = product * 10^d\n    end\n\
    \    \n    for d in digits(b)\n        product = product * 10^d\n    end\n   \
    \ \n    return product\nend\n</cell>\n<code language=julia-1.5>\nmultiply(2, 3)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(2, -3)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, -4)\n</cell>\n<code language=julia-1.5>\nmultiply(2, -5)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, -6)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, -7)\n</cell>\n<code language=julia-1.5>\nmultiply(2, -8)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, -9)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, -10)\n</cell>\n<code language=julia-1.5>\nmultiply(2, -11)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, -12)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, -13)\n</cell>\n<code language=julia-1.5>\nmultiply(2, -14)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, -15)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, -16)\n</cell>\n<code language=julia-1.5>\nmultiply(2, -17)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, -18)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, -19)\n</cell>\n<code language=julia-1.5>\nmultiply(2, -20)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, -21)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, -22)\n</cell>\n<code language=julia-1.5>\nmultiply(2, -23)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, -24)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, -25)\n</cell>\n<code language=julia-1.5>\nmultiply(2, -26)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, -27)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, -28)\n</cell>\n<code language=julia-1.5>\nmultiply(2, -29)\n</cell>\n\
    <code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpea3y2vn_.jl:28\nin expression starting at\
    \ /tmp/tmpea3y2vn_.jl:28\n"
  stdout: ''
  timestamp: 1659748831
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return multiply(a, b\
    \ / 10) * 10 + a % 10 \nend\n</cell>\n<code language=julia-1.3>\nmultiply(1, 2)\n\
    </cell>\n<code language=julia-1.3>\nmultiply(1, 0)\n</cell>\n<code language=julia-1.3>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.3>\nmultiply(1, 3)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(1, 4)\n</cell>\n<code language=julia-1.3>\n\
    multiply(1, 5)\n</cell>\n<code language=julia-1.3>\nmultiply(1, 6)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(1, 7)\n</cell>\n<code language=julia-1.3>\n\
    multiply(1, 8)\n</cell>\n<code language=julia-1.3>\nmultiply(1, 9)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(1, 10)\n</cell>\n<code language=julia-1.3>\n\
    multiply(1, 11)\n</cell>\n<code language=julia-1.3>\nmultiply(1, 12)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(1, 13)\n</cell>\n<code language=julia-1.3>\n\
    multiply(1, 14)\n</cell>\n<code language=julia-1.3>\nmultiply(1, 15)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(1, 16)\n</cell>\n<code language=julia-1.3>\n\
    multiply(1, 17)\n</cell>\n<code language=julia-1.3>\nmultiply(1, 18)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(1, 19)\n</cell>\n<code language=julia-1.3>\n\
    multiply(1, 20)\n</cell>\n<code language=julia-1.3>\nmultiply(1, 21)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(1, 22)\n</cell>\n<code language=julia-1.3>\n\
    multiply(1, 23)\n</cell>\n<code language=julia-1.3>\nmultiply(1, 24)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(1, 25)\n</cell>\n<code language=julia-1.3>\n\
    multiply(1, 26)\n</cell>\n<code language=julia-1.3>\nmultiply(1, 27)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(1, 28)\n</cell>\n<code language=julia-1.3>\n\
    multiply(1, 29)\n</cell>\n<code language=julia-1.3>\nmultiply(1, 30)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(1, 31)\n</cell>\n<code language=julia-1.3>\n\
    multiply(1, 32)\n</cell>\n<code language=julia-1.3>\nmultiply(1, 33)\n</cell>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwoo54q6.jl:12\nin expression starting at\
    \ /tmp/tmpiwoo54q6.jl:12\n"
  stdout: ''
  timestamp: 1659748831
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        multiply(a/10, b/10)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwdmqmxgd.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpwdmqmxgd.jl:18\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  MethodError: no method matching multiply(::Float64,\
    \ ::Float64)\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main\
    \ /tmp/tmpwdmqmxgd.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwdmqmxgd.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwdmqmxgd.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwdmqmxgd.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  MethodError: no method matching multiply(::Float64,\
    \ ::Float64)\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main\
    \ /tmp/tmpwdmqmxgd.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwdmqmxgd.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwdmqmxgd.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwdmqmxgd.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  MethodError: no method matching multiply(::Float64,\
    \ ::Float64)\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main\
    \ /tmp/tmpwdmqmxgd.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwdmqmxgd.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwdmqmxgd.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwdmqmxgd.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  MethodError: no method matching multiply(::Float64,\
    \ ::Float64)\n  Stacktrace:\n   [1] multiply(a::Int64"
  timestamp: 1659748834
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        return a * b\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    multiply_digits(a::Int64, b::Int64)::Int64\n\
    \    \n    Takes two integers and returns the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n                    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg1k_nwic.jl:8\nin expression starting at /tmp/tmpg1k_nwic.jl:8\n"
  stdout: ''
  timestamp: 1659748831
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a > 0 && b > 0 \n        \n        mult_digits = zeros(Int64,\
    \ 10)\n        \n        mult_digits[1] = a\n        mult_digits[2] = b\n    \
    \    \n        mult_digits = mult_digits[2:end]\n        \n        mult_digits\
    \ = mult_digits[2:end]\n        \n        mult_digits = mult_digits[2:end]\n \
    \       \n        mult_digits = mult_digits[2:end]\n        \n        mult_digits\
    \ = mult_digits[2:end]\n        \n        mult_digits = mult_digits[2:end]\n \
    \       \n        mult_digits = mult_digits[2:end]\n        \n        mult_digits\
    \ = mult_digits[2:end]\n        \n        mult_digits = mult_digits[2:end]\n \
    \       \n        mult_digits = mult_digits[2:end]\n        \n        mult_digits\
    \ = mult_digits[2:end]\n        \n        mult_digits = mult_digits[2:end]\n \
    \       \n        mult_digits = mult_digits[2:end]\n        \n        mult_digits\
    \ = mult_digits[2:end]\n        \n        mult_digits = mult_digits[2:end]\n \
    \       \n        mult_digits = mult_digits[2:end]\n        \n        mult_digits\
    \ = mult_digits[2:end]\n        \n        mult_digits = mult_digits[2:end]\n \
    \       \n        mult_digits = mult_digits[2:end]\n        \n        mult_digits\
    \ = mult_digits[2:end]\n        \n        mult_digits = mult_digits[2:end]\n \
    \       \n        mult_digits = mult_digits[2:end]\n        \n        mult_digits\
    \ = mult_digits[2:end]\n        \n        mult_digits = mult_digits[2:end]\n \
    \       \n        mult_digits = mult_digits[2:end]\n        \n        mult_digits\
    \ = mult_digits[2:end]\n        \n        mult_digits = mult_digits[2:end]\n \
    \       \n        mult_digits = mult_digits[2:end]\n        \n        mult_digits\
    \ = mult_digits[2:end]\n        \n        mult_digits = mult_digits[2:end]\n \
    \       \n        mult_digits = mult_digits[2:end]\n        \n        mult_digits\
    \ = mult_digits[2:end]\n        \n        mult_digits = mult_digits[2:end]\n \
    \       \n        mult_digits = mult_digits[\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcmy5yvkw.jl:1\nin expression starting at /tmp/tmpcmy5yvkw.jl:1\n"
  stdout: ''
  timestamp: 1659748831
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return a * b \nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product (e.g., $\\sum_{i=0}^{9} 9i$).\n\
    \    Assume the input is always valid.\n    Examples:\n                    $9\
    \ + 9 + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9 + 9 + 9 = 27$\n      \
    \              $9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 = 27$\n                    $9 +\
    \ 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9 + 9\
    \ + 9 + 9 + 9 + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9 + 9 + 9 + 9 +\
    \ 9 + 9 + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9\
    \ + 9 + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 +\
    \ 9 + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9\
    \ + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 +\
    \ 9 + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9\
    \ + 9 + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 +\
    \ 9 + 9 + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9\
    \ + 9 + 9 + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 +\
    \ 9 + 9 + 9 + 9 + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9 + 9 + 9 + 9\
    \ + 9 + 9 + 9 + 9 + 9 + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9 + 9 +\
    \ 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 = 27$\n                    $9 + 9 + 9 + 9\
    \ + 9 + 9 + 9 + 9 + 9 + 9 + \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwb4pgsda.jl:12\nin expression starting at\
    \ /tmp/tmpwb4pgsda.jl:12\n"
  stdout: ''
  timestamp: 1659748831
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * multiply(a,\
    \ b - 1)) \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n                    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp213gw1kc.jl:12\nin expression starting at\
    \ /tmp/tmp213gw1kc.jl:12\n"
  stdout: ''
  timestamp: 1659748831
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        error(\"Invalid input\")\n    else\n        return a * b\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpx5s9s_7u.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpx5s9s_7u.jl:20\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx5s9s_7u.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx5s9s_7u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpx5s9s_7u.jl:21\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx5s9s_7u.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx5s9s_7u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpx5s9s_7u.jl:22\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx5s9s_7u.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx5s9s_7u.jl:19\ntest set: Error\
    \ During Test at /tmp/tmpx5s9s_7u.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  Invalid input\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpx5s9s_7u.jl:8\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx5s9s_7u.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx5s9s_7u.jl:19\ntest set:\
    \ Test Failed at /tmp/tmpx5s9s_7u.jl:24\n  Expression: candidate(76, 67) =="
  timestamp: 1659748834
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a == 0 || b == 0\n        0\n    elseif b < 0\n        multiply(-a,\
    \ abs(b))\n    else\n        multiply(a, abs(b))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(10, 5) == 50\n@assert multiply(10, -5)\
    \ == -10\n@assert multiply(10, 0) == 0\n@assert multiply(10, 1) == 10\n@assert\
    \ multiply(10, -1) == -10\n@assert multiply(10, 2) == 20\n@assert multiply(10,\
    \ -2) == -20\n@assert multiply(10, 3) == 30\n@assert multiply(10, -3) == -30\n\
    @assert multiply(10, 4) == 40\n@assert multiply(10, -4) == -40\n@assert multiply(10,\
    \ 5) == 50\n@assert multiply(10, -5) == -50\n@assert multiply(10, 6) == 60\n@assert\
    \ multiply(10, -6) == -60\n@assert multiply(10, 7) == 70\n@assert multiply(10,\
    \ -7) == -70\n@assert multiply(10, 8) == 80\n@assert multiply(10, -8) == -80\n\
    @assert multiply(10, 9) == 90\n@assert multiply(10, -9) == -90\n@assert multiply(10,\
    \ 10) == 100\n@assert multiply(10, -10) == -100\n@assert multiply(10, 11) == 110\n\
    @assert multiply(10, -11) == -110\n@assert multiply(10, 12) == 120\n@assert multiply(10,\
    \ -12) == -120\n@assert multiply(10, 13) == 130\n@assert multiply(10, -13) ==\
    \ -130\n@assert multiply(10, 14) == 140\n@assert multiply(10, -14) == -140\n@assert\
    \ multiply(10, 15) == 150\n@assert multiply(10, -15) == -150\n@assert multiply(10,\
    \ 16) == 160\n@assert multiply(10, -16) == -160\n@assert multiply(10, 17) == 170\n\
    @assert multiply(10, -17) == -170\n@assert multiply(10, 18) == 180\n@assert multiply(10,\
    \ -18) == -180\n@assert multiply(10, 19) == 190\n@assert multiply(10, -19) ==\
    \ -190\n@assert multiply(10, 20) == 200\n@assert multiply(10, -20) == -200\n@assert\
    \ multiply(10, 21) == 210\n@assert multiply(10, -21) == -210\n@assert multiply(10,\
    \ 22) == 220\n@assert multiply(10, -22) == -220\n@assert multiply(10, 23) == 230\n\
    @assert multiply(10, -23) == -230\n@assert multiply(10, 24) == 240\n@assert multiply(10,\
    \ -24) == -240\n@assert multiply(10, 25) == 250\n@assert multiply(10, -25) ==\
    \ -250\n@assert multiply(10, 26) == 260\n@assert multiply(10, -26) == -260\n@assert\
    \ \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinh9_ptc.jl:16\nin expression starting at\
    \ /tmp/tmpinh9_ptc.jl:16\n"
  stdout: ''
  timestamp: 1659748831
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    elseif b == 1\n        a\n    else\n       \
    \ multiply(a/10, b*10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 2)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 1)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(10, 11)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 100)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 101)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 1000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype multiply(10, 1001)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(10, 10000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype multiply(10, 100000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(10, 1000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(10, 10000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 100000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 1000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 10000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 100000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 1000000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 1000000000001)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 10000000000010)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 10000000000011)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 100000000000100)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 100000000000101)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 1000000000001000)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(10,\
    \ 10000000000\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpczxxcv9_.jl:15\nin expression starting at\
    \ /tmp/tmpczxxcv9_.jl:15\n"
  stdout: ''
  timestamp: 1659748831
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        multiply(a/10, b%10)*10 + a%10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(2,3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two integers and returns the sum of the\
    \ \n    unit digits of their product (that is, the product of their unit \n  \
    \  digits). Assume the input is always valid.\n    Examples:\n               \
    \     \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5khkys3e.jl:13\nin expression starting at\
    \ /tmp/tmp5khkys3e.jl:13\n"
  stdout: ''
  timestamp: 1659748832
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b % 10)\
    \ * 10 + multiply(a / 10, b / 10)\nend\n</cell>\n<code language=julia-1.5>\nmultiply(1,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nmultiply(1, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(1, 9)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    multiply(1, 11)\n</cell>\n<code language=julia-1.5>\nmultiply(1, 12)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(1, 13)\n</cell>\n<code language=julia-1.5>\n\
    multiply(1, 14)\n</cell>\n<code language=julia-1.5>\nmultiply(1, 15)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(1, 16)\n</cell>\n<code language=julia-1.5>\n\
    multiply(1, 17)\n</cell>\n<code language=julia-1.5>\nmultiply(1, 18)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(1, 19)\n</cell>\n<code language=julia-1.5>\n\
    multiply(1, 20)\n</cell>\n<code language=julia-1.5>\nmultiply(1, 21)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(1, 22)\n</cell>\n<code language=julia-1.5>\n\
    multiply(1, 23)\n</cell>\n<code language=julia-1.5>\nmultiply(1, 24)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(1, 25)\n</cell>\n<code language=julia-1.5>\n\
    multiply(1, 26)\n</cell>\n<code language=julia-1.5>\nmultiply(1, 27)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(1, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(1, 29)\n</cell>\n<code language=julia-1.5>\nmultiply(1, 30)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(1, 31)\n</cell>\n<code language=julia-1.5>\n\
    multiply(1, 32)\n</cell>\n<code language=julia-1.5>\nmultiply(1, 33)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(1, 34)\n</cell>\n<code language=julia-1.5>\n\
    multiply(1, 35)\n</cell>\n<code language=julia-1.5>\nmultiply(1, 36)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(1, 37)\n</cell>\n<code language=julia-1.5>\n\
    multiply(1, 38)\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr53_d10n.jl:12\nin expression starting at\
    \ /tmp/tmpr53_d10n.jl:12\n"
  stdout: ''
  timestamp: 1659748831
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if b == 0\n        throw(ArithmeticError(\"Cannot multiply by zero\"\
    ))\n    elseif b == 1\n        return a\n    else\n        return multiply(a/10,\
    \ b*10)\n    end\nend\n</cell>\n<code language=julia-1.3>\nmultiply(5, 10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the digits of its\
    \ input. \nAssume that the input is always valid.\nExamples:\nmultiply(5, 10)\
    \ == 55\nmultiply(5, 0) == 5\nmultiply(5, 1) == 5\nmultiply(5, 2) == 5\nmultiply(5,\
    \ 3) == 5\nmultiply(5, 4) == 5\nmultiply(5, 5) == 5\nmultiply(5, 6) == 5\nmultiply(5,\
    \ 7) == 5\nmultiply(5, 8) == 5\nmultiply(5, 9) == 5\nmultiply(5, 10) == 55\nmultiply(5,\
    \ 11) == 55\nmultiply(5, 12) == 55\nmultiply(5, 13) == 55\nmultiply(5, 14) ==\
    \ 55\nmultiply(5, 15) == 55\nmultiply(5, 16) == 55\nmultiply(5, 17) == 55\nmultiply(5,\
    \ 18) == 55\nmultiply(5, 19) == 55\nmultiply(5, 20) == 55\nmultiply(5, 21) ==\
    \ 55\nmultiply(5, 22) == 55\nmultiply(5, 23) == 55\nmultiply(5, 24) == 55\nmultiply(5,\
    \ 25) == 55\nmultiply(5, 26) == 55\nmultiply(5, 27) == 55\nmultiply(5, 28) ==\
    \ 55\nmultiply(5, 29) == 55\nmultiply(5, 30) == 55\nmultiply(5, 31) == 55\nmultiply(5,\
    \ 32) == 55\nmultiply(5, 33) == 55\nmultiply(5, 34) == 55\nmultiply(5, 35) ==\
    \ 55\nmultiply(5, 36) == 55\nmultiply(5, 37) == 55\nmultiply(5, 38) == 55\nmultiply(5,\
    \ 39) == 55\nmultiply(5, 40) == 55\nmultiply(5, 41) == 55\nmultiply(5, 42) ==\
    \ 55\nmultiply(5, 43) == 55\nmultiply(5, 44) == 55\nmultiply(5, 45) == 55\nmultiply(5,\
    \ 46) == 55\nmultiply(5, 47) == 55\nmultiply(5, 48) == 55\nmultiply(5, 49) ==\
    \ 55\nmultiply(5, 50) == 55\nmultiply(5, 51) == 55\nmultiply(5, 52) == 55\nmultiply(5,\
    \ 53) == 55\nmultiply(5, 54) == 55\nmultiply(5, 55) == 55\nmultiply(5, 56) ==\
    \ 55\nmultiply(5, 57) == 55\nmultiply(5, 58) == 55\nmultiply(5, 59) == 55\nmultiply(5,\
    \ 60) == 55\nmultiply(5, 61) == 55\nmultiply(5, 62) == 55\nmultiply(5, 63) ==\
    \ 55\nmultiply(5, 64) == 55\nmultiply(5, 65) == 55\nmultiply(5, 66) == 55\nmultiply(5,\
    \ 67) == 55\nmultiply(5, 68) == 55\nmultiply(5, 69) == 55\nmultiply(\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3udr3ea.jl:16\nin expression starting at\
    \ /tmp/tmpd3udr3ea.jl:16\n"
  stdout: ''
  timestamp: 1659748832
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a *\
    \ b\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdi142u83.jl:9\nin expression starting at /tmp/tmpdi142u83.jl:9\n"
  stdout: ''
  timestamp: 1659748832
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a > 0 && b > 0 \n        then \n            multiply(a/10, b%10) *\
    \ 10 + multiply(a/10, b%10)\n        else \n            0\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n                    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_75h08ts.jl:14\nin expression starting at\
    \ /tmp/tmp_75h08ts.jl:14\n"
  stdout: ''
  timestamp: 1659748832
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    return result\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(2, 3)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(2, 3.0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2.0,\
    \ 3)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2.0, 3.0)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product (as in Exercise 1).\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppi7z8ifi.jl:11\nin expression starting at\
    \ /tmp/tmppi7z8ifi.jl:11\n"
  stdout: ''
  timestamp: 1659748832
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if b == 0\n        0\n    elseif b == 1\n        a\n    else\n \
    \       multiply(a, b-1)*10 + a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 5)\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n                    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88u15jgz.jl:16\nin expression starting at\
    \ /tmp/tmp88u15jgz.jl:16\n"
  stdout: ''
  timestamp: 1659748832
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        error(\"Invalid input\")\n    elseif b == 1 \n        return a\n\
    \    else\n        return multiply(a/10, b%10) * 10 + a%10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2,3)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,0)\n</cell>\n<code language=julia-1.5>\nmultiply(0,3)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(0,0)\n</cell>\n<code language=julia-1.5>\nmultiply(2,0)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,0)\n</cell>\n<code language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code language=julia-1.5>\nmultiply(2,0)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,0)\n</cell>\n<code language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code language=julia-1.5>\nmultiply(2,0)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,0)\n</cell>\n<code language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code language=julia-1.5>\nmultiply(2,0)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,0)\n</cell>\n<code language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code language=julia-1.5>\nmultiply(2,0)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,0)\n</cell>\n<code language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code language=julia-1.5>\nmultiply(2,0)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(2,0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2,0)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jv7ob81.jl:17\nin expression starting at\
    \ /tmp/tmp9jv7ob81.jl:17\n"
  stdout: ''
  timestamp: 1659748832
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        error(\"Invalid input\")\n    elseif b == 1 \n        return a\n\
    \    else\n        return multiply(a/10, b*10) + a%10*b%10\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string.\nExamples:\n\"hello\" returns 5\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\"\
    \ returns 11\n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5fiu9rds.jl:17\nin expression starting at\
    \ /tmp/tmp5fiu9rds.jl:17\n"
  stdout: ''
  timestamp: 1659748832
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local product = 1\n    \n    if a > 0 \n        product = product\
    \ * a\n    end\n    \n    if b > 0\n        product = product * b\n    end\n \
    \   \n    return product\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(2,\
    \ 3) == 6\n@assert multiply(2, 0) == 0\n@assert multiply(0, 2) == 0\n@assert multiply(-2,\
    \ 3) == -6\n@assert multiply(-2, 0) == 0\n@assert multiply(0, -2) == 0\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ unit digits of a given integer. \nExamples:\n@assert sum_squares_digits(2) ==\
    \ 4\n@assert sum_squares_digits(0) == 0\n@assert sum_squares_digits(-2) == -4\n\
    @assert sum_squares_digits(-10) == 100\n@assert sum_squares_digits(10) == 100\n\
    @assert sum_squares_digits(100) == 100\n@assert sum_squares_digits(1000) == 1000\n\
    @assert sum_squares_digits(10000) == 10000\n@assert sum_squares_digits(100000)\
    \ == 100000\n@assert sum_squares_digits(1000000) == 1000000\n@assert sum_squares_digits(100000000)\
    \ == 100000000\n@assert sum_squares_digits(1000000000) == 1000000000\n@assert\
    \ sum_squares_digits(10000000000) == 10000000000\n@assert sum_squares_digits(100000000000)\
    \ == 100000000000\n@assert sum_squares_digits(1000000000000) == 1000000000000\n\
    @assert sum_squares_digits(10000000000000) == 10000000000000\n@assert sum_squares_digits(100000000000000)\
    \ == 100000000000000\n@assert sum_squares_digits(1000000000000000) == 1000000000000000\n\
    @assert sum_squares_digits(10000000000000000) == 10000000000000000\n@assert sum_squares_digits(100000000000000000)\
    \ == 100000000000000000\n@assert sum_squares_digits(1000000000000000000) == 1000000000000000000\n\
    @assert sum_squares_digits(10000000000000000000) == 10000000000000000000\n@assert\
    \ sum_squares_digits(100000000000000000000) == 100000000000000000000\n@assert\
    \ sum_squares_digits(1000000000000000000000) == 1000000000000000000000\n@assert\
    \ sum_squares_digits(10000000000000000000000) == 10000000000000000000000\n@assert\
    \ sum_squares_digits(100000000000000000000000) == 100000000000000000000000\n@assert\
    \ sum_squares_digits(1000000000000000000000000) == 1000000000000000000000000\n\
    @assert sum_squares_digits(10000000000000000000000000) == 10000000000000000000000000\n\
    @assert sum_squares_digits(100000000000000000000000000) == 100000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9wq_51xf.jl:20\nin expression starting at\
    \ /tmp/tmp9wq_51xf.jl:20\n"
  stdout: ''
  timestamp: 1659748833
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        error(\"Invalid input\")\n    else\n        return a * b\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits of their product \n    For example: multiply(10,\
    \ 12) should return 10 + 12 = 22\n    \n    Complete the function that takes two\
    \ integers and returns the sum of the unit digits of their product \n    For example:\
    \ multiply(10, 12) should return 10 + 12 = 22\n    Examples:\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsaoy682j.jl:15\nin expression starting at\
    \ /tmp/tmpsaoy682j.jl:15\n"
  stdout: ''
  timestamp: 1659748832
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        multiply(a/10, b%10)*10 + a%10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2,\
    \ 3)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2, 0)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(-5, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(5, 0)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(-5,\
    \ -5)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(5, -5)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(-5, 5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(5, 5)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(-5, -5)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(5,\
    \ -5)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(-5, 5)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(5, 5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(-5, -5)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(5, -5)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(-5,\
    \ 5)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(5, 5)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(-5, -5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(5, -5)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(-5, 5)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(5,\
    \ 5)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(-5, -5)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype multiply(5, -5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype multiply(-5, 5)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ multiply(5, 5)\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_aqia3z_.jl:13\nin expression starting at\
    \ /tmp/tmp_aqia3z_.jl:13\n"
  stdout: ''
  timestamp: 1659748833
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        throw(ArithmeticError(\"Cannot multiply by zero\"))\n\
    \    elseif b == 1\n        return a\n    else\n        return a * multiply(a/10,\
    \ b%10)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    digits(a::Int64)::Vector{Int64}\n\
    \    \n    Takes an integer and returns the unit digits of that integer.\n   \
    \ \n    For example, digits(1234) returns [1,2,3,4].\n    \n    Raises:\n    \
    \    ArithmeticError if the integer is zero.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0yraa8s.jl:15\nin expression starting at\
    \ /tmp/tmpl0yraa8s.jl:15\n"
  stdout: ''
  timestamp: 1659748833
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"invalid input\")\n    end\n    \n \
    \   product = 1\n    \n    for i in a:-1:1\n        product = product * b\n  \
    \  end\n    \n    return product\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\n@assert multiply(2, 3) == 6\n@assert multiply(-2, 3) == 6\n@assert\
    \ multiply(-2, -3) == 6\n@assert multiply(2, -3) == 6\n@assert multiply(-2, 2)\
    \ == -6\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers\
    \ and returns the sum of the \n    unit digits of their product (as described\
    \ above).\n    Assume the input is always valid.\n    Examples:\n            \
    \        \n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2e8aa7mf.jl:19\nin expression starting at\
    \ /tmp/tmp2e8aa7mf.jl:19\n"
  stdout: ''
  timestamp: 1659748833
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        error(\"Invalid input\")\n    elseif b == 1 \n        return a\n\
    \    else\n        return multiply(a/10, b*10)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two integers and returns the sum of their\
    \ unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(10, 2)\
    \ = 20\nmultiply(10, 3) = 15\nmultiply(10, 4) = 25\nmultiply(10, 5) = 25\nmultiply(10,\
    \ 6) = 25\nmultiply(10, 7) = 25\nmultiply(10, 8) = 25\nmultiply(10, 9) = 25\n\
    multiply(10, 10) = 25\nmultiply(10, 11) = 25\nmultiply(10, 12) = 25\nmultiply(10,\
    \ 13) = 25\nmultiply(10, 14) = 25\nmultiply(10, 15) = 25\nmultiply(10, 16) = 25\n\
    multiply(10, 17) = 25\nmultiply(10, 18) = 25\nmultiply(10, 19) = 25\nmultiply(10,\
    \ 20) = 25\nmultiply(10, 21) = 25\nmultiply(10, 22) = 25\nmultiply(10, 23) = 25\n\
    multiply(10, 24) = 25\nmultiply(10, 25) = 25\nmultiply(10, 26) = 25\nmultiply(10,\
    \ 27) = 25\nmultiply(10, 28) = 25\nmultiply(10, 29) = 25\nmultiply(10, 30) = 25\n\
    multiply(10, 31) = 25\nmultiply(10, 32) = 25\nmultiply(10, 33) = 25\nmultiply(10,\
    \ 34) = 25\nmultiply(10, 35) = 25\nmultiply(10, 36) = 25\nmultiply(10, 37) = 25\n\
    multiply(10, 38) = 25\nmultiply(10, 39) = 25\nmultiply(10, 40) = 25\nmultiply(10,\
    \ 41) = 25\nmultiply(10, 42) = 25\nmultiply(10, 43) = 25\nmultiply(10, 44) = 25\n\
    multiply(10, 45) = 25\nmultiply(10, 46) = 25\nmultiply(10, 47) = 25\nmultiply(10,\
    \ 48) = 25\nmultiply(10, 49) = 25\nmultiply(10, 50) = 25\nmultiply(10, 51) = 25\n\
    multiply(10, 52) = 25\nmultiply(10, 53) = 25\nmultiply(10, 54) = 25\nmultiply(10,\
    \ 55) = 25\nmultiply(10, 56) = 25\nmultiply(10, 57) = 25\nmultiply(10, 58) = 25\n\
    multiply(10, 59) = 25\nmultiply(10, 60) = 25\nmultiply(10, 61) = 25\nmultiply(10,\
    \ 62) = 25\nmultiply(10, 63) = 25\nmultiply(10, 64) = 25\nmultiply(10, 65) = 25\n\
    multiply(10, 66) = 25\nmultiply(10, 67) = 25\nmultiply(10, 68) = 25\nmultiply(10,\
    \ 69) = 25\nmultiply(10, 70) = 25\nmultiply(10, 71) = 25\nmultiply(10, 7\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc9euauaa.jl:17\nin expression starting at\
    \ /tmp/tmpc9euauaa.jl:17\n"
  stdout: ''
  timestamp: 1659748833
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a*b\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    multiply(a::Int64,\
    \ b::Int64)\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcomxmpwz.jl:9\nin expression starting at /tmp/tmpcomxmpwz.jl:9\n"
  stdout: ''
  timestamp: 1659748833
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(a/10, b%10)*10\
    \ + a%10\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(1, 2)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(1, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(10, 10)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 100)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 1000)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(10, 10000)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 100000)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 1000000)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(10, 10000000)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 100000000)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 1000000000)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(10, 10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(10, 100000000000)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 1000000000000)\n</cell>\n<code language=julia-1.5>\nmultiply(10,\
    \ 1000000000001)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(10, 1000000000003)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(10, 1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 1000000000005)\n</cell>\n<code language=julia-1.5>\nmultiply(10,\
    \ 1000000000006)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(10, 1000000000008)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(10, 1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    multiply(10, 1000000000010)\n</cell>\n<code language=julia-1.5>\nmultiply(10,\
    \ 1000000000011)\n</cell>\n<code language=julia-1.5>\nmultiply(10, 1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(10, 1000000000013)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(10, 1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    multiply(\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp259bfcya.jl:8\nin expression starting at /tmp/tmp259bfcya.jl:8\n"
  stdout: ''
  timestamp: 1659748833
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int, 10)\n    \n    mult_digits[1] = a\n   \
    \ mult_digits[2] = b\n    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits\
    \ = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n    \n   \
    \ mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = \nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptzneqg8g.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptzneqg8g.jl:1\n\
    in expression starting at /tmp/tmptzneqg8g.jl:1\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a *\
    \ b\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ integers and returns the sum of the unit digits of their product (a product\
    \ of two integers is a number whose digits are the sum of the unit digits of their\
    \ product).\nAs a reminder, the unit digits are the digits of the number divided\
    \ by 10. For example, if the product is $12$, the unit digits are $[1, 2]$. \n\
    Examples:\n$0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$,\
    \ $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$,\
    \ $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$,\
    \ $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$,\
    \ $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$,\
    \ $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$,\
    \ $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$,\
    \ $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$, $0$,\
    \ $0$, $0$, $0$, $0$, $\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptf19rr1s.jl:9\nin expression starting at /tmp/tmptf19rr1s.jl:9\n"
  stdout: ''
  timestamp: 1659748833
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * 10^(b-1)) * multiply(a/10^(b-1),\
    \ b-1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp11d9uldc.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp11d9uldc.jl:18\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  MethodError: no method matching multiply(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    multiply(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp11d9uldc.jl:6\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmp11d9uldc.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp11d9uldc.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp11d9uldc.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp11d9uldc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  MethodError: no method matching multiply(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    multiply(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp11d9uldc.jl:6\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmp11d9uldc.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp11d9uldc.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp11d9uldc.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp11d9uldc.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  MethodError: no method matching multiply(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    multiply(!Matched::Int64, ::Int64)\
    \ at /tmp/tmp11d9uldc.jl:6\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmp11d9uldc.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp11d9uldc.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  timestamp: 1659748836
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(a/10, b%10)*10\
    \ + a%10\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype multiply(2,\
    \ 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of its\
    \ unit digits.\nAs a reminder, unit digits are the digits of the number that divide\
    \ it into \nunits of powers of ten.\nExamples:\n    multiply(2, 3) == 2*10 + 3\n\
    \    multiply(2, 4) == 2*100 + 4\n    multiply(2, 5) == 2*1000 + 5\n    multiply(2,\
    \ 6) == 2*10000 + 6\n    multiply(2, 7) == 2*100000 + 7\n    multiply(2, 8) ==\
    \ 2*1000000 + 8\n    multiply(2, 9) == 2*10000000 + 9\n    multiply(2, 10) ==\
    \ 2*100000000 + 10\n    multiply(2, 11) == 2*1000000000 + 11\n    multiply(2,\
    \ 12) == 2*10000000000 + 12\n    multiply(2, 13) == 2*100000000000 + 13\n    multiply(2,\
    \ 14) == 2*1000000000000 + 14\n    multiply(2, 15) == 2*10000000000000 + 15\n\
    \    multiply(2, 16) == 2*100000000000000 + 16\n    multiply(2, 17) == 2*1000000000000000\
    \ + 17\n    multiply(2, 18) == 2*10000000000000000 + 18\n    multiply(2, 19) ==\
    \ 2*100000000000000000 + 19\n    multiply(2, 20) == 2*1000000000000000000 + 20\n\
    \    multiply(2, 21) == 2*10000000000000000000 + 21\n    multiply(2, 22) == 2*100000000000000000000\
    \ + 22\n    multiply(2, 23) == 2*1000000000000000000000 + 23\n    multiply(2,\
    \ 24) == 2*10000000000000000000000 + 24\n    multiply(2, 25) == 2*100000000000000000000000\
    \ + 25\n    multiply(2, 26) == 2*1000000000000000000000000 + 26\n    multiply(2,\
    \ 27) == 2*10000000000000000000000000 + 27\n    multiply(2, 28) == 2*100000000000000000000000000\
    \ + 28\n    multiply(2, 29) == 2*1000000000000000000000000000 + 29\n    multiply(2,\
    \ 30) == 2*10000000000000000000000000000 + 30\n    multiply(2, 31) == 2*100000000000000000000000000000\
    \ + 31\n    multiply(2, 32) == 2*1000000000000000000000000000000 + 32\n    multiply(2,\
    \ 33) == 2*10000000000000000000000000000000 + 33\n    multiply(2, 34) == 2*100000000000000000000000000000000\
    \ + 34\n    multiply(2, 35) == 2*1000000000000000000000000000000000 + 35\n   \
    \ multiply(2, 36) == 2*10000000000000000000000000000000000 + 36\n    multiply(2,\
    \ 37) == 2*100000000000000000000000000000000000 + 37\n    multiply(2, 38) == 2*1000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkng_8mok.jl:8\nin expression starting at /tmp/tmpkng_8mok.jl:8\n"
  stdout: ''
  timestamp: 1659748833
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a < 0 || b < 0\n        error(\"The product of a negative number\
    \ and a negative number is not possible.\")\n    end\n    \n    local product\
    \ = 1\n    \n    for i = 1, 10 do\n        product = product * a % 10 + b % 10\n\
    \        a = a // 10\n        b = b // 10\n    end\n    \n    return product\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11q5w6ji.jl:14\nin expression starting at\
    \ /tmp/tmp11q5w6ji.jl:14\n"
  stdout: ''
  timestamp: 1659748833
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    \n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4o4_m93p.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp4o4_m93p.jl:17\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:18\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:19\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:20\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:21\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659748824
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a *\
    \ b\nend\n</cell>\n<text>\nExercise\nWrite a function that takes two integers\
    \ and returns the product of their unit digits.\nAssume the input is always valid.\n\
    Examples:\nmultiply(2,3)\nmultiply(2,0)\nmultiply(0,2)\nmultiply(0,0)\nmultiply(2,-2)\n\
    multiply(-2,2)\nmultiply(-2,-2)\nmultiply(2,-2)\nmultiply(-2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\n\
    multiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(2,2)\nmultiply(\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe9w6sict.jl:9\nin expression starting at /tmp/tmpe9w6sict.jl:9\n"
  stdout: ''
  timestamp: 1659748833
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    \n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4o4_m93p.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp4o4_m93p.jl:17\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:18\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:19\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:20\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:21\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659748824
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        throw(ArithmeticError(\"Cannot multiply by zero\"))\n\
    \    elseif b < 0\n        throw(ArithmeticError(\"Cannot multiply by negative\
    \ number\"))\n    else\n        return a * b\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpada474qj.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpada474qj.jl:20\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpada474qj.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpada474qj.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpada474qj.jl:21\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpada474qj.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpada474qj.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpada474qj.jl:22\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpada474qj.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpada474qj.jl:19\ntest set: Error\
    \ During Test at /tmp/tmpada474qj.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  UndefVarError: ArithmeticError not defined\n  Stacktrace:\n\
    \   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpada474qj.jl:10\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpada474qj.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpada474qj.jl:19\ntest set:\
    \ Test Failed at /tmp/tmpada474qj.jl:24\n  Expression: candidate(76, 67) == 42\n\
    \   Evaluated: 50"
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then 0\n        else multiply(a/10, b/10)*10\
    \ + a*b%10\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    digits(a::Int64)::Array{Int64,1}\n\
    \    \n    Takes an integer and returns the unit digits of that integer.\n   \
    \ \n    Examples:\n    \n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf0u18mrv.jl:8\nin expression starting at /tmp/tmpf0u18mrv.jl:8\n"
  stdout: ''
  timestamp: 1659748833
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if b == 0\n        0\n    elseif b == 1\n        a\n    else\n \
    \       multiply(a, b-1)*10 + a\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 3)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 4)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 5)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 6)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 7)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 9)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 10)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 11)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 12)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 13)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 14)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 15)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 16)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 17)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 18)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 19)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 20)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 21)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 22)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 23)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 24)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 25)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 26)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 27)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 29)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 30)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 31)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 32)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 33)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 34)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 35)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_c0rqgf.jl:16\nin expression starting at\
    \ /tmp/tmp8_c0rqgf.jl:16\n"
  stdout: ''
  timestamp: 1659748833
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a*b\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n                    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcya3y0mr.jl:9\nin expression starting at /tmp/tmpcya3y0mr.jl:9\n"
  stdout: ''
  timestamp: 1659748834
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\
    \ \nend\n</cell>\n<code language=julia-1.5>\nmultiply(2, 3)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(0, 0)\n</cell>\n<code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpr0w8te73.jl:7 expected \"end\"\
    , got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr0w8te73.jl:10\n\
    in expression starting at /tmp/tmpr0w8te73.jl:10\n"
  stdout: ''
  timestamp: 1659748834
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a > 0 \n        then b * multiply(a/10, b%10)\n        else 0\n   \
    \ end\nend\n</cell>\n<code language=julia-1.0>\nmultiply(2,3)\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nExamples:\n\"hello\" returns 5\n\"hi\" returns 2\n\"hi\" returns\
    \ 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"\
    hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns\
    \ 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"\
    hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns\
    \ 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"\
    hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns\
    \ 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"\
    hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns\
    \ 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"\
    hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns\
    \ 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"\
    hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns\
    \ 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"\
    hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns\
    \ 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"\
    hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns 2\n\"hi\" returns\
    \ 2\n\"hi\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"b\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr2080_ur.jl:8\nin expression starting at /tmp/tmpr2080_ur.jl:8\n"
  stdout: ''
  timestamp: 1659748834
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = 1\n    for i = 1, a do\n        result = result *\
    \ b\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>\nmultiply(3,\
    \ 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns the product of their unit digits.\nExamples:\n[1,2,3]\n[1,2,3]\n\
    [1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n\
    [1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n\
    [1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n\
    [1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n\
    [1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n\
    [1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n\
    [1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n\
    [1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n\
    [1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n\
    [1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n\
    [1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n\
    [1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3]\n\
    [1,2,3]\n[1,2,3]\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg07efi9g.jl:9\nin expression starting at /tmp/tmpg07efi9g.jl:9\n"
  stdout: ''
  timestamp: 1659748834
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(b, a %\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2,\
    \ 3)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(0, 2)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(2, -2)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(-2,\
    \ 2)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(-2, -2)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(2, -2)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(-2, 2)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(-2, -2)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2,\
    \ -2)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(-2, 2)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(-2, -2)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(2, -2)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(-2, 2)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(-2,\
    \ -2)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2, -2)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(-2, 2)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(-2, -2)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(2, -2)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(-2,\
    \ 2)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(-2, -2)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(2, -2)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(-2, 2)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(-2, -2)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(2,\
    \ -2)\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyoxxnj6c.jl:8\nin expression starting at /tmp/tmpyoxxnj6c.jl:8\n"
  stdout: ''
  timestamp: 1659748834
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int64, 10)\n    mult_digits[1] = a\n    mult_digits[2]\
    \ = b\n    \n    mult_digits = mult_digits .+ mult_digits[2:end]\n    \n    mult_digits\
    \ = mult_digits .- mult_digits[1]\n    \n    mult_digits = mult_digits .* mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits .+ mult_digits[1]\n    \n    mult_digits\
    \ = mult_digits .- mult_digits[2]\n    \n    mult_digits = mult_digits .* mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits .+ mult_digits[2]\n    \n    mult_digits\
    \ = mult_digits .- mult_digits[3]\n    \n    mult_digits = mult_digits .* mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits .+ mult_digits[3]\n    \n    mult_digits\
    \ = mult_digits .- mult_digits[4]\n    \n    mult_digits = mult_digits .* mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits .+ mult_digits[4]\n    \n    mult_digits\
    \ = mult_digits .- mult_digits[5]\n    \n    mult_digits = mult_digits .* mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits .+ mult_digits[5]\n    \n    mult_digits\
    \ = mult_digits .- mult_digits[6]\n    \n    mult_digits = mult_digits .* mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits .+ mult_digits[6]\n    \n    mult_digits\
    \ = mult_digits .- mult_digits[7]\n    \n    mult_digits = mult_digits .* mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits .+ mult_digits[7]\n    \n    mult_digits\
    \ = mult_digits .- mult_digits[8]\n    \n    mult_digits = mult_digits .* mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits .+ mult_digits[8]\n    \n    mult_digits\
    \ = mult_digits .- mult_digits[9]\n    \n    mult_digits = mult_digits .* mult_\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpal6yrl66.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpal6yrl66.jl:1\n\
    in expression starting at /tmp/tmpal6yrl66.jl:1\n"
  stdout: ''
  timestamp: 1659748834
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(a, b /\
    \ 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(a::Int64)::Array{Int64}\n\
    \    \n    Takes an integer and returns the unit digits of that integer.\n   \
    \ \n    Examples:\n    \n    ```julia-1.5\n    digits(123)\n    ```\n    ```julia-1.5\n\
    \    digits(0)\n    ```\n    ```julia-1.5\n    digits(-3)\n    ```\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvm45qlcl.jl:8\nin expression starting at /tmp/tmpvm45qlcl.jl:8\n"
  stdout: ''
  timestamp: 1659748834
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = a * b\n    \n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4o4_m93p.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp4o4_m93p.jl:17\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:18\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:19\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:20\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o4_m93p.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o4_m93p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o4_m93p.jl:21\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659748824
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b == 1 \n        a\n    else\n     \
    \   multiply(a/10, b%10)*10 + multiply(a%10, b)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(2, 3)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the digits of its input. \n    For example, if the input\
    \ is 123, the function should return 1 + 2 + 3 = 6.\n    Use a recursive approach.\n\
    \    Use a while loop to solve this problem.\n    Use a for loop to solve this\
    \ problem.\n    Use a while loop to solve this problem.\n    Use a for loop to\
    \ solve this problem.\n    Use a while loop to solve this problem.\n    Use a\
    \ for loop to solve this problem.\n    Use a while loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a while loop to solve this\
    \ problem.\n    Use a for loop to solve this problem.\n    Use a while loop to\
    \ solve this problem.\n    Use a for loop to solve this problem.\n    Use a while\
    \ loop to solve this problem.\n    Use a for loop to solve this problem.\n   \
    \ Use a for loop to solve this problem.\n    Use a for loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a for loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a for loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a for loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a for loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a for loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a for loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a for loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a for loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a for loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a for loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a for loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a for loop to solve this problem.\n\
    \    Use a for loop to solve this problem.\n    Use a for loop to solve this \n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6hoqb1au.jl:15\nin expression starting at\
    \ /tmp/tmp6hoqb1au.jl:15\n"
  stdout: ''
  timestamp: 1659748834
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_result = a * b\n    \n    return mult_result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp33g4j8nb.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp33g4j8nb.jl:17\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp33g4j8nb.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp33g4j8nb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp33g4j8nb.jl:18\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp33g4j8nb.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp33g4j8nb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp33g4j8nb.jl:19\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp33g4j8nb.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp33g4j8nb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp33g4j8nb.jl:20\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp33g4j8nb.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp33g4j8nb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp33g4j8nb.jl:21\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int, 10)\n    \n    for digit in a:\n      \
    \  mult_digits[digit] += 1\n    \n    for digit in b:\n        mult_digits[digit]\
    \ += 1\n    \n    return sum(mult_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(1, 2) == 3\n@assert multiply(1, 3) == 6\n@assert multiply(2,\
    \ 3) == 6\n@assert multiply(3, 3) == 9\n@assert multiply(4, 3) == 12\n@assert\
    \ multiply(5, 3) == 15\n@assert multiply(6, 3) == 18\n@assert multiply(7, 3) ==\
    \ 21\n@assert multiply(8, 3) == 24\n@assert multiply(9, 3) == 27\n@assert multiply(10,\
    \ 3) == 30\n@assert multiply(11, 3) == 33\n@assert multiply(12, 3) == 36\n@assert\
    \ multiply(13, 3) == 39\n@assert multiply(14, 3) == 42\n@assert multiply(15, 3)\
    \ == 45\n@assert multiply(16, 3) == 48\n@assert multiply(17, 3) == 51\n@assert\
    \ multiply(18, 3) == 54\n@assert multiply(19, 3) == 57\n@assert multiply(20, 3)\
    \ == 60\n@assert multiply(21, 3) == 63\n@assert multiply(22, 3) == 66\n@assert\
    \ multiply(23, 3) == 69\n@assert multiply(24, 3) == 72\n@assert multiply(25, 3)\
    \ == 75\n@assert multiply(26, 3) == 78\n@assert multiply(27, 3) == 81\n@assert\
    \ multiply(28, 3) == 84\n@assert multiply(29, 3) == 87\n@assert multiply(30, 3)\
    \ == 90\n@assert multiply(31, 3) == 93\n@assert multiply(32, 3) == 96\n@assert\
    \ multiply(33, 3) == 99\n@assert multiply(34, 3) == 102\n@assert multiply(35,\
    \ 3) == 105\n@assert multiply(36, 3) == 108\n@assert multiply(37, 3) == 111\n\
    @assert multiply(38, 3) == 114\n@assert multiply(39, 3) == 117\n@assert multiply(40,\
    \ 3) == 120\n@assert multiply(41, 3) == 123\n@assert multiply(42, 3) == 126\n\
    @assert multiply(43, 3) == 129\n@assert multiply(44, 3) == 132\n@assert multiply(45,\
    \ 3) == 135\n@assert multiply(46, 3) == 138\n@assert multiply(47, 3) == 141\n\
    @assert multiply(48, 3) == 144\n@assert multiply(49, 3) == 147\n@assert multiply(50,\
    \ 3) == 150\n@assert multiply(51, 3) == 153\n@assert multiply(52, 3) == 156\n\
    @assert multiply(53, 3) == 159\n@assert multiply(54, 3) == 162\n@assert multiply(\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm8kgrlhr.jl:11\nin expression starting at\
    \ /tmp/tmpm8kgrlhr.jl:11\n"
  stdout: ''
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        error(\"Invalid input\")\n    elseif b == 1\n        return a\n    else\n\
    \        return a*b\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string.\nExamples:\n\
    \"hello\" returns 5\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\"\
    helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns 11\n\"helloworld\" returns 11\n\"helloworld\" returns 11\n\
    \"helloworld\" returns \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvyqqaopu.jl:17\nin expression starting at\
    \ /tmp/tmpvyqqaopu.jl:17\n"
  stdout: ''
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        multiply(a/10, b/10)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nmultiply(1, 2)\n</cell>\n<code language=julia-1.3>\n\
    multiply(1, 0)\n</cell>\n<code language=julia-1.3>\nmultiply(0, 0)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(0, 10)\n</cell>\n<code language=julia-1.3>\n\
    multiply(10, 0)\n</cell>\n<code language=julia-1.3>\nmultiply(10, 10)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(10, 100)\n</cell>\n<code language=julia-1.3>\n\
    multiply(100, 10)\n</cell>\n<code language=julia-1.3>\nmultiply(100, 100)\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the unit digits of\
    \ an integer.\n    For example, if the input is 123, the function should return\
    \ 1 + 2 + 3 = 6.\n    Use a while loop to solve this problem.\n    Use a for loop\
    \ to solve this problem.\n    Use a recursive function to solve this problem.\n\
    \    Use a recursive function to solve this problem.\n    Use a recursive function\
    \ to solve this problem.\n    Use a recursive function to solve this problem.\n\
    \    Use a recursive function to solve this problem.\n    Use a recursive function\
    \ to solve this problem.\n    Use a recursive function to solve this problem.\n\
    \    Use a recursive function to solve this problem.\n    Use a recursive function\
    \ to solve this problem.\n    Use a recursive function to solve this problem.\n\
    \    Use a recursive function to solve this problem.\n    Use a recursive function\
    \ to solve this problem.\n    Use a recursive function to solve this problem.\n\
    \    Use a recursive function to solve this problem.\n    Use a recursive function\
    \ to solve this problem.\n    Use a recursive function to solve this problem.\n\
    \    Use a recursive function to solve this problem.\n    Use a recursive function\
    \ to solve this problem.\n    Use a recursive function to solve this problem.\n\
    \    Use a recursive function to solve this problem.\n    Use a recursive function\
    \ to solve this problem.\n    Use a recursive function to solve this problem.\n\
    \    Use a recursive function to solve this problem.\n    Use a recursive function\
    \ to solve this problem.\n    Use a recursive function to solve this problem.\n\
    \    Use a recursive function to solve this problem.\n    Use a recursive function\
    \ to solve this problem.\n    Use a recursive function to solve this problem.\n\
    \    Use a recursive function to solve this problem.\n    Use a recursive function\
    \ to solve this problem.\n    Use a recursive function to solve this problem.\n\
    \    Use a recursive function to solve this problem.\n    Use a recursive function\
    \ to solve this problem.\n    Use a recursive function to solve this problem.\n\
    \    Use a recursive function to \nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmq9o7pf7.jl:13\nin expression starting at\
    \ /tmp/tmpmq9o7pf7.jl:13\n"
  stdout: ''
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a==0 || b==0 \n        then return 0\n    else \n        multiply(a/10,\
    \ b%10) * 10 + a%10 * b%10\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    This doesn't work if you input a negative number.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for negative numbers, because `%` operator returns negative number when\
    \ dividing by zero. Try `multiply(-10, -10)` - it returns `-10`.\n<|/ c |>\n<|\
    \ c |>\nYes, I see that. My mistake.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsa7a4jvm.jl:8\nin expression starting at /tmp/tmpsa7a4jvm.jl:8\n"
  stdout: ''
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a == 0 || b == 0\n        return 0\n    \n    unitDigits = divMod(a,10)\n\
    \    unitDigits = unitDigits[1]\n    \n    unitDigits = unitDigits * b\n    \n\
    \    unitDigits = unitDigits % 10\n    \n    return unitDigits\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(5,3) == 15\n@assert multiply(5,5)\
    \ == 10\n@assert multiply(5,7) == 15\n@assert multiply(5,10) == 10\n@assert multiply(5,11)\
    \ == 15\n@assert multiply(5,12) == 10\n@assert multiply(5,13) == 15\n@assert multiply(5,14)\
    \ == 10\n@assert multiply(5,15) == 15\n@assert multiply(5,16) == 10\n@assert multiply(5,17)\
    \ == 15\n@assert multiply(5,18) == 10\n@assert multiply(5,19) == 15\n@assert multiply(5,20)\
    \ == 10\n@assert multiply(5,21) == 15\n@assert multiply(5,22) == 10\n@assert multiply(5,23)\
    \ == 15\n@assert multiply(5,24) == 10\n@assert multiply(5,25) == 15\n@assert multiply(5,26)\
    \ == 10\n@assert multiply(5,27) == 15\n@assert multiply(5,28) == 10\n@assert multiply(5,29)\
    \ == 15\n@assert multiply(5,30) == 10\n@assert multiply(5,31) == 15\n@assert multiply(5,32)\
    \ == 10\n@assert multiply(5,33) == 15\n@assert multiply(5,34) == 10\n@assert multiply(5,35)\
    \ == 15\n@assert multiply(5,36) == 10\n@assert multiply(5,37) == 15\n@assert multiply(5,38)\
    \ == 10\n@assert multiply(5,39) == 15\n@assert multiply(5,40) == 10\n@assert multiply(5,41)\
    \ == 15\n@assert multiply(5,42) == 10\n@assert multiply(5,43) == 15\n@assert multiply(5,44)\
    \ == 10\n@assert multiply(5,45) == 15\n@assert multiply(5,46) == 10\n@assert multiply(5,47)\
    \ == 15\n@assert multiply(5,48) == 10\n@assert multiply(5,49) == 15\n@assert multiply(5,50)\
    \ == 10\n@assert multiply(5,51) == 15\n@assert multiply(5,52) == 10\n@assert multiply(5,53)\
    \ == 15\n@assert multiply(5,54) == 10\n@assert multiply(5,55) == 15\n@assert multiply(5,56)\
    \ == 10\n@assert multiply(5,57) == 15\n@assert multiply(5,58) == 10\n@assert multiply(5,59)\
    \ == 15\n@assert multiply(5,60) == 10\n@assert multiply(5,61) == 15\n\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf4oy2l_e.jl:20\nin expression starting at\
    \ /tmp/tmpf4oy2l_e.jl:20\n"
  stdout: ''
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10^9\
    \ + 10^9\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(10,\
    \ 10)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(10, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ multiply(0, 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0,\
    \ 0)\n</cell>\n<code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype multiply(0, 0)\n</cell>\n<code language=julia-1.0\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpom0xhs9x.jl:7 expected \"end\"\
    , got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpom0xhs9x.jl:10\n\
    in expression starting at /tmp/tmpom0xhs9x.jl:10\n"
  stdout: ''
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        throw(ArithmeticError(\"Cannot multiply by zero\"\
    ))\n    elseif b < 0 \n        throw(ArithmeticError(\"Cannot multiply by negative\
    \ number\"))\n    elseif b > 9 \n        throw(ArithmeticError(\"Cannot multiply\
    \ by number greater than 9\"))\n    elseif b < a \n        throw(ArithmeticError(\"\
    Cannot multiply by number less than a\"))\n    else\n        return a * b\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    multiply(a::Int64,\
    \ b::Int64)\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54dovp2o.jl:19\nin expression starting at\
    \ /tmp/tmp54dovp2o.jl:19\n"
  stdout: ''
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a > 0 && b > 0 \n        then return a*b\n        else return 0\n \
    \   else return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnuldfih6.jl:8\nin expression starting at /tmp/tmpnuldfih6.jl:8\n"
  stdout: ''
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int64, 2)\n    mult_digits[1] = a\n    mult_digits[2]\
    \ = b\n    \n    mult_digits = mult_digits[2:end]\n    \n    mult_digits = mult_digits[1]\
    \ * mult_digits[2]\n    \n    return mult_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 3)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 4)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 5)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 6)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 7)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 9)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 10)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 11)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 12)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 13)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 14)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 15)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 16)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 17)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 18)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 19)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 20)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 21)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 22)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 23)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 24)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 25)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 26)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 27)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 29)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 30)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 31)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 32)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 33)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpswxrrmy3.jl:18\nin expression starting at\
    \ /tmp/tmpswxrrmy3.jl:18\n"
  stdout: ''
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return 0\n    else \n        multiply(b, a %\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(a::Int64)::Vector{Int64}\n\
    \    \n    Takes an integer and returns the unit digits of that integer.\n   \
    \ \n    Examples:\n    \n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digits(123)\n    ```\n    ```julia\n    digits(123)\n    ```\n    ```julia\n\
    \    digit\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbqozd_4x.jl:8\nin expression starting at /tmp/tmpbqozd_4x.jl:8\n"
  stdout: ''
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * multiply(b,\
    \ floor(b/10)))\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(2,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 0)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 1)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 4)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 5)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 6)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 7)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 9)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 10)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 11)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 12)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 13)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 14)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 15)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 16)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 17)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 18)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 19)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 20)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 21)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 22)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 23)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 24)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 25)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 26)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 27)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 29)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 30)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 31)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2, 32)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, 33)\n</cell>\n<code language=julia-1.5>\nmultiply(2, 34)\n</\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyd9_upkb.jl:13\nin expression starting at\
    \ /tmp/tmpyd9_upkb.jl:13\n"
  stdout: ''
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    if a == 0 || b == 0\n        0\n    else\n        (a * b) % 10\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3kzcobuw.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp3kzcobuw.jl:19\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3kzcobuw.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3kzcobuw.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp3kzcobuw.jl:20\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3kzcobuw.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3kzcobuw.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp3kzcobuw.jl:22\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3kzcobuw.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3kzcobuw.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp3kzcobuw.jl:23\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3kzcobuw.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3kzcobuw.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp3kzcobuw.jl:24\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
  timestamp: 1659748836
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    else\n      \
    \  return a * b\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp0b6nmpba.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp0b6nmpba.jl:18\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0b6nmpba.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0b6nmpba.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp0b6nmpba.jl:19\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0b6nmpba.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0b6nmpba.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp0b6nmpba.jl:20\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0b6nmpba.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0b6nmpba.jl:17\ntest set: Error\
    \ During Test at /tmp/tmp0b6nmpba.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  Invalid input\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmp0b6nmpba.jl:8\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0b6nmpba.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0b6nmpba.jl:17\ntest set:\
    \ Test Failed at /tmp/tmp0b6nmpba.jl:22\n  Expression: candidate(76, 67) =="
  timestamp: 1659748837
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a==0 || b==0\n        0\n    else\n        (a*b)/10^(a-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n                    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc80bh94o.jl:13\nin expression starting at\
    \ /tmp/tmpc80bh94o.jl:13\n"
  stdout: ''
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    local result = 0\n    \n    if a > 0 \n        then \n         \
    \   if b > 0 \n                then \n                    result = a * b\n   \
    \             else\n                    result = 0\n            else\n       \
    \         result = 0\n        end\n    else\n        if b > 0 \n            then\
    \ \n                result = a * b\n            else\n                result =\
    \ 0\n        end\n    end\n    \n    return result\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(4, 2)\n</cell>\n<code language=julia-1.5>\nmultiply(4, 0)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(0, 0)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (as described above).\n    Examples:\n                    multiply(4,\
    \ 2) = 12\n                    multiply(4, 0) = 4\n                    multiply(0,\
    \ 0) = 0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmptvwvne_b.jl:12 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptvwvne_b.jl:17\n\
    in expression starting at /tmp/tmptvwvne_b.jl:17\n"
  stdout: ''
  timestamp: 1659748835
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4xdxrl2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4xdxrl2.jl:1\n\
    in expression starting at /tmp/tmpf4xdxrl2.jl:1\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a *\
    \ b\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(2, 3)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(-2, 3)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2, -3)\n</cell>\n<code language=julia-1.5>\nmultiply(-2, -3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of its unit digits.\n\
    Assume the input is always valid.\nExamples:\nmultiply(2, 3)\nmultiply(-2, 3)\n\
    multiply(2, -3)\nmultiply(-2, -3)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7zw5icaj.jl:9\nin expression starting at /tmp/tmp7zw5icaj.jl:9\n"
  stdout: ''
  timestamp: 1659748836
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a==0 || b==0 \n        then 0\n    else \n        multiply(a/10, b/10)*10\
    \ + a*b%10\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(4,5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nExamples:\n\"hello\" returns 5\n\"\
    hello world\" returns 11\n\"hello world!\" returns 15\n\"hello world!\" returns\
    \ 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\"\
    \ returns 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello\
    \ world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\
    \"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\" returns\
    \ 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\"\
    \ returns 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello\
    \ world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\
    \"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\" returns\
    \ 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\"\
    \ returns 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello\
    \ world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\
    \"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\" returns\
    \ 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\"\
    \ returns 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello\
    \ world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\
    \"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\" returns\
    \ 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\"\
    \ returns 15\n\"hello world!\" returns 15\n\"hello world!\" returns 15\n\"hello\
    \ world!\" returns 15\n\"hello world!\" returns 15\n\"hello world!\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyik4ae3x.jl:8\nin expression starting at /tmp/tmpyik4ae3x.jl:8\n"
  stdout: ''
  timestamp: 1659748836
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    \n    mult_digits = zeros(Int64, 10)\n    \n    mult_digits[1] = a\n \
    \   mult_digits[2] = b\n    \n    mult_digits = mult_digits .+ mult_digits .*\
    \ 10\n    \n    mult_digits = mult_digits .- mult_digits .* 10\n    \n    mult_digits\
    \ = mult_digits .+ mult_digits .* 10\n    \n    mult_digits = mult_digits .- mult_digits\
    \ .* 10\n    \n    mult_digits = mult_digits .+ mult_digits .* 10\n    \n    mult_digits\
    \ = mult_digits .- mult_digits .* 10\n    \n    mult_digits = mult_digits .+ mult_digits\
    \ .* 10\n    \n    mult_digits = mult_digits .- mult_digits .* 10\n    \n    mult_digits\
    \ = mult_digits .+ mult_digits .* 10\n    \n    mult_digits = mult_digits .- mult_digits\
    \ .* 10\n    \n    mult_digits = mult_digits .+ mult_digits .* 10\n    \n    mult_digits\
    \ = mult_digits .- mult_digits .* 10\n    \n    mult_digits = mult_digits .+ mult_digits\
    \ .* 10\n    \n    mult_digits = mult_digits .- mult_digits .* 10\n    \n    mult_digits\
    \ = mult_digits .+ mult_digits .* 10\n    \n    mult_digits = mult_digits .- mult_digits\
    \ .* 10\n    \n    mult_digits = mult_digits .+ mult_digits .* 10\n    \n    mult_digits\
    \ = mult_digits .- mult_digits .* 10\n    \n    mult_digits = mult_digits .+ mult_digits\
    \ .* 10\n    \n    mult_digits = mult_digits .- mult_digits .* 10\n    \n    mult_digits\
    \ = mult_digits .+ mult_digits .* 10\n    \n    mult_digits = mult_digits .- mult_digits\
    \ .* 10\n    \n    mult_digits = mult_digits .+ mult_digits .* 10\n    \n    mult_digits\
    \ = mult_digits .- mult_digits .* 10\n    \n    mult_digits = mult_digits .+ mult_digits\
    \ .* 10\n    \n    mult_digits = mul\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpewebigad.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpewebigad.jl:1\n\
    in expression starting at /tmp/tmpewebigad.jl:1\n"
  stdout: ''
  timestamp: 1659748836
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        return a\n    else\n        return multiply(a/10, b%10)*10 + a%10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(a::Int64)::Array{Int64}\n\
    \    \n    Takes an integer and returns the unit digits of the integer.\n    \n\
    \    Examples:\n    \n    ```julia\n    digits(123)\n    ```\n    ```julia\n \
    \   digits(-456)\n    ```\n    ```julia\n    digits(0)\n    ```\n    ```julia\n\
    \    digits(12345)\n    ```\n    ```julia\n    digits(-12345)\n    ```\n    ```julia\n\
    \    digits(123456789)\n    ```\n    ```julia\n    digits(-123456789)\n    ```\n\
    \    ```julia\n    digits(1234567890)\n    ```\n    ```julia\n    digits(-1234567890)\n\
    \    ```\n    ```julia\n    digits(12345678901)\n    ```\n    ```julia\n    digits(-12345678901)\n\
    \    ```\n    ```julia\n    digits(1234567890123)\n    ```\n    ```julia\n   \
    \ digits(-1234567890123)\n    ```\n    ```julia\n    digits(12345678901234)\n\
    \    ```\n    ```julia\n    digits(-12345678901234)\n    ```\n    ```julia\n \
    \   digits(12345678901234567)\n    ```\n    ```julia\n    digits(-12345678901234567)\n\
    \    ```\n    ```julia\n    digits(1234567890123456789)\n    ```\n    ```julia\n\
    \    digits(-1234567890123456789)\n    ```\n    ```julia\n    digits(123456789012345678901)\n\
    \    ```\n    ```julia\n    digits(-123456789012345678901)\n    ```\n    ```julia\n\
    \    digits(12345678901234567890123)\n    ```\n    ```julia\n    digits(-12345678901234567890123)\n\
    \    ```\n    ```julia\n    digits(123456789012345678901234)\n    ```\n    ```julia\n\
    \    digits(-123456789012345678901234)\n    ```\n    ```julia\n    digits(123456789012345678901234567)\n\
    \    ```\n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8aotf84b.jl:15\nin expression starting at\
    \ /tmp/tmp8aotf84b.jl:15\n"
  stdout: ''
  timestamp: 1659748836
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0\n        0\n    else\n        (a * b) % 10\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nmultiply(1, 2)\n</cell>\n<code language=julia-1.4>\n\
    multiply(1, 3)\n</cell>\n<code language=julia-1.4>\nmultiply(1, 4)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(1, 5)\n</cell>\n<code language=julia-1.4>\n\
    multiply(1, 6)\n</cell>\n<code language=julia-1.4>\nmultiply(1, 7)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(1, 8)\n</cell>\n<code language=julia-1.4>\n\
    multiply(1, 9)\n</cell>\n<code language=julia-1.4>\nmultiply(1, 10)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(1, 11)\n</cell>\n<code language=julia-1.4>\n\
    multiply(1, 12)\n</cell>\n<code language=julia-1.4>\nmultiply(1, 13)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(1, 14)\n</cell>\n<code language=julia-1.4>\n\
    multiply(1, 15)\n</cell>\n<code language=julia-1.4>\nmultiply(1, 16)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(1, 17)\n</cell>\n<code language=julia-1.4>\n\
    multiply(1, 18)\n</cell>\n<code language=julia-1.4>\nmultiply(1, 19)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(1, 20)\n</cell>\n<code language=julia-1.4>\n\
    multiply(1, 21)\n</cell>\n<code language=julia-1.4>\nmultiply(1, 22)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(1, 23)\n</cell>\n<code language=julia-1.4>\n\
    multiply(1, 24)\n</cell>\n<code language=julia-1.4>\nmultiply(1, 25)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(1, 26)\n</cell>\n<code language=julia-1.4>\n\
    multiply(1, 27)\n</cell>\n<code language=julia-1.4>\nmultiply(1, 28)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(1, 29)\n</cell>\n<code language=julia-1.4>\n\
    multiply(1, 30)\n</cell>\n<code language=julia-1.4>\nmultiply(1, 31)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(1, 32)\n</cell>\n<code language=julia-1.4>\n\
    multiply(1, 33)\n</cell>\n<code language=julia-1.4>\nmultiply(1, 34)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(1, 35)\n</cell>\n<code language=\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpnnew1c.jl:13\nin expression starting at\
    \ /tmp/tmphpnnew1c.jl:13\n"
  stdout: ''
  timestamp: 1659748836
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n                    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(2, 3) == 6\n@assert multiply(2, 0)\
    \ == 0\n@assert multiply(0, 2) == 0\n@assert multiply(2, 2) == 4\n@assert multiply(-2,\
    \ 2) == 0\n@assert multiply(-2, -2) == 4\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of its unit digits. \nAssume that the input is\
    \ always valid.\nExamples:\nmultiply(2, 3) == 6\nmultiply(2, 0) == 0\nmultiply(0,\
    \ 2) == 0\nmultiply(2, 2) == 4\nmultiply(-2, 2) == 0\nmultiply(-2, -2) == 4\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9udn34o.jl:13\nin expression starting at\
    \ /tmp/tmps9udn34o.jl:13\n"
  stdout: ''
  timestamp: 1659748836
