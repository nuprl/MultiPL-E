name: HumanEval_122_add_elements
language: jl
prompt: "\"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n\
  \    the sum of the elements with at most two digits from the first k elements of\
  \ arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <= len(arr) <= 100\n\
  \        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
  \ k::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
  \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
  \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
  \ 1) == 1)\nend\n"
completions: ["    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n    end\n\
    \    return sum\nend", "    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend", "    if k == 0 \n        return arr[1]\n    \n\
    \    sum = 0\n    \n    for i = 1:k\n        sum += arr[i]\n    end\n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n\
    </cell>\n<code language=julia-1.5>", "    sum = 0\n    for n in arr\n        if\
    \ n <= 9\n            sum += n\n        else\n            sum += n % 10 + n /\
    \ 10\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ add_elements([1,2,3,4,5,6,7,8,9,10], 2) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 3) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 4) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 5) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 6) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 7) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 8) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 9) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 10) == 15\n</cell>\n\
    <text>\nQuestion 3\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [1,2,3,4,5,6,7,8,9,10] and k = 2, the function should return 15.", "    \n\
    \    sum = 0\n    \n    for element in arr[k:end]\n        sum += element\n  \
    \  end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,\
    \ 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,\
    \ 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,\
    \ 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226,\
    \ 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242,\
    \ 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258,\
    \ 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274,\
    \ 275, 276, 277, 278, 27", "    if k == 0 \n        return arr[1]\n    \n    sum\
    \ = 0\n    \n    for i in 1:k\n        sum += arr[i]\n    end\n    \n    return\
    \ sum\nend", "    if k == 0 \n        return arr[1] \n    else \n        return\
    \ arr[1] + add_elements(arr[2:k], k-1) \nend", "    sum = 0\n    for e in arr[k:end]\n\
    \        sum += e\n    end\n    return sum\nend", "    sum = 0\n    for i in 1:k\n\
    \        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100]\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n\
    </cell>\n<code language=julia-1.5>", "    if k == 0 \n        return arr[1] \n\
    \    else \n        sum = 0\n        for i in 1:k\n            sum += arr[i]\n\
    \        end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100]\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n\
    </cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    for el in arr[k:end]\n\
    \        sum += el\n    end\n    \n    return sum\nend", "    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 2) ==\
    \ 12\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ elements with at most two digits from the first k elements of arr. For example,\
    \ given arr = [1, 2, 3, 4, 5, 6, 7, 8, 9] and k = 2, the function should return\
    \ 13.", "    if k == 0 \n        return arr[1] \n    else \n        sum = 0\n\
    \        for i in 1:k \n            sum = sum + arr[i] \n        return sum\n\
    end", "    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n\
    <code language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for e in arr[k:end]\n        sum += e\n    end\n    return sum\n\
    end", "    if k == 0 \n        return arr[1] \n    else \n        return arr[1]\
    \ + add_elements(arr[2:k], k-1) \nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 15\n</cell>\n<text>\nRecursion\n\
    A recursive function calls itself repeatedly until it reaches a base case (a case\
    \ where it stops recursing). A base case is when there are no more elements to\
    \ process. In Julia, a recursive function must have a return statement at the\
    \ end of its definition. Otherwise, the function will run indefinitely.", "  \
    \  if k == 0 \n        return arr[1]\n    else \n        return arr[1] + add_elements(arr[2:k],\
    \ k-1)\nend", "    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i = 1:k\n        sum += arr[i]\n\
    \    end\n    return sum\nend", "    if k == 0 \n        return arr[1]\n    \n\
    \    sum = 0\n    for i in 1:k\n        sum += arr[i]\n    end\n    return sum\n\
    end", "    \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n    for\
    \ i in 1:k\n        sum += arr[i]\n    end\n    \n    return sum\nend", "    sum\
    \ = 0\n    for e in arr[k+1:end]\n        sum += e\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</cell>\n<code language=julia-1.5>\n\
    add_elements(arr, 2)\n</cell>\n<code language=julia-1.5>", "    sum = 0\n    for\
    \ e in arr[k:end]\n        sum += e\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\
    \ 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\
    \ 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,\
    \ 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,\
    \ 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,\
    \ 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156,\
    \ 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,\
    \ 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,\
    \ 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,\
    \ 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,\
    \ 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236,\
    \ 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,\
    \ 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,\
    \ 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, ", " \
    \   \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n    end\n    \n\
    \    return sum\nend", "    if k == 0 \n        return arr[1] \n    else \n  \
    \      sum = 0\n        for i in arr[k:end]\n            sum += i\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\narr = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</cell>\n\
    <code language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\
    \ 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n<code language=julia-1.5>\n\
    add_elements(arr, 2)\n</cell>\n<code language=julia-1.5>", "    sum = 0\n    for\
    \ e in arr[k+1:end]\n        sum += e\n    end\n    return sum\nend", "    \n\
    \    sum = 0\n    for e in arr[k:end]\n        sum += e\n    end\n    return sum\n\
    end", "    if k == 0 \n        return arr[1] \n    else \n        sum = 0 \n \
    \       for i in arr[k:end]\n            sum += i \n        return sum + arr[1]\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    sum = 0\n    for e in arr[k:end]\n\
    \        sum += e\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\
    </cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 2) == 12\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 3) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 4) == 21\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 5) == 28\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 6) == 36\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 7) == 45\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 8) == 54\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 9) == 63\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 10) == 72\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 11) == 81\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 12) == 90\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 13) == 99\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 14) == 100\n</cell>\n<text>\nProblem 3\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [1,2,3,4,5,6,7,8,9,10] and k = 2, the function should return\
    \ 15.", "    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n\
    \    return sum\nend", "    if k == 0 \n        return arr[1]\n    \n    sum =\
    \ 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</cell>\n<code\
    \ language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10] and k = 2, the function should return 15.", "    \n\
    \    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\
    \ 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,\
    \ 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\
    \ 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136,\
    \ 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,\
    \ 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\
    \ 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\
    \ 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,\
    \ 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,\
    \ 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\
    \ 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248,\
    \ 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264,\
    \ 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280,\
    \ 281, 28", "    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nLet's test our function by verifying it\
    \ returns the correct result for given inputs:", "    sum = 0\n    for el in arr[k+1:end]\n\
    \        sum += el\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100]\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n\
    </cell>\n<code language=julia-1.5>", "    sum = 0\n    for e in arr[k:end]\n \
    \       sum += e\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100]\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n\
    </cell>\n<code language=julia-1.5>", "    if k == 0 \n        return arr[1] \n\
    \    else \n        sum = 0\n        for i in 1:k\n            sum = sum + arr[i]\n\
    \        end\n        return sum\n    end\nend", "    \n    sum = 0\n    for i\
    \ in 1:k\n        sum += arr[i]\n    end\n    return sum\nend", "    \n    sum\
    \ = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\
    \ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\
    \ 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n<code language=julia-1.5>\n\
    add_elements(arr, 2)\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend", "    sum\
    \ = 0\n    for e in arr[k:end]\n        sum += e\n    end\n    return sum\nend",
  "    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return\
    \ sum\nend", "    if k == 0 \n        return arr[1]\n    \n    sum = 0\n    for\
    \ i in 1:k\n        sum += arr[i]\n    end\n    return sum\nend", "    if k ==\
    \ 0 \n        return arr[1]\n    \n    sum = 0\n    for i in 1:k\n        sum\
    \ += arr[i]\n    end\n    return sum\nend", "    \n    sum = 0\n    for i = 1:k\n\
    \        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100]\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n\
    </cell>\n<text>\nQuestion 3\nWrite a Julia function called two_digit_sum that\
    \ takes in an array of integers and an integer k and returns the sum of the elements\
    \ with at most two digits from the first k elements of arr.", "    sum = 0\n \
    \   for x in arr[k:end]\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 2) ==\
    \ 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 3) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 4) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 5) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 6) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 7) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 8) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 9) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 10) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 11) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 12) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 13) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 14) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 15) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 16) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 17) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 18) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 19) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 20) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 21) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 22) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 23) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 24) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 25) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 26) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 27) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,",
  "    \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n    end\n    return\
    \ sum\nend", "    \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n \
    \   end\n    return sum\nend", "    sum = 0\n    for e in arr[k:end]\n       \
    \ sum += e\n    end\n    return sum\nend", "    \n    sum = 0\n    for i = 1:k\n\
    \        sum = sum + arr[i]\n    end\n    \n    return sum\nend", "    \n    sum\
    \ = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend",
  "    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\
    \ 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,\
    \ 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\
    \ 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136,\
    \ 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,\
    \ 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\
    \ 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\
    \ 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,\
    \ 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,\
    \ 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\
    \ 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248,\
    \ 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264,\
    \ 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280,\
    \ 281, 282, 28", "    if k == 0 \n        return arr[1]\n    else \n        return\
    \ arr[1] + add_elements(arr[2:k], k-1)\nend", "    if k == 0 \n        return\
    \ arr[1] \n    else \n        return arr[1] + add_elements(arr[2:k], k-1) \nend",
  "    if k == 0 \n        return arr[1]\n    \n    sum = 0\n    for i = 1:k\n   \
    \     sum = sum + arr[i]\n    end\n    return sum\nend", "    if k == 0 \n   \
    \     return arr[1] \n    else \n        return arr[1] + add_elements(arr[2:k],\
    \ k-1) \nend", "    if k == 0 \n        return arr[1] \n    \n    sum = 0\n  \
    \  for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20]\n</cell>\n<code language=julia-1.5>\nadd_elements(arr,\
    \ 2)\n</cell>\n<code language=julia-1.5>", "    if k == 0 \n        return arr[1]\
    \ \n    else \n        sum = 0\n        for i in 1:k\n            sum += arr[i]\n\
    \        end\n        return sum\n    end\nend", "    if k == 0 \n        return\
    \ arr[1] \n    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n\
    <code language=julia-1.5>\nadd_elements(arr, 3)\n</cell>\n<code language=julia-1.5>",
  "    if k == 0 \n        return arr[1]\n    \n    sum = 0\n    for i = 1:k\n   \
    \     sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\
    </cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n<code\
    \ language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<text>\nQuestion 3\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\
    \ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100] and k = 2,\
    \ the function should return 60", "    if k == 0 \n        return arr[1] \n  \
    \  else \n        sum = 0\n        for i in 1:k\n            sum += arr[i]\n \
    \       end\n        return sum\n    end\nend", "    \n    sum = 0\n    for i\
    \ = 1:k\n        sum = sum + arr[i]\n    end\n    return sum\nend", "    sum =\
    \ 0\n    for e in arr[k:end]\n        sum += e\n    end\n    return sum\nend",
  "    if k == 0 \n        return arr[1]\n    \n    sum = 0\n    \n    for i in 1:k\n\
    \        sum += arr[i]\n    end\n    \n    return sum\nend", "    if k == 0 \n\
    \        return arr[1]\n    \n    sum = 0\n    for i = 1:k\n        sum = sum\
    \ + arr[i]\n    end\n    return sum\nend", "    sum = 0\n    for e in arr[k+1:end]\n\
    \        sum += e\n    end\n    return sum\nend", "    \n    sum = 0\n    \n \
    \   for i = 1:k\n        sum += arr[i]\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 2) ==\
    \ 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 3) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 4) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 5) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 6) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 7) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 8) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 9) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 10) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 11) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 12) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 13) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 14) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 15) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 16) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 17) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 18) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 19) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 20) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 21) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 22) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 23) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 24) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 25) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 26) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 27) == 15\n@assert add_elements([1,2,3,4,",
  "    sum = 0\n    for i = 1:k\n        sum = sum + arr[i]\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@time add_elements(arr, k)\n</cell>\n\
    <text>\nPart 2\nGiven a non-empty array of integers arr and an integer k, return\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. \nIf there are less than k elements in arr, return 0.", "    \n    if k\
    \ == 0 \n        return arr[1]\n    \n    sum = 0\n    for element in arr[k:end]\n\
    \        sum += element\n    end\n    return sum\nend", "    if k == 0 \n    \
    \    return arr[1] \n    else \n        return arr[1] + add_elements(arr[k+1:end],\
    \ k-1)\nend", "    sum = 0\n    for e in arr[k:end]\n        sum += e\n    end\n\
    \    return sum\nend", "    if k == 0 \n        return arr[1] \n    else \n  \
    \      sum = 0\n        for i in arr[k:end]\n            sum += i\n        end\n\
    \        return sum\n    end\nend", "    \n    if k == 0 \n        return arr[1]\n\
    \    \n    sum = 0\n    \n    for i in 1:k\n        sum = sum + arr[i]\n    end\n\
    \    \n    return sum\nend\n</cell>\n<text>\nLet's test our function", "    sum\
    \ = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend",
  "    \n    sum = 0\n    for e in arr[k:end]\n        if e < 10\n            sum\
    \ += e\n        else\n            sum += e - 10\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n<code\
    \ language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<text>\nQuestion 3\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\
    \ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100] and k = 2,\
    \ the function should return 101.", "    if k == 0 \n        return arr[1] \n\
    \    else \n        sum = 0\n        for i in 1:k\n            sum += arr[i]\n\
    \        end\n        return sum\n    end\nend", "    sum = 0\n    for x in arr[k:end]\n\
    \        sum += x\n    end\n    return sum\nend", "    \n    sum = 0\n    for\
    \ e in arr[k:end]\n        sum += e\n    end\n    return sum\nend", "    sum =\
    \ 0\n    for x in arr[k:end]\n        if x % 10 == 0 \n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nLet's test our function:",
  "    sum = 0\n    for e in arr[k:end]\n        sum += e\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</cell>\n<code language=julia-1.5>\n\
    add_elements(arr, 2)\n</cell>\n<code language=julia-1.5>", "    sum = 0\n    for\
    \ n in arr[k:end]\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add_elements([1, 2, 3], 2) == 6\n@assert add_elements([1,\
    \ 2, 3], 3) == 6\n@assert add_elements([1, 2, 3], 4) == 6\n@assert add_elements([1,\
    \ 2, 3, 4], 2) == 10\n@assert add_elements([1, 2, 3, 4], 3) == 10\n@assert add_elements([1,\
    \ 2, 3, 4], 4) == 10\n@assert add_elements([1, 2, 3, 4, 5], 2) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5], 3) == 15\n@assert add_elements([1, 2, 3, 4, 5],\
    \ 4) == 15\n@assert add_elements([1, 2, 3, 4, 5], 5) == 15\n</cell>\n<text>\n\
    Part III: Subsets", "    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n\
    \    end\n    return sum\nend", "    if k == 0 \n        return arr[1] \n    else\
    \ \n        return arr[1] + add_elements(arr[k+1:end], k-1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\
    \ 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\
    \ 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,\
    \ 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,\
    \ 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,\
    \ 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156,\
    \ 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,\
    \ 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,\
    \ 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,\
    \ 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,\
    \ 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236,\
    \ 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,\
    \ 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,\
    \ 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, ", "    sum = 0\n    for i\
    \ = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</cell>\n<code language=julia-1.5>\nadd_elements(arr,\
    \ 2)\n</cell>\n<code language=julia-1.5>", "    if k == 0 \n        return arr[1]\n\
    \    else \n        sum = 0\n        for i in 1:k\n            sum += arr[i]\n\
    \        end\n        return sum\n    end\nend", "    \n    sum = 0\n    for i\
    \ = 1:k\n        sum = sum + arr[i]\n    end\n    return sum\nend", "    \n  \
    \  sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\n\
    end", "    \n    sum = 0\n    for el in arr[k:end]\n        sum += el\n    end\n\
    \    return sum\nend", "    if k == 0 \n        return arr[1] \n    else \n  \
    \      sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<text>\nLet's test our add_elements\
    \ function by verifying it returns the correct result for our test case:", " \
    \   if k == 0 \n        return arr[1] \n    else \n        sum = 0\n        for\
    \ i = 1:k\n            sum = sum + arr[i]\n        end\n        return sum\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\
    \ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199,\
    \ 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215,\
    \ 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,\
    \ 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\
    \ 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263,\
    \ 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, ", "    if k == 0 \n\
    \        return arr[1] \n    else \n        return arr[1] + add_elements(arr[2:k],\
    \ k-1) \nend", "    sum = 0\n    for x in arr[k:end]\n        if x % 10 > 2\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\
    \ 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\
    \ 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,\
    \ 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,\
    \ 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,\
    \ 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156,\
    \ 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,\
    \ 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,\
    \ 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,\
    \ 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,\
    \ 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236,\
    \ 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,\
    \ 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,\
    \ 269, 270, 271, 272, 273, 274, 275, 276, 277, ", "    sum = 0\n    for i in 1:k\n\
    \        sum += arr[i]\n    end\n    return sum\nend", "    sum = 0\n    for i\
    \ = 1:k\n        sum += arr[i]\n    end\n    return sum\nend", "    \n    sum\
    \ = 0\n    \n    for i = 1:k\n        sum += arr[i]\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n<code\
    \ language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<text>\nQuestion 3\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\
    \ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100] and k = 2,\
    \ the function should return 60 (1 + 6 + 9).", "    \n    sum = 0\n    for i =\
    \ 1:k\n        sum = sum + arr[i]\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</cell>\n<code language=julia-1.5>\n\
    add_elements(arr, 2)\n</cell>\n<text>\nQuestion 3\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. For example, given arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] and k = 2, the\
    \ function should return 17.", "    sum = 0\n    for el in arr[k:end]\n      \
    \  sum += el\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\
    </cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for i in 1:k\n        sum += arr[i]\n    end\n    return sum\n\
    end", "    sum = 0\n    for el in arr[k:end]\n        sum += el\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 2) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 3) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 4) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 5) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 6) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 7) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 8) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 9) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 10) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 11) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 12) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 13) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 14) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 15) == 15\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [1,2,3,4,5,6,7,8,9,10] and k = 2, the function should return 15.", "    \n\
    \    sum = 0\n    for e in arr[k:end]\n        if e < 10\n            sum += e\n\
    \        else\n            sum += e % 10 + 10\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n<code\
    \ language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\
    \ 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n<code language=julia-1.5>\n\
    add_elements(arr, 2)\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend", "    \n\
    \    sum = 0\n    for i = 1:k\n        sum = sum + arr[i]\n    end\n    return\
    \ sum\nend", "    if k == 0 \n        return arr[1] \n    else \n        sum =\
    \ 0\n        for i in arr[k:end]\n            sum += i\n        end\n        return\
    \ sum\n    end\nend", "    \n    sum = 0\n    for i = 1:k\n        sum = sum +\
    \ arr[i]\n    end\n    return sum\nend", "    sum = 0\n    for e in arr[k:end]\n\
    \        sum += e\n    end\n    return sum\nend", "    \n    sum = 0\n    for\
    \ el in arr[k:end]\n        sum += el\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,\
    \ 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187,\
    \ 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203,\
    \ 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219,\
    \ 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235,\
    \ 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251,\
    \ 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267,\
    \ 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, ", "    sum\
    \ = 0\n    for x in arr[k+1:end]\n        sum += x\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>", "    sum = 0\n    for e in arr[k:end]\n\
    \        sum += e\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add_elements([1,2,3,4,5,6,7,8,9,10], 2) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 3) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 4) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 5) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 6) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 7) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 8) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 9) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 10) == 15\n</cell>\n\
    <text>\nPart III. Sum all elements with at most two digits from the first k elements\
    \ of arr", "    if k == 0 \n        return arr[1] \n    else \n        return\
    \ arr[1] + add_elements(arr[k+1:end], k-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 4) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 5) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6) == 15\n\
    @assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 8) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 9) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 10) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) ==\
    \ 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 14) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 15) == 15\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] and k = 2,\
    \ the function should return 15.", "    sum = 0\n    for i = 1:k\n        sum\
    \ += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\nLet's test our add_elements\
    \ function by verifying it returns what we expect it to:", "    if k == 0 \n \
    \       return arr[1]\n    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr =\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\
    \ 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\
    \ 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\
    \ 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,\
    \ 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,\
    \ 98, 99, 100]\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n\
    <code language=julia-1.5>", "    sum = 0\n    for el in arr[k:end]\n        sum\
    \ += el\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ add_elements([1,2,3,4,5,6,7,8,9,10], 2) == 12\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 3) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 4) == 21\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 5) == 25\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 6) == 31\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 7) == 35\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 8) == 41\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 9) == 45\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 10) == 51\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. Test it on arr = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 2.", "    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n\
    \    return sum\nend", "    sum = 0\n    for e in arr[k+1:end]\n        sum +=\
    \ e\n    end\n    return sum\nend\n</cell>\n<text>\nLet's test our add_elements\
    \ function by creating a small array and calling our function with different values\
    \ of k. Let's also test it on an empty array.", "    sum = 0\n    for n in arr[k:end]\n\
    \        sum += n\n    end\n    return sum\nend", "    sum = 0\n    for i = 1:k\n\
    \        sum += arr[i]\n    end\n    return sum\nend", "    if k == 0 \n     \
    \   return arr[1]\n    else \n        sum = 0\n        for i in arr[k:end]\n \
    \           sum += i\n        return sum\nend", "    \n    sum = 0\n    \n   \
    \ for i = 1:k\n        sum = sum + arr[i]\n    end\n    \n    return sum\nend",
  "    if k == 0 \n        return arr[1]\n    \n    sum = 0\n    for i = 1:k\n   \
    \     sum += arr[i]\n    end\n    return sum\nend", "    sum = 0\n    for i in\
    \ 1:k\n        sum = sum + arr[i]\n    end\n    return sum\nend", "    \n    if\
    \ k == 0 \n        return arr[1]\n    \n    sum = 0\n    \n    for i in 1:k\n\
    \        sum += arr[i]\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100]\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n\
    </cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    for x in arr[k:end]\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 4) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 5) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6) == 15\n\
    @assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 8) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 9) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 10) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) ==\
    \ 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 14) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 15) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 16) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 17) ==\
    \ 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 19) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 20) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 21) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 22) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 23) ==\
    \ 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 24) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 25) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 26) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 27) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 28) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 29) ==\
    \ 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 30) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 31) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 32) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 33) == ", "    \n    if k == 0 \n        return arr[1]\n  \
    \  \n    sum = 0\n    \n    for i = 2:k\n        sum += arr[i]\n    end\n    \n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</cell>\n<code language=julia-1.5>\n\
    add_elements(arr, 2)\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n\
    \    \n    for element in arr[k:end]\n        sum += element\n    end\n    \n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</cell>\n<code language=julia-1.5>\n\
    add_elements(arr, 3)\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n\
    \    for i = 1:k\n        sum = sum + arr[i]\n    end\n    return sum\nend", " \
    \   sum = 0\n    for e in arr[k:end]\n        sum += e\n    end\n    return sum\n\
    end", "    sum = 0\n    for i in 1:k\n        sum += arr[i]\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n<code\
    \ language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<code language=julia-1.5>",
  "    if k == 0 \n        return arr[1] \n    \n    sum = 0\n    for i in 1:k\n \
    \       sum += arr[i]\n    end\n    return sum\nend", "    if k == 0 \n      \
    \  return arr[1]\n    else \n        sum = 0\n        for i in 1:k\n         \
    \   sum += arr[i]\n        end\n        return sum\n    end\nend", "    sum =\
    \ 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 2) ==\
    \ 12\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 3) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 4) == 21\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 5) == 25\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 6) == 31\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 7) == 35\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 8) == 41\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 9) == 45\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 10) == 49\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 11) == 55\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 12) == 61\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 13) == 67\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 14) == 73\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 15) == 79\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 16) == 85\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 17) == 91\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 18) == 97\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 19) == 103\n@assert\
    \ add_elements([1,2,3,4,5,6,7,8,9,10], 20) == 109\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 21) == 115\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 22) == 121\n@assert\
    \ add_elements([1,2,3,4,5,6,7,8,9,10], 23) == 127\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 24) == 133\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 25) == 139\n@assert\
    \ add_elements([1,2,3,4,5,6,7,8,9,10], 26) == 145\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 27) == 151\n@assert add_elements([1,2,3,4,5,6,7,8,", "    if k == 0 \n     \
    \   return arr[1]\n    \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\narr = [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]\n</cell>\n<code language=julia-1.3>\nadd_elements(arr,\
    \ 2)\n</cell>\n<code language=julia-1.3>", "    if k == 0 \n        return arr[1]\
    \ \n    else \n        sum = 0\n        for i in 1:k\n            sum += arr[i]\n\
    \        end\n        return sum\n    end\nend", "    if k == 0 \n        return\
    \ arr[1] \n    else \n        sum = 0\n        for i in 1:k\n            sum +=\
    \ arr[i]\n        end\n        return sum\n    end\nend", "    sum = 0\n    for\
    \ x in arr[k:end]\n        sum += x\n    end\n    return sum\nend", "    sum =\
    \ 0\n    for e in arr[k:end]\n        sum += e\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n@time add_elements(arr, 10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. Test it on arr = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100] and\
    \ k = 10. Make sure you use the @time macro to time your function.", "    sum\
    \ = 0\n    for e in arr[k+1:end]\n        sum += e\n    end\n    return sum\n\
    end", "    sum = 0\n    for x in arr[k:end]\n        if x < 10\n            sum\
    \ += x\n        else\n            sum += x - 10\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199,\
    \ 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215,\
    \ 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,\
    \ 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\
    \ 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263,\
    \ 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, ", "    if k ==\
    \ 0 \n        return arr[1]\n    \n    sum = 0\n    for i = 1:k\n        sum +=\
    \ arr[i]\n    end\n    return sum\nend", "    \n    sum = 0\n    for i = 1:k\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\nLet's\
    \ test our function by verifying it works on some test cases:", "    if k == 0\
    \ \n        return arr[1]\n    \n    sum = 0\n    for i in 1:k\n        sum +=\
    \ arr[i]\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\
    </cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return\
    \ sum\nend", "    if k == 0 \n        return arr[1] \n    else \n        return\
    \ arr[1] + add_elements(arr[2:k], k-1) \nend", "    \n    sum = 0\n    for i =\
    \ 1:k\n        sum = sum + arr[i]\n    end\n    return sum\nend", "    if k ==\
    \ 0 \n        return arr[1]\n    \n    sum = 0\n    for i = 1:k\n        sum +=\
    \ arr[i]\n    end\n    return sum\nend", "    \n    sum = 0\n    for element in\
    \ arr[k+1:end]\n        sum += element\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20]\n</cell>\n<code language=julia-1.5>\nadd_elements(arr,\
    \ 2)\n</cell>\n<code language=julia-1.5>", "    if k == 0 \n        return arr[1]\n\
    \    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for e in arr[k:end]\n        sum += e\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n\
    <code language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    \n    for i = 1:k\n        sum += arr[i]\n    end\n    \n\
    \    return sum\nend", "    sum = 0\n    for el in arr[k:end]\n        sum +=\
    \ el\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 4) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 5) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6) == 15\n\
    @assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 8) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 9) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 10) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) ==\
    \ 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 14) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 15) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 16) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 17) ==\
    \ 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 19) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 20) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 21) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 22) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 23) ==\
    \ 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 24) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 25) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 26) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 27) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 28) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 29) ==\
    \ 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 30) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 31) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 32) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 33) == 15", "    sum = 0\n    for i in 1:k\n        sum +=\
    \ arr[i]\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ add_elements([1, 2, 3], 2) == 6\n@assert add_elements([1, 2, 3], 3) == 6\n@assert\
    \ add_elements([1, 2, 3], 4) == 6\n@assert add_elements([1, 2, 3], 5) == 6\n@assert\
    \ add_elements([1, 2, 3], 6) == 6\n@assert add_elements([1, 2, 3], 7) == 6\n@assert\
    \ add_elements([1, 2, 3], 8) == 6\n@assert add_elements([1, 2, 3], 9) == 6\n@assert\
    \ add_elements([1, 2, 3], 10) == 6\n@assert add_elements([1, 2, 3], 11) == 6\n\
    @assert add_elements([1, 2, 3], 12) == 6\n@assert add_elements([1, 2, 3], 13)\
    \ == 6\n@assert add_elements([1, 2, 3], 14) == 6\n@assert add_elements([1, 2,\
    \ 3], 15) == 6\n@assert add_elements([1, 2, 3], 16) == 6\n@assert add_elements([1,\
    \ 2, 3], 17) == 6\n@assert add_elements([1, 2, 3], 18) == 6\n@assert add_elements([1,\
    \ 2, 3], 19) == 6\n@assert add_elements([1, 2, 3], 20) == 6\n@assert add_elements([1,\
    \ 2, 3], 21) == 6\n@assert add_elements([1, 2, 3], 22) == 6\n@assert add_elements([1,\
    \ 2, 3], 23) == 6\n@assert add_elements([1, 2, 3], 24) == 6\n@assert add_elements([1,\
    \ 2, 3], 25) == 6\n@assert add_elements([1, 2, 3], 26) == 6\n@assert add_elements([1,\
    \ 2, 3], 27) == 6\n@assert add_elements([1, 2, 3], 28) == 6\n@assert add_elements([1,\
    \ 2, 3], 29) == 6\n@assert add_elements([1, 2, 3], 30) == 6\n@assert add_elements([1,\
    \ 2, 3], 31) == 6\n@assert add_elements([1, 2, 3], 32) == 6\n@assert add_elements([1,\
    \ 2, 3], 33) == 6\n@assert add_elements([1, 2, 3], 34) == 6\n@assert add_elements([1,\
    \ 2, 3], 35) == 6\n@assert add_elements([1, 2, 3], 36) == 6\n@assert add_elements([1,\
    \ 2, 3], 37) == 6\n@assert add_elements([1, 2, 3], 38) == 6\n@assert add_elements([1,\
    \ 2, 3], 39) == 6\n@assert add_elements([1, 2, 3], 40) == 6\n@assert add_elements([1,\
    \ 2, 3], 41) == 6\n@assert add_elements([1, 2, 3], 42) == 6\n@assert add_elements([1,\
    \ 2, 3], 43) == 6\n@assert add_elements([1, 2, 3], 44) == 6\n@assert add_elements([1,\
    \ 2, 3], 45) == ", "    sum = 0\n    for x in arr[k:end]\n        sum += x\n \
    \   end\n    return sum\nend", "    \n    sum = 0\n    for i in 1:k\n        sum\
    \ += arr[i]\n    end\n    return sum\nend", "    sum = 0\n    for el in arr[k:end]\n\
    \        sum += el\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 4) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 5) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6) == 15\n\
    @assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 8) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 9) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 10) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) ==\
    \ 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 14) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 15) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 16) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 17) ==\
    \ 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 19) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 20) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 21) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 22) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 23) ==\
    \ 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 24) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 25) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 26) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 27) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10], 28) == 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 29) ==\
    \ 15\n@assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 30) == 15\n@assert\
    \ add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 31) == 15\n@assert add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], 32) == 15\n@assert add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], 33) == 15", "    \n    sum = 0\n    for element in arr[k+1:end]\n\
    \        sum += element\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add_elements([1,2,3,4,5,6,7,8,9,10], 2) == 12\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 3) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 4) == 18\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 5) == 21\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 6) == 24\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 7) == 27\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 8) == 30\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 9) == 33\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 10) == 36\n</cell>\n\
    <text>\nPart III. Difficulty\nThe sum of all positive integers less than 10000\
    \ is 4,999,999,999.", "    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 2) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 3) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 4) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 5) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 6) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 7) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 8) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 9) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 10) == 15\n</cell>\n<text>\nQuestion 2.2\nWrite a function that returns the\
    \ sum of the elements with at most two digits from the first k elements of arr.\
    \ For example, given arr = [1,2,3,4,5,6,7,8,9,10] and k = 2, the function should\
    \ return 15.", "    if k == 0 \n        return arr[1] \n    else \n        return\
    \ arr[1] + add_elements(arr[k+1:end], k-1) \nend", "    sum = 0\n    for i = 1:k\n\
    \        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add_elements([1,2,3,4,5,6,7,8,9,10], 2) == 12\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 3) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 4) == 21\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 5) == 25\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 6) == 31\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 7) == 35\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 8) == 41\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 9) == 45\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 10) == 49\n</cell>\n\
    <text>\nProblem 7: Sum square difference\nGiven an array of integers arr and an\
    \ integer k, return the sum of the square of elements with at most k digits from\
    \ the first k elements of arr. \nThe sum of square of elements is the sum of the\
    \ squares of the elements \n(for example, sum([1,2,3,4]) is the sum of the squares\
    \ of 1+2+3+4).", "    if k == 0 \n        return arr[1]\n    else \n        sum\
    \ = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n        return\
    \ sum\n    end\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n\
    <code language=julia-1.5>\nadd_elements(arr, 3)\n</cell>\n<code language=julia-1.5>",
  "    if k == 0 \n        return arr[1] \n    else \n        return arr[1] + add_elements(arr[2:k],\
    \ k-1) \nend", "    if k == 0 \n        return arr[1] \n    else \n        sum\
    \ = 0\n        for i in 1:k\n            sum = sum + arr[i]\n        end\n   \
    \     return sum\n    end\nend\n</cell>\n<text>\nLet's test our function by creating\
    \ a vector of length 10 and adding up all the elements with at most two digits\
    \ from the first 5 elements. We should expect to see a sum of 55.", "    sum =\
    \ 0\n    for el in arr[k:end]\n        sum += el\n    end\n    return sum\nend",
  "    \n    sum = 0\n    for i = 1:k\n        sum = sum + arr[i]\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199,\
    \ 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215,\
    \ 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,\
    \ 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\
    \ 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263,\
    \ 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279,\
    \ 280, ", "    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nLet's test our function:", "    sum = 0\n\
    \    for x in arr[k+1:end]\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264",
  "    \n    sum = 0\n    \n    for i = 1:k\n        sum += arr[i]\n    end\n    \n\
    \    return sum\nend", "    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n\
    \    end\n    return sum\nend", "    sum = 0\n    for e in arr[k:end]\n      \
    \  sum += e\n    end\n    return sum\nend", "    sum = 0\n    for i in 1:k\n \
    \       sum += arr[i]\n    end\n    return sum\nend", "    if k == 0 \n      \
    \  return arr[1] \n    else \n        return arr[1] + add_elements(arr[2:k], k-1)\
    \ \nend", "    sum = 0\n    for e in arr[k:end]\n        sum += e\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 2) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 3) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 4) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 5) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 6) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 7) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 8) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 9) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 10) == 15\n</cell>\n<text>\nQuestion 3.2\nWrite a function that returns the\
    \ sum of the elements with at most two digits from the first k elements of arr.\
    \ For example, given arr = [1,2,3,4,5,6,7,8,9,10] and k = 2, the function should\
    \ return 15.", "    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n\
    <code language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<text>\nQuestion 3\n\
    Write a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\
    \ 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\
    \ 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\
    \ 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100] and k =\
    \ 2, the function should return 63.", "    if k == 0 \n        return arr[1] \n\
    \    else \n        sum = 0\n        for i in 1:k\n            sum += arr[i]\n\
    \        end\n        return sum\n    end\nend", "    sum = 0\n    for i in 1:k\n\
    \        sum += arr[i]\n    end\n    return sum\nend", "    sum = 0\n    for e\
    \ in arr[k:end]\n        sum += e\n    end\n    return sum\nend", "    if k ==\
    \ 0 \n        return arr[1] \n    else \n        return arr[1] + add_elements(arr[2:k],\
    \ k-1) \nend", "    \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    \n    for i in 1:k\n        sum += arr[i]\n    end\n    \n    return sum\n\
    end", "    if k == 0 \n        return arr[1]\n    \n    sum = 0\n    for i in\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend", "    sum = 0\n  \
    \  for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend", "    \n\
    \    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\n\
    end", "    \n    sum = 0\n    for i = 1:k\n        sum = sum + arr[i]\n    end\n\
    \    return sum\nend", "    if k == 0 \n        return arr[1] \n    else \n  \
    \      return arr[1] + add_elements(arr[2:k], k-1) \nend", "    if k == 0 \n \
    \       return arr[1] \n    else \n        sum = 0 \n        for i in arr[k:end]\
    \ \n            sum += i \n        return sum + arr[1] \nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100]\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n\
    </cell>\n<code language=julia-1.5>", "    sum = 0\n    for i = 1:k\n        sum\
    \ += arr[i]\n    end\n    return sum\nend", "    if k == 0 \n        return arr[1]\
    \ \n    else \n        sum = 0\n        for i in 1:k\n            sum = sum +\
    \ arr[i]\n        end\n        return sum\n    end\nend", "    \n    if k == 0\
    \ \n        return arr[1]\n    \n    sum = 0\n    for i in 1:k\n        sum +=\
    \ arr[i]\n    end\n    return sum\nend", "    if k == 0 \n        return arr[1]\n\
    \    \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n\
    <code language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<code language=julia-1.5>",
  "    if k == 0 \n        return arr[1]\n    \n    sum = 0\n    for i = 1:k\n   \
    \     sum += arr[i]\n    end\n    return sum\nend", "    if k == 0 \n        return\
    \ arr[1] \n    else \n        sum = 0\n        for i in 1:k\n            sum +=\
    \ arr[i]\n        end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\
    \ 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,\
    \ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,\
    \ 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,\
    \ 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176,\
    \ 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192,\
    \ 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,\
    \ 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,\
    \ 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,\
    \ 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256,\
    \ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,\
    \ 273, 274, 275, 27", "    if k == 0 \n        return arr[1]\n    \n    sum =\
    \ 0\n    \n    for i = 1:k\n        sum += arr[i]\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    </cell>\n<code language=julia-1.5>\nadd_elements(arr, 2)\n</cell>\n<code language=julia-1.5>",
  "    if k == 0 \n        return arr[1] \n    else \n        return arr[1] + add_elements(arr[2:k],\
    \ k-1) \nend", "    sum = 0\n    for i in 1:k\n        sum += arr[i]\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time add_elements(arr,2)\n\
    </cell>\n<text>\nQuestion 3\nWrite a function that returns the sum of the elements\
    \ with at most two digits from the first k elements of arr. For example, given\
    \ arr = [1, 2, 3, 7, 8, 9] and k = 2, the function should return 17.", "    sum\
    \ = 0\n    for e in arr[k+1:end]\n        sum += e\n    end\n    return sum\n\
    end", "    if k == 0 \n        return arr[1] \n    else \n        sum = 0\n  \
    \      for i in 1:k\n            sum += arr[i]\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n</cell>\n<code language=julia-1.5>\n\
    add_elements(arr, 2)\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n\
    \    for i in 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n</cell>\n<code language=julia-1.5>\n\
    add_elements(arr, 2)\n</cell>\n<code language=julia-1.5>", "    sum = 0\n    for\
    \ i in 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 2) == 12\n\
    @assert add_elements([1,2,3,4,5,6,7,8,9,10], 3) == 15\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 4) == 21\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 5) == 25\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 6) == 29\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 7) == 33\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 8) == 37\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 9) == 41\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 10) == 45\n@assert add_elements([1,2,3,4,5,6,7,8,9,10], 11) == 49\n@assert add_elements([1,2,3,4,5,6,7,8,9,10],\
    \ 12) == 53\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [1,2,3,4,5,6,7,8,9,10] and k = 2, the function should return\
    \ 14."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
