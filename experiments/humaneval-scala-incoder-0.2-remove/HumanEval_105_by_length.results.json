{
  "language": "scala",
  "name": "HumanEval_105_by_length",
  "results": [
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999988).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998877).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999887766).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998877665544).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999988776655443).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998877665544332).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998877665544332211).sorted\n        val oneHundredThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppvyivhii.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppvyivhii.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999998877\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppvyivhii.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999998877665544\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppvyivhii.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999988776655443\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandTho",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).map(_ => \"One\")\n        val twos = arr.filter(_ <= 99).map(_ => \"Two\")\n        val threes = arr.filter(_ <= 999).map(_ => \"Three\")\n        val fours = arr.filter(_ <= 9999).map(_ => \"Four\")\n        val fives = arr.filter(_ <= 99999).map(_ => \"Five\")\n        val sixes = arr.filter(_ <= 999999).map(_ => \"Six\")\n        val sevens = arr.filter(_ <= 9999999).map(_ => \"Seven\")\n        val eights = arr.filter(_ <= 999999999).map(_ => \"Eight\")\n        val nines = arr.filter(_ <= 99999999999).map(_ => \"Nine\")\n        val result = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n        val reversed = result.reverse\n        reversed.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else if (x < 10000) \"Four\" else if (x < 100000) \"Five\" else if (x < 1000000) \"Six\" else if (x < 10000000) \"Seven\" else \"Eight\" else if (x < 100000000) \"Nine\" else \"Zero\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_f5nt71q.scala:22:222 --------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        reversed.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x < \u001b[31m10\u001b[0m) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100\u001b[0m) \u001b[31m\"Two\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m1000\u001b[0m) \u001b[31m\"Three\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m10000\u001b[0m) \u001b[31m\"Four\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100000\u001b[0m) \u001b[31m\"Five\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m1000000\u001b[0m) \u001b[31m\"Six\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m10000000\u001b[0m) \u001b[31m\"Seven\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Eight\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100000000\u001b[0m) \u001b[31m\"Nine\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Zero\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          ')' expected, but 'else' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_f5nt71q.scala:19:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnines\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).map(_ => \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    number too large\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_f5nt71q.scala:20:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ - 1).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ - 10).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ - 100).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ - 1000).reverse\n        val tenThousands = arr.filter(_ <= 999999).sortBy(_ - 10000).reverse\n        val oneThousands = arr.filter(_ <= 9999999).sortBy(_ - 100000).reverse\n        val oneHundreds = arr.filter(_ <= 999999999).sortBy(_ - 1000000).reverse\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sortBy(_ - 10000000).reverse\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999999).sortBy(_ - 10000000)\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).sortBy(_ - 100000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999).sortBy(_ - 1000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sortBy(_ - 1000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999).sortBy(_ - 1000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).sortBy(_ - 1000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999).sortBy(_ - 1000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sortBy(_ - 1000000000)\n        val oneThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps14i56ax.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmps14i56ax.scala:18:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sortBy(_ - \u001b[31m10000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmps14i56ax.scala:19:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sortBy(_ - \u001b[31m10000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmps14i56ax.scala:20:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sortBy(_ - \u001b[31m100000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmps14i56ax.scala:21:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmps14i56ax.scala:22:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 99999).sorted\n        val oneThousands = arr.filter(_ <= 999999).sorted\n        val oneHundreds = arr.filter(_ <= 9999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999).sorted\n        val oneHundredThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneHundredThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7g2ndtzj.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7g2ndtzj.scala:19:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7g2ndtzj.scala:21:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7g2ndtzj.scala:22:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7g2ndtzj.scala:23:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7g2ndtzj.scala:24:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "stdout": "",
      "timestamp": 1660010269
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9 && x >= 1)\n        val tens = arr.filter(x => x <= 99 && x >= 10)\n        val hundreds = arr.filter(x => x <= 999 && x >= 100)\n        val thousands = arr.filter(x => x <= 9999 && x >= 1000)\n        val tenThousands = arr.filter(x => x <= 999999 && x >= 10000)\n        val oneThousands = arr.filter(x => x <= 9999999 && x >= 100000)\n        val oneHundreds = arr.filter(x => x <= 999999999 && x >= 1000000)\n        val oneThousandThousands = arr.filter(x => x <= 99999999999 && x >= 10000000)\n        val oneThousandThousandHundreds = arr.filter(x => x <= 999999999999999 && x >= 100000000)\n        val oneThousandThousandHundredThousands = arr.filter(x => x <= 9999999999999999999 && x >= 1000000000)\n        val oneThousandThousandHundredThousandHundreds = arr.filter(x => x <= 99999999999999999999999 && x >= 10000000000)\n        val oneThousandThousandHundredThousandHundredThousands = arr.filter(x => x <= 999999999999999999999999999 && x >= 100000000000)\n        val oneThousandThousandHundredThousandHundredThousandHundreds = arr.filter(x => x <= 9999999999999999999999999999999 && x >= 1000000000000)\n        val oneThousandThousandHundredThousandHundredThousandHundredThousands = arr.filter(x => x <= 99999999999999999999999999999999999 && x >= 10000000000000)\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(x => x <= 999999999999999999999999999999999999999 && x >= 100000000000000)\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundredThousands = arr.filter(x => x <= 9999999999999999999999999999999999999999999 && x >= 1000000000000000)\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds = \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpf940cne4.scala:27:101 --------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf940cne4.scala:18:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999\u001b[0m && x >= \u001b[31m10000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf940cne4.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m999999999999999\u001b[0m && x >= \u001b[31m100000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf940cne4.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m9999999999999999999\u001b[0m && x >= \u001b[31m1000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf940cne4.scala:21:78 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundred",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedWithNames = onesReversed.map(x => s\"${x}\".toUpperCase)\n        val tensReversedWithNames = tensReversed.map(x => s\"${x}\".toUpperCase)\n        val tensReversedWithNamesAndOnes = tensReversedWithNames.zip(onesReversedWithNames)\n        val tensReversedWithNamesAndOnesReversed = tensReversedWithNamesAndOnes.reverse\n        val tensReversedWithNamesAndOnesReversedWithNames = tensReversedWithNamesAndOnesReversed.map(x => s\"${x._1}${x._2}\".toUpperCase)\n        val tensReversedWithNamesAndOnesReversedWithNamesAndTens = tensReversedWithNamesAndOnesReversedWithNames.zip(tensReversedWithNames)\n        val tensReversedWithNamesAndOnesReversedWithNamesAndTensReversed = tensReversedWithNamesAndOnesReversedWithNamesAndTens.reverse\n        val tensReversedWithNamesAndOnesReversedWithNamesAndTensReversedWithNames = tensReversedWithNamesAndOnesReversedWithNamesAndTensReversed.map(x => s\"${x._1}${x._2}${x._3}\".toUpperCase)\n        val tensReversedWithNamesAndOnesReversedWithNamesAndTensReversedWithNamesAndOnes = tensReversedWithNamesAndOnesReversedWithNamesAndTensReversedWithNames.zip(onesReversedWithNames)\n        val tensReversedWithNamesAndOnesReversedWithNamesAndTensReversedWithNamesAndOnesReversed = tensReversedWithNamesAndOnesReversedWithNamesAndTensReversedWithNamesAndOnes.reverse\n        val tensReversedWithNamesAndOnesReversedWithNamesAndTensReversedWithNamesAndOnesReversedWithNames = tensReversedWithNamesAndOnesReversedWithNamesAndTensReversedWithNamesAndOnesReversed.map(x => s\"${x._1}${x._2}${x._3}${\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpy_rdsjx2.scala:26:5 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     unclosed string literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy_rdsjx2.scala:36:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy_rdsjx2.scala:22:174 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedWithNamesAndOnesReversedWithNamesAndTensReversedWithNames\u001b[0m = tensReversedWithNamesAndOnesReversedWithNamesAndTensReversed.map(\u001b[36mx\u001b[0m => \u001b[31ms\"\u001b[0m${x._1}${x._2}${x._3}\u001b[31m\"\u001b[0m.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value _3 is not a member of (String, String) - did you mean x._1?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy_rdsjx2.scala:25:222 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedWithNamesAndOnesReversedWithNamesAndTensReversedWithNamesAndOnesReversedWithNames\u001b[0m = tensReversedWithNamesAndOnesReversedWithNamesAndTensReversedWithNamesAndOnesReversed.map(\u001b[36mx\u001b[0m => \u001b[31ms\"\u001b[0m${x._1}${x._2}${x._3}${\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value _3 is not a member of (String, String) - did you mean x._1?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy_rdsjx2.scala:35:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ - 1).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ - 10).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ - 100).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ - 1000).reverse\n        val tenThousands = arr.filter(_ <= 999999).sortBy(_ - 10000).reverse\n        val oneThousands = arr.filter(_ <= 9999999).sortBy(_ - 100000).reverse\n        val oneHundreds = arr.filter(_ <= 999999999).sortBy(_ - 1000000).reverse\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sortBy(_ - 10000000).reverse\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999999).sortBy(_ - 100000000).reverse\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).sortBy(_ - 1000000000).reverse\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999).sortBy(_ - 10000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sortBy(_ - 100000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999).sortBy(_ - 1000000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).sortBy(_ - 10000000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999).sortBy(_ - 100000000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sortBy(_ - 1000000000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps32katv4.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps32katv4.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps32katv4.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).sortBy(_ - \u001b[31m10000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps32katv4.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999\u001b[0m).sortBy(_ - \u001b[31m100000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010269
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 19).toList\n        val hundreds = arr.filter(x => x >= 20 && x <= 99).toList\n        val thousands = arr.filter(x => x >= 100 && x <= 999).toList\n        val hundredsReversed = hundreds.reverse\n        val thousandsReversed = thousands.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n        val hundredsReversedString = hundredsReversed.map(x => Three(x))\n        val thousandsReversedString = thousandsReversed.map(x => Four(x))\n        val hundredsReversedStringReversed = hundredsReversedString.reverse\n        val thousandsReversedStringReversed = thousandsReversedString.reverse\n        val tensReversedStringReversed = tensReversedString.reverse\n        val onesReversedStringReversed = onesReversedString.reverse\n        val onesReversedStringReversedString = onesReversedStringReversed.map(x => Five(x))\n        val tensReversedStringReversedString = tensReversedStringReversed.map(x => Six(x))\n        val hundredsReversedStringReversedString = hundredsReversedStringReversed.map(x => Seven(x))\n        val thousandsReversedStringReversedString = thousandsReversedStringReversed.map(x => Eight(x))\n        val hundredsReversedStringReversedStringReversed = hundredsReversedStringReversedString.reverse\n        val thousandsReversedStringReversedStringReversed = thousandsReversedStringReversedStringReversed.reverse\n        val tensReversedStringReversedStringReversed = tensReversedStringReversedStringReversed.reverse\n        val onesReversedStringReversedStringReversed = onesReversedStringReversedStringReversed.reverse\n        val onesReversedStringReversedStringReversedString = onesReversedStringReversedStringReversedString.map(x => Nine(x))\n        val tensReversedStringReversedStringReversedString = tensReversedStringReversedStringReversedString.map(x => Ten(x))\n        val hundreds\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxuirvjce.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxuirvjce.scala:19:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxuirvjce.scala:20:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxuirvjce.scala:21:63 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversedString\u001b[0m = hundredsReversed.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxuirvjce.scala:22:65 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandsReversedString\u001b[0m = thousandsReversed.map(\u001b[36mx\u001b[0m => Four(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: Four\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-ex",
      "stdout": "",
      "timestamp": 1660010269
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).sortBy(x => x).reverse\n        val tens = arr.filter(x => x >= 10 && x <= 99).sortBy(x => x).reverse\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).sortBy(x => x).reverse\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).sortBy(x => x).reverse\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).sortBy(x => x).reverse\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).sortBy(x => x).reverse\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).sortBy(x => x).reverse\n        val oneThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).sortBy(x => x).reverse\n        val oneHundredThousands = arr.filter(x => x >= 100000000000 && x <= 999999999999).sortBy(x => x).reverse\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).sortBy(x => x).reverse\n        val oneHundredThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 999999999999999999).sortBy(x => x).reverse\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 999999999999999999999).sortBy(x => x).reverse\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999).sortBy(x => x).reverse\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999).sortBy(x => x).reverse\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999).sortBy(x => x).reverse\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999).sortBy(x => x).reverse\n        val oneHundredThousandThousandThousandThousandThousands = \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpxmpl8p0s.scala:27:65 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxmpl8p0s.scala:18:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).sortBy(\u001b[36mx\u001b[0m => x).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxmpl8p0s.scala:19:55 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).sortBy(\u001b[36mx\u001b[0m => x).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxmpl8p0s.scala:19:76 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).sortBy(\u001b[36mx\u001b[0m => x).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxmpl8p0s.scala:20:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x >= 10 && x <= 19).map(x => s\"Two\")\n        val threes = arr.filter(x => x >= 20 && x <= 29).map(x => s\"Three\")\n        val fours = arr.filter(x => x >= 30 && x <= 39).map(x => s\"Four\")\n        val fives = arr.filter(x => x >= 40 && x <= 49).map(x => s\"Five\")\n        val sixes = arr.filter(x => x >= 50 && x <= 59).map(x => s\"Six\")\n        val sevens = arr.filter(x => x >= 60 && x <= 69).map(x => s\"Seven\")\n        val eights = arr.filter(x => x >= 70 && x <= 89).map(x => s\"Eight\")\n        val nines = arr.filter(x => x >= 90 && x <= 999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmeiw9y4v.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 9999999998).sorted\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999998).sorted\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999997).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999996).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999995).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999994).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999993).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999992).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999991).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999990).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999998).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5a453610.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5a453610.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999995\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5a453610.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999994\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5a453610.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999993\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000000000 && x <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000000000 && x <= 9999999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpbkf8g3v_.scala:27:106 --------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbkf8g3v_.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m999999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbkf8g3v_.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same ",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val eleven = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val twelve = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val thirteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fourteen = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val fifteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbvz2aqx_.scala:25:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \"Five\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbvz2aqx_.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbvz2aqx_.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbvz2aqx_.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Fivedef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010269
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val reversed = ones + tens + hundreds + thousands.reverse\n        reversed.map(_.replaceAll(\"[0-9]\", \"One\"))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3f7mplbw.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds + thousands.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(x => s\"${x}\").mkString(\"\")\n        val tensReversedStringList = tensReversedString.split(\",\")\n        val tensReversedStringListReversed = tensReversedStringList.reverse\n        val tensReversedStringListReversedString = tensReversedStringListReversed.map(x => s\"${x}\").mkString(\"\")\n        val tensReversedStringListReversedStringList = tensReversedStringListReversedString.split(\",\")\n        val tensReversedStringListReversedStringListReversed = tensReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedString = tensReversedStringListReversedStringListReversed.map(x => s\"${x}\").mkString(\"\")\n        val tensReversedStringListReversedStringListReversedStringList = tensReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringListReversed.map(x => s\"${x}\").mkString(\"\")\n        val tensReversedStringListReversedStringListReversedStringListReversedString = tensReversedStringListReversedStringListReversedStringListReversedString.split(\",\")\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringListReversedStringListReversed.map(x => s\"${x}\").mkString(\"\")\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed.map(x => s\"${x}\").mkString(\"\")\n        val tensReversedStringListReversedStringListReversedStringList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpoqtamzht.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpoqtamzht.scala:21:73 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListReversedStringListReversedStringList\u001b[0m = tensReversedStringListReversedStringListReversedStringList.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringListReversedStringListReversedStringList\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpoqtamzht.scala:22:81 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListReversedStringListReversedStringListReversed\u001b[0m = tensReversedStringListReversedStringListReversedStringListReversed.map(\u001b[36mx\u001b[0m => \u001b[31ms\"\u001b[0m${x}\u001b[31m\"\u001b[0m).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringListReversedStringListReversedStringListReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpoqtamzht.scala:23:87 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListReversedStringListReversedStringListReversedString\u001b[0m = tensReversedStringListReversedStringListReversedStringListReversedString.split(\u001b[31m\",\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringListReversedStringListReversedStringListReversedString\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).sorted\n        val tens = arr.filter(x => x >= 10 && x <= 99).sorted\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).sorted\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).sorted\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).sorted\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).sorted\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 9999999).sorted\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x <= 99999999).sorted\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x <= 999999999).sorted\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).sorted\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x <= 999999999999).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 9999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 9999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 99999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 999999999999999999999999).\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpn17ro26h.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpn17ro26h.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x <= \u001b[31m99999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpn17ro26h.scala:20:90 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpn17ro26h.scala:21:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpn17ro26h.scala:21:99 -----------------------------------------",
      "stdout": "",
      "timestamp": 1660010269
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => onesReversedStringMap.get(x))\n        val tensReversedString = tensReversed.map(x => tensReversedStringMap.get(x))\n        val result = onesReversedString.zip(tensReversedString).map(x => x._1 + \" \" + x._2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwrtkjkas.scala:15:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => onesReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: onesReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwrtkjkas.scala:16:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => tensReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: tensReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwrtkjkas.scala:17:78 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = onesReversedString.zip(tensReversedString).map(\u001b[36mx\u001b[0m => x._1 + \u001b[31m\" \"\u001b[0m + x._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Byte.byte2double\n\u001b[31m   |\u001b[0m  import Byte.byte2float\n\u001b[31m   |\u001b[0m  import Byte.byte2int\n\u001b[31m   |\u001b[0m  import Byte.byte2long\n\u001b[31m   |\u001b[0m  import Byte.byte2short\n\u001b[31m   |\u001b[0m  import Char.char2double\n\u001b[31m   |\u001b[0m  import Char.char2float\n\u001b[31m   |\u001b[0m  import Char.char2int\n\u001b[31m   |\u001b[0m  import Char.char2long\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twenty = List(\"Twenty\", \"Twentyone\", \"Twentytwo\", \"Twentythree\", \"Twentyfour\", \"Twentyfive\", \"Twentysix\", \"Twentyseven\", \"Twentyeight\", \"Twentynine\")\n        val hundred = List(\"Hundred\", \"Hundredone\", \"Hundredtwo\", \"Hundredthree\", \"Hundredfour\", \"Hundredfive\", \"Hundredsix\", \"Hundredseven\", \"Hundredeight\", \"Hundrednine\")\n        val thousand = List(\"Thousand\", \"Thousandone\", \"Thousandtwo\", \"Thousandthree\", \"Thousandfour\", \"Thousandfive\", \"Thousandsix\", \"Thousandseven\", \"Thousandeight\", \"Thousandnine\")\n        val tenThousand = List(\"TenThousand\", \"TenThousandone\", \"TenThousandtwo\", \"TenThousandthree\", \"TenThousandfour\", \"TenThousandfive\", \"TenThousandsix\", \"TenThousandseven\", \"TenThousandeight\", \"TenThousandnine\")\n        val hundredThousand = List(\"HundredThousand\", \"HundredThousandone\", \"HundredThousandtwo\", \"HundredThousandthree\", \"HundredThousandfour\", \"HundredThousandfive\", \"HundredThousandsix\", \"HundredThousandseven\", \"HundredThousandeight\", \"HundredThousandnine\")\n        val million = List(\"Million\", \"Millionone\", \"Milliontwo\", \"Millionthree\", \"Millionfour\", \"Millionfive\", \"Millionsix\", \"Millionseven\", \"Millioneight\", \"Millionnine\")\n        val billion = List(\"Billion\", \"Billionone\", \"Billiontwo\", \"Billionthree\", \"Billionfour\", \"Billionfive\", \"Billionsix\", \"Billionseven\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp0kiix16i.scala:19:142 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbillion\u001b[0m = List(\u001b[31m\"Billion\"\u001b[0m, \u001b[31m\"Billionone\"\u001b[0m, \u001b[31m\"Billiontwo\"\u001b[0m, \u001b[31m\"Billionthree\"\u001b[0m, \u001b[31m\"Billionfour\"\u001b[0m, \u001b[31m\"Billionfive\"\u001b[0m, \u001b[31m\"Billionsix\"\u001b[0m, \u001b[31m\"Billionseven\"\u001b[0m, \"\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0kiix16i.scala:20:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9)\n        val tens = arr.filter(x => x >= 10 && x <= 99)\n        val hundreds = arr.filter(x => x >= 100 && x <= 999)\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999)\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999)\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999)\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999999999)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000001 && x <= 999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000101 && x <= 9999999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000001001 && x <= 99999999999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000100101 && x <= 999999999999999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000001001001 && x <= 9999999999999999999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptee4i7o5.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmptee4i7o5.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmptee4i7o5.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmptee4i7o5.scala:19:85 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                     ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmptee4i7o5.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x <= \u001b[31m9999999999999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmptee4i7o5.",
      "stdout": "",
      "timestamp": 1660010269
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6wf3mjef.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6wf3mjef.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6wf3mjef.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6wf3mjef.scala:19:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6wf3mjef.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6wf3",
      "stdout": "",
      "timestamp": 1660010268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eleven = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twelve = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val thirteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val fourteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fifteen = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpv0_lyj7_.scala:25:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"Twenty\"\u001b[0m, \u001b[31m\"Thirty\"\u001b[0m, \u001b[31m\"Forty\"\u001b[0m, \u001b[31m\"Fifty\"\u001b[0m, \"Sixty\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpv0_lyj7_.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv0_lyj7_.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv0_lyj7_.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Sixtydef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x >= 10 && x <= 19).map(x => s\"Two\")\n        val threes = arr.filter(x => x >= 20 && x <= 29).map(x => s\"Three\")\n        val fours = arr.filter(x => x >= 30 && x <= 39).map(x => s\"Four\")\n        val fives = arr.filter(x => x >= 40 && x <= 49).map(x => s\"Five\")\n        val sixes = arr.filter(x => x >= 50 && x <= 59).map(x => s\"Six\")\n        val sevens = arr.filter(x => x >= 60 && x <= 69).map(x => s\"Seven\")\n        val eights = arr.filter(x => x >= 70 && x <= 89).map(x => s\"Eight\")\n        val nines = arr.filter(x => x >= 90 && x <= 999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmeiw9y4v.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eleven = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twelve = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val thirteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val fourteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fifteen = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpv0_lyj7_.scala:25:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"Twenty\"\u001b[0m, \u001b[31m\"Thirty\"\u001b[0m, \u001b[31m\"Forty\"\u001b[0m, \u001b[31m\"Fifty\"\u001b[0m, \"Sixty\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpv0_lyj7_.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv0_lyj7_.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv0_lyj7_.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Sixtydef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val eleven = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val twelve = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val thirteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fourteen = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val fifteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbvz2aqx_.scala:25:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \"Five\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbvz2aqx_.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbvz2aqx_.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbvz2aqx_.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Fivedef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010269
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).map(_ => \"One\")\n        val twos = arr.filter(_ <= 99).map(_ => \"Two\")\n        val threes = arr.filter(_ <= 999).map(_ => \"Three\")\n        val fours = arr.filter(_ <= 9999).map(_ => \"Four\")\n        val fives = arr.filter(_ <= 99999).map(_ => \"Five\")\n        val sixes = arr.filter(_ <= 999999).map(_ => \"Six\")\n        val sevens = arr.filter(_ <= 9999999).map(_ => \"Seven\")\n        val eights = arr.filter(_ <= 999999999).map(_ => \"Eight\")\n        val nines = arr.filter(_ <= 99999999999).map(_ => \"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpvh2oe15h.scala:19:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnines\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).map(_ => \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    number too large\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvh2oe15h.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ - 1).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ - 10).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ - 100).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ - 1000).reverse\n        val tenThousands = arr.filter(_ <= 999999).sortBy(_ - 10000).reverse\n        val oneThousands = arr.filter(_ <= 9999999).sortBy(_ - 100000).reverse\n        val oneHundreds = arr.filter(_ <= 999999999).sortBy(_ - 1000000).reverse\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sortBy(_ - 10000000).reverse\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sortBy(_ - 10000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sortBy(_ - 100000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999).sortBy(_ - 1000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).sortBy(_ - 10000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999).sortBy(_ - 100000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999999).sortBy(_ - 1000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999).sortBy(_ - 10000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999999).sortBy(_ - 100000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999).sortBy(_ - 1000000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sortBy(_ - 10000000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6vnzve_k.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6vnzve_k.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6vnzve_k.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sortBy(_ - \u001b[31m10000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6vnzve_k.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999\u001b[0m).sortBy(_ - \u001b[31m100000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of topleve",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ % 10).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ % 100).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ % 1000).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ % 10000).reverse\n        val tenThousands = arr.filter(_ <= 99999).sortBy(_ % 100000).reverse\n        val oneThousands = arr.filter(_ <= 999999).sortBy(_ % 1000000).reverse\n        val oneHundreds = arr.filter(_ <= 9999999).sortBy(_ % 10000000).reverse\n        val oneThousandHundreds = arr.filter(_ <= 999999999).sortBy(_ % 100000000).reverse\n        val oneThousandThousandHundreds = arr.filter(_ <= 99999999999).sortBy(_ % 1000000000).reverse\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).sortBy(_ % 10000000000).reverse\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sortBy(_ % 100000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).sortBy(_ % 1000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sortBy(_ % 10000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).sortBy(_ % 100000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).sortBy(_ % 1000000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).sortBy(_ % 10000000000000000).\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdtykqyks.scala:27:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdtykqyks.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999999999999999\u001b[0m).sortBy(_ % \u001b[31m100000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdtykqyks.scala:19:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sortBy(_ % \u001b[31m1000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdtykqyks.scala:20:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sortBy(_ % \u001b[31m10000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdtykqyks.scala:20:94 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = a",
      "stdout": "",
      "timestamp": 1660010281
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ * 10).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ * 100).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ * 1000).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ * 10000).reverse\n        val tenThousands = arr.filter(_ <= 99999).sortBy(_ * 100000).reverse\n        val oneThousands = arr.filter(_ <= 999999).sortBy(_ * 1000000).reverse\n        val oneHundreds = arr.filter(_ <= 9999999).sortBy(_ * 10000000).reverse\n        val oneThousandThousands = arr.filter(_ <= 999999999).sortBy(_ * 100000000).reverse\n        val oneHundredThousands = arr.filter(_ <= 99999999999).sortBy(_ * 1000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sortBy(_ * 10000000000).reverse\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999).sortBy(_ * 100000000000).reverse\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).sortBy(_ * 1000000000000).reverse\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).sortBy(_ * 10000000000000).reverse\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sortBy(_ * 100000000000000).reverse\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999).sortBy(_ * 1000000000000000).reverse\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999).sortBy(_ * 10000000000000000).reverse\n        val oneHundredThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp756ueypn.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp756ueypn.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999999999999999\u001b[0m).sortBy(_ * \u001b[31m100000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp756ueypn.scala:19:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sortBy(_ * \u001b[31m1000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp756ueypn.scala:20:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sortBy(_ * \u001b[31m10000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp756ueypn.scala:20:86 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sortBy(_ * \u001b[31m10000000000\u001b[0m).reverse\n\u001b[31m\u001b",
      "stdout": "",
      "timestamp": 1660010281
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val hundredsAndThousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tensAndHundreds = arr.filter(x => x >= 10000 && x < 100000)\n        val tensAndThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val onesAndTens = arr.filter(x => x >= 1000000 && x < 10000000)\n        val onesAndHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val onesAndThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val onesAndHundredsAndThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val onesAndThousandsAndHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val onesAndThousandsAndHundredsAndThousands = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val onesAndThousandsAndHundredsAndThousandsAndOnes = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val onesAndThousandsAndHundredsAndThousandsAndOnesAndTens = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val onesAndThousandsAndHundredsAndThousandsAndOnesAndTensAndHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val onesAndThousandsAndHundredsAndThousandsAndOnesAndTensAndHundredsAndThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val onesAndThousandsAndHundredsAndThousandsAndOnesAndTensAndHundredsAndThousandsAndOnes = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val onesAndThousandsAndHundredsAndThousandsAndOnesAndTensAndHundredsAndThousandsAndOnesAndTens = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val onesAndThousandsAndHundredsAndThousandsAndOnesAndTensAndHundredsAnd\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpycswv19z.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpycswv19z.scala:21:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundredsAndThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpycswv19z.scala:22:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThousandsAndHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpycswv19z.scala:22:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThousandsAndHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpycswv19z.scala:23:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThousandsAndHundredsAndThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpycswv19z.scala:23:95 -",
      "stdout": "",
      "timestamp": 1660010280
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).sorted\n        val tens = arr.filter(x => x >= 10 && x <= 99).sorted\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).sorted\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).sorted\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).sorted\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).sorted\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).sorted\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999999999).sorted\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000000 && x <= 999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000000 && x <= 9999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000000000 && x <= 99999999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000000000000 && x <= 999999999999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000000000000 && x <= 9999999999999999999999999999999999999999999).sorted\n        val oneThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp4blb8ug.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp4blb8ug.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp4blb8ug.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp4blb8ug.scala:19:85 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                     ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp4blb8ug.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x <= \u001b[31m9999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31",
      "stdout": "",
      "timestamp": 1660010282
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x <= 99).map(x => s\"Two\")\n        val threes = arr.filter(x => x <= 999).map(x => s\"Three\")\n        val fours = arr.filter(x => x <= 9999).map(x => s\"Four\")\n        val fives = arr.filter(x => x <= 99999).map(x => s\"Five\")\n        val sixes = arr.filter(x => x <= 999999).map(x => s\"Six\")\n        val sevens = arr.filter(x => x <= 9999999).map(x => s\"Seven\")\n        val eights = arr.filter(x => x <= 999999999).map(x => s\"Eight\")\n        val nines = arr.filter(x => x <= 99999999999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmppstlvj3j.scala:19:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnines\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         number too large\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppstlvj3j.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010281
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val twos = arr.filter(x => x % 10 == 2)\n        val threes = arr.filter(x => x % 10 == 3)\n        val fours = arr.filter(x => x % 10 == 4)\n        val fives = arr.filter(x => x % 10 == 5)\n        val sixes = arr.filter(x => x % 10 == 6)\n        val sevens = arr.filter(x => x % 10 == 7)\n        val eights = arr.filter(x => x % 10 == 8)\n        val nines = arr.filter(x => x % 10 == 9)\n        val onesAndTwos = ones + twos\n        val onesAndThrees = ones + threes\n        val onesAndFours = ones + fours\n        val onesAndFives = ones + fives\n        val onesAndSixes = ones + sixes\n        val onesAndSevens = ones + sevens\n        val onesAndEights = ones + eights\n        val onesAndNines = ones + nines\n        val twosAndThrees = twos + threes\n        val twosAndFours = twos + fours\n        val twosAndFives = twos + fives\n        val twosAndSixes = twos + sixes\n        val twosAndSevens = twos + sevens\n        val twosAndEights = twos + eights\n        val twosAndNines = twos + nines\n        val threesAndFours = threes + fours\n        val threesAndFives = threes + fives\n        val threesAndSixes = threes + sixes\n        val threesAndSevens = threes + sevens\n        val threesAndEights = threes + eights\n        val threesAndNines = threes + nines\n        val foursAndFives = fours + fives\n        val foursAndSixes = fours + sixes\n        val foursAndSevens = fours + sevens\n        val foursAndEights = fours + eights\n        val foursAndNines = fours + nines\n        val fivesAndSixes = fives + sixes\n        val fivesAndSevens = fives + sevens\n        val fivesAndEights = fives + eights\n        val fivesAndNines = fives + nines\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7qb33lc.scala:20:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwos\u001b[0m = ones + twos\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7qb33lc.scala:21:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThrees\u001b[0m = ones + threes\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7qb33lc.scala:22:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndFours\u001b[0m = ones + fours\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7qb33lc.scala:23:32 -----------------------",
      "stdout": "",
      "timestamp": 1660010286
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 99999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000000 && x <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000000 && x <= 9999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu0jwhp43.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu0jwhp43.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu0jwhp43.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m9999999999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu0jwhp43.scala:18:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b",
      "stdout": "",
      "timestamp": 1660010281
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ >= 10 && _ <= 99).sorted\n        val hundreds = arr.filter(_ >= 100).sorted\n        val reversed = ones + tens + hundreds.reverse\n        val result = reversed.map(x => if (x == 0) \"Zero\" else if (x == 1) \"One\" else if (x == 2) \"Two\" else if (x == 3) \"Three\" else if (x == 4) \"Four\" else if (x == 5) \"Five\" else if (x == 6) \"Six\" else if (x == 7) \"Seven\" else if (x == 8) \"Eight\" else if (x == 9) \"Nine\" else x.toString)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp15dxcc_q.scala:12:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(_ >= \u001b[31m10\u001b[0m && _ <= \u001b[31m99\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp15dxcc_q.scala:14:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010282
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).map(i => s\"One\")\n        val tens = arr.filter(_ <= 99).map(i => s\"Ten\")\n        val hundreds = arr.filter(_ <= 999).map(i => s\"Hundred\")\n        val thousands = arr.filter(_ <= 9999).map(i => s\"Thousand\")\n        val tenThousands = arr.filter(_ <= 999999).map(i => s\"TenThousand\")\n        val oneThousands = arr.filter(_ <= 9999999).map(i => s\"OneThousand\")\n        val tenMillions = arr.filter(_ <= 999999999).map(i => s\"TenMillion\")\n        val oneMillions = arr.filter(_ <= 99999999999).map(i => s\"OneMillion\")\n        val tenBillions = arr.filter(_ <= 999999999999).map(i => s\"TenBillion\")\n        val oneBillions = arr.filter(_ <= 999999999999999).map(i => s\"OneBillion\")\n        val tenTrillions = arr.filter(_ <= 999999999999999999).map(i => s\"TenTrillion\")\n        val oneTrillions = arr.filter(_ <= 999999999999999999999).map(i => s\"OneTrillion\")\n        val tenQuadrillions = arr.filter(_ <= 9999999999999999999998).map(i => s\"TenQuadrillion\")\n        val oneQuadrillions = arr.filter(_ <= 99999999999999999999987).map(i => s\"OneQuadrillion\")\n        val tenQuintillions = arr.filter(_ <= 999999999999999999999876).map(i => s\"TenQuintillion\")\n        val oneQuintillions = arr.filter(_ <= 99999999999999999999987654).map(i => s\"OneQuintillion\")\n        val tenSextillions = arr.filter(_ <= 9999999999999999999998765432).map(i => s\"TenSextillion\")\n        val oneSextillions = arr.filter(_ <= 99999999999999999999987654321).map(i => s\"OneSextillion\")\n        val tenSeptillions = arr.filter(_ <= 9999999999999999999998765432109).map(i => s\"TenSeptillion\")\n        val oneSeptillions = arr.filter(_ <= 999999999999999999999876543210).map(i => s\"\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmperz8z87g.scala:30:87 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneSeptillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999876543210\u001b[0m).map(\u001b[36mi\u001b[0m => \u001b[31ms\u001b[0m\"\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmperz8z87g.scala:18:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneMillions\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).map(\u001b[36mi\u001b[0m => \u001b[31ms\"OneMillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmperz8z87g.scala:19:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenBillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).map(\u001b[36mi\u001b[0m => \u001b[31ms\"TenBillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmperz8z87g.scala:20:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).map(\u001b[36mi\u001b[0m => \u001b[31ms\"OneBillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmperz8z87g.scala:21:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenTrillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999\u001b[0m).map(\u001b[36mi\u001b[0m => \u001b[31ms\"TenTrillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmperz8z87g.scal",
      "stdout": "",
      "timestamp": 1660010282
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).map(x => s\"One\")\n        val tens = arr.filter(_ <= 99).map(x => s\"Ten\")\n        val hundreds = arr.filter(_ <= 999).map(x => s\"Hundred\")\n        val thousands = arr.filter(_ <= 9999).map(x => s\"Thousand\")\n        val tenThousands = arr.filter(_ <= 999999).map(x => s\"TenThousand\")\n        val oneThousands = arr.filter(_ <= 9999999).map(x => s\"OneThousand\")\n        val tenMillions = arr.filter(_ <= 999999999).map(x => s\"TenMillion\")\n        val oneMillions = arr.filter(_ <= 99999999999).map(x => s\"OneMillion\")\n        val tenBillions = arr.filter(_ <= 999999999999).map(x => s\"TenBillion\")\n        val oneBillions = arr.filter(_ <= 999999999999999).map(x => s\"OneBillion\")\n        val tenTrillions = arr.filter(_ <= 999999999999999999).map(x => s\"TenTrillion\")\n        val oneTrillions = arr.filter(_ <= 999999999999999999999).map(x => s\"OneTrillion\")\n        val tenQuadrillions = arr.filter(_ <= 9999999999999999999998).map(x => s\"TenQuadrillion\")\n        val oneQuadrillions = arr.filter(_ <= 99999999999999999999987).map(x => s\"OneQuadrillion\")\n        val tenQuintillions = arr.filter(_ <= 999999999999999999999876).map(x => s\"TenQuintillion\")\n        val oneQuintillions = arr.filter(_ <= 99999999999999999999987654).map(x => s\"OneQuintillion\")\n        val tenSextillions = arr.filter(_ <= 9999999999999999999998765432).map(x => s\"TenSextillion\")\n        val oneSextillions = arr.filter(_ <= 99999999999999999999987654321).map(x => s\"OneSextillion\")\n        val tenSeptillions = arr.filter(_ <= 9999999999999999999998765432109).map(x => s\"TenSeptillion\")\n        val oneSeptillions = arr.filter(_ <= 999999999999999999999876543210).map(x => s\"\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpa5plyy62.scala:30:87 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneSeptillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999876543210\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\u001b[0m\"\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpa5plyy62.scala:18:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneMillions\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"OneMillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpa5plyy62.scala:19:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenBillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"TenBillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpa5plyy62.scala:20:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"OneBillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpa5plyy62.scala:21:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenTrillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"TenTrillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpa5plyy62.scal",
      "stdout": "",
      "timestamp": 1660010282
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val eleven = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val twelve = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val thirteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fourteen = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val fifteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbvz2aqx_.scala:25:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \"Five\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbvz2aqx_.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbvz2aqx_.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbvz2aqx_.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Fivedef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010269
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val twos = arr.filter(x => x % 10 == 2)\n        val threes = arr.filter(x => x % 10 == 3)\n        val fours = arr.filter(x => x % 10 == 4)\n        val fives = arr.filter(x => x % 10 == 5)\n        val sixes = arr.filter(x => x % 10 == 6)\n        val sevens = arr.filter(x => x % 10 == 7)\n        val eights = arr.filter(x => x % 10 == 8)\n        val nines = arr.filter(x => x % 10 == 9)\n        val onesAndTwos = ones + twos\n        val onesAndThrees = ones + threes\n        val onesAndFours = ones + fours\n        val onesAndFives = ones + fives\n        val onesAndSixes = ones + sixes\n        val onesAndSevens = ones + sevens\n        val onesAndEights = ones + eights\n        val onesAndNines = ones + nines\n        val twosAndThrees = twos + threes\n        val twosAndFours = twos + fours\n        val twosAndFives = twos + fives\n        val twosAndSixes = twos + sixes\n        val twosAndSevens = twos + sevens\n        val twosAndEights = twos + eights\n        val twosAndNines = twos + nines\n        val threesAndFours = threes + fours\n        val threesAndFives = threes + fives\n        val threesAndSixes = threes + sixes\n        val threesAndSevens = threes + sevens\n        val threesAndEights = threes + eights\n        val threesAndNines = threes + nines\n        val foursAndFives = fours + fives\n        val foursAndSixes = fours + sixes\n        val foursAndSevens = fours + sevens\n        val foursAndEights = fours + eights\n        val foursAndNines = fours + nines\n        val fivesAndSixes = fives + sixes\n        val fivesAndSevens = fives + sevens\n        val fivesAndEights = fives + eights\n        val fivesAndNines = fives + nines\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7qb33lc.scala:20:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwos\u001b[0m = ones + twos\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7qb33lc.scala:21:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThrees\u001b[0m = ones + threes\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7qb33lc.scala:22:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndFours\u001b[0m = ones + fours\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7qb33lc.scala:23:32 -----------------------",
      "stdout": "",
      "timestamp": 1660010286
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val one = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val hundred = mutable.List(\"Hundred\", \"Thousand\", \"Million\", \"Billion\")\n        val thousand = mutable.List(\"Thousand\", \"Million\", \"Billion\")\n        val tenThousand = mutable.List(\"TenThousand\", \"ElevenThousand\", \"TwelveThousand\", \"ThirteenThousand\", \"FourteenThousand\", \"FifteenThousand\", \"SixteenThousand\", \"SeventeenThousand\", \"EighteenThousand\", \"NineteenThousand\")\n        val hundredThousand = mutable.List(\"HundredThousand\", \"Thousand\", \"Million\", \"Billion\")\n        val thousandThousand = mutable.List(\"ThousandThousand\", \"MillionThousand\", \"Billion\")\n        val tenThousandThousand = mutable.List(\"TenThousandThousand\", \"ElevenThousandThousand\", \"TwelveThousandThousand\", \"ThirteenThousandThousand\", \"FourteenThousandThousand\", \"FifteenThousandThousand\", \"SixteenThousandThousand\", \"SeventeenThousandThousand\", \"EighteenThousandThousand\", \"NineteenThousandThousand\")\n        val hundredThousandThousand = mutable.List(\"HundredThousandThousand\", \"ThousandThousand\", \"MillionThousand\", \"Billion\")\n        val thousandThousandThousand = mutable.List(\"ThousandThousandThousand\", \"MillionThousandThousand\", \"Billion\")\n        val tenThousandThousandThousand = mutable.List(\"TenThousandThousandThousand\", \"ElevenThousandThousandThousand\", \"TwelveThousandThousandThousand\", \"Thirteen\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzrrr3050.scala:22:154 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousand\u001b[0m = mutable.List(\u001b[31m\"TenThousandThousandThousand\"\u001b[0m, \u001b[31m\"ElevenThousandThousandThousand\"\u001b[0m, \u001b[31m\"TwelveThousandThousandThousand\"\u001b[0m, \"Thirteen\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzrrr3050.scala:24:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzrrr3050.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzrrr3050.scala:12:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mone\u001b[0m = mutable.List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzrrr3050.scala:13:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mten\u001b[0m = mutable.List(\u001b[31m\"Ten\"\u001b[0m, \u001b[31m\"Eleven\"\u001b[0m, \u001b[31m\"Twelve\"\u001b[0m, \u001b[31m\"T",
      "stdout": "",
      "timestamp": 1660010281
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 99999).sorted\n        val oneThousands = arr.filter(_ <= 999999).sorted\n        val oneHundreds = arr.filter(_ <= 9999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd6ueo57p.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpd6ueo57p.scala:19:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpd6ueo57p.scala:21:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpd6ueo57p.scala:22:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpd6ueo57p.scala:23:90 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpd6ueo57p.scala:24:98 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m ",
      "stdout": "",
      "timestamp": 1660010282
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).reverse\n        val map = new mutable.HashMap[Int, String]()\n        map.put(1, \"One\")\n        map.put(2, \"Two\")\n        map.put(3, \"Three\")\n        map.put(4, \"Four\")\n        map.put(5, \"Five\")\n        map.put(6, \"Six\")\n        map.put(7, \"Seven\")\n        map.put(8, \"Eight\")\n        map.put(9, \"Nine\")\n        val result2 = result.map(x => map.get(x))\n        result2\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy10uihpt.scala:12:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmap\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mInt\u001b[0m, \u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010277
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).map(_ => \"One\")\n        val twos = arr.filter(_ <= 99).map(_ => \"Two\")\n        val threes = arr.filter(_ <= 999).map(_ => \"Three\")\n        val fours = arr.filter(_ <= 9999).map(_ => \"Four\")\n        val fives = arr.filter(_ <= 99999).map(_ => \"Five\")\n        val sixes = arr.filter(_ <= 999999).map(_ => \"Six\")\n        val sevens = arr.filter(_ <= 9999999).map(_ => \"Seven\")\n        val eights = arr.filter(_ <= 999999999).map(_ => \"Eight\")\n        val nines = arr.filter(_ <= 99999999999).map(_ => \"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpvh2oe15h.scala:19:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnines\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).map(_ => \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    number too large\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvh2oe15h.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 19).toList\n        val hundreds = arr.filter(x => x >= 20 && x <= 99).toList\n        val thousands = arr.filter(x => x >= 100 && x <= 999).toList\n        val tenThousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val oneThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneHundreds = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x <= 9999999998).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999998).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 9999999999987).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 99999999999876).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999987654).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999876543).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 999999999998765432).toList\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpypnbbphl.scala:29:86 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpypnbbphl.scala:21:83 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpypnbbphl.scala:22:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m9999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpypnbbphl.scala:22:91 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m9999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpypnbbphl.scala:23:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mon",
      "stdout": "",
      "timestamp": 1660010281
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 19).toList\n        val hundreds = arr.filter(x => x >= 20 && x <= 99).toList\n        val thousands = arr.filter(x => x >= 100 && x <= 999).toList\n        val reversed = ones + tens + hundreds + thousands\n        val reversedString = reversed.reverse.mkString(\"\")\n        val onesString = ones.mkString(\"\")\n        val tensString = tens.mkString(\"\")\n        val hundredsString = hundreds.mkString(\"\")\n        val thousandsString = thousands.mkString(\"\")\n        val result = reversedString.replaceAll(\"\\\\d\", onesString + tensString + hundredsString + thousandsString)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4qydcctc.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds + thousands\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010283
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringArray = tensReversedString.toCharArray\n        val tensReversedStringArrayLength = tensReversedStringArray.length\n        val tensReversedStringArrayReversed = tensReversedStringArray.reverse\n        val tensReversedStringArrayReversedLength = tensReversedStringArrayReversed.length\n        val tensReversedStringArrayReversedString = new Array[String](tensReversedStringArrayLength)\n        for(i <- 0 until tensReversedStringArrayLength) {\n            tensReversedStringArrayReversedString(i) = tensReversedStringArrayReversed(i)\n        }\n        val tensReversedStringArrayReversedStringLength = tensReversedStringArrayReversedString.length\n        val tensReversedStringArrayReversedStringReversed = new Array[String](tensReversedStringArrayLength)\n        for(i <- 0 until tensReversedStringArrayLength) {\n            tensReversedStringArrayReversedStringReversed(i) = tensReversedStringArrayReversedString(i).reverse\n        }\n        val tensReversedStringArrayReversedStringReversedLength = tensReversedStringArrayReversedStringReversed.length\n        val tensReversedStringArrayReversedStringReversedString = new Array[String](tensReversedStringArrayLength)\n        for(i <- 0 until tensReversedStringArrayLength) {\n            tensReversedStringArrayReversedStringReversedString(i) = tensReversedStringArrayReversedStringReversed(i).reverse\n        }\n        val tensReversedStringArrayReversedStringReversedStringLength = tensReversedStringArrayReversedStringReversedString.length\n        val tensReversedStringArrayReversedStringReversedStringReversed = new Array[String](tensReversedStringArrayLength)\n        for(i <- 0 until tensReversedStringArrayLength) {\n            tensReversedStringArrayReversedStringReversedStringReversed(i) = tensReversedStringArrayReversedStringReversedString(i).reverse\n        }\n        val tensReversedStringArrayReversed\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjoxsq94k.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjoxsq94k.scala:21:86 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            tensReversedStringArrayReversedString(i) = tensReversedStringArrayReversed(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    Char\n\u001b[31m   |\u001b[0m                                                       Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjoxsq94k.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010283
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringList = tensReversedString.split(\"(?<=\\\\d)\").toList\n        val tensReversedStringListReversed = tensReversedStringList.reverse\n        val tensReversedStringListReversedString = tensReversedStringListReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringListReversedStringList = tensReversedStringListReversedString.split(\"(?<=\\\\d)\").toList\n        val tensReversedStringListReversedStringListReversed = tensReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedString = tensReversedStringListReversedStringListReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringListReversedStringListReversedStringList = tensReversedStringListReversedStringListReversedString.split(\"(?<=\\\\d)\").toList\n        val tensReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversedString = tensReversedStringListReversedStringListReversedStringListReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringListReversedStringListReversedStringListReversedStringList = tensReversedStringListReversedStringListReversedStringListReversedString.split(\"(?<=\\\\d)\").toList\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedString = tensReversedStringListReversedStringListReversedStringListReversedStringListReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList = tensReversedStringList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq7fsciii.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010282
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmud5uu7c.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmud5uu7c.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmud5uu7c.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmud5uu7c.scala:19:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmud5uu7c.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmu",
      "stdout": "",
      "timestamp": 1660010282
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 9999999998).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999998).toList\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999987).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 99999999999876).toList\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 9999999999987654).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999876543).toList\n        val tenThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 999999999998765432).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999987654321).toList\n        val tenThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx_z1png_.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpx_z1png_.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x <= \u001b[31m9999999999987654\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpx_z1png_.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x <= \u001b[31m99999999999876543\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpx_z1png_.scala:20:83 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       ",
      "stdout": "",
      "timestamp": 1660010283
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp8f9brigq.scala:27:113 --------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8f9brigq.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8f9brigq.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8f9brigq.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000",
      "stdout": "",
      "timestamp": 1660010282
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(x => x.toString).mkString(\"\")\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedStringWithTens = onesReversedString + tensReversedString\n        val onesReversedStringWithTensReversed = onesReversedStringWithTens.reverse\n        val onesReversedStringWithTensReversedString = onesReversedStringWithTensReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedStringWithTensReversedStringWithOnes = onesReversedStringWithTensReversedStringWithOnes.reverse\n        val onesReversedStringWithTensReversedStringWithOnesReversed = onesReversedStringWithTensReversedStringWithOnesReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedStringWithTensReversedStringWithOnesReversedReversed = onesReversedStringWithTensReversedStringWithOnesReversedReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedStringWithTensReversedStringWithOnesReversedReversedReversed = onesReversedStringWithTensReversedStringWithOnesReversedReversedReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversed = onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversedReversed = onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversedReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversedReversedReversed = onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversedReverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpdlwdfkyi.scala:20:63 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringWithTensReversedStringWithOnes\u001b[0m = onesReversedStringWithTensReversedStringWithOnes.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringWithTensReversedStringWithOnes\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpdlwdfkyi.scala:21:71 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringWithTensReversedStringWithOnesReversed\u001b[0m = onesReversedStringWithTensReversedStringWithOnesReversed.map(\u001b[36mx\u001b[0m => x.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringWithTensReversedStringWithOnesReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpdlwdfkyi.scala:22:79 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringWithTensReversedStringWithOnesReversedReversed\u001b[0m = onesReversedStringWithTensReversedStringWithOnesReversedReversed.map(\u001b[36mx\u001b[0m => x.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringWithTensReversedStringWithOnesReversedReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpdlwdfkyi.scala:23:87 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringWithTensReversedStringWithOnesReversedReversedReversed\u001b[0m = onesReversedStringWithTensReversedStringWithOnesRev",
      "stdout": "",
      "timestamp": 1660010281
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ - 1).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ - 10).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ - 100).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ - 1000).reverse\n        val tenThousands = arr.filter(_ <= 999999).sortBy(_ - 10000).reverse\n        val oneThousands = arr.filter(_ <= 9999999).sortBy(_ - 100000).reverse\n        val oneHundreds = arr.filter(_ <= 999999999).sortBy(_ - 1000000).reverse\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sortBy(_ - 10000000).reverse\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999999).sortBy(_ - 10000000).reverse\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).sortBy(_ - 100000000).reverse\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sortBy(_ - 1000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).sortBy(_ - 10000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sortBy(_ - 100000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).sortBy(_ - 1000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).sortBy(_ - 10000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).sortBy(_ - 100000000000000).reverse\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpmf796y1s.scala:27:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmf796y1s.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmf796y1s.scala:18:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sortBy(_ - \u001b[31m10000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmf796y1s.scala:19:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sortBy(_ - \u001b[31m10000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmf796y1s.scala:20:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36",
      "stdout": "",
      "timestamp": 1660010283
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).map(i => s\"One\")\n        val twos = arr.filter(_ <= 18).map(i => s\"Two\")\n        val threes = arr.filter(_ <= 27).map(i => s\"Three\")\n        val fours = arr.filter(_ <= 36).map(i => s\"Four\")\n        val fives = arr.filter(_ <= 45).map(i => s\"Five\")\n        val sixes = arr.filter(_ <= 54).map(i => s\"Six\")\n        val sevens = arr.filter(_ <= 63).map(i => s\"Seven\")\n        val eights = arr.filter(_ <= 72).map(i => s\"Eight\")\n        val nines = arr.filter(_ <= 81).map(i => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsix2_xb9.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010284
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 19).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2osfmx6e.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2osfmx6e.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2osfmx6e.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2osfmx6e.scala:19:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2osfmx6e.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2o",
      "stdout": "",
      "timestamp": 1660010290
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9 && x >= 1)\n        val tens = arr.filter(x => x <= 99 && x >= 10)\n        val hundreds = arr.filter(x => x <= 999 && x >= 100)\n        val thousands = arr.filter(x => x <= 9999 && x >= 1000)\n        val tenThousands = arr.filter(x => x <= 999999 && x >= 10000)\n        val oneThousands = arr.filter(x => x <= 9999999 && x >= 100000)\n        val oneHundreds = arr.filter(x => x <= 999999999 && x >= 1000000)\n        val oneThousandThousands = arr.filter(x => x <= 99999999999 && x >= 10000000)\n        val oneThousandThousandThousands = arr.filter(x => x <= 9999999990000 && x >= 100000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x <= 9999999999900000 && x >= 1000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999900000000 && x >= 10000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999000000000 && x >= 100000000000)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999000000000000 && x >= 1000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999990000000000000 && x >= 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999900000000000000 && x >= 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999000000000000000 && x >= 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 9999999990000000000000001 && x >= 1000000000000000001)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999990000000000000001 && x >= 1000000000000000001)\n\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcghokh9c.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999000000000\u001b[0m && x >= \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcghokh9c.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999900000000000000\u001b[0m && x >= \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcghokh9c.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999000000000000000\u001b[0m && x >= \u001b[31m100000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mva",
      "stdout": "",
      "timestamp": 1660010293
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgjlrwv1h.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgjlrwv1h.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgjlrwv1h.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgjlrwv1h.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                    ",
      "stdout": "",
      "timestamp": 1660010294
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => onesReversedStringMap.get(x))\n        val tensReversedString = tensReversed.map(x => tensReversedStringMap.get(x))\n        val result = onesReversedString.zip(tensReversedString).map(x => x._1 + \" \" + x._2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwrtkjkas.scala:15:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => onesReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: onesReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwrtkjkas.scala:16:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => tensReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: tensReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwrtkjkas.scala:17:78 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = onesReversedString.zip(tensReversedString).map(\u001b[36mx\u001b[0m => x._1 + \u001b[31m\" \"\u001b[0m + x._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Byte.byte2double\n\u001b[31m   |\u001b[0m  import Byte.byte2float\n\u001b[31m   |\u001b[0m  import Byte.byte2int\n\u001b[31m   |\u001b[0m  import Byte.byte2long\n\u001b[31m   |\u001b[0m  import Byte.byte2short\n\u001b[31m   |\u001b[0m  import Char.char2double\n\u001b[31m   |\u001b[0m  import Char.char2float\n\u001b[31m   |\u001b[0m  import Char.char2int\n\u001b[31m   |\u001b[0m  import Char.char2long\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgjlrwv1h.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgjlrwv1h.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgjlrwv1h.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgjlrwv1h.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                    ",
      "stdout": "",
      "timestamp": 1660010294
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).map(_ => \"One\")\n        val twos = arr.filter(_ <= 99).map(_ => \"Two\")\n        val threes = arr.filter(_ <= 999).map(_ => \"Three\")\n        val fours = arr.filter(_ <= 9999).map(_ => \"Four\")\n        val fives = arr.filter(_ <= 99999).map(_ => \"Five\")\n        val sixes = arr.filter(_ <= 999999).map(_ => \"Six\")\n        val sevens = arr.filter(_ <= 9999999).map(_ => \"Seven\")\n        val eights = arr.filter(_ <= 999999999).map(_ => \"Eight\")\n        val nines = arr.filter(_ <= 99999999999).map(_ => \"Nine\")\n        val result = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n        val reversed = result.reverse\n        reversed.map(_.replaceAll(\"[0-9]\", \"Nine\"))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpx8gpc4nl.scala:19:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnines\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).map(_ => \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    number too large\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx8gpc4nl.scala:20:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010294
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val twos = arr.filter(x => x % 10 == 2)\n        val threes = arr.filter(x => x % 10 == 3)\n        val fours = arr.filter(x => x % 10 == 4)\n        val fives = arr.filter(x => x % 10 == 5)\n        val sixes = arr.filter(x => x % 10 == 6)\n        val sevens = arr.filter(x => x % 10 == 7)\n        val eights = arr.filter(x => x % 10 == 8)\n        val nines = arr.filter(x => x % 10 == 9)\n        val onesAndTwelves = ones + twelves\n        val onesAndFours = ones + fours\n        val onesAndSixes = ones + sixes\n        val onesAndEights = ones + eights\n        val onesAndNines = ones + nines\n        val twosAndFours = twos + fours\n        val twosAndSixes = twos + sixes\n        val twosAndEights = twos + eights\n        val twosAndNines = twos + nines\n        val threesAndFours = threes + fours\n        val threesAndSixes = threes + sixes\n        val threesAndEights = threes + eights\n        val threesAndNines = threes + nines\n        val foursAndSixes = fours + sixes\n        val foursAndEights = fours + eights\n        val foursAndNines = fours + nines\n        val fivesAndSixes = fives + sixes\n        val fivesAndEights = fives + eights\n        val fivesAndNines = fives + nines\n        val sixesAndEights = sixes + eights\n        val sixesAndNines = sixes + nines\n        val sevensAndEights = sevens + eights\n        val sevensAndNines = sevens + nines\n        val eightsAndNines = eights + nines\n        val onesAndOnesAndTwelves = onesAndTwelves\n        val onesAndOnesAndFours = onesAndFours\n        val onesAndOnesAndSixes = onesAndSixes\n        val onesAndOnesAndEights = onesAndEights\n        val one\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6konnixt.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6konnixt.scala:20:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwelves\u001b[0m = ones + twelves\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6konnixt.scala:20:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwelves\u001b[0m = ones + twelves\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: twelves\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6konnixt.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndFours\u001b[0m = ones + fours\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6konnixt.scala:22:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndSixe",
      "stdout": "",
      "timestamp": 1660010299
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val eleven = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val twelve = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val thirteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fourteen = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val fifteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp7udmatgs.scala:25:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \"Five\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7udmatgs.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7udmatgs.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7udmatgs.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Fivedef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010291
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ % 10).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ % 100).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ % 1000).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ % 10000).reverse\n        val tenThousands = arr.filter(_ <= 99999).sortBy(_ % 100000).reverse\n        val oneThousands = arr.filter(_ <= 999999).sortBy(_ % 1000000).reverse\n        val oneHundreds = arr.filter(_ <= 9999999).sortBy(_ % 10000000).reverse\n        val oneThousandHundreds = arr.filter(_ <= 999999999).sortBy(_ % 100000000).reverse\n        val oneThousandThousandHundreds = arr.filter(_ <= 99999999999).sortBy(_ % 1000000000).reverse\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999).sortBy(_ % 10000000000).reverse\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sortBy(_ % 100000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sortBy(_ % 1000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sortBy(_ % 10000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sortBy(_ % 100000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sortBy(_ % 1000000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sortBy(_ % 10000000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_ldmc7ec.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_ldmc7ec.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sortBy(_ % \u001b[31m100000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_ldmc7ec.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sortBy(_ % \u001b[31m1000000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_ldmc7ec.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0",
      "stdout": "",
      "timestamp": 1660010294
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999998).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000001 && x <= 99999999999999999999987).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000002 && x <= 99999999999999999999988).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000003 && x <= 99999999999999999999989).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000004 && x <= 999999999999999999999899).toList\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000005 && x <= 9999999999999999999998999).toList\n        val oneThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmph_bh8e44.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph_bh8e44.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m9999999999999999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph_bh8e44.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000002\u001b[0m && x <= \u001b[31m99999999999999999999988\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph_bh8e44.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000003\u001b[0m && x <= \u001b[31m99999999999999999999989\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010294
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val tenThousands = arr.filter(x => x >= 10000)\n        val oneThousands = arr.filter(x => x >= 1000000)\n        val oneHundreds = arr.filter(x => x >= 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 10000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000)\n        val oneThousandThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_qz_4zld.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_qz_4zld.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_qz_4zld.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_qz_4zld.scala:31:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010293
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandsOnes = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandsOnes = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val tenThousandsOnesOnes = arr.filter(x => x >= 1000000000 && x <= 999999999999999).toList\n        val oneThousandsOnesOnes = arr.filter(x => x >= 1000000000 && x <= 9999999999999).toList\n        val tenThousandsOnesOnesOnes = arr.filter(x => x >= 100000000000 && x <= 9999999999999).toList\n        val oneThousandsOnesOnesOnes = arr.filter(x => x >= 100000000000 && x <= 99999999999999).toList\n        val tenThousandsOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000 && x <= 99999999999999).toList\n        val oneThousandsOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000 && x <= 999999999999999999).toList\n        val tenThousandsOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999999).toList\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999).toList\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999999).toList\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999).toList\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999).to\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp84odnuf9.scala:18:69 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandsOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp84odnuf9.scala:19:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp84odnuf9.scala:20:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandsOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp84odnuf9.scala:21:60 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp84odnuf9.scala:21:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b",
      "stdout": "",
      "timestamp": 1660010294
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val twos = arr.filter(x => x % 10 == 2)\n        val threes = arr.filter(x => x % 10 == 3)\n        val fours = arr.filter(x => x % 10 == 4)\n        val fives = arr.filter(x => x % 10 == 5)\n        val sixes = arr.filter(x => x % 10 == 6)\n        val sevens = arr.filter(x => x % 10 == 7)\n        val eights = arr.filter(x => x % 10 == 8)\n        val nines = arr.filter(x => x % 10 == 9)\n        val onesReversed = ones.reverse\n        val twosReversed = twos.reverse\n        val threesReversed = threes.reverse\n        val foursReversed = fours.reverse\n        val fivesReversed = fives.reverse\n        val sixesReversed = sixes.reverse\n        val sevensReversed = sevens.reverse\n        val eightsReversed = eights.reverse\n        val ninesReversed = nines.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val twosReversedString = twosReversed.map(x => Two(x))\n        val threesReversedString = threesReversed.map(x => Three(x))\n        val foursReversedString = foursReversed.map(x => Four(x))\n        val fivesReversedString = fivesReversed.map(x => Five(x))\n        val sixesReversedString = sixesReversed.map(x => Six(x))\n        val sevensReversedString = sevensReversed.map(x => Seven(x))\n        val eightsReversedString = eightsReversed.map(x => Eight(x))\n        val ninesReversedString = ninesReversed.map(x => Nine(x))\n        val onesReversedStringList = onesReversedString.toList\n        val twosReversedStringList = twosReversedString.toList\n        val threesReversedStringList = threesReversedString.toList\n        val foursReversedStringList = foursReversedString.toList\n        val fivesReversedStringList = fivesReversedString.toList\n        val sixesReversedStringList = sixesReversedString.toList\n        val sevensReversedStringList = sevensReversedString.toList\n        val e\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9y917j_d.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9y917j_d.scala:29:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9y917j_d.scala:30:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwosReversedString\u001b[0m = twosReversed.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9y917j_d.scala:31:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthreesReversedString\u001b[0m = threesReversed.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9y917j_d.scala:32:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfoursReversedString\u001b[0m = foursReversed.map(\u001b[36mx\u001b[0m => Four(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: Four\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E00",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9)\n        val tens = arr.filter(x => x >= 10 && x <= 99)\n        val hundreds = arr.filter(x => x >= 100 && x <= 999)\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999)\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999)\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999)\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999999999)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000001 && x <= 999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000002 && x <= 9999999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000003 && x <= 99999999999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000004 && x <= 999999999999999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000005 && x <= 9999999999999999999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp96grjp16.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp96grjp16.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp96grjp16.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp96grjp16.scala:19:85 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                     ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp96grjp16.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x <= \u001b[31m9999999999999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp96grjp16.",
      "stdout": "",
      "timestamp": 1660010294
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).map(_ -> \"One\")\n        val twos = arr.filter(_ <= 99).map(_ -> \"Two\")\n        val threes = arr.filter(_ <= 999).map(_ -> \"Three\")\n        val fours = arr.filter(_ <= 9999).map(_ -> \"Four\")\n        val fives = arr.filter(_ <= 99999).map(_ -> \"Five\")\n        val sixes = arr.filter(_ <= 999999).map(_ -> \"Six\")\n        val sevens = arr.filter(_ <= 9999999).map(_ -> \"Seven\")\n        val eights = arr.filter(_ <= 999999999).map(_ -> \"Eight\")\n        val nines = arr.filter(_ <= 99999999999).map(_ -> \"Nine\")\n        val result = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n        val reversed = result.reverse\n        reversed.map { x => x.toString.replaceAll(\"\\\\D\", \"\") }\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp6uqpkn48.scala:19:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnines\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).map(_ -> \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    number too large\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6uqpkn48.scala:20:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[(Long, String)], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwrq5_6m5.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999999999).toList\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 999999999999999999999).toList\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999998).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999987).toList\n        val tenThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 999999999999999999999876).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999987654).toList\n        val tenTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxiealecs.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxiealecs.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x <= \u001b[31m9999999999999999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxiealecs.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999987\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxiealecs.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error:",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwrq5_6m5.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 19).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp8seom426.scala:27:113 --------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8seom426.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8seom426.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8seom426.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = mutable.List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = mutable.List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = mutable.List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eleven = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twelve = mutable.List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val thirteen = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val fourteen = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpgi682ne0.scala:24:122 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfourteen\u001b[0m = mutable.List(\u001b[31m\"Ten\"\u001b[0m, \u001b[31m\"Eleven\"\u001b[0m, \u001b[31m\"Twelve\"\u001b[0m, \u001b[31m\"Thirteen\"\u001b[0m, \u001b[31m\"Fourteen\"\u001b[0m, \u001b[31m\"Fifteen\"\u001b[0m, \u001b[31m\"Sixteen\"\u001b[0m, \u001b[31m\"Seventeen\"\u001b[0m, \"Eighteen\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgi682ne0.scala:26:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgi682ne0.scala:11:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mone\u001b[0m = mutable.List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgi682ne0.scala:12:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwo\u001b[0m = mutable.List(\u001b[31m\"Ten\"\u001b[0m, \u001b[31m\"Eleven\"\u001b[0m, \u001b[31m\"Twelve\"\u001b[0m, \u001b[31m\"Thirteen\"\u001b[0m, \u001b[31m\"Fourteen\"\u001b[0m, \u001b[31m\"Fifteen\"\u001b[0m, \u001b[31m\"Sixteen\"\u001b[0m, \u001b[31m\"Seventeen\"\u001b[0m, \u001b[31m\"Eighteen\"\u001b[0m, \u001b[31m\"Nineteen\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgi682ne0.scala:13:20 ------------------------\u001b[0m\u001b[",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x >= 10 && x <= 19).map(x => s\"Two\")\n        val threes = arr.filter(x => x >= 20 && x <= 29).map(x => s\"Three\")\n        val fours = arr.filter(x => x >= 30 && x <= 39).map(x => s\"Four\")\n        val fives = arr.filter(x => x >= 40 && x <= 49).map(x => s\"Five\")\n        val sixes = arr.filter(x => x >= 50 && x <= 59).map(x => s\"Six\")\n        val sevens = arr.filter(x => x >= 60 && x <= 69).map(x => s\"Seven\")\n        val eights = arr.filter(x => x >= 70 && x <= 89).map(x => s\"Eight\")\n        val nines = arr.filter(x => x >= 90 && x <= 999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmeiw9y4v.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val hundred = List(\"Hundred\")\n        val thousand = List(\"Thousand\")\n        val reversed = arr.reverse\n        val result = reversed.map{\n            case x if x < 10 => one(x)\n            case x if x < 100 => ten(x)\n            case x if x < 1000 => hundred(x)\n            case x if x < 10000 => thousand(x)\n            case x => x\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc07l1arj.scala:17:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m10\u001b[0m => one(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc07l1arj.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m100\u001b[0m => ten(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc07l1arj.scala:19:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m1000\u001b[0m => hundred(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc07l1arj.scala:20:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m10000\u001b[0m => thousand(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc07l1arj.scala:23:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        result\n\u001b[31m\u001b[31m   |\u001b[0m       ",
      "stdout": "",
      "timestamp": 1660010296
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwrq5_6m5.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val tensReversedString = tensReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedString = onesReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = one\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkanv_yw9.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringListLength\u001b[0m = onesReversedStringList.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedStringListLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringListLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkanv_yw9.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListLength\u001b[0m = tensReversedStringList.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringListLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringListLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkanv_yw9.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringListLength\u001b[0m = onesReversedStringList.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedStringListLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringListLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkanv_yw9.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListLength\u001b[0m = tensReversedStringList.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringListLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringListLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote th",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ >= 1 && _ <= 9).sortWith(_ < _).reverse\n        result.map(i => s\"${i.toString.toUpperCase()}\").filter(_.isDigit).map(i => s\"${i}\".toUpperCase())\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp72hjrvjw.scala:11:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = arr.filter(_ >= \u001b[31m1\u001b[0m && _ <= \u001b[31m9\u001b[0m).sortWith(_ < _).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp72hjrvjw.scala:12:65 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        result.map(\u001b[36mi\u001b[0m => \u001b[31ms\"\u001b[0m${i.toString.toUpperCase()}\u001b[31m\"\u001b[0m).filter(_.isDigit).map(\u001b[36mi\u001b[0m => \u001b[31ms\"\u001b[0m${i}\u001b[31m\"\u001b[0m.toUpperCase())\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value isDigit is not a member of String\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x <= 18).map(x => s\"Two\")\n        val threes = arr.filter(x => x <= 27).map(x => s\"Three\")\n        val fours = arr.filter(x => x <= 36).map(x => s\"Four\")\n        val fives = arr.filter(x => x <= 45).map(x => s\"Five\")\n        val sixes = arr.filter(x => x <= 54).map(x => s\"Six\")\n        val sevens = arr.filter(x => x <= 63).map(x => s\"Seven\")\n        val eights = arr.filter(x => x <= 72).map(x => s\"Eight\")\n        val nines = arr.filter(x => x <= 81).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1w4z31cl.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010297
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val reversed = ones + tens + hundreds + thousands\n        val named = reversed.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else \"Four\")\n        named.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf52p_ms0.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds + thousands\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010297
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ >= 10 && _ <= 99).sorted\n        val hundreds = arr.filter(_ >= 100).sorted\n        val reversed = ones + tens + hundreds.reverse\n        val result = reversed.map(_ / 10).map(x => byLengthNames(x))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpcgcpphpd.scala:12:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(_ >= \u001b[31m10\u001b[0m && _ <= \u001b[31m99\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcgcpphpd.scala:14:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010301
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 19).toList\n        val hundreds = arr.filter(x => x >= 20 && x <= 99).toList\n        val thousands = arr.filter(x => x >= 100 && x <= 999).toList\n        val tenThousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val oneThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneHundreds = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x <= 9999999998).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999998).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999997).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999997).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 999999999996).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 999999999996).toList\n        val oneThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvlyxe0jb.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvlyxe0jb.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m999999999997\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvlyxe0jb.scala:21:98 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvlyxe0jb.scala:22:87 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m9999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvlyxe0jb.scala:22:107 --------------------------------------",
      "stdout": "",
      "timestamp": 1660010303
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenMillions = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneMillions = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val tenBillions = arr.filter(x => x >= 1000000000 && x <= 999999999999999).toList\n        val oneBillions = arr.filter(x => x >= 1000000000 && x <= 9999999999999).toList\n        val tenTrillions = arr.filter(x => x >= 1000000000000 && x <= 999999999999999999).toList\n        val oneTrillions = arr.filter(x => x >= 1000000000000 && x <= 9999999999999).toList\n        val tenQuadrillions = arr.filter(x => x >= 1000000000000000 && x <= 999999999999999999999).toList\n        val oneQuadrillions = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999).toList\n        val tenQuintillions = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999).toList\n        val oneQuintillions = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999).toList\n        val tenSextillions = arr.filter(x => x >= 1000000000000000000 && x <= 999999999999999999999).toList\n        val oneSextillions = arr.filter(x => x >= 1000000000000000000 && x <= 9999999999999).toList\n        val tenSeptillions = arr.filter(x => x >= 100000000000000000000 && x <= 999999999999999999999).toList\n        val oneSeptillions = arr.filter(x => x >= 100000000000000000000 && x <= 9999999999999).toList\n        val tenOctillions = arr.filter(x => x >= 10000000000000000000000 && x <= 999999999999999999999).toList\n        val oneOctillions = arr.filter(x => x >= 10000000000000000000000 && x <= 9999999999999).toList\n        val tenNonillions = arr.filter(x => x >= 1000000000000000000000000 && x <= 999999999999999999999).toList\n        val oneNonillions = arr.filter(x => x >= 1000000000000000000000000 && \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp2a1rrabf.scala:34:77 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneNonillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000000000000\u001b[0m && \n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2a1rrabf.scala:18:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneMillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2a1rrabf.scala:19:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenBillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2a1rrabf.scala:20:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2a1rrabf.scala:21:48 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999999\u001b",
      "stdout": "",
      "timestamp": 1660010305
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ % 10).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ % 100).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ % 1000).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ % 10000).reverse\n        val tenThousands = arr.filter(_ <= 99999).sortBy(_ % 100000).reverse\n        val oneThousands = arr.filter(_ <= 999999).sortBy(_ % 1000000).reverse\n        val oneHundreds = arr.filter(_ <= 9999999).sortBy(_ % 10000000).reverse\n        val oneThousandHundreds = arr.filter(_ <= 999999999).sortBy(_ % 100000000).reverse\n        val oneThousandThousandHundreds = arr.filter(_ <= 99999999999).sortBy(_ % 1000000000).reverse\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).sortBy(_ % 10000000000).reverse\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sortBy(_ % 100000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).sortBy(_ % 1000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sortBy(_ % 10000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).sortBy(_ % 100000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).sortBy(_ % 1000000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).sortBy(_ % 10000000000000000).\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdtykqyks.scala:27:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdtykqyks.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999999999999999\u001b[0m).sortBy(_ % \u001b[31m100000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdtykqyks.scala:19:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sortBy(_ % \u001b[31m1000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdtykqyks.scala:20:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sortBy(_ % \u001b[31m10000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdtykqyks.scala:20:94 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = a",
      "stdout": "",
      "timestamp": 1660010281
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ - 1).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ - 10).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ - 100).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ - 1000).reverse\n        val tenThousands = arr.filter(_ <= 999999).sortBy(_ - 10000).reverse\n        val oneThousands = arr.filter(_ <= 9999999).sortBy(_ - 100000).reverse\n        val oneHundreds = arr.filter(_ <= 999999999).sortBy(_ - 1000000).reverse\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sortBy(_ - 10000000).reverse\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999999).sortBy(_ - 10000000).reverse\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).sortBy(_ - 100000000).reverse\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999).sortBy(_ - 1000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sortBy(_ - 10000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999).sortBy(_ - 100000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).sortBy(_ - 1000000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999).sortBy(_ - 10000000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sortBy(_ - 100000000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999).sort\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphy06mm9t.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999\u001b[0m).sortBy(_ - \u001b[31m100000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphy06mm9t.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphy06mm9t.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999\u001b[0m).sortBy(_ - \u001b[31m10000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousand",
      "stdout": "",
      "timestamp": 1660010306
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).map(x => x.toString)\n        val tens = arr.filter(x => x >= 10 && x < 100).map(x => x.toString)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000).map(x => x.toString)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000).map(x => x.toString)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000).map(x => x.toString)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000).map(x => x.toString)\n        val oneMillions = arr.filter(x => x >= 1000000 && x < 10000000).map(x => x.toString)\n        val oneBillions = arr.filter(x => x >= 10000000 && x < 100000000).map(x => x.toString)\n        val oneTrillions = arr.filter(x => x >= 100000000 && x < 1000000000).map(x => x.toString)\n        val oneQuadrillions = arr.filter(x => x >= 1000000000 && x < 10000000000).map(x => x.toString)\n        val oneQuintillions = arr.filter(x => x >= 10000000000 && x < 100000000000).map(x => x.toString)\n        val oneBillions = arr.filter(x => x >= 100000000000 && x < 1000000000000).map(x => x.toString)\n        val oneMillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000).map(x => x.toString)\n        val oneHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000).map(x => x.toString)\n        val oneThousands = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).map(x => x.toString)\n        val oneTenThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).map(x => x.toString)\n        val oneOneThousands = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).map(x => x.toString)\n        val oneOneMillions = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000).map(x => x.toString)\n        val oneOneBillions = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000).map(x => x.toString)\n        val oneOneTrillions = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000).map(x => \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpszl6whno.scala:30:110 --------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneOneTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000000\u001b[0m && x < \u001b[31m100000000000000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpszl6whno.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m).map(\u001b[36mx\u001b[0m => x.toString)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneBillions is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneBillions\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpszl6whno.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneMillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m).map(\u001b[36mx\u001b[0m => x.toString)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneMillions is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneMillions\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpszl6whno.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m).map(\u001b[36mx\u001b[0",
      "stdout": "",
      "timestamp": 1660010306
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneMillions = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneBillions = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneTrillions = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneQuadrillions = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneQuintillions = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneGigantics = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneMegaGigantics = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneGigantics = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneMegaGigantics = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneGigantics = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneMegaGigantics = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneGigantics = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneMegaGigantics = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneGigantics = arr.filter(x => x >= 10000000000000000000 && x < 1000000000000000000)\n        val oneMegaGigantics = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneGigantics = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val oneMegaGigantics = arr.filter(x => x >= 100000000000000000000 && x < 1000000000000000000000)\n        val oneGigantics = arr.filter(x => x >= 1000000000000000000000 && x < 10000000000000000000000)\n        val oneMegaGigantics = arr.filter(x => x >= 10000000000000000000000 && \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpfjzua0_9.scala:35:78 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneMegaGigantics\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000000000\u001b[0m && \n\u001b[31m\u001b[31m   |\u001b[0m                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfjzua0_9.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneGigantics\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x < \u001b[31m100000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneGigantics is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneGigantics\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfjzua0_9.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneMegaGigantics\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneMegaGigantics is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneMegaGigantics\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfjzua0_9.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneGigantics\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneGigantics is already defin",
      "stdout": "",
      "timestamp": 1660010306
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 19).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val hundredThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val thousandThousands = arr.filter(x => x >= 10000000 && x <= 999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val hundredThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val thousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val hundredThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x <= 999999999999999999999999999).toList\n        val thousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val hundredThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000000000000 && x <= 999999999999999999999999999999999999999).toList\n        val thousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000000000000 && x <= 9999999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000000000000000 && x <= 99999999999999999999999999999999999999999999999).toList\n        val hundredThousandThousandThousandThousandThousands = \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpntuq0mrd.scala:29:62 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousandThousandThousandThousands\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpntuq0mrd.scala:19:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpntuq0mrd.scala:20:60 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpntuq0mrd.scala:20:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpntuq0mrd.scala:21:61 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0",
      "stdout": "",
      "timestamp": 1660010306
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).reverse\n        val map = new mutable.HashMap[Int, String]\n        map += 1 -> \"One\"\n        map += 2 -> \"Two\"\n        map += 3 -> \"Three\"\n        map += 4 -> \"Four\"\n        map += 5 -> \"Five\"\n        map += 6 -> \"Six\"\n        map += 7 -> \"Seven\"\n        map += 8 -> \"Eight\"\n        map += 9 -> \"Nine\"\n        result.map(x => map.get(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvl4m6e2y.scala:12:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmap\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mInt\u001b[0m, \u001b[35mString\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010301
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val reversed = ones + tens + hundreds + thousands.reverse\n        val result = reversed.map(x => x match {\n            case x if x < 10 => \"One\"\n            case x if x < 100 => \"Two\"\n            case x if x < 1000 => \"Three\"\n            case x if x < 10000 => \"Four\"\n            case x if x < 100000 => \"Five\"\n            case x if x < 1000000 => \"Six\"\n            case x if x < 10000000 => \"Seven\"\n            case x if x < 100000000 => \"Eight\"\n            case x if x < 1000000000 => \"Nine\"\n            case x if x < 10000000000 => \"Ten\"\n            case x if x < 100000000000 => \"Eleven\"\n            case x if x < 1000000000000 => \"Twelve\"\n            case x if x < 10000000000000 => \"Thirteen\"\n            case x if x < 100000000000000 => \"Fourteen\"\n            case x if x < 1000000000000000 => \"Fifteen\"\n            case x if x < 10000000000000000 => \"Sixteen\"\n            case x if x < 100000000000000000 => \"Seventeen\"\n            case x if x < 1000000000000000000 => \"Eighteen\"\n            case x if x < 10000000000000000000 => \"Nineteen\"\n            case x if x < 1000000000000000000 => \"Twenty\"\n            case x if x < 10000000000000000000 => \"Thirty\"\n            case x if x < 100000000000000000000 => \"Forty\"\n            case x if x < 1000000000000000000000 => \"Fifty\"\n            case x if x < 10000000000000000000000 => \"Sixty\"\n            case x if x < 100000000000000000000000 => \"Seventy\"\n            case x if x < 1000000000000000000000000 => \"Eighty\"\n            case x if x < 10000000000000000000000000 => \"Ninety\"\n            case x if x < 100000000000000000000000000 => \"Hundred\"\n            case x if x < 1000000000000000000000000000 => \"Thousand\"\n            case x if x < 10000000000000000000000000000 => \"Hundred and Thousand\"\n            case x if x < 100000000000000000000000000000 => \"Hundred and Thousand and One\"\n            case x if x < 1000000000000000000000000000000 => \"Hundred and Thousand and Two\"\n            case x if x < 10000000000000000000000000000000 => \"Hundred and Thousand and Three\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpxtwvodm6.scala:49:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            \u001b[33mcase\u001b[0m x \u001b[33mif\u001b[0m x < \u001b[31m10000000000000000000000000000000\u001b[0m => \"Hundred and Thousand and Three\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxtwvodm6.scala:51:34 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  ')' expected, but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxtwvodm6.scala:60:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxtwvodm6.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds + thousands.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxtwvodm6.scala:59:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660010306
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).map(x => s\"One\")\n        val tens = arr.filter(x => x >= 10 && x < 20).map(x => s\"Ten\")\n        val teens = arr.filter(x => x >= 20 && x < 30).map(x => s\"Eleven\")\n        val twenties = arr.filter(x => x >= 30 && x < 40).map(x => s\"Twelve\")\n        val thirties = arr.filter(x => x >= 40 && x < 50).map(x => s\"Thirty\")\n        val fourties = arr.filter(x => x >= 50 && x < 60).map(x => s\"Fourty\")\n        val fifties = arr.filter(x => x >= 60 && x < 70).map(x => s\"Fifty\")\n        val sixties = arr.filter(x => x >= 70 && x < 80).map(x => s\"Sixty\")\n        val seventies = arr.filter(x => x >= 80 && x < 90).map(x => s\"Seventy\")\n        val eighties = arr.filter(x => x >= 90 && x < 100).map(x => s\"Eighty\")\n        val nineties = arr.filter(x => x >= 100).map(x => s\"Ninety\")\n        ones + tens + teens + twenties + thirties + fourties + fifties + sixties + seventies + eighties + nineties\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgyxlh4da.scala:22:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        ones + tens + teens + twenties + thirties + fourties + fifties + sixties + seventies + eighties + nineties\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010308
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val result = onesReversed.map(x => onesReversed.indexOf(x) + 1)\n        val result2 = tensReversed.map(x => tensReversed.indexOf(x) + 1)\n        val result3 = result.zip(result2).map(x => x._1 + \" \" + x._2)\n        result3.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdnba_48t.scala:21)\n\tat Problem.main(tmpdnba_48t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660010308
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eleven = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twelve = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val thirteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val fourteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fifteen = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpyyxsfoki.scala:25:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"Twenty\"\u001b[0m, \u001b[31m\"Thirty\"\u001b[0m, \u001b[31m\"Fourty\"\u001b[0m, \u001b[31m\"Fifty\"\u001b[0m, \"Sixty\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyyxsfoki.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyyxsfoki.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyyxsfoki.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Sixtydef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010305
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eleven = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twelve = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val thirteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val fourteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fifteen = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpyyxsfoki.scala:25:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"Twenty\"\u001b[0m, \u001b[31m\"Thirty\"\u001b[0m, \u001b[31m\"Fourty\"\u001b[0m, \u001b[31m\"Fifty\"\u001b[0m, \"Sixty\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyyxsfoki.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyyxsfoki.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyyxsfoki.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Sixtydef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010305
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).map(_ -> \"One\")\n        val twos = arr.filter(_ <= 99).map(_ -> \"Two\")\n        val threes = arr.filter(_ <= 999).map(_ -> \"Three\")\n        val fours = arr.filter(_ <= 9999).map(_ -> \"Four\")\n        val fives = arr.filter(_ <= 99999).map(_ -> \"Five\")\n        val sixes = arr.filter(_ <= 999999).map(_ -> \"Six\")\n        val sevens = arr.filter(_ <= 9999999).map(_ -> \"Seven\")\n        val eights = arr.filter(_ <= 999999999).map(_ -> \"Eight\")\n        val nines = arr.filter(_ <= 99999999999).map(_ -> \"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpto4h4qg0.scala:19:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnines\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).map(_ -> \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    number too large\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpto4h4qg0.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[(Long, String)], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010307
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ - 1).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ - 10).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ - 100).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ - 1000).reverse\n        val tenThousands = arr.filter(_ <= 999999).sortBy(_ - 10000).reverse\n        val oneThousands = arr.filter(_ <= 9999999).sortBy(_ - 100000).reverse\n        val oneMillions = arr.filter(_ <= 999999999).sortBy(_ - 1000000).reverse\n        val oneBillions = arr.filter(_ <= 99999999999).sortBy(_ - 10000000).reverse\n        val oneTrillions = arr.filter(_ <= 999999999999).sortBy(_ - 100000000).reverse\n        val oneQuadrillions = arr.filter(_ <= 999999999999999).sortBy(_ - 1000000000).reverse\n        val oneQuintillions = arr.filter(_ <= 999999999999999999).sortBy(_ - 100000000000).reverse\n        val oneBillions = arr.filter(_ <= 999999999999999999).sortBy(_ - 1000000000000).reverse\n        val oneTrillions = arr.filter(_ <= 999999999999999999).sortBy(_ - 10000000000000).reverse\n        val oneQuadrillions = arr.filter(_ <= 999999999999999999999).sortBy(_ - 100000000000000).reverse\n        val oneQuintillions = arr.filter(_ <= 999999999999999999999).sortBy(_ - 1000000000000000).reverse\n        val oneBillions = arr.filter(_ <= 999999999999999999999).sortBy(_ - 10000000000000000).reverse\n        val oneTrillions = arr.filter(_ <= 999999999999999999999).sortBy(_ - 100000000000000000).reverse\n        val oneQuadrillions = arr.filter(_ <= 999999999999999999999).sortBy(_ - 1000000000000000000).reverse\n        val oneQuintillions = arr.filter(_ <= 999999999999999999999).sortBy(_ - 10000000000000000000).reverse\n        val oneBillions = arr.filter(_ <= 999999999999999999999).sortBy(_ - 100000000000000000000).reverse\n        val oneTrillions = arr.filter(_ <= 999999999999999999999).sortBy(_ - 1000000000000000000000).reverse\n        val oneQuadrillions = arr.filter(_ <= 9999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp98236vd0.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp98236vd0.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneBillions is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneBillions\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp98236vd0.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneTrillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999\u001b[0m).sortBy(_ - \u001b[31m10000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneTrillions is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneTrillions\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp98236vd0.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneQuadrillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999\u001b[0m).sortBy(_ - \u001b[31m100000000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneQuadrillions is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneQuadrillions\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp98236vd0.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[3",
      "stdout": "",
      "timestamp": 1660010307
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpw289_amx.scala:29:113 --------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpw289_amx.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpw289_amx.scala:18:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpw289_amx.scala:20:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m",
      "stdout": "",
      "timestamp": 1660010308
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ < 10)\n        val tens = arr.filter(_ >= 10 && _ < 100)\n        val hundreds = arr.filter(_ >= 100)\n        val reversed = ones + tens + hundreds.reverse\n        val named = reversed.map(i => if (i < 10) \"One\" else if (i < 100) \"Two\" else \"Three\")\n        reversed.map(i => named(i)).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp8ty9e2of.scala:12:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(_ >= \u001b[31m10\u001b[0m && _ < \u001b[31m100\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8ty9e2of.scala:14:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010307
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ >= 10 && _ <= 99).sorted\n        val hundreds = arr.filter(_ >= 100).sorted\n        val reversed = ones + tens + hundreds.reverse\n        reversed.map(_.toString).map(_.toUpperCase).map(_.toChar).map(_.toString.charAt(0)).map(name => s\"$name\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp8go8v3r2.scala:12:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(_ >= \u001b[31m10\u001b[0m && _ <= \u001b[31m99\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8go8v3r2.scala:14:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010308
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringList = tensReversedString.split(\",\")\n        val tensReversedStringListReversed = tensReversedStringList.reverse\n        val tensReversedStringListReversedString = tensReversedStringListReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringListReversedStringList = tensReversedStringListReversedString.split(\",\")\n        val tensReversedStringListReversedStringListReversed = tensReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedString = tensReversedStringListReversedStringListReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringListReversedStringListReversedStringList = tensReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringListReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedStringListReversedStringListReversedStringListReversedString = tensReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjp2pbqml.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjp2pbqml.scala:21:73 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListReversedStringListReversedStringList\u001b[0m = tensReversedStringListReversedStringListReversedStringList.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringListReversedStringListReversedStringList\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjp2pbqml.scala:22:81 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListReversedStringListReversedStringListReversed\u001b[0m = tensReversedStringListReversedStringListReversedStringListReversed.map(\u001b[36mx\u001b[0m => x.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringListReversedStringListReversedStringListReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjp2pbqml.scala:23:87 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListReversedStringListReversedStringListReversedString\u001b[0m = tensReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: tensReversedStringListReversedStringListReversedStringListReversedStringList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation a",
      "stdout": "",
      "timestamp": 1660010309
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9)\n        val tens = arr.filter(x => x >= 10 && x <= 99)\n        val hundreds = arr.filter(x => x >= 100 && x <= 999)\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999)\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999)\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999)\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999999999)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000001 && x <= 999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000002 && x <= 999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000003 && x <= 999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000004 && x <= 999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000005 && x <= 99999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9364cgx3.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9364cgx3.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000003\u001b[0m && x <= \u001b[31m999999999999999999999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9364cgx3.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9364cgx3.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9364cgx3.scala:19:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0",
      "stdout": "",
      "timestamp": 1660010308
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x >= 10 && x <= 19).map(x => s\"Two\")\n        val threes = arr.filter(x => x >= 20 && x <= 29).map(x => s\"Three\")\n        val fours = arr.filter(x => x >= 30 && x <= 39).map(x => s\"Four\")\n        val fives = arr.filter(x => x >= 40 && x <= 49).map(x => s\"Five\")\n        val sixes = arr.filter(x => x >= 50 && x <= 59).map(x => s\"Six\")\n        val sevens = arr.filter(x => x >= 60 && x <= 69).map(x => s\"Seven\")\n        val eights = arr.filter(x => x >= 70 && x <= 89).map(x => s\"Eight\")\n        val nines = arr.filter(x => x >= 90 && x <= 999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmeiw9y4v.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneThousandHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcw5op_7c.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcw5op_7c.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcw5op_7c.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000\u001b[0m && x < \u001b[31m100000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcw5op_7c.scala:20:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        numb",
      "stdout": "",
      "timestamp": 1660010309
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmud5uu7c.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmud5uu7c.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmud5uu7c.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmud5uu7c.scala:19:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmud5uu7c.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmu",
      "stdout": "",
      "timestamp": 1660010282
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvr8xz_cp.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvr8xz_cp.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvr8xz_cp.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvr8xz_cp.scala:19:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvr8xz_cp.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvr",
      "stdout": "",
      "timestamp": 1660010309
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 19).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000001 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000002 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000003 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000004 && x <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyiqsmodd.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyiqsmodd.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyiqsmodd.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyiqsmodd.scala:19:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyiqsmodd.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyi",
      "stdout": "",
      "timestamp": 1660010310
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9)\n        val tens = arr.filter(x => x >= 10 && x <= 99)\n        val hundreds = arr.filter(x => x >= 100 && x <= 999)\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999)\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999)\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999)\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999)\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999)\n        val tenThousandThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999)\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999)\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999999)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999999999)\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999999)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 9999999999999999999)\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 99999999999999999999)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999999)\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999)\n        val tenThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x <= 999999999999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytngmef_.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpytngmef_.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m9999999999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpytngmef_.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpytngmef_.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000\u001b[0m && x <= \u001b[31m999999999999999999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousandThousa",
      "stdout": "",
      "timestamp": 1660010311
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eleven = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twelve = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val thirteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val fourteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fifteen = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpv0_lyj7_.scala:25:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"Twenty\"\u001b[0m, \u001b[31m\"Thirty\"\u001b[0m, \u001b[31m\"Forty\"\u001b[0m, \u001b[31m\"Fifty\"\u001b[0m, \"Sixty\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpv0_lyj7_.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv0_lyj7_.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv0_lyj7_.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Sixtydef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ >= 1 && _ <= 9).sortBy(_ * 10).reverse\n        result.map(i => if (i < 10) \"One\" else if (i < 20) \"Two\" else if (i < 30) \"Three\" else \"Four\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpylbr_ild.scala:11:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = arr.filter(_ >= \u001b[31m1\u001b[0m && _ <= \u001b[31m9\u001b[0m).sortBy(_ * \u001b[31m10\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Wrong number of parameters, expected: 1\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010310
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x <= 18).map(x => s\"Two\")\n        val threes = arr.filter(x => x <= 27).map(x => s\"Three\")\n        val fours = arr.filter(x => x <= 36).map(x => s\"Four\")\n        val fives = arr.filter(x => x <= 45).map(x => s\"Five\")\n        val sixes = arr.filter(x => x <= 54).map(x => s\"Six\")\n        val sevens = arr.filter(x => x <= 63).map(x => s\"Seven\")\n        val eights = arr.filter(x => x <= 72).map(x => s\"Eight\")\n        val nines = arr.filter(x => x <= 81).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1w4z31cl.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010297
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgjlrwv1h.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgjlrwv1h.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgjlrwv1h.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgjlrwv1h.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                    ",
      "stdout": "",
      "timestamp": 1660010294
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val twos = arr.filter(x => x % 10 == 2)\n        val threes = arr.filter(x => x % 10 == 3)\n        val fours = arr.filter(x => x % 10 == 4)\n        val fives = arr.filter(x => x % 10 == 5)\n        val sixes = arr.filter(x => x % 10 == 6)\n        val sevens = arr.filter(x => x % 10 == 7)\n        val eights = arr.filter(x => x % 10 == 8)\n        val nines = arr.filter(x => x % 10 == 9)\n        val onesAndTwos = ones + twos\n        val onesAndThrees = ones + threes\n        val onesAndFours = ones + fours\n        val onesAndFives = ones + fives\n        val onesAndSixes = ones + sixes\n        val onesAndSevens = ones + sevens\n        val onesAndEights = ones + eights\n        val onesAndNines = ones + nines\n        val twosAndThrees = twos + threes\n        val twosAndFours = twos + fours\n        val twosAndFives = twos + fives\n        val twosAndSixes = twos + sixes\n        val twosAndSevens = twos + sevens\n        val twosAndEights = twos + eights\n        val twosAndNines = twos + nines\n        val threesAndFours = threes + fours\n        val threesAndFives = threes + fives\n        val threesAndSixes = threes + sixes\n        val threesAndSevens = threes + sevens\n        val threesAndEights = threes + eights\n        val threesAndNines = threes + nines\n        val foursAndFives = fours + fives\n        val foursAndSixes = fours + sixes\n        val foursAndSevens = fours + sevens\n        val foursAndEights = fours + eights\n        val foursAndNines = fours + nines\n        val fivesAndSixes = fives + sixes\n        val fivesAndSevens = fives + sevens\n        val fivesAndEights = fives + eights\n        val fivesAndNines = fives + nines\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7qb33lc.scala:20:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwos\u001b[0m = ones + twos\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7qb33lc.scala:21:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThrees\u001b[0m = ones + threes\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7qb33lc.scala:22:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndFours\u001b[0m = ones + fours\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7qb33lc.scala:23:32 -----------------------",
      "stdout": "",
      "timestamp": 1660010286
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x >= 10 && x <= 19).map(x => s\"Two\")\n        val threes = arr.filter(x => x >= 20 && x <= 29).map(x => s\"Three\")\n        val fours = arr.filter(x => x >= 30 && x <= 39).map(x => s\"Four\")\n        val fives = arr.filter(x => x >= 40 && x <= 49).map(x => s\"Five\")\n        val sixes = arr.filter(x => x >= 50 && x <= 59).map(x => s\"Six\")\n        val sevens = arr.filter(x => x >= 60 && x <= 69).map(x => s\"Seven\")\n        val eights = arr.filter(x => x >= 70 && x <= 89).map(x => s\"Eight\")\n        val nines = arr.filter(x => x >= 90 && x <= 999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmeiw9y4v.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwrq5_6m5.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twenty = List(\"Twenty\", \"Twenty One\", \"Twenty Two\", \"Twenty Three\", \"Twenty Four\", \"Twenty Five\", \"Twenty Six\", \"Twenty Seven\", \"Twenty Eight\", \"Twenty Nine\")\n        val hundred = List(\"Hundred\", \"Hundred One\", \"Hundred Two\", \"Hundred Three\", \"Hundred Four\", \"Hundred Five\", \"Hundred Six\", \"Hundred Seven\", \"Hundred Eight\", \"Hundred Nine\")\n        val thousand = List(\"Thousand\", \"Thousand One\", \"Thousand Two\", \"Thousand Three\", \"Thousand Four\", \"Thousand Five\", \"Thousand Six\", \"Thousand Seven\", \"Thousand Eight\", \"Thousand Nine\")\n        val hundredAndOne = List(\"Hundred and One\", \"Hundred and One Hundred\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and One Hundred One\", \"Hundred and \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpmfrz4py2.scala:16:792 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredAndOne\u001b[0m = List(\u001b[31m\"Hundred and One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \u001b[31m\"Hundred and One Hundred One\"\u001b[0m, \"Hundred and \n\u001b[31m\u001b[31m   |\u001b[0mu001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed ",
      "stdout": "",
      "timestamp": 1660010313
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val hundredThousands = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val thousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000000 && x <= 9999999998).toList\n        val oneThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val hundredThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999998).toList\n        val thousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999998).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999998).toList\n        val hundredThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val thousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999998).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999998).toList\n        val hundredThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999999999).toList\n        val thousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999).toList\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp8qf7krql.scala:31:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8qf7krql.scala:18:70 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8qf7krql.scala:19:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m9999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8qf7krql.scala:20:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8qf7krql.scala:21:60 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        ",
      "stdout": "",
      "timestamp": 1660010316
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100)\n        val reversed = ones + tens + hundreds\n        reversed.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else \"Three\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmyvg9uhl.scala:14:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010319
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwrq5_6m5.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999989).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998987).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998987654).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998987654321).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999989876543211).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999898765432111).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998987654321111).sorted\n        val one\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz7c7t3h8.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpz7c7t3h8.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999998987\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpz7c7t3h8.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999989876543211\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz7c7t3h8.scala:18:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz7c7t3h8.scala:19:50 ------",
      "stdout": "",
      "timestamp": 1660010319
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999999999).sorted\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sorted\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpfu7hbn3v.scala:28:121 --------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfu7hbn3v.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999999999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfu7hbn3v.scala:18:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfu7hbn3v.scala:19:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                   ",
      "stdout": "",
      "timestamp": 1660010317
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val twos = arr.filter(x => x % 10 == 2)\n        val threes = arr.filter(x => x % 10 == 3)\n        val fours = arr.filter(x => x % 10 == 4)\n        val fives = arr.filter(x => x % 10 == 5)\n        val sixes = arr.filter(x => x % 10 == 6)\n        val sevens = arr.filter(x => x % 10 == 7)\n        val eights = arr.filter(x => x % 10 == 8)\n        val nines = arr.filter(x => x % 10 == 9)\n        val onesAndTwelves = ones + twelves\n        val onesAndTwentyFours = ones + twentyFours\n        val onesAndTwentyFives = ones + twentyFives\n        val onesAndTwentySixes = ones + twentySixes\n        val onesAndTwentySevens = ones + twentySevens\n        val onesAndTwentyEights = ones + twentyEights\n        val onesAndTwentyNines = ones + twentyNines\n        val onesAndTwentyOnesAndTwelves = onesAndTwelves + ones\n        val onesAndTwentyOnesAndTwentyFours = onesAndTwentyFours + ones\n        val onesAndTwentyOnesAndTwentyFives = onesAndTwentyFives + ones\n        val onesAndTwentyOnesAndTwentySixes = onesAndTwentySixes + ones\n        val onesAndTwentyOnesAndTwentySevens = onesAndTwentySevens + ones\n        val onesAndTwentyOnesAndTwentyEights = onesAndTwentyEights + ones\n        val onesAndTwentyOnesAndTwentyNines = onesAndTwentyNines + ones\n        val onesAndTwentyOnesAndTwentyOnesAndTwelves = onesAndTwentyOnesAndTwelves + ones\n        val onesAndTwentyOnesAndTwentyOnesAndTwentyFours = onesAndTwentyOnesAndTwentyFours + ones\n        val onesAndTwentyOnesAndTwenty\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa7dzm8i0.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa7dzm8i0.scala:20:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwelves\u001b[0m = ones + twelves\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa7dzm8i0.scala:20:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwelves\u001b[0m = ones + twelves\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: twelves\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa7dzm8i0.scala:21:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwentyFours\u001b[0m = ones + twentyFours\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa7dzm8i0.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0",
      "stdout": "",
      "timestamp": 1660010321
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 19).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandsOnes = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandsOnes = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val oneThousandsOnesOnes = arr.filter(x => x >= 1000000000 && x <= 999999999999999).toList\n        val oneThousandsOnesOnesOnes = arr.filter(x => x >= 100000000000 && x <= 999999999999999999).toList\n        val oneThousandsOnesOnesOnesOnes = arr.filter(x => x >= 10000000000000 && x <= 9999999999999999999).toList\n        val oneThousandsOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandsOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000000001 && x <= 9999999999999999999999999999999).toList\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 10000000000000000101 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 100000000000000001001 && x <= 999999999999999999999999999999999999999).toList\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 10000000000000000100101 && x <= 9999999999999999999999999999999999999999999).toList\n        val oneThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfw68qcvk.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfw68qcvk.scala:18:69 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandsOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfw68qcvk.scala:19:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandsOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfw68qcvk.scala:20:60 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandsOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfw68qcvk.scala:20:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandsOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfw68qcvk.scala:21:64",
      "stdout": "",
      "timestamp": 1660010319
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x >= 10 && x <= 19).map(x => s\"Two\")\n        val threes = arr.filter(x => x >= 20 && x <= 29).map(x => s\"Three\")\n        val fours = arr.filter(x => x >= 30 && x <= 39).map(x => s\"Four\")\n        val fives = arr.filter(x => x >= 40 && x <= 49).map(x => s\"Five\")\n        val sixes = arr.filter(x => x >= 50 && x <= 59).map(x => s\"Six\")\n        val sevens = arr.filter(x => x >= 60 && x <= 69).map(x => s\"Seven\")\n        val eights = arr.filter(x => x >= 70 && x <= 89).map(x => s\"Eight\")\n        val nines = arr.filter(x => x >= 90 && x <= 999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmeiw9y4v.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1).map(x => x.toString)\n        val twos = arr.filter(x => x % 10 == 2).map(x => x.toString)\n        val threes = arr.filter(x => x % 10 == 3).map(x => x.toString)\n        val fours = arr.filter(x => x % 10 == 4).map(x => x.toString)\n        val fives = arr.filter(x => x % 10 == 5).map(x => x.toString)\n        val sixes = arr.filter(x => x % 10 == 6).map(x => x.toString)\n        val sevens = arr.filter(x => x % 10 == 7).map(x => x.toString)\n        val eights = arr.filter(x => x % 10 == 8).map(x => x.toString)\n        val nines = arr.filter(x => x % 10 == 9).map(x => x.toString)\n        val onesAndTwos = ones + twos\n        val onesAndThrees = ones + threes\n        val onesAndFours = ones + fours\n        val onesAndFives = ones + fives\n        val onesAndSixes = ones + sixes\n        val onesAndSevens = ones + sevens\n        val onesAndEights = ones + eights\n        val onesAndNines = ones + nines\n        val twosAndThrees = twos + threes\n        val twosAndFours = twos + fours\n        val twosAndFives = twos + fives\n        val twosAndSixes = twos + sixes\n        val twosAndSevens = twos + sevens\n        val twosAndEights = twos + eights\n        val twosAndNines = twos + nines\n        val threesAndFours = threes + fours\n        val threesAndFives = threes + fives\n        val threesAndSixes = threes + sixes\n        val threesAndSevens = threes + sevens\n        val threesAndEights = threes + eights\n        val threesAndNines = threes + nines\n        val foursAndFives = fours + fives\n        val foursAndSixes = fours + sixes\n        val foursAndSevens = fours + sevens\n        val foursAndEights = fours + eights\n        val foursAndNines = fours + nines\n        val fivesAndS\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa5qelk73.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa5qelk73.scala:20:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwos\u001b[0m = ones + twos\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa5qelk73.scala:21:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThrees\u001b[0m = ones + threes\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa5qelk73.scala:22:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndFours\u001b[0m = ones + fours\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Int",
      "stdout": "",
      "timestamp": 1660010324
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwrq5_6m5.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 19).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2osfmx6e.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2osfmx6e.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2osfmx6e.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2osfmx6e.scala:19:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2osfmx6e.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2o",
      "stdout": "",
      "timestamp": 1660010290
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpiukdexrt.scala:27:118 --------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpiukdexrt.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiukdexrt.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiukdexrt.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[3",
      "stdout": "",
      "timestamp": 1660010318
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9)\n        val tens = arr.filter(_ >= 10 && _ <=99)\n        val hundreds = arr.filter(_ >= 100)\n        val reversed = ones + tens + hundreds.reverse\n        val named = reversed.map(i => s\"${i.toString.toUpperCase()}\").mkString(\"\")\n        named.replaceAll(\"0\",\"One\").replaceAll(\"1\",\"Two\").replaceAll(\"2\",\"Three\").replaceAll(\"3\",\"Four\").replaceAll(\"4\",\"Five\").replaceAll(\"5\",\"Six\").replaceAll(\"6\",\"Seven\").replaceAll(\"7\",\"Eight\").replaceAll(\"8\",\"Nine\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpyx8kt_l4.scala:12:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(_ >= \u001b[31m10\u001b[0m && _ <=\u001b[31m99\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyx8kt_l4.scala:14:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010320
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvr8xz_cp.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvr8xz_cp.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvr8xz_cp.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvr8xz_cp.scala:19:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvr8xz_cp.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvr",
      "stdout": "",
      "timestamp": 1660010309
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9 && x >= 1)\n        val tens = arr.filter(x => x <= 99 && x >= 10)\n        val hundreds = arr.filter(x => x <= 999 && x >= 100)\n        val thousands = arr.filter(x => x <= 9999 && x >= 1000)\n        val tenThousands = arr.filter(x => x <= 999999 && x >= 10000)\n        val oneThousands = arr.filter(x => x <= 999999 && x >= 100000)\n        val oneHundreds = arr.filter(x => x <= 999999 && x >= 1000000)\n        val oneThousandHundreds = arr.filter(x => x <= 999999 && x >= 10000000)\n        val oneThousandThousands = arr.filter(x => x <= 999999 && x >= 100000010)\n        val oneThousandThousandHundreds = arr.filter(x => x <= 999999 && x >= 1000000100)\n        val oneThousandThousandThousands = arr.filter(x => x <= 999999 && x >= 10000001000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x <= 999999 && x >= 100000010000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x <= 999999 && x >= 1000000100000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x <= 999999 && x >= 10000001000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999 && x >= 100000010000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 999999 && x >= 1000000100000010)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 999999 && x >= 10000001000000100)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999 && x >= 100000010000001000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 999999 && x >= 1000000100000010000)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999 && x >= 10000001000000100000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxghj0ypj.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxghj0ypj.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m999999\u001b[0m && x >= \u001b[31m10000001000000100\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxghj0ypj.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m999999\u001b[0m && x >= \u001b[31m100000010000001000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxghj0ypj.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m999999\u001b[0m && x >= \u001b[31m1000000100000010000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThou",
      "stdout": "",
      "timestamp": 1660010319
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999999999).sorted\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sorted\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpfu7hbn3v.scala:28:121 --------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfu7hbn3v.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999999999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfu7hbn3v.scala:18:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfu7hbn3v.scala:19:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                   ",
      "stdout": "",
      "timestamp": 1660010317
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eleven = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twelve = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val thirteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val fourteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fifteen = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpyyxsfoki.scala:25:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"Twenty\"\u001b[0m, \u001b[31m\"Thirty\"\u001b[0m, \u001b[31m\"Fourty\"\u001b[0m, \u001b[31m\"Fifty\"\u001b[0m, \"Sixty\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyyxsfoki.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyyxsfoki.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyyxsfoki.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Sixtydef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010305
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = mutable.List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = mutable.List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = mutable.List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eleven = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twelve = mutable.List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val thirteen = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val fourteen = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp_nfk9lwq.scala:24:122 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfourteen\u001b[0m = mutable.List(\u001b[31m\"Ten\"\u001b[0m, \u001b[31m\"Eleven\"\u001b[0m, \u001b[31m\"Twelve\"\u001b[0m, \u001b[31m\"Thirteen\"\u001b[0m, \u001b[31m\"Fourteen\"\u001b[0m, \u001b[31m\"Fifteen\"\u001b[0m, \u001b[31m\"Sixteen\"\u001b[0m, \u001b[31m\"Seventeen\"\u001b[0m, \"Eighteen\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_nfk9lwq.scala:26:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_nfk9lwq.scala:11:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mone\u001b[0m = mutable.List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_nfk9lwq.scala:12:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwo\u001b[0m = mutable.List(\u001b[31m\"Ten\"\u001b[0m, \u001b[31m\"Eleven\"\u001b[0m, \u001b[31m\"Twelve\"\u001b[0m, \u001b[31m\"Thirteen\"\u001b[0m, \u001b[31m\"Fourteen\"\u001b[0m, \u001b[31m\"Fifteen\"\u001b[0m, \u001b[31m\"Sixteen\"\u001b[0m, \u001b[31m\"Seventeen\"\u001b[0m, \u001b[31m\"Eighteen\"\u001b[0m, \u001b[31m\"Nineteen\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_nfk9lwq.scala:13:20 ------------------------\u001b[0m\u001b[",
      "stdout": "",
      "timestamp": 1660010319
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp8f9brigq.scala:27:113 --------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8f9brigq.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8f9brigq.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8f9brigq.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000",
      "stdout": "",
      "timestamp": 1660010282
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9 && x >= 1)\n        val tens = arr.filter(x => x <= 99 && x >= 10)\n        val hundreds = arr.filter(x => x <= 999 && x >= 100)\n        val thousands = arr.filter(x => x <= 9999 && x >= 1000)\n        val tenThousands = arr.filter(x => x <= 999999 && x >= 10000)\n        val oneThousands = arr.filter(x => x <= 9999999 && x >= 100000)\n        val oneHundreds = arr.filter(x => x <= 999999999 && x >= 1000000)\n        val oneThousandThousands = arr.filter(x => x <= 99999999999 && x >= 10000000)\n        val oneThousandThousandThousands = arr.filter(x => x <= 999999999 && x >= 100000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x <= 99999999999 && x >= 1000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999 && x >= 10000000000)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999 && x >= 100000000000)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999 && x >= 1000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999 && x >= 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999 && x >= 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999 && x >= 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999 && x >= 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999 && x >= 100000000000000000)\n        val oneThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8y32m3yy.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8y32m3yy.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m999999999\u001b[0m && x >= \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8y32m3yy.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m999999999\u001b[0m && x >= \u001b[31m100000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8y32m3yy.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999\u001b[0m && x >= \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010321
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eleven = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twelve = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val thirteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val fourteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fifteen = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpyyxsfoki.scala:25:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"Twenty\"\u001b[0m, \u001b[31m\"Thirty\"\u001b[0m, \u001b[31m\"Fourty\"\u001b[0m, \u001b[31m\"Fifty\"\u001b[0m, \"Sixty\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyyxsfoki.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyyxsfoki.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyyxsfoki.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Sixtydef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010305
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9 && x >= 1)\n        val tens = arr.filter(x => x <= 99 && x >= 10)\n        val hundreds = arr.filter(x => x <= 999 && x >= 100)\n        val thousands = arr.filter(x => x <= 9999 && x >= 1000)\n        val tenThousands = arr.filter(x => x <= 99999 && x >= 10000)\n        val oneThousands = arr.filter(x => x <= 999999 && x >= 100000)\n        val oneHundreds = arr.filter(x => x <= 999999 && x >= 1000000)\n        val oneThousandHundreds = arr.filter(x => x <= 9999999 && x >= 10000000)\n        val oneThousandThousands = arr.filter(x => x <= 999999999 && x >= 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x <= 99999999999 && x >= 1000000000)\n        val oneThousandThousandThousands = arr.filter(x => x <= 999999999999999 && x >= 10000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999999 && x >= 100000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999 && x >= 1000000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999999 && x >= 10000000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999 && x >= 10000000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999 && x >= 100000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999999 && x >= 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999 && x >= 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999999 && x >= 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz6_xdxzs.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpz6_xdxzs.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999999999\u001b[0m && x >= \u001b[31m100000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpz6_xdxzs.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(x \n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6_xdxzs.scala:20:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999\u001b[0m && x >= \u001b[31m1000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6_xdxzs.scala:21:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21",
      "stdout": "",
      "timestamp": 1660010320
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 9999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 999999999999999).toList\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 999999999999999).toList\n        val tenThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm0dcumxe.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm0dcumxe.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm0dcumxe.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm0dcumxe.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousandThousands ",
      "stdout": "",
      "timestamp": 1660010321
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999999999).toList\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 9999999999999999999).toList\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 99999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999999).toList\n        val tenThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val tenThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeeudl4zx.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpeeudl4zx.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x <= \u001b[31m99999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpeeudl4zx.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeeudl4zx.scala:20:83 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   ",
      "stdout": "",
      "timestamp": 1660010320
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).map(_ -> \"One\")\n        val tens = arr.filter(_ <= 99).map(_ -> \"Ten\")\n        val hundreds = arr.filter(_ <= 999).map(_ -> \"Hundred\")\n        val thousands = arr.filter(_ <= 9999).map(_ -> \"Thousand\")\n        val tenThousands = arr.filter(_ <= 999999).map(_ -> \"TenThousand\")\n        val oneThousands = arr.filter(_ <= 9999999).map(_ -> \"OneThousand\")\n        val oneHundreds = arr.filter(_ <= 999999999).map(_ -> \"OneHundred\")\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).map(_ -> \"OneThousandHundred\")\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999).map(_ -> \"OneThousandThousandHundred\")\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).map(_ -> \"OneThousandThousandThousandHundred\")\n        val oneHundredThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).map(_ -> \"OneHundredThousandThousandThousandHundred\")\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).map(_ -> \"OneHundredThousandThousandThousandThousandHundred\")\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).map(_ -> \"OneHundredThousandThousandThousandThousandThousandHundred\")\n        val oneHundredThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).map(_ -> \"OneHundredThousandThousandThousandThousandThousandThousandHundred\")\n        val oneHundredThousandThousandThousandThousandThousandThousandH\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5kh5ct42.scala:26:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5kh5ct42.scala:18:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).map(_ -> \u001b[31m\"OneThousandHundred\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5kh5ct42.scala:20:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).map(_ -> \u001b[31m\"OneThousandThousandThousandHundred\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5kh5ct42.scala:21:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).map(_ -> \u001b[31m\"OneHundredThousandThousandThousandHundred\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5kh5ct42.scala:22:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).map(_ -> \u001b[31m\"OneHundredThousandThousandThousandThousandHundred\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m",
      "stdout": "",
      "timestamp": 1660010320
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgjlrwv1h.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgjlrwv1h.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgjlrwv1h.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgjlrwv1h.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                    ",
      "stdout": "",
      "timestamp": 1660010294
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val tenMillions = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneMillions = arr.filter(x => x >= 10000000 && x < 100000000)\n        val tenBillions = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneBillions = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val tenTrillions = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneTrillions = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val tenQuadrillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneQuadrillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val tenQuintillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneQuintillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val tenSextillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneSextillions = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val tenSeptillions = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneSeptillions = arr.filter(x => x >= 10000000000000000000 && x < 1000000000000000000)\n        val tenOctillions = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneOctillions = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val tenNonillions = arr.filter(x => x >= 100000000000000000000 && x < 10000000000000000000000)\n        val oneNonillions = arr.filter(x => x >= 10000000000000000000000 && x < 1000000000000000000000000)\n        val tenMillionsOnes = arr.filter(x => x >= 1000000000000000000000000 && x < 100000000000000000000000000)\n        val oneMillionsOnes = arr.filter(x \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7v2cmul3.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7v2cmul3.scala:20:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7v2cmul3.scala:21:48 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7v2cmul3.scala:21:67 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7v2cmul3.scala:22:48 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7v2cmul3.scala:22:68 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && ",
      "stdout": "",
      "timestamp": 1660010322
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9)\n        val tens = arr.filter(x => x >= 10 && x <= 99)\n        val hundreds = arr.filter(x => x >= 100 && x <= 999)\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999)\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999)\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x <= 99999999999)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 999999999999)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999999)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999999999)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000000 && x <= 999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000000000 && x <= 9999999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000000000 && x <= 99999999999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000000000000 && x <= 999999999999999999999999999999999999999)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000000000000000 && x <= 99999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5ama_2qv.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5ama_2qv.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999999999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5ama_2qv.scala:18:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5ama_2qv.scala:19:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5ama_2qv.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b",
      "stdout": "",
      "timestamp": 1660010321
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val twos = arr.filter(x => x % 10 == 2)\n        val threes = arr.filter(x => x % 10 == 3)\n        val fours = arr.filter(x => x % 10 == 4)\n        val fives = arr.filter(x => x % 10 == 5)\n        val sixes = arr.filter(x => x % 10 == 6)\n        val sevens = arr.filter(x => x % 10 == 7)\n        val eights = arr.filter(x => x % 10 == 8)\n        val nines = arr.filter(x => x % 10 == 9)\n        val onesAndTwelves = ones + twelves\n        val onesAndTwentyFours = ones + twentyFours\n        val onesAndTwentyFives = ones + twentyFives\n        val onesAndTwentySixes = ones + twentySixes\n        val onesAndTwentySevens = ones + twentySevens\n        val onesAndTwentyEights = ones + twentyEights\n        val onesAndTwentyNines = ones + twentyNines\n        val onesAndTwentyOnesAndTwelves = onesAndTwelves + ones\n        val onesAndTwentyOnesAndTwentyFours = onesAndTwentyFours + ones\n        val onesAndTwentyOnesAndTwentyFives = onesAndTwentyFives + ones\n        val onesAndTwentyOnesAndTwentySixes = onesAndTwentySixes + ones\n        val onesAndTwentyOnesAndTwentySevens = onesAndTwentySevens + ones\n        val onesAndTwentyOnesAndTwentyEights = onesAndTwentyEights + ones\n        val onesAndTwentyOnesAndTwentyNines = onesAndTwentyNines + ones\n        val onesAndTwentyOnesAndTwentyOnesAndTwelves = onesAndTwentyOnesAndTwelves + ones\n        val onesAndTwentyOnesAndTwentyOnesAndTwentyFours = onesAndTwentyOnesAndTwentyFours + ones\n        val onesAndTwentyOnesAndTwenty\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa7dzm8i0.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa7dzm8i0.scala:20:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwelves\u001b[0m = ones + twelves\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa7dzm8i0.scala:20:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwelves\u001b[0m = ones + twelves\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: twelves\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa7dzm8i0.scala:21:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwentyFours\u001b[0m = ones + twentyFours\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa7dzm8i0.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0",
      "stdout": "",
      "timestamp": 1660010321
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 19).toList\n        val hundreds = arr.filter(x => x >= 20 && x <= 99).toList\n        val thousands = arr.filter(x => x >= 100 && x <= 999).toList\n        val tenThousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val oneThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneHundreds = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm_bjly_i.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm_bjly_i.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m9999999999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpm_bjly_i.scala:19:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpm_bjly_i.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpm_bjly_i.scala:20:92 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[3",
      "stdout": "",
      "timestamp": 1660010321
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val twos = arr.filter(x => x % 10 == 2)\n        val threes = arr.filter(x => x % 10 == 3)\n        val fours = arr.filter(x => x % 10 == 4)\n        val fives = arr.filter(x => x % 10 == 5)\n        val sixes = arr.filter(x => x % 10 == 6)\n        val sevens = arr.filter(x => x % 10 == 7)\n        val eights = arr.filter(x => x % 10 == 8)\n        val nines = arr.filter(x => x % 10 == 9)\n        val onesAndTwelves = ones + twelves\n        val onesAndTwentyFours = ones + twentyFours\n        val onesAndTwentyFives = ones + twentyFives\n        val onesAndTwentySixes = ones + twentySixes\n        val onesAndTwentySevens = ones + twentySevens\n        val onesAndTwentyEights = ones + twentyEights\n        val onesAndTwentyNines = ones + twentyNines\n        val onesAndTwentyOnesAndTwelves = onesAndTwelves + onesAndTwentyFours\n        val onesAndTwentyOnesAndTwentyFours = onesAndTwentyFours + onesAndTwentyFives\n        val onesAndTwentyOnesAndTwentyFives = onesAndTwentyFives + onesAndTwentySixes\n        val onesAndTwentyOnesAndTwentySixes = onesAndTwentySixes + onesAndTwentySevens\n        val onesAndTwentyOnesAndTwentySevens = onesAndTwentySevens + onesAndTwentyEights\n        val onesAndTwentyOnesAndTwentyEights = onesAndTwentyEights + onesAndTwentyNines\n        val onesAndTwentyOnesAndTwentyNines = onesAndTwentyNines + onesAndTwentyOnesAndTwelves\n        val onesAndTwentyOnesAndTwentyOnesAndTwelves = onesAndTwentyOnesAndTwelves + onesAndTwenty\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp06h_b65f.scala:20:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwelves\u001b[0m = ones + twelves\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp06h_b65f.scala:20:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwelves\u001b[0m = ones + twelves\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: twelves\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp06h_b65f.scala:21:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwentyFours\u001b[0m = ones + twentyFours\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp06h_b65f.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwentyFours\u001b[0m = ones + twentyFours\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: tw",
      "stdout": "",
      "timestamp": 1660010325
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgjlrwv1h.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgjlrwv1h.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgjlrwv1h.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgjlrwv1h.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                    ",
      "stdout": "",
      "timestamp": 1660010294
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x >= 10 && x <= 19).map(x => s\"Two\")\n        val threes = arr.filter(x => x >= 20 && x <= 29).map(x => s\"Three\")\n        val fours = arr.filter(x => x >= 30 && x <= 39).map(x => s\"Four\")\n        val fives = arr.filter(x => x >= 40 && x <= 49).map(x => s\"Five\")\n        val sixes = arr.filter(x => x >= 50 && x <= 59).map(x => s\"Six\")\n        val sevens = arr.filter(x => x >= 60 && x <= 69).map(x => s\"Seven\")\n        val eights = arr.filter(x => x >= 70 && x <= 89).map(x => s\"Eight\")\n        val nines = arr.filter(x => x >= 90 && x <= 999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmeiw9y4v.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortWith(_ < _)\n        val tens = arr.filter(_ <= 99).sortWith(_ < _)\n        val hundreds = arr.filter(_ <= 999).sortWith(_ < _)\n        val thousands = arr.filter(_ <= 9999).sortWith(_ < _)\n        val tenThousands = arr.filter(_ <= 99999).sortWith(_ < _)\n        val oneThousands = arr.filter(_ <= 999999).sortWith(_ < _)\n        val oneHundreds = arr.filter(_ <= 9999999).sortWith(_ < _)\n        val oneThousandHundreds = arr.filter(_ <= 999999999).sortWith(_ < _)\n        val oneThousandThousandHundreds = arr.filter(_ <= 99999999999).sortWith(_ < _)\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999).sortWith(_ < _)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).sortWith(_ < _)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sortWith(_ < _)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).sortWith(_ < _)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sortWith(_ < _)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).sortWith(_ < _)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).sortWith(_ < _)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppdxh511s.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmppdxh511s.scala:19:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sortWith(_ < _)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmppdxh511s.scala:20:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999\u001b[0m).sortWith(_ < _)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmppdxh511s.scala:21:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sortWith(_ < _)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmppdxh511s.scala:22:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sortWith(_ < _)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmppdxh511s.scala:23:90 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m     ",
      "stdout": "",
      "timestamp": 1660010323
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).sorted\n        val tens = arr.filter(x => x >= 10 && x <= 99).sorted\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).sorted\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).sorted\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).sorted\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).sorted\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).sorted\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).sorted\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000001 && x <= 99999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000002 && x <= 99999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000003 && x <= 999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000004 && x <= 999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmplg4uxusw.scala:27:110 --------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplg4uxusw.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000003\u001b[0m && x <= \u001b[31m999999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmplg4uxusw.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmplg4uxusw.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000",
      "stdout": "",
      "timestamp": 1660010326
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eleven = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twelve = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val thirteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val fourteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fifteen = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpyyxsfoki.scala:25:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"Twenty\"\u001b[0m, \u001b[31m\"Thirty\"\u001b[0m, \u001b[31m\"Fourty\"\u001b[0m, \u001b[31m\"Fifty\"\u001b[0m, \"Sixty\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyyxsfoki.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyyxsfoki.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyyxsfoki.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Sixtydef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010305
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ - 1).reverse\n        val tens = arr.filter(_ >= 10 && _ < 20).sortBy(_ - 10).reverse\n        val hundreds = arr.filter(_ >= 20 && _ < 100).sortBy(_ - 20).reverse\n        val thousands = arr.filter(_ >= 100 && _ < 1000).sortBy(_ - 100).reverse\n        val tenThousands = arr.filter(_ >= 1000 && _ < 10000).sortBy(_ - 1000).reverse\n        val oneThousands = arr.filter(_ >= 10000 && _ < 100000).sortBy(_ - 10000).reverse\n        val oneThousandHundreds = arr.filter(_ >= 100000 && _ < 1000000).sortBy(_ - 100000).reverse\n        val oneThousandThousands = arr.filter(_ >= 1000000 && _ < 10000000).sortBy(_ - 1000000).reverse\n        val oneThousandThousandHundreds = arr.filter(_ >= 10000000 && _ < 100000000).sortBy(_ - 10000000).reverse\n        val oneThousandThousandThousands = arr.filter(_ >= 100000000 && _ < 1000000000).sortBy(_ - 100000000).reverse\n        val oneThousandThousandThousandHundreds = arr.filter(_ >= 1000000000 && _ < 10000000000).sortBy(_ - 1000000000).reverse\n        val oneThousandThousandThousandThousands = arr.filter(_ >= 10000000000 && _ < 100000000000).sortBy(_ - 10000000000).reverse\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ >= 100000000000 && _ < 1000000000000).sortBy(_ - 100000000000).reverse\n        val oneThousandThousandThousandThousandThousands = arr.filter(_ >= 1000000000000 && _ < 10000000000000).sortBy(_ - 1000000000000).reverse\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ >= 10000000000000 && _ < 100000000000000).sortBy(_ - 10000000000000).reverse\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(_ >= 100000000000000 && _ < 1000000000000000).sortBy(_ - 100000000000000).reverse\n        val one\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8xfvjvbe.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp8xfvjvbe.scala:12:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(_ >= \u001b[31m10\u001b[0m && _ < \u001b[31m20\u001b[0m).sortBy(_ - \u001b[31m10\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp8xfvjvbe.scala:13:34 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundreds\u001b[0m = arr.filter(_ >= \u001b[31m20\u001b[0m && _ < \u001b[31m100\u001b[0m).sortBy(_ - \u001b[31m20\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp8xfvjvbe.scala:14:35 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousands\u001b[0m = arr.filter(_ >= \u001b[31m100\u001b[0m && _ < \u001b[31m1000\u001b[0m).sortBy(_ - \u001b[31m100\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp8xfvjvbe.scala:15:38 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousands\u001b[0m = arr.filter(_ >= \u001b[31m1000\u001b[0m && _ < \u001b[31m10000\u001b[0m).sortBy(_ - \u001b[31m1000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp8xfvjvbe.scala:16:38 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousands\u001b[0m = arr.filter(_ >= \u001b[31m10000\u001b[0m && _ < \u001b[31m100000\u001b[0m).sortBy(_ - \u001b[31m10000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m",
      "stdout": "",
      "timestamp": 1660010327
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9 && x >= 1)\n        val tens = arr.filter(x => x <= 99 && x >= 10)\n        val hundreds = arr.filter(x => x <= 999 && x >= 100)\n        val thousands = arr.filter(x => x <= 9999 && x >= 1000)\n        val tenThousands = arr.filter(x => x <= 999999 && x >= 10000)\n        val oneThousands = arr.filter(x => x <= 9999999 && x >= 100000)\n        val oneHundreds = arr.filter(x => x <= 999999999 && x >= 1000000)\n        val oneThousandHundreds = arr.filter(x => x <= 99999999999 && x >= 10000000)\n        val oneThousandThousandHundreds = arr.filter(x => x <= 9999999990000 && x >= 100000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999900000 && x >= 1000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999900000 && x >= 10000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999900000 && x >= 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999900000 && x >= 1000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999900000 && x >= 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999900000 && x >= 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999900000 && x >= 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999900000 && x >= 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999900000 && x >= 100000000000000000)\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpoa8swmh4.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m9999999999900000\u001b[0m && x >= \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpoa8swmh4.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m9999999999900000\u001b[0m && x >= \u001b[31m100000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpoa8swmh4.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m9999999999900000\u001b[0m && x >= \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandTho",
      "stdout": "",
      "timestamp": 1660010330
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twenty = List(\"Twenty\", \"Twenty One\", \"Twenty Two\", \"Twenty Three\", \"Twenty Four\", \"Twenty Five\", \"Twenty Six\", \"Twenty Seven\", \"Twenty Eight\", \"Twenty Nine\")\n        val hundred = List(\"Hundred\", \"Hundred One\", \"Hundred Two\", \"Hundred Three\", \"Hundred Four\", \"Hundred Five\", \"Hundred Six\", \"Hundred Seven\", \"Hundred Eight\", \"Hundred Nine\")\n        val thousand = List(\"Thousand\", \"Thousand One\", \"Thousand Two\", \"Thousand Three\", \"Thousand Four\", \"Thousand Five\", \"Thousand Six\", \"Thousand Seven\", \"Thousand Eight\", \"Thousand Nine\")\n        val tenThousand = List(\"TenThousand\", \"TenThousand One\", \"TenThousand Two\", \"TenThousand Three\", \"TenThousand Four\", \"TenThousand Five\", \"TenThousand Six\", \"TenThousand Seven\", \"TenThousand Eight\", \"TenThousand Nine\")\n        val hundredThousand = List(\"HundredThousand\", \"HundredThousand One\", \"HundredThousand Two\", \"HundredThousand Three\", \"HundredThousand Four\", \"HundredThousand Five\", \"HundredThousand Six\", \"HundredThousand Seven\", \"HundredThousand Eight\", \"HundredThousand Nine\")\n        val million = List(\"Million\", \"Million One\", \"Million Two\", \"Million Three\", \"Million Four\", \"Million Five\", \"Million Six\", \"Million Seven\", \"Million Eight\", \"Million Nine\")\n        val billion = List(\"Billion\", \"Billion One\", \"Billion Two\", \"Billion Three\", \"Billion Four\", \"Billion Five\", \"B\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp8xdcrvoh.scala:19:117 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbillion\u001b[0m = List(\u001b[31m\"Billion\"\u001b[0m, \u001b[31m\"Billion One\"\u001b[0m, \u001b[31m\"Billion Two\"\u001b[0m, \u001b[31m\"Billion Three\"\u001b[0m, \u001b[31m\"Billion Four\"\u001b[0m, \u001b[31m\"Billion Five\"\u001b[0m, \"B\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8xdcrvoh.scala:21:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8xdcrvoh.scala:20:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xdcrvoh.scala:21:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Bdef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010329
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val twos = arr.filter(x => x % 10 == 2)\n        val threes = arr.filter(x => x % 10 == 3)\n        val fours = arr.filter(x => x % 10 == 4)\n        val fives = arr.filter(x => x % 10 == 5)\n        val sixes = arr.filter(x => x % 10 == 6)\n        val sevens = arr.filter(x => x % 10 == 7)\n        val eights = arr.filter(x => x % 10 == 8)\n        val nines = arr.filter(x => x % 10 == 9)\n        val onesAndTwelves = ones + twelves\n        val onesAndTwentyFours = ones + twentyFours\n        val onesAndTwentyFives = ones + twentyFives\n        val onesAndTwentySixes = ones + twentySixes\n        val onesAndTwentySevens = ones + twentySevens\n        val onesAndTwentyEights = ones + twentyEights\n        val onesAndTwentyNines = ones + twentyNines\n        val onesAndThirtyFours = ones + thirtyFours\n        val onesAndThirtyFives = ones + thirtyFives\n        val onesAndThirtySixes = ones + thirtySixes\n        val onesAndThirtySevens = ones + thirtySevens\n        val onesAndThirtyEights = ones + thirtyEights\n        val onesAndThirtyNines = ones + thirtyNines\n        val onesAndFortyFours = ones + fortyFours\n        val onesAndFortyFives = ones + fortyFives\n        val onesAndFortySixes = ones + fortySixes\n        val onesAndFortySevens = ones + fortySevens\n        val onesAndFortyEights = ones + fortyEights\n        val onesAndFortyNines = ones + fortyNines\n        val onesAndFiftyFours = ones + fiftyFours\n        val onesAndFiftyFives = ones + fiftyFives\n        val onesAndFiftySixes = ones + fiftySixes\n        val one\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj81j6yyf.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj81j6yyf.scala:20:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwelves\u001b[0m = ones + twelves\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj81j6yyf.scala:20:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwelves\u001b[0m = ones + twelves\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: twelves\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj81j6yyf.scala:21:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwentyFours\u001b[0m = ones + twentyFours\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj81j6yyf.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0",
      "stdout": "",
      "timestamp": 1660010336
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twenty = List(\"Twenty\", \"Twentyone\", \"Twentytwo\", \"Twentythree\", \"Twentyfour\", \"Twentyfive\", \"Twentysix\", \"Twentyseven\", \"Twentyeight\", \"Twentynine\")\n        val hundred = List(\"Hundred\", \"Hundredone\", \"Hundredtwo\", \"Hundredthree\", \"Hundredfour\", \"Hundredfive\", \"Hundredsix\", \"Hundredseven\", \"Hundredeight\", \"Hundrednine\")\n        val thousand = List(\"Thousand\", \"Thousandone\", \"Thousandtwo\", \"Thousandthree\", \"Thousandfour\", \"Thousandfive\", \"Thousandsix\", \"Thousandseven\", \"Thousandeight\", \"Thousandnine\")\n        val tenThousand = List(\"TenThousand\", \"TenThousandone\", \"TenThousandtwo\", \"TenThousandthree\", \"TenThousandfour\", \"TenThousandfive\", \"TenThousandsix\", \"TenThousandseven\", \"TenThousandeight\", \"TenThousandnine\")\n        val oneThousand = List(\"OneThousand\", \"OneThousandone\", \"OneThousandtwo\", \"OneThousandthree\", \"OneThousandfour\", \"OneThousandfive\", \"OneThousandsix\", \"OneThousandseven\", \"OneThousandeight\", \"OneThousandnine\")\n        val hundredThousand = List(\"HundredThousand\", \"HundredThousandone\", \"HundredThousandtwo\", \"HundredThousandthree\", \"HundredThousandfour\", \"HundredThousandfive\", \"HundredThousandsix\", \"HundredThousandseven\", \"HundredThousandeight\", \"HundredThousandnine\")\n        val thousandThousand = List(\"ThousandThousand\", \"ThousandThousandone\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpdmx5ee5y.scala:19:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousand\u001b[0m = List(\u001b[31m\"ThousandThousand\"\u001b[0m, \"ThousandThousandone\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdmx5ee5y.scala:21:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmx5ee5y.scala:20:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdmx5ee5y.scala:21:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: ThousandThousandonedef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010331
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val tensReversedString = tensReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedString = onesReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val result = onesReversedStringList.zip(tensReversedStringList).map(x => x.mkString(\"\")).mkString(\"\")\n        val resultList = result.split(\"\\\\D+\")\n        resultList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplyffvf9r.scala:19:83 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = onesReversedStringList.zip(tensReversedStringList).map(\u001b[36mx\u001b[0m => x.mkString(\u001b[31m\"\"\u001b[0m)).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue mkString is not a member of (String, String) - did you mean x.toString?\n\u001b[31m\u001b[31m-- Error: /tmp/tmplyffvf9r.scala:19:96 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = onesReversedStringList.zip(tensReversedStringList).map(\u001b[36mx\u001b[0m => x.mkString(\u001b[31m\"\"\u001b[0m)).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010332
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(_ >= 1 && _ <= 9).sortWith(_ < _).reverse\n        val one = \"One\"\n        val two = \"Two\"\n        val three = \"Three\"\n        val four = \"Four\"\n        val five = \"Five\"\n        val six = \"Six\"\n        val seven = \"Seven\"\n        val eight = \"Eight\"\n        val nine = \"Nine\"\n        val result = result.map(x => if (x == 0) one else if (x == 1) two else if (x == 2) three else if (x == 3) four else if (x == 4) five else if (x == 5) six else if (x == 6) seven else if (x == 7) eight else if (x == 8) nine else x)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4eg3kvo9.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = result.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x == \u001b[31m0\u001b[0m) one \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m1\u001b[0m) two \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m2\u001b[0m) three \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m3\u001b[0m) four \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m4\u001b[0m) five \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m5\u001b[0m) six \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m6\u001b[0m) seven \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m7\u001b[0m) eight \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m8\u001b[0m) nine \u001b[33melse\u001b[0m x)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mresult is already defined as \u001b[33mvalue\u001b[0m \u001b[35mresult\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp4eg3kvo9.scala:11:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = arr.filter(_ >= \u001b[31m1\u001b[0m && _ <= \u001b[31m9\u001b[0m).sortWith(_ < _).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4eg3kvo9.scala:22:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        result\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (result : List[Long])\n\u001b[31m   |\u001b[0m        Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010332
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneMillions = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneBillions = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneTrillions = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneQuadrillions = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneQuintillions = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneBillions = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneTrillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneQuadrillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneQuintillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneBillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneTrillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneQuadrillions = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneQuintillions = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneBillions = arr.filter(x => x >= 10000000000000000000 && x < 1000000000000000000)\n        val oneTrillions = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneQuadrillions = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val oneQuintillions = arr.filter(x => x >= 100000000000000000000 && x < 10000000000000000000000)\n        val oneBillions = arr.filter(x => x >= 10000000000000000000000 && x < 100000000000000000000000)\n        val oneTrillions = arr.filter(x => x >= 100000000000000000000000 && x < 1000000000000000000000000)\n        val oneQuadrillions = arr.filter(x => x >= \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpp4a23p97.scala:36:50 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneQuadrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp4a23p97.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneBillions is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneBillions\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp4a23p97.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneTrillions is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneTrillions\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp4a23p97.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneQuadrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x < \u001b[31m100000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneQuadrillions is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneQuadrillions\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded method",
      "stdout": "",
      "timestamp": 1660010333
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val tensReversedString = tensReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedString = onesReversed.map(x => x.toString).mkString(\"\")\n        val onesReversedStringList = onesReversedString.split(\"(?<=\\\\d)\")\n        val tensReversedStringList = tensReversedString.split(\"(?<=\\\\d)\")\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val onesReversed\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsi3f780q.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsi3f780q.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringListLength\u001b[0m = onesReversedStringList.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedStringListLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringListLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsi3f780q.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListLength\u001b[0m = tensReversedStringList.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringListLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringListLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsi3f780q.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringListLength\u001b[0m = onesReversedStringList.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedStringListLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringListLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsi3f780q.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListLength\u001b[0m = tensReversedStringList.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010333
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedWithNames = onesReversed.map(x => s\"${x}${Ones(x)}\")\n        val tensReversedWithNames = tensReversed.map(x => s\"${x}${Tens(x)}\")\n        val tensReversedWithNamesAndOnes = tensReversedWithNames.zip(onesReversedWithNames)\n        val tensReversedWithNamesAndOnesReversed = tensReversedWithNamesAndOnes.reverse\n        val tensReversedWithNamesAndOnesReversedWithNames = tensReversedWithNamesAndOnesReversed.map(x => s\"${x}${TensAndOnes(x)}\")\n        val tensReversedWithNamesAndOnesReversedWithNamesAndOnes = tensReversedWithNamesAndOnesReversedWithNames.zip(onesReversedWithNames)\n        val tensReversedWithNamesAndOnesReversedWithNamesAndOnesReversed = tensReversedWithNamesAndOnesReversedWithNamesAndOnes.reverse\n        val tensReversedWithNamesAndOnesReversedWithNamesAndOnesReversedWithNames = tensReversedWithNamesAndOnesReversedWithNamesAndOnesReversed.map(x => s\"${x}${TensAndOnesAndOnes(x)}\")\n        val tensReversedWithNamesAndOnesReversedWithNamesAndOnesReversedWithNamesAndOnes = tensReversedWithNamesAndOnesReversedWithNamesAndOnesReversedWithNames.zip(onesReversedWithNames)\n        val tensReversedWithNamesAndOnesReversedWithNamesAndOnesReversedWithNamesAndOnesReversed = tensReversedWithNamesAndOnesReversedWithNamesAndOnesReversedWithNamesAndOnes.reverse\n        val tensReversedWithNamesAndOnesReversedWithNamesAndOnesReversedWithNamesAndOnesReversedWithNames = tensReversedWithNamesAndOnesReversedWithNamesAndOnesReversedWithNamesAndOnesReversed.map(x => s\"${x}${TensAndOnesAndOnesAndOnes(x)}\")\n        val tensReverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb66ss7zk.scala:27:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb66ss7zk.scala:15:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedWithNames\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => \u001b[31ms\"\u001b[0m${x}${Ones(x)}\u001b[31m\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: Ones\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb66ss7zk.scala:16:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedWithNames\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => \u001b[31ms\"\u001b[0m${x}${Tens(x)}\u001b[31m\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: Tens\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb66ss7zk.scala:19:114 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedWithNamesAndOnesReversedWithNames\u001b[0m = tensReversedWithNamesAndOnesReversed.map(\u001b[36mx\u001b[0m => \u001b[31ms\"\u001b[0m${x}${TensAndOnes(x)}\u001b[31m\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Not found: TensAndOnes\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb66ss7zk.scala:22:162 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedWithNamesAndOnesReversedWithNamesAndOnesReversedWithNames\u001b[0m = tensReversedWithNamesAndOnesRe",
      "stdout": "",
      "timestamp": 1660010332
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val eleven = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val twelve = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val thirteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fourteen = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val fifteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp7udmatgs.scala:25:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \"Five\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7udmatgs.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7udmatgs.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7udmatgs.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Fivedef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010291
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneMillions = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneBillions = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneTrillions = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneQuadrillions = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneQuintillions = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneBillion = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneTrillion = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneQuadrillion = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneQuintillion = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneBillion = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneTrillion = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneQuadrillion = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneQuintillion = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneBillion = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val oneTrillion = arr.filter(x => x >= 100000000000000000000 && x < 1000000000000000000000)\n        val oneQuadrillion = arr.filter(x => x >= 1000000000000000000000 && x < 10000000000000000000000)\n        val oneQuintillion = arr.filter(x => x >= 10000000000000000000000 && x < 100000000000000000000000)\n        val oneBillion = arr.filter(x => x >= 100000000000000000000000 && x < 1000000000000000000000000)\n        val oneTrillion = arr.filter(x => x >= 1000000000000000000000000 && x < 10000000000000000000000000)\n        val oneQuadrillion = arr.filter(x => x >= \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp_bw1sb6z.scala:36:49 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneQuadrillion\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_bw1sb6z.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillion\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneBillion is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneBillion\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_bw1sb6z.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneTrillion\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000\u001b[0m && x < \u001b[31m100000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneTrillion is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneTrillion\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_bw1sb6z.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneQuadrillion\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x < \u001b[31m1000000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneQuadrillion is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneQuadrillion\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m ",
      "stdout": "",
      "timestamp": 1660010333
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).map(\"One\")\n        val twos = arr.filter(_ <= 99).map(\"Two\")\n        val threes = arr.filter(_ <= 999).map(\"Three\")\n        val fours = arr.filter(_ <= 9999).map(\"Four\")\n        val fives = arr.filter(_ <= 99999).map(\"Five\")\n        val sixes = arr.filter(_ <= 999999).map(\"Six\")\n        val sevens = arr.filter(_ <= 9999999).map(\"Seven\")\n        val eights = arr.filter(_ <= 999999999).map(\"Eight\")\n        val nines = arr.filter(_ <= 99999999999).map(\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqovtw3s0.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mones\u001b[0m = arr.filter(_ <= \u001b[31m9\u001b[0m).map(\u001b[31m\"One\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    (\u001b[32m\"One\"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                                          Required: Long => Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqovtw3s0.scala:12:43 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwos\u001b[0m = arr.filter(_ <= \u001b[31m99\u001b[0m).map(\u001b[31m\"Two\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (\u001b[32m\"Two\"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                                           Required: Long => Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqovtw3s0.scala:13:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthrees\u001b[0m = arr.filter(_ <= \u001b[31m999\u001b[0m).map(\u001b[31m\"Three\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (\u001b[32m\"Three\"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                                            Required: Long => Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqovtw3s0.scala:14:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfours\u001b[0m = arr.filter(_ <= \u001b[31m9999\u001b[0m).map(\u001b[31m\"Four\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (\u001b[32m\"Four\"\u001b[0m : String)\n\u001b[31m   |\u001b[0m                                             Required: Long => Any\n\u001b[31m",
      "stdout": "",
      "timestamp": 1660010334
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000001 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000002 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000003 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000004 && x <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmsycmd76.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmsycmd76.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmsycmd76.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmsycmd76.scala:19:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmsycmd76.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpms",
      "stdout": "",
      "timestamp": 1660010333
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x >= 10 && x <= 19).map(x => s\"Two\")\n        val threes = arr.filter(x => x >= 20 && x <= 29).map(x => s\"Three\")\n        val fours = arr.filter(x => x >= 30 && x <= 39).map(x => s\"Four\")\n        val fives = arr.filter(x => x >= 40 && x <= 49).map(x => s\"Five\")\n        val sixes = arr.filter(x => x >= 50 && x <= 59).map(x => s\"Six\")\n        val sevens = arr.filter(x => x >= 60 && x <= 69).map(x => s\"Seven\")\n        val eights = arr.filter(x => x >= 70 && x <= 89).map(x => s\"Eight\")\n        val nines = arr.filter(x => x >= 90 && x <= 999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmeiw9y4v.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x >= 10 && x <= 19).map(x => s\"Two\")\n        val threes = arr.filter(x => x >= 20 && x <= 29).map(x => s\"Three\")\n        val fours = arr.filter(x => x >= 30 && x <= 39).map(x => s\"Four\")\n        val fives = arr.filter(x => x >= 40 && x <= 49).map(x => s\"Five\")\n        val sixes = arr.filter(x => x >= 50 && x <= 59).map(x => s\"Six\")\n        val sevens = arr.filter(x => x >= 60 && x <= 69).map(x => s\"Seven\")\n        val eights = arr.filter(x => x >= 70 && x <= 89).map(x => s\"Eight\")\n        val nines = arr.filter(x => x >= 90 && x <= 999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmeiw9y4v.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 19).toList\n        val hundreds = arr.filter(x => x >= 20 && x <= 99).toList\n        val thousands = arr.filter(x => x >= 100 && x <= 999).toList\n        val tenThousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val oneThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneHundreds = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpc0wpefp5.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpc0wpefp5.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m999999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpc0wpefp5.scala:19:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpc0wpefp5.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpc0wpefp5.scala:20:92 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[",
      "stdout": "",
      "timestamp": 1660010333
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwrq5_6m5.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n        val tensReversedStringReversed = tensReversedString.reverse\n        val tensReversedStringReversedString = tensReversedStringReversed.map(x => Three(x))\n        val tensReversedStringReversedStringReversed = tensReversedStringReversedString.reverse\n        val tensReversedStringReversedStringReversedString = tensReversedStringReversedStringReversed.map(x => Four(x))\n        val tensReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedString.reverse\n        val tensReversedStringReversedStringReversedStringReversedString = tensReversedStringReversedStringReversedStringReversed.map(x => Five(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedStringReversedString.reverse\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedStringReversedStringReversed.map(x => Six(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedStringReversedStringReversedString.reverse\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed.map(x => Seven(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed.map(x => Eight(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedString\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptm42hf9t.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringReversedStringReversedStringReversedStringReversedStringReversed\u001b[0m = tensReversedStringReversedStringReversedStringReversedStringReversedString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringReversedStringReversedStringReversedStringReversedStringReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  tensReversedStringReversedStringReversedStringReversedStringReversedStringReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptm42hf9t.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed\u001b[0m = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed.map(\u001b[36mx\u001b[0m => Eight(x))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptm42hf9t.scala:15:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesRever",
      "stdout": "",
      "timestamp": 1660010333
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwrq5_6m5.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ < 10)\n        val tens = arr.filter(_ >= 10 && _ < 100)\n        val hundreds = arr.filter(_ >= 100)\n        val reversed = ones + tens + hundreds.reverse\n        val names = new mutable.HashMap[Long, String]()\n        val one = names(1L) = \"One\"\n        val two = names(2L) = \"Two\"\n        val three = names(3L) = \"Three\"\n        val four = names(4L) = \"Four\"\n        val five = names(5L) = \"Five\"\n        val six = names(6L) = \"Six\"\n        val seven = names(7L) = \"Seven\"\n        val eight = names(8L) = \"Eight\"\n        val nine = names(9L) = \"Nine\"\n        reversed.map(x => if (x < 10) names(x) else names(x - 10) + names(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpql3tbi_i.scala:12:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(_ >= \u001b[31m10\u001b[0m && _ < \u001b[31m100\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpql3tbi_i.scala:14:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpql3tbi_i.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnames\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010335
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val eleven = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val twelve = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val thirteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fourteen = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val fifteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp7udmatgs.scala:25:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \"Five\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7udmatgs.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7udmatgs.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7udmatgs.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Fivedef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010291
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).map(x => s\"One\")\n        val twos = arr.filter(x => x < 20).map(x => s\"Two\")\n        val threes = arr.filter(x => x < 30).map(x => s\"Three\")\n        val fours = arr.filter(x => x < 40).map(x => s\"Four\")\n        val fives = arr.filter(x => x < 50).map(x => s\"Five\")\n        val sixes = arr.filter(x => x < 60).map(x => s\"Six\")\n        val sevens = arr.filter(x => x < 70).map(x => s\"Seven\")\n        val eights = arr.filter(x => x < 80).map(x => s\"Eight\")\n        val nines = arr.filter(x => x < 90).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvw5w582a.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010335
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwrq5_6m5.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twenty = List(\"Twenty\", \"TwentyOne\", \"TwentyTwo\", \"TwentyThree\", \"TwentyFour\", \"TwentyFive\", \"TwentySix\", \"TwentySeven\", \"TwentyEight\", \"TwentyNine\")\n        val thirty = List(\"Thirty\", \"ThirtyOne\", \"ThirtyTwo\", \"ThirtyThree\", \"ThirtyFour\", \"ThirtyFive\", \"ThirtySix\", \"ThirtySeven\", \"ThirtyEight\", \"ThirtyNine\")\n        val hundred = List(\"Hundred\", \"HundredOne\", \"HundredTwo\", \"HundredThree\", \"HundredFour\", \"HundredFive\", \"HundredSix\", \"HundredSeven\", \"HundredEight\", \"HundredNine\")\n        val thousand = List(\"Thousand\", \"ThousandOne\", \"ThousandTwo\", \"ThousandThree\", \"ThousandFour\", \"ThousandFive\", \"ThousandSix\", \"ThousandSeven\", \"ThousandEight\", \"ThousandNine\")\n        val tenThousand = List(\"TenThousand\", \"TenThousandOne\", \"TenThousandTwo\", \"TenThousandThree\", \"TenThousandFour\", \"TenThousandFive\", \"TenThousandSix\", \"TenThousandSeven\", \"TenThousandEight\", \"TenThousandNine\")\n        val hundredThousand = List(\"HundredThousand\", \"HundredThousandOne\", \"HundredThousandTwo\", \"HundredThousandThree\", \"HundredThousandFour\", \"HundredThousandFive\", \"HundredThousandSix\", \"HundredThousandSeven\", \"HundredThousandEight\", \"HundredThousandNine\")\n        val million = List(\"Million\", \"MillionOne\", \"MillionTwo\", \"MillionThree\", \"MillionFour\", \"MillionFive\", \"MillionSix\", \"Million\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpy7krp3ku.scala:19:126 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmillion\u001b[0m = List(\u001b[31m\"Million\"\u001b[0m, \u001b[31m\"MillionOne\"\u001b[0m, \u001b[31m\"MillionTwo\"\u001b[0m, \u001b[31m\"MillionThree\"\u001b[0m, \u001b[31m\"MillionFour\"\u001b[0m, \u001b[31m\"MillionFive\"\u001b[0m, \u001b[31m\"MillionSix\"\u001b[0m, \"Million\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy7krp3ku.scala:21:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7krp3ku.scala:20:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy7krp3ku.scala:21:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Milliondef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010334
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x >= 10 && x <= 19).map(x => s\"Two\")\n        val threes = arr.filter(x => x >= 20 && x <= 29).map(x => s\"Three\")\n        val fours = arr.filter(x => x >= 30 && x <= 39).map(x => s\"Four\")\n        val fives = arr.filter(x => x >= 40 && x <= 49).map(x => s\"Five\")\n        val sixes = arr.filter(x => x >= 50 && x <= 59).map(x => s\"Six\")\n        val sevens = arr.filter(x => x >= 60 && x <= 69).map(x => s\"Seven\")\n        val eights = arr.filter(x => x >= 70 && x <= 89).map(x => s\"Eight\")\n        val nines = arr.filter(x => x >= 90 && x <= 999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmeiw9y4v.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x >= 10 && x <= 19).map(x => s\"Two\")\n        val threes = arr.filter(x => x >= 20 && x <= 29).map(x => s\"Three\")\n        val fours = arr.filter(x => x >= 30 && x <= 39).map(x => s\"Four\")\n        val fives = arr.filter(x => x >= 40 && x <= 49).map(x => s\"Five\")\n        val sixes = arr.filter(x => x >= 50 && x <= 59).map(x => s\"Six\")\n        val sevens = arr.filter(x => x >= 60 && x <= 69).map(x => s\"Seven\")\n        val eights = arr.filter(x => x >= 70 && x <= 89).map(x => s\"Eight\")\n        val nines = arr.filter(x => x >= 90 && x <= 999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmeiw9y4v.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val twos = arr.filter(x => x % 10 == 2)\n        val threes = arr.filter(x => x % 10 == 3)\n        val fours = arr.filter(x => x % 10 == 4)\n        val fives = arr.filter(x => x % 10 == 5)\n        val sixes = arr.filter(x => x % 10 == 6)\n        val sevens = arr.filter(x => x % 10 == 7)\n        val eights = arr.filter(x => x % 10 == 8)\n        val nines = arr.filter(x => x % 10 == 9)\n        val onesReversed = ones.reverse\n        val twosReversed = twos.reverse\n        val threesReversed = threes.reverse\n        val foursReversed = fours.reverse\n        val fivesReversed = fives.reverse\n        val sixesReversed = sixes.reverse\n        val sevensReversed = sevens.reverse\n        val eightsReversed = eights.reverse\n        val ninesReversed = nines.reverse\n        val onesReversedStrings = onesReversed.map(x => One(x))\n        val twosReversedStrings = twosReversed.map(x => Two(x))\n        val threesReversedStrings = threesReversed.map(x => Three(x))\n        val foursReversedStrings = foursReversed.map(x => Four(x))\n        val fivesReversedStrings = fivesReversed.map(x => Five(x))\n        val sixesReversedStrings = sixesReversed.map(x => Six(x))\n        val sevensReversedStrings = sevensReversed.map(x => Seven(x))\n        val eightsReversedStrings = eightsReversed.map(x => Eight(x))\n        val ninesReversedStrings = ninesReversed.map(x => Nine(x))\n        val allStrings = onesReversedStrings ++ twosReversedStrings ++ threesReversedStrings ++ foursReversedStrings ++ fivesReversedStrings ++ sixesReversedStrings ++ sevensReversedStrings ++ eightsReversedStrings ++ ninesReversedStrings\n        val allStringsReversed = allStrings.reverse\n        val allStringsReversedStrings = allStringsReversed.map(x => All(x))\n        val allStringsReverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt4ib4r6y.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt4ib4r6y.scala:29:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStrings\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt4ib4r6y.scala:30:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwosReversedStrings\u001b[0m = twosReversed.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt4ib4r6y.scala:31:60 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthreesReversedStrings\u001b[0m = threesReversed.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt4ib4r6y.scala:32:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfoursReversedStrings\u001b[0m = foursReversed.map(\u001b[36mx\u001b[0m => Four(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: Four\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[",
      "stdout": "",
      "timestamp": 1660010334
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1).sorted\n        val twos = arr.filter(x => x % 10 == 2).sorted\n        val threes = arr.filter(x => x % 10 == 3).sorted\n        val fours = arr.filter(x => x % 10 == 4).sorted\n        val fives = arr.filter(x => x % 10 == 5).sorted\n        val sixes = arr.filter(x => x % 10 == 6).sorted\n        val sevens = arr.filter(x => x % 10 == 7).sorted\n        val eights = arr.filter(x => x % 10 == 8).sorted\n        val nines = arr.filter(x => x % 10 == 9).sorted\n        val onesReversed = ones.reverse\n        val twosReversed = twos.reverse\n        val threesReversed = threes.reverse\n        val foursReversed = fours.reverse\n        val fivesReversed = fives.reverse\n        val sixesReversed = sixes.reverse\n        val sevensReversed = sevens.reverse\n        val eightsReversed = eights.reverse\n        val ninesReversed = nines.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val twosReversedString = twosReversed.map(x => Two(x))\n        val threesReversedString = threesReversed.map(x => Three(x))\n        val foursReversedString = foursReversed.map(x => Four(x))\n        val fivesReversedString = fivesReversed.map(x => Five(x))\n        val sixesReversedString = sixesReversed.map(x => Six(x))\n        val sevensReversedString = sevensReversed.map(x => Seven(x))\n        val eightsReversedString = eightsReversed.map(x => Eight(x))\n        val ninesReversedString = ninesReversed.map(x => Nine(x))\n        val onesReversedString = onesReversed.map(x => One(x))\n        val twosReversedString = twosReversed.map(x => Two(x))\n        val threesReversedString = threesReversed.map(x => Three(x))\n        val foursReversedString = foursReversed.map(x => Four(x))\n        val fivesReversedString = fivesReversed.map(x => Five(x))\n        val sixesReversedString = sixesReversed.map(x => Six(x))\n        val seven\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkce5wzqq.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkce5wzqq.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedString is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkce5wzqq.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwosReversedString\u001b[0m = twosReversed.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtwosReversedString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtwosReversedString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkce5wzqq.scala:40:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthreesReversedString\u001b[0m = threesReversed.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mthreesReversedString is already defined as \u001b[33mvalue\u001b[0m \u001b[35mthreesReversedString\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkce5wzqq.scala:41:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfoursReversedString\u001b[0m = foursReversed.map(\u001b[36mx\u001b[0m => Four(x))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mfoursReversedString is alread",
      "stdout": "",
      "timestamp": 1660010336
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwr8qyhq6.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwr8qyhq6.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwr8qyhq6.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwr8qyhq6.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandT",
      "stdout": "",
      "timestamp": 1660010337
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twenty = List(\"Twenty\", \"Twentyone\", \"Twentytwo\", \"Twentythree\", \"Twentyfour\", \"Twentyfive\", \"Twentysix\", \"Twentyseven\", \"Twentyeight\", \"Twentynine\")\n        val hundred = List(\"Hundred\", \"Hundredone\", \"Hundredtwo\", \"Hundredthree\", \"Hundredfour\", \"Hundredfive\", \"Hundredsix\", \"Hundredseven\", \"Hundredeight\", \"Hundrednine\")\n        val thousand = List(\"Thousand\", \"Thousandone\", \"Thousandtwo\", \"Thousandthree\", \"Thousandfour\", \"Thousandfive\", \"Thousandsix\", \"Thousandseven\", \"Thousandeight\", \"Thousandnine\")\n        val tenThousand = List(\"TenThousand\", \"TenThousandone\", \"TenThousandtwo\", \"TenThousandthree\", \"TenThousandfour\", \"TenThousandfive\", \"TenThousandsix\", \"TenThousandseven\", \"TenThousandeight\", \"TenThousandnine\")\n        val hundredThousand = List(\"HundredThousand\", \"HundredThousandone\", \"HundredThousandtwo\", \"HundredThousandthree\", \"HundredThousandfour\", \"HundredThousandfive\", \"HundredThousandsix\", \"HundredThousandseven\", \"HundredThousandeight\", \"HundredThousandnine\")\n        val million = List(\"Million\", \"Millionone\", \"Milliontwo\", \"Millionthree\", \"Millionfour\", \"Millionfive\", \"Millionsix\", \"Millionseven\", \"Millioneight\", \"Millionnine\")\n        val billion = List(\"Billion\", \"Billionone\", \"Billiontwo\", \"Billionthree\", \"Billionfour\", \"Billionfive\", \"Billionsix\", \"Billionseven\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp0kiix16i.scala:19:142 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbillion\u001b[0m = List(\u001b[31m\"Billion\"\u001b[0m, \u001b[31m\"Billionone\"\u001b[0m, \u001b[31m\"Billiontwo\"\u001b[0m, \u001b[31m\"Billionthree\"\u001b[0m, \u001b[31m\"Billionfour\"\u001b[0m, \u001b[31m\"Billionfive\"\u001b[0m, \u001b[31m\"Billionsix\"\u001b[0m, \u001b[31m\"Billionseven\"\u001b[0m, \"\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0kiix16i.scala:20:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val one = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val hundred = mutable.List(\"Hundred\")\n        val thousand = mutable.List(\"Thousand\")\n        val million = mutable.List(\"Million\")\n        val billion = mutable.List(\"Billion\")\n        val trillion = mutable.List(\"Trillion\")\n        val quadrillion = mutable.List(\"Quadrillion\")\n        val quintillion = mutable.List(\"Quintillion\")\n        val sextillion = mutable.List(\"Sextillion\")\n        val septillion = mutable.List(\"Septillion\")\n        val octillion = mutable.List(\"Octillion\")\n        val nonillion = mutable.List(\"Nonillion\")\n        val decillion = mutable.List(\"Decillion\")\n        val undecillion = mutable.List(\"Undecillion\")\n        val duodecillion = mutable.List(\"Duodecillion\")\n        val tredecillion = mutable.List(\"Tredecillion\")\n        val quattuordecillion = mutable.List(\"Quattuordecillion\")\n        val quindecillion = mutable.List(\"Quindecillion\")\n        val sexdecillion = mutable.List(\"Sexdecillion\")\n        val septendecillion = mutable.List(\"Septendecillion\")\n        val octodecillion = mutable.List(\"Octodecillion\")\n        val novemdecillion = mutable.List(\"Novemdecillion\")\n        val vigintillion = mutable.List(\"Vigintillion\")\n        val unvigintillion = mutable.List(\"Unvigintillion\")\n        val duovigintillion = mutable.List(\"Duovigintillion\")\n        val trevigintillion = mutable.List(\"Trevigintillion\")\n        val quattuor\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1pnbcojs.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1pnbcojs.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1pnbcojs.scala:12:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mone\u001b[0m = mutable.List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1pnbcojs.scala:13:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mten\u001b[0m = mutable.List(\u001b[31m\"Ten\"\u001b[0m, \u001b[31m\"Eleven\"\u001b[0m, \u001b[31m\"Twelve\"\u001b[0m, \u001b[31m\"Thirteen\"\u001b[0m, \u001b[31m\"Fourteen\"\u001b[0m, \u001b[31m\"Fifteen\"\u001b[0m, \u001b[31m\"Sixteen\"\u001b[0m, \u001b[31m\"Seventeen\"\u001b[0m, \u001b[31m\"Eighteen\"\u001b[0m, \u001b[31m\"Nineteen\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1pnbcojs.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundred\u001b[0m = mutable.List(\u001b[31m\"Hundred\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found",
      "stdout": "",
      "timestamp": 1660010337
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).sortBy(x => x).reverse\n        val tens = arr.filter(x => x >= 10 && x <= 99).sortBy(x => x).reverse\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).sortBy(x => x).reverse\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).sortBy(x => x).reverse\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).sortBy(x => x).reverse\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).sortBy(x => x).reverse\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).sortBy(x => x).reverse\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999).sortBy(x => x).reverse\n        val tenThousandThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999).sortBy(x => x).reverse\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).sortBy(x => x).reverse\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999999).sortBy(x => x).reverse\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999999999).sortBy(x => x).reverse\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 999999999999999999).sortBy(x => x).reverse\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 999999999999999999).sortBy(x => x).reverse\n        val tenThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 999999999999999999999).sortBy(x => x).reverse\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 999999999999999999999).sortBy(x => x).reverse\n        val tenThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmph2vux_fv.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmph2vux_fv.scala:20:83 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).sortBy(\u001b[36mx\u001b[0m => x).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph2vux_fv.scala:21:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).sortBy(\u001b[36mx\u001b[0m => x).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph2vux_fv.scala:21:92 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).sortBy(\u001b[36mx\u001b[0m => x).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph2vux_fv.scala:22:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).sortBy(\u001b[36mx\u001b[0m => x).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "stdout": "",
      "timestamp": 1660010338
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedStrings = onesReversed.map(x => onesReversedString(x))\n        val tensReversedStrings = tensReversed.map(x => tensReversedString(x))\n        val result = onesReversedStrings ++ tensReversedStrings\n        val resultStrings = result.map(x => resultString(x))\n        return resultStrings\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjesu3ju3.scala:15:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStrings\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => onesReversedString(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: onesReversedString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjesu3ju3.scala:16:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStrings\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => tensReversedString(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: tensReversedString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjesu3ju3.scala:18:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresultStrings\u001b[0m = result.map(\u001b[36mx\u001b[0m => resultString(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Not found: resultString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010336
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x >= 10 && x <= 19).map(x => s\"Two\")\n        val threes = arr.filter(x => x >= 20 && x <= 29).map(x => s\"Three\")\n        val fours = arr.filter(x => x >= 30 && x <= 39).map(x => s\"Four\")\n        val fives = arr.filter(x => x >= 40 && x <= 49).map(x => s\"Five\")\n        val sixes = arr.filter(x => x >= 50 && x <= 59).map(x => s\"Six\")\n        val sevens = arr.filter(x => x >= 60 && x <= 69).map(x => s\"Seven\")\n        val eights = arr.filter(x => x >= 70 && x <= 89).map(x => s\"Eight\")\n        val nines = arr.filter(x => x >= 90 && x <= 999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmeiw9y4v.scala:20:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010270
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwrq5_6m5.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val tenThousandsOnes = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandsOnes = arr.filter(x => x >= 10000000 && x < 100000000)\n        val tenThousandsOnesOnes = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandsOnesOnes = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val tenThousandsOnesOnesOnes = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandsOnesOnesOnes = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val tenThousandsOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandsOnesOnesOnesOnes = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val tenThousandsOnesOnesOnesOnesOnes = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandsOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val tenThousandsOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 10000000000000000000 && x < 1000000000000000000)\n        val tenThousandsOnes\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt1hum9iz.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpt1hum9iz.scala:20:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandsOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpt1hum9iz.scala:21:60 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpt1hum9iz.scala:21:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpt1hum9iz.scala:22:60 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandsOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpt1hum9iz.scala:22:80 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22",
      "stdout": "",
      "timestamp": 1660010339
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eleven = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twelve = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val thirteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val fourteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fifteen = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpv0_lyj7_.scala:25:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"Twenty\"\u001b[0m, \u001b[31m\"Thirty\"\u001b[0m, \u001b[31m\"Forty\"\u001b[0m, \u001b[31m\"Fifty\"\u001b[0m, \"Sixty\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpv0_lyj7_.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv0_lyj7_.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv0_lyj7_.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Sixtydef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpg0qsculb.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpg0qsculb.scala:18:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpg0qsculb.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpg0qsculb.scala:19:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpg0qsculb.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpg0",
      "stdout": "",
      "timestamp": 1660010339
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x => Ten(x))\n        val result = onesReversedString.zip(tensReversedString).map(x => x._1 + \"-\" + x._2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphucjt_4b.scala:15:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphucjt_4b.scala:16:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Ten(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Ten\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphucjt_4b.scala:17:78 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = onesReversedString.zip(tensReversedString).map(\u001b[36mx\u001b[0m => x._1 + \u001b[31m\"-\"\u001b[0m + x._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Byte.byte2double\n\u001b[31m   |\u001b[0m  import Byte.byte2float\n\u001b[31m   |\u001b[0m  import Byte.byte2int\n\u001b[31m   |\u001b[0m  import Byte.byte2long\n\u001b[31m   |\u001b[0m  import Byte.byte2short\n\u001b[31m   |\u001b[0m  import Char.char2double\n\u001b[31m   |\u001b[0m  import Char.char2float\n\u001b[31m   |\u001b[0m  import Char.char2int\n\u001b[31m   |\u001b[0m  import Char.char2long\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010341
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val reversed = ones + tens + hundreds + thousands.reverse\n        val result = reversed.map(x => x.toString).map(x => x.replaceAll(\"0\",\"One\").replaceAll(\"1\",\"Two\").replaceAll(\"2\",\"Three\").replaceAll(\"3\",\"Four\").replaceAll(\"4\",\"Five\").replaceAll(\"5\",\"Six\").replaceAll(\"6\",\"Seven\").replaceAll(\"7\",\"Eight\").replaceAll(\"8\",\"Nine\"))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkqtzb56d.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds + thousands.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010341
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eleven = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twelve = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val thirteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val fourteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fifteen = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpv0_lyj7_.scala:25:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"Twenty\"\u001b[0m, \u001b[31m\"Thirty\"\u001b[0m, \u001b[31m\"Forty\"\u001b[0m, \u001b[31m\"Fifty\"\u001b[0m, \"Sixty\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpv0_lyj7_.scala:27:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv0_lyj7_.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv0_lyj7_.scala:27:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Sixtydef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010268
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneThousandHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcw5op_7c.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcw5op_7c.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcw5op_7c.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000\u001b[0m && x < \u001b[31m100000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcw5op_7c.scala:20:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        numb",
      "stdout": "",
      "timestamp": 1660010309
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).map(x => x.toString).sorted\n        val tens = arr.filter(x => x >= 10 && x < 100).map(x => x.toString).sorted\n        val hundreds = arr.filter(x => x >= 100).map(x => x.toString).sorted\n        val names = ones + tens + hundreds\n        val reversed = names.reverse\n        reversed.map(x => names.indexOf(x) + 1).map(x => names.charAt(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjvch17e7.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnames\u001b[0m = ones + tens + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010341
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwrq5_6m5.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrq5_6m5.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010295
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100)\n        val reversed = ones + tens + hundreds.reverse\n        reversed.map(x => x.toString).map(x => x.replaceAll(\"\\\\D\", \"\")).map(x => x.toUpperCase)\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmlt8r0qk.scala:14:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010341
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).reverse\n        result.map(x => x % 10 + x.toString).map(x => s\"${x}${oneToNine(x)}\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2jydqzj1.scala:12:62 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        result.map(\u001b[36mx\u001b[0m => x % \u001b[31m10\u001b[0m + x.toString).map(\u001b[36mx\u001b[0m => \u001b[31ms\"\u001b[0m${x}${oneToNine(x)}\u001b[31m\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Not found: oneToNine\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010338
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9 && x >= 1)\n        val tens = arr.filter(x => x <= 99 && x >= 10)\n        val hundreds = arr.filter(x => x <= 999 && x >= 100)\n        val thousands = arr.filter(x => x <= 9999 && x >= 1000)\n        val tenThousands = arr.filter(x => x <= 999999 && x >= 10000)\n        val oneThousands = arr.filter(x => x <= 9999999 && x >= 100000)\n        val oneHundreds = arr.filter(x => x <= 999999999 && x >= 1000000)\n        val oneThousandHundreds = arr.filter(x => x <= 99999999999 && x >= 10000000)\n        val oneThousandThousandHundreds = arr.filter(x => x <= 9999999990000 && x >= 100000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x <= 9999999999900000 && x >= 1000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x <= 99999999900000000 && x >= 10000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 99999999999000000000 && x >= 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 999999999000000000000 && x >= 1000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 999999999990000000000000 && x >= 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 99999999900000000000000 && x >= 10000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 99999999999000000000000000 && x >= 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 9999999990000000000000001 && x >= 1000000000000000001)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x <= 999999999990000000000000001 && x >= 10000000000\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpve829jcr.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpve829jcr.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m999999999000000000000\u001b[0m && x >= \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpve829jcr.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999900000000000000\u001b[0m && x >= \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpve829jcr.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999000000000000000\u001b[0m && x >= \u001b[31m100000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010340
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneMillions = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneBillions = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneTrillions = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneQuadrillions = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneQuintillions = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneBillionsAndOneTrillions = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneBillionsAndOneQuadrillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneBillionsAndOneQuintillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneBillionsAndOneBillionsAndOneTrillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneBillionsAndOneBillionsAndOneQuadrillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneBillionsAndOneBillionsAndOneQuintillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneBillionsAndOneBillionsAndOneBillionsAndOneTrillions = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneBillionsAndOneBillionsAndOneBillionsAndOneQuadrillions = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneBillionsAndOneBillionsAndOneBillionsAndOneQuintillions = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val oneBillionsAndOneBillionsAndOneBillionsAndOneBillionsAndOneTrillions = \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpq8t37urj.scala:31:82 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillionsAndOneBillionsAndOneBillionsAndOneBillionsAndOneTrillions\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq8t37urj.scala:20:69 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneQuadrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq8t37urj.scala:21:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneQuintillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq8t37urj.scala:21:70 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneQuintillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq8t37urj.scala:22:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillionsAndOneTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m      ",
      "stdout": "",
      "timestamp": 1660010341
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // If the array is empty, return an empty array:\n    // If the array has any strange number ignore it:\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 19).toList\n        val hundreds = arr.filter(x => x >= 20 && x <= 99).toList\n        val thousands = arr.filter(x => x >= 100 && x <= 999).toList\n        val tenThousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val oneThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneHundreds = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000001 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000000\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpl0jtak7u.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpl0jtak7u.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000000\u001b[0m && x <= \u001b[31m999999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl0jtak7u.scala:20:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl0jtak7u.scala:20:91 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl0jtak7u.scala:21:79 -----------------------------------------\u001b[0",
      "stdout": "",
      "timestamp": 1660010341
    }
  ]
}