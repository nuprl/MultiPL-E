{
  "language": "scala",
  "name": "HumanEval_81_numerical_letter_grade",
  "results": [
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        grades.toList.sortWith( (a,b) => a.toDouble < b.toDouble )\n            .foldLeft(List[String]()){ (acc: List[String], grade) =>\n                val gpa = grade.toDouble\n                val letterGrade = if (gpa > 4.0) \"A+\" else if (gpa > 3.7) \"A\" else if (gpa > 3.3) \"A-\" else if (gpa > 3.0) \"B+\" else if (gpa > 2.7) \"B\" else if (gpa > 2.3) \"B-\" else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"C\" else if (gpa > 1.3) \"C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else if (gpa > 0.0) \"D-\" else \"E\"\n                acc :+ letterGrade\n            }\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuei3fla0.scala:33)\n\tat Problem.main(tmpuei3fla0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float,String] = grades.map(grade => (grade,grade.asInstanceOf[Float].toChar)).toMap\n        val gradesList : List[(Float,String)] = gradesMap.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList : List[(Float,String)] = gradesList.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapListWithE : List[(Float,String)] = gradesMapList.filter(_._2 == \"E\").sortBy(_._1).reverse\n        val gradesMapListWithEAndE : List[(Float,String)] = gradesMapListWithE.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapListWithEAndE : List[(Float,String)] = gradesMapListWithE.filter(_._2 == \"E\").sortBy(_._1).reverse\n        val gradesMapListWithEAndE : List[(Float,String)] = gradesMapListWithE.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapListWithEAndE : List[(Float,String)] = gradesMapListWithE.filter(_._2 == \"E\").sortBy(_._1).reverse\n        val gradesMapListWithEAndE : List[(Float,String)] = gradesMapListWithE.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapListWithEAndE : List[(Float,String)] = gradesMapListWithE.filter(_._2 == \"E\").sortBy(_._1).reverse\n        val gradesMapListWithEAndE : List[(Float,String)] = gradesMapListWithE.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapListWithEAndE : List[(Float,String)] = gradesMapListWithE.filter(_._2 == \"E\").sortBy(_._1).reverse\n        val gradesMapListWithEAndE : List[(Float,String)] = gradesMapListWithE.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapListWithEAndE : List[(Float,String)] = gradesMapListWithE.filter(_._2 == \"E\").sortBy(_._1).reverse\n        val gradesMapListWithEAndE : List[(Float,String)] = gradesMapListWithE.filter(_._2 != \"E\").sort\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqywouqsv.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapListWithEAndE\u001b[0m : \u001b[35mList\u001b[0m[(\u001b[35mFloat\u001b[0m,\u001b[35mString\u001b[0m)] = gradesMapListWithE.filter(_._2 == \u001b[31m\"E\"\u001b[0m).sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapListWithEAndE is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapListWithEAndE\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqywouqsv.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapListWithEAndE\u001b[0m : \u001b[35mList\u001b[0m[(\u001b[35mFloat\u001b[0m,\u001b[35mString\u001b[0m)] = gradesMapListWithE.filter(_._2 != \u001b[31m\"E\"\u001b[0m).sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapListWithEAndE is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapListWithEAndE\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqywouqsv.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapListWithEAndE\u001b[0m : \u001b[35mList\u001b[0m[(\u001b[35mFloat\u001b[0m,\u001b[35mString\u001b[0m)] = gradesMapListWithE.filter(_._2 == \u001b[31m\"E\"\u001b[0m).sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapListWithEAndE is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapListWithEAndE\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqywouqsv.scala:33:12 ---------------------------\u001b[0m\u001b",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList).toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesValuesWithLetters = gradesValues.map(x => if (x.size < 2) \"E\" else x.mkString(\"\"))\n        val gradesValuesWithLettersSorted = gradesValuesWithLetters.sortWith(_.compareTo(_) < 0)\n        val gradesValuesWithLettersSortedWithLetter = gradesValuesWithLettersSorted.map(x => if (x.size < 2) \"E\" else x.mkString(\"\"))\n        val gradesValuesWithLettersSortedWithLetterSorted = gradesValuesWithLettersSortedWithLetter.sortWith(_.compareTo(_) < 0)\n        val gradesValuesWithLettersSortedWithLetterSortedWithLetter = gradesValuesWithLettersSortedWithLetterSorted.map(x => if (x.size < 2) \"E\" else x.mkString(\"\"))\n        val gradesValuesWithLettersSortedWithLetterSortedWithLetterSorted = gradesValuesWithLettersSortedWithLetterSortedWithLetter.sortWith(_.compareTo(_) < 0)\n        val gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetter = gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetter.map(x => if (x.size < 2) \"E\" else x.mkString(\"\"))\n        val gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetterSorted = gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetter.sortWith(_.compareTo(_) < 0)\n        val gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetterSortedWithLetter = gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetterSortedWithLetter.map(x => if (x.size < 2) \"E\" else x.mkString(\"\"))\n        val gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetterSortedWithLetterSorted = gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetterSortedWithLetterSorted.sortWith(_.compareTo(_) < 0)\n        val gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetterSortedWithLetterSortedWithLetter = gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetterSortedWithLetterSortedWithLetterSorted.map(x => if (x.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf5peit97.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpf5peit97.scala:34:86 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetter\u001b[0m = gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetter.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x.size < \u001b[31m2\u001b[0m) \u001b[31m\"E\"\u001b[0m \u001b[33melse\u001b[0m x.mkString(\u001b[31m\"\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetter\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpf5peit97.scala:36:102 --------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetterSortedWithLetter\u001b[0m = gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetterSortedWithLetter.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x.size < \u001b[31m2\u001b[0m) \u001b[31m\"E\"\u001b[0m \u001b[33melse\u001b[0m x.mkString(\u001b[31m\"\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetterSortedWithLetter\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpf5peit97.scala:37:108 --------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetterSortedWithLetterSorted\u001b[0m = gradesValuesWithLettersSortedWithLetterSortedWithLetterSortedWithLetterSort",
      "stdout": "",
      "timestamp": 1660010385
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted = gradesValues.sortBy(x => x)\n        val gradesKeysSortedWithDuplicates = gradesKeysSorted.distinct\n        val gradesValuesSortedWithDuplicates = gradesValuesSorted.distinct\n        val gradesKeysSortedWithDuplicatesAndDuplicates = gradesKeysSortedWithDuplicates.zip(gradesValuesSortedWithDuplicates)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesSorted = gradesKeysSortedWithDuplicatesAndDuplicates.sortBy(x => x._1)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicates = gradesKeysSortedWithDuplicatesAndDuplicatesSorted.map(x => x._2)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesSorted = gradesKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicates.sortBy(x => x._1)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesSortedWithDuplicates = gradesKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesSorted.map(x => x._2)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted = gradesKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesSortedWithDuplicates.sortBy(x => x._1)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates = gradesKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.map(x => x._2)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted = gradesKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates.sortBy(x => x._1)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates = gradesKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.map(x => x._2)\n        val gradesKeysSortedWith\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphkwwdli1.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphkwwdli1.scala:28:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSorted\u001b[0m = gradesKeys.sortBy(\u001b[36mx\u001b[0m => x)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value sortBy is not a member of Iterable[Int]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphkwwdli1.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010385
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithZero = gradesKeysSorted.map(_ + 0.0)\n        val gradesValuesSortedWithZero = gradesValuesSorted.map(_ + 0.0)\n        val gradesKeysSortedWithZeroAndOne = gradesKeysSorted.map(_ + 1.0)\n        val gradesValuesSortedWithZeroAndOne = gradesValuesSorted.map(_ + 1.0)\n        val gradesKeysSortedWithOne = gradesKeysSorted.map(_ + 1)\n        val gradesValuesSortedWithOne = gradesValuesSorted.map(_ + 1)\n        val gradesKeysSortedWithOneAndZero = gradesKeysSorted.map(_ + 2.0)\n        val gradesValuesSortedWithOneAndZero = gradesValuesSorted.map(_ + 2.0)\n        val gradesKeysSortedWithOneAndZeroAndOne = gradesKeysSorted.map(_ + 3.0)\n        val gradesValuesSortedWithOneAndZeroAndOne = gradesValuesSorted.map(_ + 3.0)\n        val gradesKeysSortedWithOneAndOne = gradesKeysSorted.map(_ + 4.0)\n        val gradesValuesSortedWithOneAndOne = gradesValuesSorted.map(_ + 4.0)\n        val gradesKeysSortedWithOneAndOneAndZero = gradesKeysSorted.map(_ + 5.0)\n        val gradesValuesSortedWithOneAndOneAndZero = gradesValuesSorted.map(_ + 5.0)\n        val gradesKeysSortedWithOneAndOneAndZeroAndOne = gradesKeysSorted.map(_ + 6.0)\n        val gradesValuesSortedWithOneAndOneAndZeroAndOne = gradesValuesSorted.map(_ + 6.0)\n        val gradesKeysSortedWithOneAndOneAndOne = gradesKeysSorted.map(_ + 7.0)\n        val gradesValuesSortedWithOneAndOneAndOne = gradesValuesSorted.map(_ + 7.0)\n        val gradesKeysSortedWithOneAndOneAndOneAndZero = gradesKeysSorted.map(_ + \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmprygepa9l.scala:48:81 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedWithOneAndOneAndOneAndZero\u001b[0m = gradesKeysSorted.map(_ + \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmprygepa9l.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprygepa9l.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x => (x, \"E\")).toMap\n        val gradesMap2 = grades.map(x => (x, \"D\")).toMap\n        val gradesMap3 = grades.map(x => (x, \"C\")).toMap\n        val gradesMap4 = grades.map(x => (x, \"B\")).toMap\n        val gradesMap5 = grades.map(x => (x, \"A\")).toMap\n        val gradesMap6 = grades.map(x => (x, \"A+\")).toMap\n        val gradesMap7 = grades.map(x => (x, \"A-\")).toMap\n        val gradesMap8 = grades.map(x => (x, \"B+\")).toMap\n        val gradesMap9 = grades.map(x => (x, \"B-\")).toMap\n        val gradesMap10 = grades.map(x => (x, \"C+\")).toMap\n        val gradesMap11 = grades.map(x => (x, \"C\")).toMap\n        val gradesMap12 = grades.map(x => (x, \"C-\")).toMap\n        val gradesMap13 = grades.map(x => (x, \"D+\")).toMap\n        val gradesMap14 = grades.map(x => (x, \"D\")).toMap\n        val gradesMap15 = grades.map(x => (x, \"D-\")).toMap\n        val gradesMap16 = grades.map(x => (x, \"E\")).toMap\n        val gradesMap17 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap18 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap19 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap20 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap21 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap22 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap23 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap24 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap25 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap26 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap27 = grades.map(x => (x, \"F\")).toMap\n        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfjfop44.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => (x, \u001b[31m\"E\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfjfop44.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010387
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValue\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk2knuzif.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk2knuzif.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk2knuzif.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk2knuzif.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesValuesMap.values.toMap\n        val gradesSortedByGPA\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy1ozrzia.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy1ozrzia.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy1ozrzia.scala:41:68 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedValuesValuesValuesValuesKeys\u001b[0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   Not found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy1ozrzia.scala:42:70 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedValuesValuesValuesValuesValues\u001b[0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.values.toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   Not found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy1ozrzia.scala:43:79 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36m",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesValuesWithLetters = gradesValues.map(grade => {\n            val letterGrade = if (grade > 3.0) \"A+\" else if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade > 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else \"E\"\n            letterGrade\n        })\n        gradesValuesWithLetters.toList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp_33ve7h2.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010385
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toList)\n        val gradesMap2 = gradesMap.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap3 = gradesMap2.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap4 = gradesMap3.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap5 = gradesMap4.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap6 = gradesMap5.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap7 = gradesMap6.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap8 = gradesMap7.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap9 = gradesMap8.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap10 = gradesMap9.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap11 = gradesMap10.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap12 = gradesMap11.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap13 = gradesMap12.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap14 = gradesMap13.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap15 = gradesMap14.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap16 = gradesMap15.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap17 = gradesMap16.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap18 = gradesMap17.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        val gradesMap19 = gradesMap18.filter(_._2 != 0).mapValues(_.map(_ / 4).sum)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpkuy9zux8.scala:26:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap2\u001b[0m = gradesMap.filter(_._2 != \u001b[31m0\u001b[0m).mapValues(_.map(_ / \u001b[31m4\u001b[0m).sum)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Values of types List[Float] and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkuy9zux8.scala:27:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap3\u001b[0m = gradesMap2.filter(_._2 != \u001b[31m0\u001b[0m).mapValues(_.map(_ / \u001b[31m4\u001b[0m).sum)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value map is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkuy9zux8.scala:28:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap4\u001b[0m = gradesMap3.filter(_._2 != \u001b[31m0\u001b[0m).mapValues(_.map(_ / \u001b[31m4\u001b[0m).sum)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue map is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n\u001b[",
      "stdout": "",
      "timestamp": 1660010389
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> \"A+\")).toMap\n        grades.map(grade => (grade -> gradesMap(grade))).filter(_.isDefined).map { case (grade, letterGrade) => letterGrade }\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgroc6lad.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> \u001b[31m\"A+\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgroc6lad.scala:26:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        grades.map(\u001b[36mgrade\u001b[0m => (grade -> gradesMap(grade))).filter(_.isDefined).map { \u001b[33mcase\u001b[0m (grade, letterGrade) => letterGrade }\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value isDefined is not a member of (Float, String)\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010384
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGrade = grades.sortBy(x => x)\n        val gradesSortedByGradeReversed = gradesSortedByGrade.sortBy(x => -x)\n        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedByGradeReversedMapReversed = gradesSortedByGradeReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedByGradeReversedMapReversedWithZero = gradesSortedByGradeReversedMapReversed.withDefaultValue(0)\n        val gradesSortedByGradeReversedMapReversedWithZeroWithZero = gradesSortedByGradeReversedMapReversedWithZero.withDefaultValue(0)\n        val gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZero = gradesSortedByGradeReversedMapReversedWithZeroWithZero.withDefaultValue(0)\n        val gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZero = gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZero.withDefaultValue(0)\n        val gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n        val gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n        val gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith = gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n        val gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith = gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n        val gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZeroWithZero\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuv5sd3l2.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuv5sd3l2.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\u001b[0m = gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZero.withDefaultValue(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedByGradeReversedMapReversedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuv5sd3l2.scala:28:85 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGradeReversedMap\u001b[0m = gradesSortedByGradeReversed.map(\u001b[36mx\u001b[0m => (x._1, x._2)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuv5sd3l2.scala:28:91 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGradeReversedMap\u001b[0m = gradesSortedByGradeReversed.map(\u001b[36mx\u001b[0m => (x._1, x._2)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch E",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedIter = gradesSortedByGPAReversed.iterator\n        val gradesSortedByGPAReversedIterNext = gradesSortedByGPAReversedIter.next\n        val gradesSortedByGPAReversedIterNextKey = gradesSortedByGPAReversedIterNext._1.key\n        val gradesSortedByGPAReversedIterNextValue = gradesSortedByGPAReversedIterNext._1.value\n        val gradesSortedByGPAReversedIterNextGPA = gradesSortedByGPAReversedIterNext._2._1\n        val gradesSortedByGPAReversedIterNextGPAKey = gradesSortedByGPAReversedIterNext._2._2\n        val gradesSortedByGPAReversedIterNextGPAValue = gradesSortedByGPAReversedIterNext._2._3\n        val gradesSortedByGPAReversedIterNextGPAGPA = gradesSortedByGPAReversedIterNext._2._4\n        val gradesSortedByGPAReversedIterNextGPAGPAKey = gradesSortedByGPAReversedIterNext._2._5\n        val gradesSortedByGPAReversedIterNextGPAGPAValue = gradesSortedByGPAReversedIterNext._2._6\n        val gradesSortedByGPAReversedIterNextGPAGPAGPA = gradesSortedByGPAReversedIterNext._2._7\n        val gradesSortedByGPAReversedIterNextGPAGPAGPAKey = gradesSortedByGPAReversedIterNext._2._8\n        val gradesSortedByGPAReversedIterNextGPAGPAGPAValue = gradesSortedByGPAReversedIterNext._2._9\n        val gradesSortedByGPAReversedIterNextGPAGPAGPAGPA = gradesSortedByGPAReversedIterNext._2._10\n        val gradesSortedByGPAReversedIterNextGPAGPAGPAGPAKey = gradesSortedByGPAReversedIterNext._2._11\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpxj22l4jx.scala:43:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxj22l4jx.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxj22l4jx.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010385
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReverse = gradesSortedMap.reverse\n        val gradesSortedMapReverseMap = gradesSortedMapReverse.toMap\n        val gradesSortedMapReverseMapReverse = gradesSortedMapReverseMap.reverse\n        val gradesSortedMapReverseMapReverseMap = gradesSortedMapReverseMapReverse.toMap\n        val gradesSortedMapReverseMapReverseMapReverse = gradesSortedMapReverseMapReverseMap.reverse\n        val gradesSortedMapReverseMapReverseMapReverseMap = gradesSortedMapReverseMapReverseMapReverse.toMap\n        val gradesSortedMapReverseMapReverseMapReverseMapReverse = gradesSortedMapReverseMapReverseMapReverseMapReverse.toMap\n        val gradesSortedMapReverseMapReverseMapReverseMapReverseMap = gradesSortedMapReverseMapReverseMapReverseMapReverse.toMap\n        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverse = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverse.toMap\n        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMap = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverse.toMap\n        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverse = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverse.toMap\n        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverse.toMap\n        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverse = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverse.toMap\n        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverse = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverse.toMap\n        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverse.toMap\n        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverse = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverse.toMap\n        val gradesSortedMapReverseMapReverseMapReverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp57xopxbw.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp57xopxbw.scala:41:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverse\u001b[0m = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverse.toMap\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverse is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverse\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp57xopxbw.scala:28:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReverse\u001b[0m = gradesSortedMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp57xopxbw.scala:34:67 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReverseMapReverseMapReverseMapReverse\u001b[0m = gradesSortedMapReverseMapReverseMapReverseMapReverse.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedMapReverseMapReverseMapReverseMapReverse\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp57xopxbw.scala:36:77 --------------",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted = gradesKeys.sort\n        val gradesValuesSorted = gradesValues.sort\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKey\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbv8lsrhs.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbv8lsrhs.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedLength\u001b[0m = gradesKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesKeysSortedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbv8lsrhs.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedLength\u001b[0m = gradesKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesKeysSortedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbv8lsrhs.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedLength\u001b[0m = gradesKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesKeysSortedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbv8lsrhs.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedLength\u001b[0m = gradesKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesKeysSort",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade => (grade -> \"A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade => (grade -> \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade => (grade -> \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade => (grade -> \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade => (grade -> \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade => (grade -> \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade => (grade -> \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade => (grade -> \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(grade => (grade -> \"D+\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(grade => (grade -> \"E\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade => (grade -> \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade => (grade -> \"G\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade => (grade -> \"H\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade => (grade -> \"I\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade => (grade -> \"J\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade => (grade -> \"K\"))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2he5_8r0.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> \u001b[31m\"A+\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2he5_8r0.scala:26:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap2\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> \u001b[31m\"A\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2he5_8r0.scala:27:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap3\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> \u001b[31m\"A-\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tm",
      "stdout": "",
      "timestamp": 1660010388
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversed\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyiup7y87.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyiup7y87.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyiup7y87.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyiup7y87.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyiup7y87.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgrades",
      "stdout": "",
      "timestamp": 1660010385
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAWithLetterGrade = gradesSortedByGPA.map(x => gradesMap.getOrElse(x.toInt, 0.0))\n        val gradesSortedByGPAWithLetterGradeWithZero = gradesSortedByGPAWithLetterGrade.map(x => if (x == 0.0) 0 else x)\n        val gradesSortedByGPAWithLetterGradeWithZeroWithLetterGrade = gradesSortedByGPAWithLetterGradeWithZero.map(x => if (x == 0.0) 'E' else x.toChar)\n        gradesSortedByGPAWithLetterGradeWithZeroWithLetterGrade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpemgqtb6n.scala:29:145 -----------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithZeroWithLetterGrade\u001b[0m = gradesSortedByGPAWithLetterGradeWithZero.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x == \u001b[31m0.0\u001b[0m) \u001b[31m'E'\u001b[0m \u001b[33melse\u001b[0m x.toChar)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value toChar is not a member of AnyVal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpemgqtb6n.scala:30:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        gradesSortedByGPAWithLetterGradeWithZeroWithLetterGrade\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    (gradesSortedByGPAWithLetterGradeWithZeroWithLetterGrade : List[Char])\n\u001b[31m   |\u001b[0mRequired: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x => (x, \"E\")).toMap\n        val gradesMap2 = grades.map(x => (x, \"D\")).toMap\n        val gradesMap3 = grades.map(x => (x, \"C\")).toMap\n        val gradesMap4 = grades.map(x => (x, \"B\")).toMap\n        val gradesMap5 = grades.map(x => (x, \"A\")).toMap\n        val gradesMap6 = grades.map(x => (x, \"A+\")).toMap\n        val gradesMap7 = grades.map(x => (x, \"A-\")).toMap\n        val gradesMap8 = grades.map(x => (x, \"B+\")).toMap\n        val gradesMap9 = grades.map(x => (x, \"B-\")).toMap\n        val gradesMap10 = grades.map(x => (x, \"C+\")).toMap\n        val gradesMap11 = grades.map(x => (x, \"C\")).toMap\n        val gradesMap12 = grades.map(x => (x, \"C-\")).toMap\n        val gradesMap13 = grades.map(x => (x, \"D+\")).toMap\n        val gradesMap14 = grades.map(x => (x, \"D\")).toMap\n        val gradesMap15 = grades.map(x => (x, \"D-\")).toMap\n        val gradesMap16 = grades.map(x => (x, \"E\")).toMap\n        val gradesMap17 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap18 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap19 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap20 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap21 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap22 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap23 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap24 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap25 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap26 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap27 = grades.map(x => (x, \"F\")).toMap\n        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfjfop44.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => (x, \u001b[31m\"E\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfjfop44.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010387
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversed.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversed.values\n        val gradesSortedByGPAReversedKeysLength = gradesSortedByGPAReversedKeys.size\n        val gradesSortedByGPAReversedValuesLength = gradesSortedByGPAReversedValues.size\n        val gradesSortedByGPAReversedKeysLength = gradesSortedByGPAReversedKeys.size\n        val gradesSortedByGPAReversedValuesLength = gradesSortedByGPAReversedValues.size\n        val gradesSortedByGPAReversedKeysLength = gradesSortedByGPAReversedKeys.size\n        val gradesSortedByGPAReversedValuesLength = gradesSortedByGPAReversedValues.size\n        val gradesSortedByGPAReversedKeysLength = gradesSortedByGPAReversedKeys.size\n        val gradesSortedByGPAReversedValuesLength = gradesSortedByGPAReversedValues.size\n        val gradesSortedByGPAReversedKeysLength = gradesSortedByGPAReversedKeys.size\n        val gradesSortedByGPAReversedValuesLength = gradesSortedByGPAReversedValues.size\n        val gradesSortedByGPAReversedKeysLength = gradesSortedByGPAReversedKeys.size\n        val gradesSortedByGPAReversedValuesLength = gradesSortedByGPAReversedValues.size\n        val gradesSortedByGPAReversedKeysLength = gradesSortedByGPAReversedKeys.size\n        val gradesSortedByGPAReversedValuesLength = gradesSortedByGPAReversedValues.size\n        val gradesSortedByGPAReversedKeysLength = gradesSortedByGPAReversedKeys.size\n        val gradesSortedByGPAReversedValuesLength = gradesSortedByGPAReversedValues.size\n        val gradesSortedByGPAReversedKeysLength = gradesSortedByGPAReversedKeys.size\n        val gradesSortedByGPAReversedValuesLength = gradesSortedByGPAReversedValues.size\n\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpc2iz7_zq.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedKeysLength\u001b[0m = gradesSortedByGPAReversedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedByGPAReversedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedByGPAReversedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpc2iz7_zq.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedValuesLength\u001b[0m = gradesSortedByGPAReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedByGPAReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedByGPAReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpc2iz7_zq.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedKeysLength\u001b[0m = gradesSortedByGPAReversedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedByGPAReversedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedByGPAReversedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpc2iz7_zq.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedValuesLength\u001b[0m = gradesSortedByGPAReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010385
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n        val gradesMapValuesWithoutZero = gradesMapValues.filterNot(_ == 0)\n        val gradesMapValuesWithoutZeroLength = gradesMapValuesWithoutZero.length\n        val gradesMapValuesWithoutZeroSum = gradesMapValuesWithoutZero.sum\n        val gradesMapValuesWithoutZeroAverage = gradesMapValuesWithoutZeroSum / gradesMapValuesWithoutZeroLength\n        val gradesMapValuesWithoutZeroAverageInt = gradesMapValuesWithoutZeroAverage.toInt\n        val gradesMapValuesWithoutZeroAverageFloat = gradesMapValuesWithoutZeroAverageInt.toFloat\n        val gradesMapValuesWithoutZeroAverageInt = gradesMapValuesWithoutZeroAverageInt.toInt\n        val gradesMapValuesWithoutZeroAverageFloat = gradesMapValuesWithoutZeroAverageFloat.toFloat\n        val gradesMapValuesWithoutZeroAverageInt = gradesMapValuesWithoutZeroAverageInt.toInt\n        val gradesMapValuesWithoutZeroAverageFloat = gradesMapValuesWithoutZeroAverageFloat.toFloat\n        val gradesMapValuesWithoutZeroAverageInt = gradesMapValuesWithoutZeroAverageInt.toInt\n        val gradesMapValuesWithoutZeroAverageFloat = gradesMapValuesWithoutZeroAverageFloat.toFloat\n        val gradesMapValuesWithoutZeroAverageInt = gradesMapValuesWithoutZeroAverageInt.toInt\n        val gradesMapValuesWithoutZeroAverageFloat = gradesMapValuesWithoutZeroAverageFloat.toFloat\n        val gradesMapValuesWithoutZeroAverageInt = gradesMapValuesWithoutZeroAverageInt.toInt\n        val gradesMapValuesWithoutZeroAverageFloat = gradesMapValuesWithoutZeroAverageFloat.toFloat\n        val gradesMapValuesWithoutZeroAverageInt = gradesMapValuesWithoutZeroAverageInt.toInt\n        val gradesMapValuesWithoutZeroAverageFloat = gradesMapValuesWithoutZeroAverageFloat.toFloat\n        val gradesMapValuesWithoutZeroAverageInt = gradesMapValuesWithoutZeroAverageInt.toInt\n        val gradesMapValuesWithoutZeroAverageFloat = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxcs13zai.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapValuesWithoutZeroAverageInt\u001b[0m = gradesMapValuesWithoutZeroAverageInt.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapValuesWithoutZeroAverageInt is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapValuesWithoutZeroAverageInt\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxcs13zai.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapValuesWithoutZeroAverageFloat\u001b[0m = gradesMapValuesWithoutZeroAverageFloat.toFloat\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapValuesWithoutZeroAverageFloat is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapValuesWithoutZeroAverageFloat\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxcs13zai.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapValuesWithoutZeroAverageInt\u001b[0m = gradesMapValuesWithoutZeroAverageInt.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapValuesWithoutZeroAverageInt is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapValuesWithoutZeroAverageInt\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxcs13zai.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapValuesWithoutZeroAverageFloat\u001b[0m = gradesMapValuesWithoutZeroAverageFloat.toFloat\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._2)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedMap = gradesMapSortedReversed.toMap\n        val gradesMapSortedReversedKeys = gradesMapSortedReversedMap.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversedMap.values.toList\n        val gradesMapSortedReversedValuesSorted = gradesMapSortedReversedValues.sortBy(_._1)\n        val gradesMapSortedReversedValuesSortedReversed = gradesMapSortedReversedValuesSorted.reverse\n        val gradesMapSortedReversedValuesSortedReversedMap = gradesMapSortedReversedValuesSortedReversed.toMap\n        val gradesMapSortedReversedValuesSortedReversedKeys = gradesMapSortedReversedValuesSortedReversedMap.keys\n        val gradesMapSortedReversedValuesSortedReversedValues = gradesMapSortedReversedValuesSortedReversedMap.values.toList\n        val gradesMapSortedReversedValuesSortedReversedValuesSorted = gradesMapSortedReversedValuesSortedReversedValues.sortBy(_._1)\n        val gradesMapSortedReversedValuesSortedReversedValuesSortedReversed = gradesMapSortedReversedValuesSortedReversedValuesSorted.reverse\n        val gradesMapSortedReversedValuesSortedReversedValuesSortedReversedMap = gradesMapSortedReversedValuesSortedReversedValuesSortedReversed.toMap\n        val gradesMapSortedReversedValuesSortedReversedValuesSortedReversedKeys = gradesMapSortedReversedValuesSortedReversedValuesSortedReversedMap.keys\n        val gradesMapSortedReversedValuesSortedReversedValuesSortedReversedValues = gradesMapSortedReversedValuesSortedReversedValuesSortedReversedMap.values.toList\n        val gradesMapSortedReversedValuesSortedReversedValuesSortedReversedValuesSorted = gradesMapSortedReversedValuesSortedReversedValuesSortedReversedValues.sortBy(_._1)\n        val gradesMapSortedReversedValuesSortedReversedValuesSortedReversedValuesSortedReversed = gradesMapSortedReversedValuesSortedReversedValuesSortedReversedValuesSortedReversed.reverse\n        val gradesMapSortedReversedValuesSortedReversedValuesSortedReversedValuesSortedReverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcm_rerrb.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcm_rerrb.scala:25:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m4\u001b[0m).mapValues(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcm_rerrb.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._2)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sortBy is not a member of scala.collection.MapView[Float, Nothing]\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpcm_rerrb.scala:42:98 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesSortedReversedValuesSortedReversedValuesSortedReversed\u001b[0m = gradesMapSortedReversedValuesSortedReversedValuesSortedReversedValuesSortedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesMapSortedReversedValuesSortedReversedValuesSortedReversedValuesSortedReversed\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm_rerrb.scala:44:5 ---------------------\u001b[0m\u001b",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> grade match {\n            case 4.0f => \"A+\"\n            case _ => \"\"\n        })).toMap\n        val gradesList : List[String] = grades.map(grade => gradesMap(grade))\n        gradesList.filter(_.nonEmpty).map(_.toUpperCase)\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpgu0hgtx9.scala:26:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m4.0f\u001b[0m => \u001b[31m\"A+\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Float and (Float, Float) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgu0hgtx9.scala:28:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        })).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Cannot prove that String <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                 where:    K is a type variable\n\u001b[31m   |\u001b[0m                           V is a type variable\n\u001b[31m   |\u001b[0m                 .\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted = gradesValues.sortBy(x => x)\n        val gradesKeysSortedWithZero = gradesKeysSorted.map(x => if (x == 0.0) 0 else x)\n        val gradesValuesSortedWithZero = gradesValuesSorted.map(x => if (x == 0.0) 0 else x)\n        val gradesKeysSortedWithZeroAndOne = gradesKeysSorted.map(x => if (x == 0.0) 1 else x)\n        val gradesValuesSortedWithZeroAndOne = gradesValuesSorted.map(x => if (x == 0.0) 1 else x)\n        val gradesKeysSortedWithOneAndZero = gradesKeysSorted.map(x => if (x == 1.0) 0 else x)\n        val gradesValuesSortedWithOneAndZero = gradesValuesSorted.map(x => if (x == 1.0) 0 else x)\n        val gradesKeysSortedWithOneAndZeroAndOne = gradesKeysSorted.map(x => if (x == 1.0) 1 else x)\n        val gradesValuesSortedWithOneAndZeroAndOne = gradesValuesSorted.map(x => if (x == 1.0) 1 else x)\n        val gradesKeysSortedWithZeroAndZero = gradesKeysSorted.map(x => if (x == 0.0) 0 else x)\n        val gradesValuesSortedWithZeroAndZero = gradesValuesSorted.map(x => if (x == 0.0) 0 else x)\n        val gradesKeysSortedWithZeroAndZeroAndOne = gradesKeysSorted.map(x => if (x == 0.0) 1 else x)\n        val gradesValuesSortedWithZeroAndZeroAndOne = gradesValuesSorted.map(x => if (x == 0.0) 1 else x)\n        val gradesKeysSortedWithZeroAndOneAndZero = gradesKeysSorted.map(x => if (x == 1.0) 0 else x)\n        val gradesValuesSortedWithZeroAndOneAndZero = gradesValuesSorted.map(x => if (x == 1.0) 0 else x)\n        val gradesKeysSortedWithZeroAndOneAndZeroAndOne = gradesKeysSorted.map(x => if (x == 1.0) 1 else x)\n        val gradesValuesSortedWithZeroAndOneAndZeroAndOne = gradesValuesSorted.map(x => if (x == \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp6wotxzl5.scala:45:96 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesValuesSortedWithZeroAndOneAndZeroAndOne\u001b[0m = gradesValuesSorted.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x == \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6wotxzl5.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6wotxzl5.scala:46:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3 = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5 = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7 = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9 = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11 = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13 = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15 = gradesMapSortedReversedValuesSum14 * gradesMapSortedReversedValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprj20h90q.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprj20h90q.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010397
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        grades.map { grade =>\n            val gpa = grade.toInt\n            val letterGrade = if (gpa > 4.0) \"A+\" else if (gpa > 3.7) \"A\" else if (gpa > 3.3) \"A-\" else if (gpa > 3.0) \"B+\" else if (gpa > 2.7) \"B\" else if (gpa > 2.3) \"B-\" else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"C\" else if (gpa > 1.3) \"C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else if (gpa > 0.0) \"D-\" else \"E\"\n            letterGrade\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptq5dgsbs.scala:32)\n\tat Problem.main(tmptq5dgsbs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660010400
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x).mapValues(_.size).toMap\n        val gradesSorted = grades.sortWith(_.toDouble < _.toDouble)\n        val gradesSortedMap = gradesSorted.groupBy(x => x).mapValues(_.size).toMap\n        val gradesSortedSortedMap = gradesSorted.groupBy(x => x).mapValues(_.size).sortWith(_.toDouble < _.toDouble).toMap\n        val gradesSortedSortedMap2 = gradesSorted.groupBy(x => x).mapValues(_.size).sortWith(_.toDouble < _.toDouble).mapValues(_.toDouble).toMap\n        val gradesSortedSortedMap3 = gradesSorted.groupBy(x => x).mapValues(_.size).sortWith(_.toDouble < _.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).toMap\n        val gradesSortedSortedMap4 = gradesSorted.groupBy(x => x).mapValues(_.size).sortWith(_.toDouble < _.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).toMap\n        val gradesSortedSortedMap5 = gradesSorted.groupBy(x => x).mapValues(_.size).sortWith(_.toDouble < _.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).toMap\n        val gradesSortedSortedMap6 = gradesSorted.groupBy(x => x).mapValues(_.size).sortWith(_.toDouble < _.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).toMap\n        val gradesSortedSortedMap7 = gradesSorted.groupBy(x => x).mapValues(_.size).sortWith(_.toDouble < _.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).toMap\n        val gradesSortedSortedMap8 = gradesSorted.groupBy(x => x).mapValues(_.size).sortWith(_.toDouble < _.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgjhgp8s0.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgjhgp8s0.scala:28:83 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedMap\u001b[0m = gradesSorted.groupBy(\u001b[36mx\u001b[0m => x).mapValues(_.size).sortWith(_.toDouble < _.toDouble).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value sortWith is not a member of scala.collection.MapView[Float, Int]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgjhgp8s0.scala:29:84 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedMap2\u001b[0m = gradesSorted.groupBy(\u001b[36mx\u001b[0m => x).mapValues(_.size).sortWith(_.toDouble < _.toDouble).mapValues(_.toDouble).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value sortWith is not a member of scala.collection.MapView[Float, Int]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgjhgp8s0.scala:30:84 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedMap3\u001b[0m = gradesSorted.groupBy(\u001b[36mx\u001b[0m => x).mapValues(_.size).sortWith(_.toDouble < _.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value sortWith is not a member of scala.collection.MapView[Float, Int]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgjhgp8s0.scala:31:84 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedMap4\u001b[0m = gradesSorted.groupBy(\u001b[36mx\u001b[0m => x).mapValues(_.size).sortWith(_.toDouble < _.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).mapValues(_.toDouble).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^",
      "stdout": "",
      "timestamp": 1660010400
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo_n94wg0.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysLength\u001b[0m = gradesMapSortedReversedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysLength\u001b[0m = gradesMapSortedReversedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesL",
      "stdout": "",
      "timestamp": 1660010397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesValuesList = gradesValues.toList\n        val gradesValuesMap = gradesValues.toMap\n        val gradesValuesKeys = gradesValuesMap.keys\n        val gradesValuesValues = gradesValuesMap.values.toList\n        val gradesValuesValuesMap = gradesValuesValues.toMap\n        val gradesValuesValuesKeys = gradesValuesValuesMap.keys\n        val gradesValuesValuesValues = gradesValuesValuesMap.values.toList\n        val gradesValuesValuesValuesMap = gradesValuesValuesValues.toMap\n        val gradesValuesValuesValuesKeys = gradesValuesValuesValuesMap.keys\n        val gradesValuesValuesValuesValues = gradesValuesValuesValuesMap.values.toList\n        val gradesValuesValuesValuesValuesMap = gradesValuesValuesValuesValues.toMap\n        val gradesValuesValuesValuesValuesKeys = gradesValuesValuesValuesValuesMap.keys\n        val gradesValuesValuesValuesValuesValues = gradesValuesValuesValuesValuesValuesMap.values.toList\n        val gradesValuesValuesValuesValuesValuesMap = gradesValuesValuesValuesValuesValuesValues.toMap\n        val gradesValuesValuesValuesValuesValuesKeys = gradesValuesValuesValuesValuesValuesValuesMap.keys\n        val gradesValuesValuesValuesValuesValuesValues = gradesValuesValuesValuesValuesValuesValuesValuesMap.values.toList\n        val gradesValuesValuesValuesValuesValuesValuesMap = gradesValuesValuesValuesValuesValuesValuesValuesValues.toMap\n        val gradesValuesValuesValuesValuesValuesValuesKeys = gradesValuesValuesValuesValuesValuesValuesValuesValuesMap.keys\n        val gradesValuesValuesValuesValuesValuesValuesValues = gradesValuesValuesValuesValuesValuesValuesValuesValuesValuesMap.values.toList\n        val gradesValuesValuesValuesValuesValuesValuesValuesValuesMap = gradesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.toMap\n        val gradesValuesValuesValuesValuesValuesValuesValuesValuesKeys = gradesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesMap.keys\n        val gradesValuesValuesValuesValuesValuesValuesValuesValuesValues = gradesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesMap.values.toList\n        val gradesValuesValuesValuesValuesValuesValuesValuesValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxuj8k_eo.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxuj8k_eo.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxuj8k_eo.scala:43:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesValuesValuesValuesValuesValuesValues\u001b[0m = gradesValuesValuesValuesValuesValuesValuesValuesMap.values.toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Not found: gradesValuesValuesValuesValuesValuesValuesValuesMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxuj8k_eo.scala:44:115 -----------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesValuesValuesValuesValuesValuesValuesMap\u001b[0m = gradesValuesValuesValuesValuesValuesValuesValuesValues.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toMap is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1660010400
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n        val gradesSum = gradesSorted.sum\n        val gradesAverage = gradesSum / gradesSorted.length\n        val gradesMax = gradesSorted.max\n        val gradesMin = gradesSorted.min\n        val gradesSumOfSquares = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesSorted.length\n        val gradesSumOfSquaresMax = gradesSumOfSquares.max\n        val gradesSumOfSquaresMin = gradesSumOfSquares.min\n        val gradesSumOfSquaresSumOfSquares = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquares / gradesSorted.length\n        val gradesSumOfSquaresSumOfSquaresMax = gradesSumOfSquaresSumOfSquares.max\n        val gradesSumOfSquaresSumOfSquaresMin = gradesSumOfSquaresSumOfSquares.min\n        val gradesSumOfSquaresSumOfSquaresSumOfSquares = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresSumOfSquares / gradesSorted.length\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresMax = gradesSumOfSquaresSumOfSquaresSumOfSquares.max\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresMin = gradesSumOfSquaresSumOfSquaresSumOfSquares.min\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares / gradesSorted.length\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresMax = gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares.max\n        val gradesSumOfSquaresSumOfSqu\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp57pdawam.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57pdawam.scala:46:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphfrkllkj.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmphfrkllkj.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphfrkllkj.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010399
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPA\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqx0ppr4n.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpqx0ppr4n.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqx0ppr4n.scala:41:68 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedValuesValuesValuesValuesKeys\u001b[0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   Not found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqx0ppr4n.scala:42:70 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedValuesValuesValuesValuesValues\u001b[0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.values.toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   Not found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqx0ppr4n.scala:43:79 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36m",
      "stdout": "",
      "timestamp": 1660010398
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap.values.toMap\n        val gradesSortedByGPAReversed\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprcdnjfmt.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmprcdnjfmt.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprcdnjfmt.scala:43:73 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedValuesValuesValuesValuesValuesMap\u001b[0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap.values.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprcdnjfmt.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010399
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2mxl92gq.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2mxl92gq.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2mxl92gq.scala:43:73 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedValuesValuesValuesValuesValuesMap\u001b[0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap.keys\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2mxl92gq.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010399
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n        val gradesAverage = gradesSorted.sum / gradesSorted.length\n        val gradesAverageWithZero = gradesAverage + 0.0\n        val gradesAverageWithZeroString = gradesAverageWithZero.toString\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroString.length\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWithZeroStringLength + 2\n        val gradesAverageWithZeroStringLength = gradesAverageWith\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwtsve62o.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesAverageWithZeroStringLength\u001b[0m = gradesAverageWithZeroStringLength + \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesAverageWithZeroStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesAverageWithZeroStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwtsve62o.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesAverageWithZeroStringLength\u001b[0m = gradesAverageWithZeroStringLength + \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesAverageWithZeroStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesAverageWithZeroStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwtsve62o.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesAverageWithZeroStringLength\u001b[0m = gradesAverageWithZeroStringLength + \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesAverageWithZeroStringLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesAverageWithZeroStringLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwtsve62o.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesAverageWithZeroStringLength\u001b[0m = gradesAverageWithZeroStringLength + \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010396
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedSorted = gradesMapSortedReversed.sortBy(_._1)\n        val gradesMapSortedReversedSortedSorted1 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 1)\n        val gradesMapSortedReversedSortedSorted2 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 2)\n        val gradesMapSortedReversedSortedSorted3 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 3)\n        val gradesMapSortedReversedSortedSorted4 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 4)\n        val gradesMapSortedReversedSortedSorted5 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 5)\n        val gradesMapSortedReversedSortedSorted6 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 6)\n        val gradesMapSortedReversedSortedSorted7 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 7)\n        val gradesMapSortedReversedSortedSorted8 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 8)\n        val gradesMapSortedReversedSortedSorted9 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 9)\n        val gradesMapSortedReversedSortedSorted10 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 10)\n        val gradesMapSortedReversedSortedSorted11 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 11)\n        val gradesMapSortedReversedSortedSorted12 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 12)\n        val gradesMapSortedReversedSortedSorted13 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 13)\n        val gradesMapSortedReversedSortedSorted14 = gradesMapSortedReversedSorted.take(gradesMapSortedReversedSorted.size - 14)\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpfjyj3n_k.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfjyj3n_k.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010399
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> grade.asInstanceOf[Float].toChar)).toMap\n        val gradesMapSorted : Map[Float, String] = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys : Iterator[Float] = gradesMapSorted.keys\n        val gradesMapSortedValues : Iterator[String] = gradesMapSorted.values\n        val gradesMapSortedKeysAndValues : Iterator[(Float, String)] = gradesMapSortedKeys.zip(gradesMapSortedValues)\n        val gradesMapSortedKeysAndValuesMap : Map[Float, String] = gradesMapSortedKeysAndValues.toMap\n        val gradesMapSortedKeysAndValuesMapSorted : Map[Float, String] = gradesMapSortedKeysAndValuesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeysAndValuesMapSortedKeys : Iterator[Float] = gradesMapSortedKeysAndValuesMapSorted.keys\n        val gradesMapSortedKeysAndValuesMapSortedValues : Iterator[String] = gradesMapSortedKeysAndValuesMapSorted.values\n        val gradesMapSortedKeysAndValuesMapSortedKeysAndValues : Iterator[(Float, String)] = gradesMapSortedKeysAndValuesMapSortedKeys.zip(gradesMapSortedKeysAndValuesMapSortedValues)\n        val gradesMapSortedKeysAndValuesMapSortedKeysAndValuesMap : Map[Float, String] = gradesMapSortedKeysAndValuesMapSortedKeysAndValues.toMap\n        val gradesMapSortedKeysAndValuesMapSortedKeysAndValuesMapSorted : Map[Float, String] = gradesMapSortedKeysAndValuesMapSortedKeysAndValuesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeysAndValuesMapSortedKeysAndValuesMapSortedKeys : Iterator[Float] = gradesMapSortedKeysAndValuesMapSortedKeysAndValuesMapSorted.keys\n        val gradesMapSortedKeysAndValuesMapSortedKeysAndValuesMapSortedValues : Iterator[String] = gradesMapSortedKeysAndValuesMapSortedKeysAndValuesMapSorted.values\n        val gradesMapSortedKeysAndValuesMapSortedKeysAndValuesMapSortedKeysAndValues : Iterator[(Float, String)] = gradesMapSortedKeysAndValuesMapSortedKeysAndValuesMapSortedKeys.zip(gradesMapSortedKeysAndValuesMapSortedKeysAndValuesMapSortedValues)\n        val gradesMapSortedKeysAndValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7y085uwa.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7y085uwa.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> grade.asInstanceOf[\u001b[35mFloat\u001b[0m].toChar)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, Char]\n\u001b[31m   |\u001b[0m                         Required: collection.mutable.Map[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7y085uwa.scala:26:61 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = gradesMap.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   value sortBy is not a member of collection.mutable.Map[Float, String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7y085uwa.scala:27:68 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedKeys\u001b[0m : \u001b[35mIterator\u001b[0m[\u001b[35mFloat\u001b[0m] = gradesMapSorted.keys\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    Iterable[Float]\n\u001b[31m   |\u001b[0m                                               Required: Iterator[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7y085uwa.scala:28:71 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedValues\u001b[0m : \u001b[35mIterator\u001b[0m[\u001b[35mString\u001b[0",
      "stdout": "",
      "timestamp": 1660010401
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => math.floor(x)).mapValues(_.toList).mapValues(_.sortBy(x => x))\n        val gradesMapSorted = gradesMap.mapValues(x => x.reverse)\n        val gradesMapSortedReversed = gradesMapSorted.mapValues(x => x.reverse)\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesSorted = gradesMapSortedReversedValues.sortBy(x => x.length)\n        val gradesMapSortedReversedValuesSortedKeys = gradesMapSortedReversedValuesSorted.keys\n        val gradesMapSortedReversedValuesSortedValues = gradesMapSortedReversedValuesSorted.values\n        val gradesMapSortedReversedValuesSortedKeysSorted = gradesMapSortedReversedValuesSortedKeys.sortBy(x => x.length)\n        val gradesMapSortedReversedValuesSortedKeysSortedValues = gradesMapSortedReversedValuesSortedKeysSorted.values\n        val gradesMapSortedReversedValuesSortedKeysSortedValuesSorted = gradesMapSortedReversedValuesSortedKeysSortedValues.sortBy(x => x.length)\n        val gradesMapSortedReversedValuesSortedKeysSortedValuesSortedKeys = gradesMapSortedReversedValuesSortedKeysSortedValuesSorted.keys\n        val gradesMapSortedReversedValuesSortedKeysSortedValuesSortedValues = gradesMapSortedReversedValuesSortedKeysSortedValuesSorted.values\n        val gradesMapSortedReversedValuesSortedKeysSortedValuesSortedKeysSorted = gradesMapSortedReversedValuesSortedKeysSortedValuesSortedKeys.sortBy(x => x.length)\n        val gradesMapSortedReversedValuesSortedKeysSortedValuesSortedKeysSortedValues = gradesMapSortedReversedValuesSortedKeysSortedValuesSortedKeysSorted.values\n        val gradesMapSortedReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSorted = gradesMapSortedReversedValuesSortedKeysSortedValuesSortedKeysSortedValues.sortBy(x => x.length)\n        val gradesMapSortedReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeys = gradesMapSortedReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeys.sortBy(x => x.length)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1k9_xuwf.scala:30:80 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesSorted\u001b[0m = gradesMapSortedReversedValues.sortBy(\u001b[36mx\u001b[0m => x.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value sortBy is not a member of Iterable[List[Float]]\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1k9_xuwf.scala:41:98 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeys\u001b[0m = gradesMapSortedReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeys.sortBy(\u001b[36mx\u001b[0m => x.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesMapSortedReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeys\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1k9_xuwf.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010399
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x => (x, \"D-\")).toMap\n        val gradesList : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList2 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList3 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList4 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList5 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList6 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList7 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList8 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList9 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList10 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList11 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList12 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList13 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList14 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList15 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList16 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList17 : List[(Float, String)] = grades.map(x => (x, \"D-\")).toList\n        val gradesMapList18 : List[(Float\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp81fevr7e.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp81fevr7e.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => (x, \u001b[31m\"D-\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmp81fevr7e.scala:44:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapList18\u001b[0m : \u001b[35mList\u001b[0m[(\u001b[35mFloat\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mvalue\u001b[0m \u001b[35mgradesMapList18\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp81fevr7e.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010400
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n        val gradesList : List[(Float, String)] = grades.map(grade => (grade -> \"D-\"))\n        val gradesMapList : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList2 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList3 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList4 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList5 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList6 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList7 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList8 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList9 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList10 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList11 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList12 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList13 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList14 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList15 : List[(Float, String)] = grades.map(grade => (grade -> \"D-\")).toList\n        val gradesMapList16 : List[(Float, String)] = grades.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpna0ka3sr.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpna0ka3sr.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> \u001b[31m\"D-\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpna0ka3sr.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010400
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        grades.map(grade => if(grade < 3.0) \"F\" else if(grade < 3.7) \"D\" else if(grade < 3.3) \"C\" else if(grade < 3.6) \"B\" else if(grade < 3.8) \"A\" else if(grade < 3.1) \"A+\" else if(grade < 3.4) \"A-\" else if(grade < 3.7) \"B+\" else if(grade < 3.8) \"B\" else if(grade < 3.1) \"B\" else if(grade < 3.4) \"B-\" else if(grade < 3.7) \"C+\" else if(grade < 3.8) \"C\" else if(grade < 3.1) \"C\" else if(grade < 3.4) \"C-\" else if(grade < 3.7) \"D+\" else if(grade < 3.8) \"D\" else if(grade < 3.1) \"D\" else if(grade < 3.4) \"D-\" else if(grade < 3.7) \"E\" else if(grade < 3.8) \"E\" else if(grade < 3.1) \"E\" else if(grade < 3.4) \"E-\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphzenfa93.scala:28)\n\tat Problem.main(tmphzenfa93.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660010402
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted = gradesValues.sortBy(x => x)\n        val gradesKeysSortedWithDuplicates = gradesKeysSorted.distinct\n        val gradesValuesSortedWithDuplicates = gradesValuesSorted.distinct\n        val gradesKeysSortedWithDuplicatesAndDuplicates = gradesKeysSortedWithDuplicates.zip(gradesValuesSortedWithDuplicates)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicates = gradesKeysSortedWithDuplicatesAndDuplicates.map(x => x._1 + \"+\" + x._2)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicates = gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicates.map(x => x._1 + \"-\" + x._2)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates = gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicates.map(x => x._1 + \"-\" + x._2)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates = gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates.map(x => x._1 + \"-\" + x._2)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates = gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates.map(x => x._1 + \"-\" + x._2)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates = gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates.map(x => x._1 + \"-\" + x._2)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates = gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates.map(x => x._1 + \"-\" + x._2)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates = grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbvez3ud2.scala:40:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\u001b[0m = grade\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbvez3ud2.scala:28:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSorted\u001b[0m = gradesKeys.sortBy(\u001b[36mx\u001b[0m => x)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value sortBy is not a member of Iterable[Int]\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpbvez3ud2.scala:36:110 --------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\u001b[0m = gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates.map(\u001b[36mx\u001b[0m => x._1 + \u001b[31m\"-\"\u001b[0m + x._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available",
      "stdout": "",
      "timestamp": 1660010400
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted = gradesKeys.sort\n        val gradesValuesSorted = gradesValues.sort\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKey\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbv8lsrhs.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbv8lsrhs.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedLength\u001b[0m = gradesKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesKeysSortedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbv8lsrhs.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedLength\u001b[0m = gradesKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesKeysSortedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbv8lsrhs.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedLength\u001b[0m = gradesKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesKeysSortedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbv8lsrhs.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedLength\u001b[0m = gradesKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesKeysSort",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(grade => (grade -> grade)).toMap\n        val gradesSortedByGPA = grades.sortBy(_.toDouble)\n        val gradesSortedByGPAWithLetterGrade = gradesSortedByGPA.map(grade => (grade -> gradesMap(grade)))\n        val gradesSortedByGPAWithLetterGradeWithZero = gradesSortedByGPAWithLetterGrade.map(grade => (grade -> grade))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZero.map(grade => (grade -> grade))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZero.map(grade => (grade -> grade))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero.map(grade => (grade -> grade))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero.map(grade => (grade -> grade))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero.map(grade => (grade -> grade))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero.map(grade => (grade -> grade))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero.map(grade => (grade -> grade))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero.map(grade => (grade -> grade))\n        val gradesSortedByGPA\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2w5_am0j.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2w5_am0j.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\u001b[0m = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero.map(\u001b[36mgrade\u001b[0m => (grade -> grade))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2w5_am0j.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\u001b[0m = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero.map(\u001b[36mgrade\u001b[0m => (grade -> grade))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch",
      "stdout": "",
      "timestamp": 1660010399
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> \"E\")).toMap\n        val gradesMapWithZero = gradesMap + (0.0 -> \"E\")\n        val gradesMapWithZeroAndNegative = gradesMapWithZero + (-7.0 -> \"D\")\n        val gradesMapWithZeroAndNegativeAndPositive = gradesMapWithZeroAndNegative + (7.0 -> \"D\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositive + (-7.0 -> \"D\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositive = gradesMapWithZeroAndNegativeAndPositiveAndNegative + (7.0 -> \"D\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositive + (-7.0 -> \"D\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegative + (7.0 -> \"D\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive + (-7.0 -> \"D\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative + (7.0 -> \"D\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive + (-7.0 -> \"D\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative + (7.0 -> \"D\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyhxuq4st.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> \u001b[31m\"E\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyhxuq4st.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapWithZero\u001b[0m = gradesMap + (\u001b[31m0.0\u001b[0m -> \u001b[31m\"E\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (\u001b[1m\u001b[31mDouble\u001b[0m, String)\n\u001b[31m   |\u001b[0m                                             Required: (\u001b[1m\u001b[32mFloat\u001b[0m, String)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyhxuq4st.scala:27:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapWithZeroAndNegative\u001b[0m = gradesMapWithZero + (-\u001b[31m7.0\u001b[0m -> \u001b[31m\"D\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    (\u001b[1m\u001b[31mDouble\u001b[0m, String)\n\u001b[31m   |\u001b[0m                                              Required: (\u001b[1m\u001b[32mFloat\u001b[0m, String)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyhxuq4st.scala:28:86 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapWithZeroAndNegativeAndPositive\u001b[0m = gradesMapWithZeroAndNegati",
      "stdout": "",
      "timestamp": 1660010401
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSorted = gradesMap.sortBy(_._1)\n        val gradesSortedSortedByKey = gradesSorted.toSeq.sortBy(_._1)\n        val gradesSortedSortedByKeyReversed = gradesSortedSortedByKey.reverse\n        val gradesSortedSortedByKeyReversedSortedByKey = gradesSortedSortedByKeyReversed.toSeq.sortBy(_._1)\n        val gradesSortedSortedByKeyReversedSortedByKeyReversed = gradesSortedSortedByKeyReversedSortedByKey.reverse\n        val gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesSortedSortedByKeyReversedSortedByKeyReversed.toSeq.sortBy(_._1)\n        val gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n        val gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.toSeq.sortBy(_._1)\n        val gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n        val gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.toSeq.sortBy(_._1)\n        val gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n        val gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n        val gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk7rn1uc_.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpk7rn1uc_.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpk7rn1uc_.scala:37:133 --------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\u001b[0m = gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk7rn1uc_.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010400
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toList).toMap\n        val gradesMapReversed = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sorted\n        val gradesMapReversedValuesSorted = gradesMapReversedValues.sorted\n        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4c0f3_8y.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapReversedKeysSortedLength\u001b[0m = gradesMapReversedKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapReversedKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapReversedKeysSortedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4c0f3_8y.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapReversedValuesSortedLength\u001b[0m = gradesMapReversedValuesSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapReversedValuesSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapReversedValuesSortedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4c0f3_8y.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapReversedKeysSortedLength\u001b[0m = gradesMapReversedKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapReversedKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapReversedKeysSortedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4c0f3_8y.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapReversedValuesSortedLength\u001b[0m = gradesMapReversedValuesSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMa",
      "stdout": "",
      "timestamp": 1660010402
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAWithLetterGrade = gradesSortedByGPA.map(x => (x, gradesMap.get(x)))\n        val gradesSortedByGPAWithLetterGradeWithZero = gradesSortedByGPAWithLetterGrade.map(x => (x._1, x._2._1))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZero.map(x => (x._1, x._2._2))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZero.map(x => (x._1, x._2._3))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero.map(x => (x._1, x._2._4))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.map(x => (x._1, x._2._5))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.map(x => (x._1, x._2._6))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.map(x => (x._1, x._2._7))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.map(x => (x._1, x._2._8))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith = gradesSortedByGPAWithLetterGradeWithZero\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps36lclvv.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\u001b[0m = gradesSortedByGPAWithLetterGradeWithZero\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps36lclvv.scala:27:92 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGrade\u001b[0m = gradesSortedByGPA.map(\u001b[36mx\u001b[0m => (x, gradesMap.get(x)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Found:    (x : Float)\n\u001b[31m   |\u001b[0m                                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps36lclvv.scala:28:109 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithZero\u001b[0m = gradesSortedByGPAWithLetterGrade.map(\u001b[36mx\u001b[0m => (x._1, x._2._1))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value _1 is not a member of Option[Float]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps36lclvv.scala:29:125 -----------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[",
      "stdout": "",
      "timestamp": 1660010406
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        grades.toList.sortWith(_ < _).reverse.foldLeft(List[String]())((acc, grade) => {\n            val gpa = grade.toInt\n            val letterGrade = if (gpa >= 4.0) \"A+\" else if (gpa > 3.7) \"A\" else if (gpa > 3.3) \"A-\" else if (gpa > 3.0) \"B+\" else if (gpa > 2.7) \"B\" else if (gpa > 2.3) \"B-\" else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"C\" else if (gpa > 1.3) \"C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else \"D-\"\n            acc :+ letterGrade\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt2rbxjs3.scala:32)\n\tat Problem.main(tmpt2rbxjs3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660010411
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> \"A+\")).toMap\n        grades.map(grade => {\n            val gpa = grade / 4.0\n            val letterGrade = gradesMap(gpa)\n            letterGrade\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0sxe_o0t.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> \u001b[31m\"A+\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0sxe_o0t.scala:28:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mletterGrade\u001b[0m = gradesMap(gpa)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    (gpa : Double)\n\u001b[31m   |\u001b[0m                                        Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010411
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        grades.map(grade => if (grade > 3.0) \"A+\" else if (grade > 2.7) \"B\" else if (grade > 2.3) \"B\" else if (grade > 2.0) \"C\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C\" else if (grade > 1.0) \"D\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D\" else \"E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb6fezn9f.scala:28)\n\tat Problem.main(tmpb6fezn9f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660010412
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAWithKey = gradesSortedByGPA.map(x => (x, x))\n        val gradesSortedByGPAWithKeyAndValue = gradesSortedByGPAWithKey.map(x => (x._2, x._1))\n        val gradesSortedByGPAWithKeyAndValueAndKey = gradesSortedByGPAWithKeyAndValue.map(x => (x._1, x._2))\n        val gradesSortedByGPAWithKeyAndValueAndKeyAndValue = gradesSortedByGPAWithKeyAndValueAndKey.map(x => (x._2, x._1))\n        val gradesSortedByGPAWithKeyAndValueAndKeyAndValueAndKey = gradesSortedByGPAWithKeyAndValueAndKeyAndValue.map(x => (x._1, x._2))\n        val gradesSortedByGPAWithKeyAndValueAndKeyAndValueAndKeyAndValue = gradesSortedByGPAWithKeyAndValueAndKeyAndValueAndKey.map(x => (x._2, x._1))\n        val gradesSortedByGPAWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKey = gradesSortedByGPAWithKeyAndValueAndKeyAndValueAndKeyAndValue.map(x => (x._1, x._2))\n        val gradesSortedByGPAWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValue = gradesSortedByGPAWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKey.map(x => (x._2, x._1))\n        val gradesSortedByGPAWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKey = gradesSortedByGPAWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValue.map(x => (x._1, x._2))\n        val gradesSortedByGPAWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValue = gradesSortedByGPAWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKey.map(x => (x._2, x._1))\n        val gradesSortedByGPAWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKey = gradesSortedByGPAWithKeyAndValueAndKey\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpotw9wv04.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010411
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList.sortBy(x => x)).toMap\n        val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse2 = gradesMapReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse3 = gradesMapReverse2.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse4 = gradesMapReverse3.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse5 = gradesMapReverse4.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse6 = gradesMapReverse5.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse7 = gradesMapReverse6.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse8 = gradesMapReverse7.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse9 = gradesMapReverse8.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse10 = gradesMapReverse9.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse11 = gradesMapReverse10.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse12 = gradesMapReverse11.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse13 = gradesMapReverse12.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse14 = gradesMapReverse13.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse15 = gradesMapReverse14.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse16 = gradesMapReverse15.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse17 = gradesMapReverse16.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse18 = gradesMapReverse17.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse19 = gradesMapReverse18.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse20 = gradesMapReverse19.map(x => (x._1, x._2)).to\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ty88hqa.scala:46:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010411
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAWithLetterGrade = gradesSortedByGPA.map(x => (x, gradesMap.get(x)))\n        val gradesSortedByGPAWithLetterGradeWithZero = gradesSortedByGPAWithLetterGrade.map(x => (x._1, x._2._1))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZero.map(x => (x._1, x._2._2))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZero.map(x => (x._1, x._2._3))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero.map(x => (x._1, x._2._4))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.map(x => (x._1, x._2._5))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZero.map(x => (x._1, x._2._6))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.map(x => (x._1, x._2._7))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.map(x => (x._1, x._2._8))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp52ugol6k.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp52ugol6k.scala:27:92 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGrade\u001b[0m = gradesSortedByGPA.map(\u001b[36mx\u001b[0m => (x, gradesMap.get(x)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Found:    (x : Float)\n\u001b[31m   |\u001b[0m                                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp52ugol6k.scala:28:109 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithZero\u001b[0m = gradesSortedByGPAWithLetterGrade.map(\u001b[36mx\u001b[0m => (x._1, x._2._1))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value _1 is not a member of Option[Float]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp52ugol6k.scala:29:125 -----------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithZeroWithZero\u001b[0m = gradesSortedByGPAWithLetterGradeWithZero.map(\u001b[36mx\u001b[0m => (x._1, x._2._2))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue _2 is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import concurrent.duration.durationToPair\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp52ugol6k.scala:30:141 -----------------------\u001b[0m\u001b[0m\n\u001b[31",
      "stdout": "",
      "timestamp": 1660010413
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        grades.sortWith(_.toDouble < _.toDouble)\n        val gradesCount = grades.size\n        val gradesSum = grades.sum\n        val gradesAvg = gradesSum / gradesCount\n        val gradesMin = grades.min\n        val gradesMax = grades.max\n        val gradesMedian = grades.median\n        val gradesMedianIndex = grades.indexOf((gradesMedian + gradesMedian) / 2)\n        val gradesMedianIndex2 = gradesMedianIndex + 1\n        val gradesMedianIndex3 = gradesMedianIndex + 2\n        val gradesMedianIndex4 = gradesMedianIndex + 3\n        val gradesMedianIndex5 = gradesMedianIndex + 4\n        val gradesMedianIndex6 = gradesMedianIndex + 5\n        val gradesMedianIndex7 = gradesMedianIndex + 6\n        val gradesMedianIndex8 = gradesMedianIndex + 7\n        val gradesMedianIndex9 = gradesMedianIndex + 8\n        val gradesMedianIndex10 = gradesMedianIndex + 9\n        val gradesMedianIndex11 = gradesMedianIndex + 10\n        val gradesMedianIndex12 = gradesMedianIndex + 11\n        val gradesMedianIndex13 = gradesMedianIndex + 12\n        val gradesMedianIndex14 = gradesMedianIndex + 13\n        val gradesMedianIndex15 = gradesMedianIndex + 14\n        val gradesMedianIndex16 = gradesMedianIndex + 15\n        val gradesMedianIndex17 = gradesMedianIndex + 16\n        val gradesMedianIndex18 = gradesMedianIndex + 17\n        val gradesMedianIndex19 = gradesMedianIndex + 18\n        val gradesMedianIndex20 = gradesMedianIndex + 19\n        val gradesMedianIndex21 = gradesMedianIndex + 20\n        val gradesMedianIndex22 = gradesMedianIndex + 21\n        val gradesMedianIndex23 = gradesMedianIndex + 22\n        val gradesMedianIndex24 = gradesMedianIndex + 23\n        val gradesMedianIndex25 = gradesMedianIndex + 24\n        val gradesMedianIndex26 = gradesMedianIndex\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmjaz2vx2.scala:31:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMedian\u001b[0m = grades.median\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value median is not a member of List[Float]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmjaz2vx2.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010413
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> grade < 3.0 ? \"A+\" :\n            grade < 3.7 ? \"A\" :\n            grade < 3.3 ? \"A-\" :\n            grade < 3.0 ? \"B+\" :\n            grade < 2.7 ? \"B\" :\n            grade < 2.3 ? \"B-\" :\n            grade < 2.0 ? \"C+\" :\n            grade < 1.7 ? \"C\" :\n            grade < 1.3 ? \"C-\" :\n            grade < 1.0 ? \"D+\" :\n            grade < 0.7 ? \"D\" :\n            \"D-\")).toMap\n        val gradesList : List[String] = grades.map(grade => gradesMap(grade))\n        gradesList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbqem06a5.scala:26:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            grade < \u001b[31m3.7\u001b[0m ? \u001b[31m\"A\"\u001b[0m :\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              ')' expected, but ':' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbqem06a5.scala:26:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            grade < \u001b[31m3.7\u001b[0m ? \u001b[31m\"A\"\u001b[0m :\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: type <\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbqem06a5.scala:25:81 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> grade < \u001b[31m3.0\u001b[0m ? \u001b[31m\"A+\"\u001b[0m :\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue < is not a member of (Float, Float), but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbqem06a5.scala:25:87 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> grade < \u001b[31m3.0\u001b[0m ? \u001b[31m\"A+\"\u001b[0m :\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value ? is not a member of Double\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010414
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> \"E\")).toMap\n        val gradesMap2 = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap3 = grades.map(grade => (grade -> \"C\")).toMap\n        val gradesMap4 = grades.map(grade => (grade -> \"B\")).toMap\n        val gradesMap5 = grades.map(grade => (grade -> \"A\")).toMap\n        val gradesMap6 = grades.map(grade => (grade -> \"A+\")).toMap\n        val gradesMap7 = grades.map(grade => (grade -> \"A-\")).toMap\n        val gradesMap8 = grades.map(grade => (grade -> \"B+\")).toMap\n        val gradesMap9 = grades.map(grade => (grade -> \"B-\")).toMap\n        val gradesMap10 = grades.map(grade => (grade -> \"C+\")).toMap\n        val gradesMap11 = grades.map(grade => (grade -> \"C\")).toMap\n        val gradesMap12 = grades.map(grade => (grade -> \"C-\")).toMap\n        val gradesMap13 = grades.map(grade => (grade -> \"D+\")).toMap\n        val gradesMap14 = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap15 = grades.map(grade => (grade -> \"D-\")).toMap\n        val gradesMap16 = grades.map(grade => (grade -> \"E\")).toMap\n        val gradesMap17 = grades.map(grade => (grade -> \"F\")).toMap\n        val gradesMap18 = grades.map(grade => (grade -> \"F\")).toMap\n        val gradesMap19 = grades.map(grade => (grade -> \"F\")).toMap\n        val gradesMap20 = grades.map(grade => (grade -> \"F\")).toMap\n        val gradesMap21 = grades.map(grade => (grade -> \"F\")).toMap\n        val gradesMap22 = grades.map(grade => (grade -> \"F\")).toMap\n        val gradesMap23 = grades.map(grade => (grade -> \"F\")).toMap\n        val gradesMap24 = grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpena5_oq7.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> \u001b[31m\"E\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpena5_oq7.scala:48:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap24\u001b[0m = grade\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: grade\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpena5_oq7.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010414
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toDouble)\n        val gradesMapSorted = gradesMap.sortBy(_._2)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysSorted = gradesMapSortedReversedKeys.sortBy(_)\n        val gradesMapSortedReversedValuesSorted = gradesMapSortedReversedValues.sortBy(_)\n        val gradesMapSortedReversedKeysSortedSortedReversed = gradesMapSortedReversedKeysSorted.sortBy(_)\n        val gradesMapSortedReversedValuesSortedSortedReversed = gradesMapSortedReversedValuesSorted.sortBy(_)\n        val gradesMapSortedReversedKeysSortedSortedReversedKeysSortedSortedReversed = gradesMapSortedReversedKeysSortedSortedReversed.sortBy(_)\n        val gradesMapSortedReversedValuesSortedSortedReversedValuesSortedSortedReversed = gradesMapSortedReversedValuesSortedSortedReversed.sortBy(_)\n        val gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed = gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed.sortBy(_)\n        val gradesMapSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed = gradesMapSortedReversedValuesSortedSortedReversed.sortBy(_)\n        val gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed = gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed.sortBy(_)\n        val gradesMapSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed = gradesMapSortedReversedValuesSortedSortedReversed.sortBy(_)\n        val gradesMapSortedReversedKeysSortedSortedReversedValuesSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6u1dpwnb.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6u1dpwnb.scala:25:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m10\u001b[0m).mapValues(_.toInt).mapValues(_.toDouble)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6u1dpwnb.scala:25:78 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m10\u001b[0m).mapValues(_.toInt).mapValues(_.toDouble)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toDouble is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Byte.byte2double\n\u001b[31m   |\u001b[0m  import Byte.byte2float\n\u001b[31m   |\u001b[0m  import Byte.byte2int\n\u001b[31m   |\u001b[0m  import Byte.byte2long\n\u001b[31m   |\u001b[0m  import Byte.byte2short\n\u001b[31m   |\u001b[0m  import Char.char2double\n\u001b[31m   |\u001b[0m  import Char.char2float\n\u001b[31m   |\u001b[0m  import Char.char2int\n\u001b[31m   |\u001b[0m  import Char.char2long\n\u001b[31m   |\u001b[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6u1dpwnb.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m ",
      "stdout": "",
      "timestamp": 1660010414
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x => x.toInt).mapValues(x => x.toDouble).mapValues(x \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdsk2z83u.scala:26:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdsk2z83u.scala:25:65 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(\u001b[36mx\u001b[0m => x.toInt).mapValues(_.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m => x.toInt).mapValues(\u001b[36mx\u001b[0m => x.toDouble).mapValues(\u001b[36mx\u001b[0m =>",
      "stdout": "",
      "timestamp": 1660010419
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => grade -> \"A+\".toUpperCase)\n        val gradesMap2 : Map[Float, String] = grades.map(grade => grade -> \"A\".toUpperCase)\n        val gradesMap3 : Map[Float, String] = grades.map(grade => grade -> \"A-\".toUpperCase)\n        val gradesMap4 : Map[Float, String] = grades.map(grade => grade -> \"B+\".toUpperCase)\n        val gradesMap5 : Map[Float, String] = grades.map(grade => grade -> \"B\".toUpperCase)\n        val gradesMap6 : Map[Float, String] = grades.map(grade => grade -> \"B-\".toUpperCase)\n        val gradesMap7 : Map[Float, String] = grades.map(grade => grade -> \"C+\".toUpperCase)\n        val gradesMap8 : Map[Float, String] = grades.map(grade => grade -> \"C\".toUpperCase)\n        val gradesMap9 : Map[Float, String] = grades.map(grade => grade -> \"C-\".toUpperCase)\n        val gradesMap10 : Map[Float, String] = grades.map(grade => grade -> \"D+\".toUpperCase)\n        val gradesMap11 : Map[Float, String] = grades.map(grade => grade -> \"D\".toUpperCase)\n        val gradesMap12 : Map[Float, String] = grades.map(grade => grade -> \"D-\".toUpperCase)\n        val gradesMap13 : Map[Float, String] = grades.map(grade => grade -> \"E\".toUpperCase)\n        val gradesMap14 : Map[Float, String] = grades.map(grade => grade -> \"F\".toUpperCase)\n        val gradesMap15 : Map[Float, String] = grades.map(grade => grade -> \"F\".toUpperCase)\n        val gradesMap16 : Map[Float, String] = grades.map(grade => grade -> \"F\".toUpperCase)\n        val gradesMap17 : Map[Float, String] = grades.map(grade => grade -> \"F\".toUpperCase)\n        val gradesMap18 : Map[Float, String] = grades.map(grade => grade -> \"F\".toUpperCase)\n        val gradesMap19\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkbdj_8kp.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkbdj_8kp.scala:25:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => grade -> \u001b[31m\"A+\"\u001b[0m.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    List[(Float, String)]\n\u001b[31m   |\u001b[0m                         Required: collection.mutable.Map[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkbdj_8kp.scala:26:56 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap2\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => grade -> \u001b[31m\"A\"\u001b[0m.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    List[(Float, String)]\n\u001b[31m   |\u001b[0m                         Required: collection.mutable.Map[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkbdj_8kp.scala:27:56 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap3\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => grade -> \u001b[31m\"A-\"\u001b[0m.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    List[(Float, String)]\n\u001b[31m   |\u001b[0m                         Required: collection.mutable.Map[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compil",
      "stdout": "",
      "timestamp": 1660010416
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedWithMax = gradesMapSortedGrouped.maxBy(_._2._2)\n        val gradesMapSortedGroupedWithMaxWithMax = gradesMapSortedGroupedWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMax = gradesMapSortedGroupedWithMaxWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMax = gradesMapSortedGroupedWithMaxWithMaxWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz2464_f1.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpz2464_f1.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\u001b[0m = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpz2464_f1.scala:25:65 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(\u001b[36mx\u001b[0m => x.toInt).mapValues(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpz2464_f1.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010414
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        grades.map(grade => if(grade > 3.0) \"B+\" else if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade > 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else if (grade > 0.0) \"E\" else \"A+\" else if (grade > 3.0) \"A\" else \"A\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6bwjqd9_.scala:25:298 --------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        grades.map(\u001b[36mgrade\u001b[0m => \u001b[33mif\u001b[0m(grade > \u001b[31m3.0\u001b[0m) \u001b[31m\"B+\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m2.7\u001b[0m) \u001b[31m\"B\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m2.3\u001b[0m) \u001b[31m\"B-\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m2.0\u001b[0m) \u001b[31m\"C+\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m1.7\u001b[0m) \u001b[31m\"C\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m1.3\u001b[0m) \u001b[31m\"C-\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m1.0\u001b[0m) \u001b[31m\"D+\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m0.7\u001b[0m) \u001b[31m\"D\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m0.0\u001b[0m) \u001b[31m\"D-\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m0.0\u001b[0m) \u001b[31m\"E\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"A+\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m3.0\u001b[0m) \u001b[31m\"A\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"A\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                          ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          ')' expected, but 'else' found\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010409
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val sortedGrades = grades.sortBy(x => x)\n        val gradesCount = grades.map(x => gradesMap.getOrElse(x, 0)).sum\n        val gradesSum = grades.map(x => gradesMap.getOrElse(x, 0)).sum\n        val gradesAverage = gradesSum / gradesCount\n        val gradesSumOfSquares = grades.map(x => x * x).sum\n        val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquared = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquare = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRoot = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf2 = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf3 = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf4 = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf5 = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf6 = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf7 = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf8 = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf9 = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf10 = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf11 = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf12 = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf13 = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf14 = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquareRootOf15 = gradesSumOfSquares / \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmptx6a7lla.scala:48:74 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSumOfSquaresAverageSquareRootOf15\u001b[0m = gradesSumOfSquares / \n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptx6a7lla.scala:27:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesCount\u001b[0m = grades.map(\u001b[36mx\u001b[0m => gradesMap.getOrElse(x, \u001b[31m0\u001b[0m)).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Found:    (x : Float)\n\u001b[31m   |\u001b[0m                                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmptx6a7lla.scala:27:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesCount\u001b[0m = grades.map(\u001b[36mx\u001b[0m => gradesMap.getOrElse(x, \u001b[31m0\u001b[0m)).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                No implicit Ordering defined for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                where:    B is a type variable with constraint >: AnyVal\n\u001b[31m   |\u001b[0m                .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptx6a7lla.scala:28:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSum\u001b[0m = grades.map(\u001b[36mx\u001b[0m => gradesMap.getOrElse(x, \u001b[31m0\u001b[0m)).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Found:    (x : Float)\n\u001b[31m   |\u001b[0m                                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "stdout": "",
      "timestamp": 1660010415
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSorted = gradesMap.sortBy(_._1)\n        val gradesSortedWithIndex = gradesSorted.zipWithIndex\n        val gradesSortedWithIndexSorted = gradesSortedWithIndex.sortBy(_._1)\n        val gradesSortedWithIndexSortedWithIndex = gradesSortedWithIndexSorted.zipWithIndex\n        val gradesSortedWithIndexSortedWithIndexSorted = gradesSortedWithIndexSortedWithIndex.sortBy(_._2)\n        val gradesSortedWithIndexSortedWithIndexSortedWithIndex = gradesSortedWithIndexSortedWithIndexSorted.zipWithIndex\n        val gradesSortedWithIndexSortedWithIndexSortedWithIndexSorted = gradesSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._3)\n        val gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex = gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex\n        val gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted = gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._4)\n        val gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex = gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex\n        val gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted = gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._5)\n        val gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex = gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex\n        val gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted = gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._6)\n        val gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex = gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex\n        val gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSor\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7r__yhld.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7r__yhld.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7r__yhld.scala:33:81 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\u001b[0m = gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7r__yhld.scala:35:96 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\u001b[0m = gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- ",
      "stdout": "",
      "timestamp": 1660010414
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesEnumerator = grades.iterator\n        val gradesIterator = grades.iterator\n        val gradesEnumerator2 = grades.iterator\n        val gradesIterator2 = grades.iterator\n        val gradesEnumerator3 = grades.iterator\n        val gradesIterator3 = grades.iterator\n        val gradesEnumerator4 = grades.iterator\n        val gradesIterator4 = grades.iterator\n        val gradesEnumerator5 = grades.iterator\n        val gradesIterator5 = grades.iterator\n        val gradesEnumerator6 = grades.iterator\n        val gradesIterator6 = grades.iterator\n        val gradesEnumerator7 = grades.iterator\n        val gradesIterator7 = grades.iterator\n        val gradesEnumerator8 = grades.iterator\n        val gradesIterator8 = grades.iterator\n        val gradesEnumerator9 = grades.iterator\n        val gradesIterator9 = grades.iterator\n        val gradesEnumerator10 = grades.iterator\n        val gradesIterator10 = grades.iterator\n        val gradesEnumerator11 = grades.iterator\n        val gradesIterator11 = grades.iterator\n        val gradesEnumerator12 = grades.iterator\n        val gradesIterator12 = grades.iterator\n        val gradesEnumerator13 = grades.iterator\n        val gradesIterator13 = grades.iterator\n        val gradesEnumerator14 = grades.iterator\n        val gradesIterator14 = grades.iterator\n        val gradesEnumerator15 = grades.iterator\n        val gradesIterator15 = grades.iterator\n        val gradesEnumerator16 = grades.iterator\n        val gradesIterator16 = grades.iterator\n        val gradesEnumerator17 = grades.iterator\n        val gradesIterator17 = grades.iterator\n        val gradesEnumerator18 = grades.iterator\n        val gradesIterator18 = grades.iterator\n        val gradesEnumerator19 = grades.iterator\n        val gradesIterator19 = grades.iterator\n        val gradesEnumerator20 = grades.iterator\n        val gradesIterator20 = grades.iterator\n        val gradesEnumerator21 = grades.iterator\n        val gradesIterator21 = grades.iterator\n        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeu389zln.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeu389zln.scala:73:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010414
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = new mutable.HashMap[Float, String]()\n        grades.foreach(grade => gradesMap(grade.toDouble) = grade)\n        gradesMap.values.toList.sortWith(_ < _)\n            .map(grade => if (grade > 0) \"A+\" else if (grade < 0) \"A-\" else \"B+\" else if (grade == 0) \"B\" else if (grade > 0) \"B-\" else \"C+\" else if (grade < 0) \"C\" else \"C-\" else \"D+\" else if (grade > 0) \"D\" else \"D-\" else \"E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr28djwgt.scala:28:81 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            .map(grade => \u001b[33mif\u001b[0m (grade > \u001b[31m0\u001b[0m) \u001b[31m\"A+\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade < \u001b[31m0\u001b[0m) \u001b[31m\"A-\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"B+\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade == \u001b[31m0\u001b[0m) \u001b[31m\"B\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m0\u001b[0m) \u001b[31m\"B-\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"C+\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade < \u001b[31m0\u001b[0m) \u001b[31m\"C\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"C-\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"D+\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m0\u001b[0m) \u001b[31m\"D\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"D-\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"E\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          ')' expected, but 'else' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr28djwgt.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010409
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n        val gradesMapSorted3 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted4 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted5 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted6 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted7 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted8 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted9 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted10 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted11 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted12 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted13 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted14 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted15 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted16 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted17 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted18 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted19 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted20 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted21 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val gradesMapSorted22 = gradesMapSorted.filter(_._2 < 0).map(_._1)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpn4dt2m6l.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn4dt2m6l.scala:25:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m10\u001b[0m).mapValues(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn4dt2m6l.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sortBy is not a member of scala.collection.MapView[Float, Nothing]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn4dt2m6l.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010415
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x => (x, \"E\")).toMap\n        val gradesMap2 = grades.map(x => (x, \"D\")).toMap\n        val gradesMap3 = grades.map(x => (x, \"C\")).toMap\n        val gradesMap4 = grades.map(x => (x, \"B\")).toMap\n        val gradesMap5 = grades.map(x => (x, \"A\")).toMap\n        val gradesMap6 = grades.map(x => (x, \"A+\")).toMap\n        val gradesMap7 = grades.map(x => (x, \"A-\")).toMap\n        val gradesMap8 = grades.map(x => (x, \"B+\")).toMap\n        val gradesMap9 = grades.map(x => (x, \"B-\")).toMap\n        val gradesMap10 = grades.map(x => (x, \"C+\")).toMap\n        val gradesMap11 = grades.map(x => (x, \"C\")).toMap\n        val gradesMap12 = grades.map(x => (x, \"C-\")).toMap\n        val gradesMap13 = grades.map(x => (x, \"D+\")).toMap\n        val gradesMap14 = grades.map(x => (x, \"D\")).toMap\n        val gradesMap15 = grades.map(x => (x, \"D-\")).toMap\n        val gradesMap16 = grades.map(x => (x, \"E\")).toMap\n        val gradesMap17 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap18 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap19 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap20 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap21 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap22 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap23 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap24 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap25 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap26 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap27 = grades.map(x => (x, \"F\")).toMap\n        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfjfop44.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => (x, \u001b[31m\"E\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfjfop44.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010387
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4bfv9kb0.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4bfv9kb0.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedSortedSortedSortedSortedSortedSortedMap\u001b[0m = gradesSorted.sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).map(\u001b[36mx\u001b[0m => (x.toInt, x)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedSortedSortedSortedSortedSortedSortedSortedMap is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedSortedSortedSortedSortedSortedSortedSortedMap\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4bfv9kb0.scala:36:218 -----------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedSortedSortedSortedSortedSortedSortedSortedMap\u001b[0m = gradesSorted.sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(x \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                            Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer",
      "stdout": "",
      "timestamp": 1660010416
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3 = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5 = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7 = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9 = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11 = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13 = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15 = gradesMapSortedReversedValuesSum14 * gradesMapSortedReversedValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprj20h90q.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprj20h90q.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList)\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjdyqavs7.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjdyqavs7.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjdyqavs7.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjdyqavs7.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjdyqavs7.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m",
      "stdout": "",
      "timestamp": 1660010416
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3 = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5 = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7 = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9 = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11 = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13 = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15 = gradesMapSortedReversedValuesSum14 * gradesMapSortedReversedValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprj20h90q.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprj20h90q.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMap = gradesSortedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMap = gradesSortedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMap = gradesSortedMapReversedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMapReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMap = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap = gradesSortedMapReversedMapReversedMapReversedMapReverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzm46kf88.scala:28:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversed\u001b[0m = gradesSortedMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpzm46kf88.scala:32:60 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversedMapReversedMapReversed\u001b[0m = gradesSortedMapReversedMapReversedMapReversed.map(\u001b[36mx\u001b[0m => (x._1, x._2)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedMapReversedMapReversedMapReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzm46kf88.scala:39:96 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap\u001b[0m = gradesSortedMapReversedMapReversedMapReversedMapReverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      Not found: gradesSortedMapReversedMapReversedMapReversedMapReverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzm46kf88.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010417
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted = gradesKeys.sort\n        val gradesValuesSorted = gradesValues.sort\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKey\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbv8lsrhs.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbv8lsrhs.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedLength\u001b[0m = gradesKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesKeysSortedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbv8lsrhs.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedLength\u001b[0m = gradesKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesKeysSortedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbv8lsrhs.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedLength\u001b[0m = gradesKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesKeysSortedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbv8lsrhs.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedLength\u001b[0m = gradesKeysSorted.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesKeysSortedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesKeysSort",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo_n94wg0.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysLength\u001b[0m = gradesMapSortedReversedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysLength\u001b[0m = gradesMapSortedReversedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesL",
      "stdout": "",
      "timestamp": 1660010397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n        val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n        val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n        val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20 = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2 > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n        val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25 = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeibwrnx2.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeibwrnx2.scala:25:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m10\u001b[0m).mapValues(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeibwrnx2.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sortBy is not a member of scala.collection.MapView[Float, Nothing]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeibwrnx2.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010420
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAWithKeys = gradesSortedByGPA.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPAWithKeysReversed = gradesSortedByGPAWithKeys.reverse\n        val gradesSortedByGPAWithKeysReversedWithKeys = gradesSortedByGPAWithKeysReversed.map(x => (x._2, x._1))\n        val gradesSortedByGPAWithKeysReversedWithKeysReversed = gradesSortedByGPAWithKeysReversedWithKeys.reverse\n        val gradesSortedByGPAWithKeysReversedWithKeysReversedWithKeys = gradesSortedByGPAWithKeysReversedWithKeysReversed.map(x => (x._1, x._2))\n        val gradesSortedByGPAWithKeysReversedWithKeysReversedWithKeysReversed = gradesSortedByGPAWithKeysReversedWithKeysReversedWithKeys.reverse\n        val gradesSortedByGPAWithKeysReversedWithKeysReversedWithKeysReversedWithKeys = gradesSortedByGPAWithKeysReversedWithKeysReversedWithKeysReversed.map(x => (x._2, x._1))\n        val gradesSortedByGPAWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed = gradesSortedByGPAWithKeysReversedWithKeysReversedWithKeysReversedWithKeys.reverse\n        val gradesSortedByGPAWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeys = gradesSortedByGPAWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed.map(x => (x._1, x._2))\n        val gradesSortedByGPAWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed = gradesSortedByGPAWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeys.reverse\n        val gradesSortedByGPAWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp__0x6nh3.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp__0x6nh3.scala:28:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithKeysReversed\u001b[0m = gradesSortedByGPAWithKeys.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedByGPAWithKeys.reversed?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp__0x6nh3.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010424
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGrade = grades.sortBy(x => x)\n        val gradesSortedByGradeReversed = gradesSortedByGrade.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedByGradeReversedSortedByGrade = gradesSortedByGradeReversed.sortBy(x => x._1)\n        val gradesSortedByGradeReversedSortedByGradeReversed = gradesSortedByGradeReversedSortedByGrade.map(x => (x._2, x._1)).toMap.reverse\n        val gradesSortedByGradeReversedSortedByGradeReversedSortedByGrade = gradesSortedByGradeReversedSortedByGradeReversed.sortBy(x => x._1)\n        val gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversed = gradesSortedByGradeReversedSortedByGradeReversedSortedByGrade.map(x => (x._2, x._1)).toMap.reverse\n        val gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGrade = gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGrade.map(x => (x._2, x._1)).toMap.reverse\n        val gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGradeReversed = gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGrade.map(x => (x._2, x._1)).toMap.reverse\n        val gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGrade = gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGrade.map(x => (x._2, x._1)).toMap.reverse\n        val gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGradeReversed = gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGradeReversed.map(x => (x._2, x._1)).to\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvvuz50uc.scala:27:91 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGradeReversed\u001b[0m = gradesSortedByGrade.map(\u001b[36mx\u001b[0m => (x.toInt, x)).toMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Map[Int, Float] - did you mean Map[Int, Float].reversed?\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvvuz50uc.scala:32:97 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGrade\u001b[0m = gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGrade.map(\u001b[36mx\u001b[0m => (x._2, x._1)).toMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGrade\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvvuz50uc.scala:34:118 --------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGrade\u001b[0m = gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGrade.map(\u001b[36mx\u001b[0m => (x._2, x._1)).toMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGrade\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Err",
      "stdout": "",
      "timestamp": 1660010423
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplr2v1uer.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedKeysLength\u001b[0m = gradesMapSortedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplr2v1uer.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedValuesLength\u001b[0m = gradesMapSortedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplr2v1uer.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedKeysLength\u001b[0m = gradesMapSortedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplr2v1uer.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedValuesLength\u001b[0m = gradesMapSortedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of t",
      "stdout": "",
      "timestamp": 1660010426
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapReversed = gradesSortedByGPAReversedMap.reverse\n        val gradesSortedByGPAReversedMapReversedMap = gradesSortedByGPAReversedMapReversed.toMap\n        val gradesSortedByGPAReversedMapReversedMapReversed = gradesSortedByGPAReversedMapReversedMap.reverse\n        val gradesSortedByGPAReversedMapReversedMapReversedMap = gradesSortedByGPAReversedMapReversedMapReversed.toMap\n        val gradesSortedByGPAReversedMapReversedMapReversedMapReversed = gradesSortedByGPAReversedMapReversedMapReversedMap.reverse\n        val gradesSortedByGPAReversedMapReversedMapReversedMapReversedMap = gradesSortedByGPAReversedMapReversedMapReversedMapReversed.toMap\n        val gradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReversed = gradesSortedByGPAReversedMapReversedMapReversedMapReversedMap.reverse\n        val gradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReversedMap = gradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReversed.toMap\n        val gradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReversedMapReversed = gradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReversedMap.reverse\n        val gradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed = gradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap.reverse\n        val gradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap = gradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5_db8_ac.scala:29:80 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedMapReversed\u001b[0m = gradesSortedByGPAReversedMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedByGPAReversedMap.reversed?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5_db8_ac.scala:38:106 -----------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\u001b[0m = gradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: gradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5_db8_ac.scala:39:109 -----------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap\u001b[0m = gradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: gradesSortedByGPAReversedMapReversedMapReversedMapReversedMapReverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_db8_ac.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit",
      "stdout": "",
      "timestamp": 1660010424
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapReversed = gradesSortedByGPAReversedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedByGPAReversedMapReversedKeys = gradesSortedByGPAReversedMapReversed.keys\n        val gradesSortedByGPAReversedMapReversedValues = gradesSortedByGPAReversedMapReversed.values\n        val gradesSortedByGPAReversedMapReversedValuesSortedByGPA = gradesSortedByGPAReversedMapReversedValues.sortBy(x => x)\n        val gradesSortedByGPAReversedMapReversedValuesSortedByGPAReversed = gradesSortedByGPAReversedMapReversedValuesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMapReversedValuesSortedByGPAReversedMap = gradesSortedByGPAReversedMapReversedValuesSortedByGPAReversed.map(x => (x._2, x._1)).toMap\n        val gradesSortedByGPAReversedMapReversedValuesSortedByGPAReversedMapReversed = gradesSortedByGPAReversedMapReversedValuesSortedByGPAReversedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedByGPAReversedMapReversedValuesSortedByGPAReversedMapReversedKeys = gradesSortedByGPAReversedMapReversedValuesSortedByGPAReversedMapReversed.keys\n        val gradesSortedByGPAReversedMapReversedValuesSortedByGPAReversedMapReversedValues = gradesSortedByGPAReversedMapReversedValuesSortedByGPAReversedMapReversed.values\n        val gradesSortedByGPAReversedMapReversedValuesSortedByGPAReversedMapReversedValuesSortedByGPA = gradesSortedByGPAReversedMapReversedValuesSortedByGPAReversedMapReversedValues.sortBy(x => x)\n        val gradesSortedByGP\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6u2ysh3t.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6u2ysh3t.scala:32:111 -----------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedMapReversedValuesSortedByGPA\u001b[0m = gradesSortedByGPAReversedMapReversedValues.sortBy(\u001b[36mx\u001b[0m => x)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value sortBy is not a member of Iterable[Int]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6u2ysh3t.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010426
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMap = gradesSortedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMap = gradesSortedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMap = gradesSortedMapReversedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMapReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMap = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap = gradesSortedMapReversedMapReversedMapReversedMapReverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzm46kf88.scala:28:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversed\u001b[0m = gradesSortedMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpzm46kf88.scala:32:60 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversedMapReversedMapReversed\u001b[0m = gradesSortedMapReversedMapReversedMapReversed.map(\u001b[36mx\u001b[0m => (x._1, x._2)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedMapReversedMapReversedMapReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzm46kf88.scala:39:96 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap\u001b[0m = gradesSortedMapReversedMapReversedMapReversedMapReverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      Not found: gradesSortedMapReversedMapReversedMapReversedMapReverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzm46kf88.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010417
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo_n94wg0.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysLength\u001b[0m = gradesMapSortedReversedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysLength\u001b[0m = gradesMapSortedReversedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesL",
      "stdout": "",
      "timestamp": 1660010397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).toMap\n        val gradesReverse = grades.reverse\n        val gradesReverseMap = gradesReverse.groupBy(_ / 10).mapValues(_.toInt).toMap\n        val gradesReverseMap2 = gradesReverse.groupBy(_ / 10).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).toMap\n        val gradesReverseMap3 = gradesReverse.groupBy(_ / 10).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).toMap\n        val gradesReverseMap4 = gradesReverse.groupBy(_ / 10).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).toMap\n        val gradesReverseMap5 = gradesReverse.groupBy(_ / 10).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).toMap\n        val gradesReverseMap6 = gradesReverse.groupBy(_ / 10).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).toMap\n        val gradesReverseMap7 = gradesReverse.groupBy(_ / 10).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).toMap\n        val gradesReverseMap8 = gradesReverse.groupBy(_ / 10).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(_.toInt).filter(_._2 > 0).mapValues(\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpccf86ml3.scala:34:180 --------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesReverseMap8\u001b[0m = gradesReverse.groupBy(_ / \u001b[31m10\u001b[0m).mapValues(_.toInt).filter(_._2 > \u001b[31m0\u001b[0m).mapValues(_.toInt).filter(_._2 > \u001b[31m0\u001b[0m).mapValues(_.toInt).filter(_._2 > \u001b[31m0\u001b[0m).mapValues(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpccf86ml3.scala:25:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m10\u001b[0m).mapValues(_.toInt).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpccf86ml3.scala:27:73 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesReverseMap\u001b[0m = gradesReverse.groupBy(_ / \u001b[31m10\u001b[0m).mapValues(_.toInt).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Frac",
      "stdout": "",
      "timestamp": 1660010432
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSorted = grades.sortWith(_ < _)\n        val gradesSortedMap = gradesSorted.toMap\n        val gradesSortedSortedMap = gradesSorted.sortWith(_ < _).toMap\n        val gradesSortedSortedMapKeys = gradesSortedSortedMap.keys\n        val gradesSortedSortedMapValues = gradesSortedSortedMap.values.toList\n        val gradesSortedSortedMapValuesSorted = gradesSortedSortedMapValues.sortWith(_ < _)\n        val gradesSortedSortedMapValuesSortedSortedKeys = gradesSortedSortedMapValuesSorted.keys\n        val gradesSortedSortedMapValuesSortedSortedValues = gradesSortedSortedMapValuesSorted.values.toList\n        val gradesSortedSortedMapValuesSortedSortedValuesSorted = gradesSortedSortedMapValuesSortedSortedValues.sortWith(_ < _)\n        val gradesSortedSortedMapValuesSortedSortedValuesSortedKeys = gradesSortedSortedMapValuesSortedSortedValuesSorted.keys\n        val gradesSortedSortedMapValuesSortedSortedValuesSortedValues = gradesSortedSortedMapValuesSortedSortedValuesSorted.values.toList\n        val gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSorted = gradesSortedSortedMapValuesSortedSortedValuesSortedValues.sortWith(_ < _)\n        val gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedKeys = gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSorted.keys\n        val gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedValues = gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSorted.values.toList\n        val gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedKeys = gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedKeys\n        val gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedValues = gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedValuesSorted\n        val gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedValuesSortedKeys = gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedValuesSortedKeys\n        val gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedValuesSortedValues = gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedValuesSortedValuesSorted\n        val gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedValuesSortedValuesSortedKeys = gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedValuesSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1slffzz9.scala:40:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedKeys\u001b[0m = gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedKeys\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedKeys is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedKeys\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1slffzz9.scala:41:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedValues\u001b[0m = gradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedValuesSorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedValues is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedSortedMapValuesSortedSortedValuesSortedValuesSortedValues\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1slffzz9.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |",
      "stdout": "",
      "timestamp": 1660010427
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).toMap\n        val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse2 = gradesMapReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse3 = gradesMapReverse2.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse4 = gradesMapReverse3.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse5 = gradesMapReverse4.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse6 = gradesMapReverse5.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse7 = gradesMapReverse6.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse8 = gradesMapReverse7.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse9 = gradesMapReverse8.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse10 = gradesMapReverse9.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse11 = gradesMapReverse10.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse12 = gradesMapReverse11.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse13 = gradesMapReverse12.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse14 = gradesMapReverse13.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse15 = gradesMapReverse14.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse16 = gradesMapReverse15.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse17 = gradesMapReverse16.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse18 = gradesMapReverse17.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse19 = gradesMapReverse18.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse20 = gradesMapReverse19.map(x => (x._1, x._2)).toMap\n        val gradesMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6sc8c9sq.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sc8c9sq.scala:25:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m10\u001b[0m).mapValues(_.toInt).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6sc8c9sq.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010429
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList).mapValues(_.sortBy(x => x))\n        val gradesMapSorted = gradesMap.mapValues(_.sortBy(x => x))\n        val gradesMapSorted2 = gradesMapSorted.mapValues(_.sortBy(x => x))\n        val gradesMapSorted3 = gradesMapSorted2.mapValues(_.sortBy(x => x))\n        val gradesMapSorted4 = gradesMapSorted3.mapValues(_.sortBy(x => x))\n        val gradesMapSorted5 = gradesMapSorted4.mapValues(_.sortBy(x => x))\n        val gradesMapSorted6 = gradesMapSorted5.mapValues(_.sortBy(x => x))\n        val gradesMapSorted7 = gradesMapSorted6.mapValues(_.sortBy(x => x))\n        val gradesMapSorted8 = gradesMapSorted7.mapValues(_.sortBy(x => x))\n        val gradesMapSorted9 = gradesMapSorted8.mapValues(_.sortBy(x => x))\n        val gradesMapSorted10 = gradesMapSorted9.mapValues(_.sortBy(x => x))\n        val gradesMapSorted11 = gradesMapSorted10.mapValues(_.sortBy(x => x))\n        val gradesMapSorted12 = gradesMapSorted11.mapValues(_.sortBy(x => x))\n        val gradesMapSorted13 = gradesMapSorted12.mapValues(_.sortBy(x => x))\n        val gradesMapSorted14 = gradesMapSorted13.mapValues(_.sortBy(x => x))\n        val gradesMapSorted15 = gradesMapSorted14.mapValues(_.sortBy(x => x))\n        val gradesMapSorted16 = gradesMapSorted15.mapValues(_.sortBy(x => x))\n        val gradesMapSorted17 = gradesMapSorted16.mapValues(_.sortBy(x => x))\n        val gradesMapSorted18 = gradesMapSorted17.mapValues(_.sortBy(x => x))\n        val gradesMapSorted19 = gradesMapSorted18.mapValues(_.sortBy(x => x))\n        val gradesMapSorted20 = gradesMapSorted19.mapValues(_.sortBy(x => x))\n        val gradesMapSorted21 = gradesMapSorted20.mapValues(_.sortBy(x => x))\n        val gradesMapSorted22 = gradesMapSorted21.mapValues(_.sortBy(x => x))\n        val gradesMapSorted23 = gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeiwqitqy.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010427
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => x.toInt).toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesValuesWithZero = gradesValues.map(_+0.0)\n        val gradesValuesWithZeroMap = gradesValuesWithZero.toMap\n        val gradesValuesWithZeroKeys = gradesValuesWithZeroMap.keys\n        val gradesValuesWithZeroValues = gradesValuesWithZeroMap.values.toList\n        val gradesValuesWithZeroValuesWithZero = gradesValuesWithZeroValues.map(_+0.0)\n        val gradesValuesWithZeroValuesWithZeroMap = gradesValuesWithZeroValuesWithZero.toMap\n        val gradesValuesWithZeroValuesWithZeroKeys = gradesValuesWithZeroValuesWithZeroMap.keys\n        val gradesValuesWithZeroValuesWithZeroValues = gradesValuesWithZeroValuesWithZeroMap.values.toList\n        val gradesValuesWithZeroValuesWithZeroValuesWithZero = gradesValuesWithZeroValuesWithZeroValues.map(_+0.0)\n        val gradesValuesWithZeroValuesWithZeroValuesWithZeroMap = gradesValuesWithZeroValuesWithZeroValuesWithZero.toMap\n        val gradesValuesWithZeroValuesWithZeroValuesWithZeroKeys = gradesValuesWithZeroValuesWithZeroValuesWithZeroMap.values.toList\n        val gradesValuesWithZeroValuesWithZeroValuesWithZeroValues = gradesValuesWithZeroValuesWithZeroValuesWithZeroMap.values.toList\n        val gradesValuesWithZeroValuesWithZeroValuesWithZeroValuesWithZero = gradesValuesWithZeroValuesWithZeroValuesWithZeroValues.map(_+0.0)\n        val gradesValuesWithZeroValuesWithZeroValuesWithZeroValuesWithZeroMap = gradesValuesWithZeroValuesWithZeroValuesWithZeroValuesWithZero.toMap\n        val gradesValuesWithZeroValuesWithZeroValuesWithZeroValuesWithZeroKeys = gradesValuesWithZeroValuesWithZeroValuesWithZeroValuesWithZeroMap.values.toList\n        val gradesValuesWithZeroValuesWithZeroValuesWithZeroValuesWithZeroValues = gradesValuesWithZeroValuesWithZeroValuesWithZeroValuesWithZeroMap.values.toList\n        val gradesValuesWithZeroValuesWithZeroValuesWithZeroValuesWithZeroValuesWithZero = gradesValuesWithZeroValuesWithZeroValuesWithZeroValuesWith\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp26abn0a2.scala:25:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.map(\u001b[36mx\u001b[0m => x.toInt).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Cannot prove that Int <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                        where:    K is a type variable\n\u001b[31m   |\u001b[0m                                                  V is a type variable\n\u001b[31m   |\u001b[0m                                        .\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp26abn0a2.scala:44:91 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesValuesWithZeroValuesWithZeroValuesWithZeroValuesWithZeroValuesWithZero\u001b[0m = gradesValuesWithZeroValuesWithZeroValuesWithZeroValuesWith\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   Not found: gradesValuesWithZeroValuesWithZeroValuesWithZeroValuesWith\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26abn0a2.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010428
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysSorted = gradesMapSortedReversedKeys.sortBy(_._1)\n        val gradesMapSortedReversedKeysSortedReversed = gradesMapSortedReversedKeysSorted.reverse\n        val gradesMapSortedReversedKeysSortedReversedValues = gradesMapSortedReversedKeysSortedReversed.values\n        val gradesMapSortedReversedKeysSortedReversedValuesSorted = gradesMapSortedReversedKeysSortedReversedValues.sortBy(_._1)\n        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversed = gradesMapSortedReversedKeysSortedReversedValuesSorted.reverse\n        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeys = gradesMapSortedReversedKeysSortedReversedValuesSortedReversed.keys\n        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedValuesSorted = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeys.sortBy(_._1)\n        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted.reverse\n        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValues = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSorted.values\n        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSortedReversed = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSortedReversed.sortBy(_._1)\n        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSortedReversedKeys = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSortedReversedKeys.sortBy(_._1)\n        val gradesMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyvzuxyg2.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyvzuxyg2.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpyvzuxyg2.scala:37:86 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted\u001b[0m = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyvzuxyg2.scala:38:100 -----------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValues\u001b[0m = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSorted.values\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSorted\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer exp",
      "stdout": "",
      "timestamp": 1660010428
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sort\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt6zfd6eo.scala:36:217 -----------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedMap\u001b[0m = gradesSorted.sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sort\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[Float] - did you mean List[Float].sortBy?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6zfd6eo.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010429
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x => (x, x.toString match {\n            case \"4.0\" => \"A+\"\n            case \"3.7\" => \"A\"\n            case \"3.3\" => \"A-\"\n            case \"3.0\" => \"B+\"\n            case \"2.7\" => \"B\"\n            case \"2.3\" => \"B-\"\n            case \"2.0\" => \"C+\"\n            case \"1.7\" => \"C\"\n            case \"1.3\" => \"C-\"\n            case \"1.0\" => \"D+\"\n            case \"0.7\" => \"D\"\n            case \"0.0\" => \"D-\"\n            case \"0.0\" => \"E\"\n        })).toMap\n        val gradesList : List[String] = gradesMap.values\n        val gradesMapList : List[Map[Float, String]] = gradesList.map(x => (x, x.toList))\n        val gradesMapListSorted : List[Map[Float, String]] = gradesMapList.sortBy(x => x._1)\n        val gradesMapListSortedWithKey : List[(Map[Float, String], List[Float])] = gradesMapListSorted.map(x => (x._1, x._2.sort))\n        val gradesMapListSortedWithKeyAndValues : List[(Map[Float, String], List[Float], List[String])] = gradesMapListSortedWithKey.map(x => (x._1, x._2, x._2.map(x => x._3)))\n        val gradesMapListSortedWithKeyAndValuesMap : Map[Float, List[String]] = gradesMapListSortedWithKeyAndValues.map(x => (x._1, x._2.map(x => x._2)))\n        val gradesMapListSortedWithKeyAndValuesMapWithKey : Map[Float, List[String]] = gradesMapListSortedWithKeyAndValuesMap.map(x => (x._1, x._2.map(x => x._1)))\n        val gradesMapListSortedWithKeyAndValuesMapWithKeyAndValues : Map[Float, List[String]] = gradesMapListSortedWithKeyAndValuesMapWithKey.map(x => (x._1, x._2.map(x => x._2)))\n        val gradesMapListSortedWithKeyAndValuesMapWithKeyAndValuesMap : Map[Float, List[(String, List[String])]] = gradesMapListSortedWithKeyAndValuesMapWithKeyAndValues.map(x => (x._1, x._2.map(x => (x._1, x._2.map(x => x._2)))))\n        val gradesMapListSortedWithKeyAndValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprz148not.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprz148not.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => (x, x.toString \u001b[33mmatch\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m26 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m\"4.0\"\u001b[0m => \u001b[31m\"A+\"\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m\"3.7\"\u001b[0m => \u001b[31m\"A\"\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m\"3.3\"\u001b[0m => \u001b[31m\"A-\"\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m\"3.0\"\u001b[0m => \u001b[31m\"B+\"\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m\"2.7\"\u001b[0m => \u001b[31m\"B\"\u001b[0m\n\u001b[31m31 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m\"2.3\"\u001b[0m => \u001b[31m\"B-\"\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m\"2.0\"\u001b[0m => \u001b[31m\"C+\"\u001b[0m\n\u001b[31m33 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m\"1.7\"\u001b[0m => \u001b[31m\"C\"\u001b[0m\n\u001b[31m34 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m\"1.3\"\u001b[0m => \u001b[31m\"C-\"\u001b[0m\n\u001b[31m35 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m\"1.0\"\u001b[0m => \u001b[31m\"D+\"\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m\"0.7\"\u001b[0m => \u001b[31m\"D\"\u001b[0m\n\u001b[31m37 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m\"0.0\"\u001b[0m => \u001b[31m\"D-\"\u001b[0m\n\u001b[31m38 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m\"0.0\"\u001b[0m => \u001b[31m\"E\"\u001b[0m\n\u001b[31m39 |\u001b[0m        })).toMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprz148not.scala:40:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesList\u001b[0m : \u001b[35mList\u001b[0m[\u001b[35mString\u001b[0m] = gradesMap.values\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[3",
      "stdout": "",
      "timestamp": 1660010432
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedSortedByKey = gradesMapSorted.sortBy(_._2)\n        val gradesMapSortedSortedByKeyReversed = gradesMapSortedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversed.sortBy(_._1)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversed.sortBy(_._2)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._3)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._4)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._5)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppno1iljj.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmppno1iljj.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppno1iljj.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010429
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt)\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toFloat)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toInt)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toDouble)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toFloat)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toInt)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toDouble)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toFloat)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toInt)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toDouble)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toFloat)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toInt)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toDouble)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toFloat)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toInt)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toDouble)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toFloat)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toInt)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toDouble)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toFloat)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toInt)).toMap\n        val gradesMap = gradesMap.map(x => (x._1, x._2.toDouble)).toMap\n        val gradesMap = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4iqagopa.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = gradesMap.map(\u001b[36mx\u001b[0m => (x._1, x._2.toFloat)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMap is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMap\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4iqagopa.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = gradesMap.map(\u001b[36mx\u001b[0m => (x._1, x._2.toInt)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMap is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMap\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4iqagopa.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = gradesMap.map(\u001b[36mx\u001b[0m => (x._1, x._2.toDouble)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMap is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMap\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4iqagopa.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = gradesMap.map(\u001b[36mx\u001b[0m => (x._1, x._2.toFloat)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMap is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMap\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4iqagopa",
      "stdout": "",
      "timestamp": 1660010429
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSorted2 = gradesMapSorted.toSeq.sortBy(_._2)\n        val gradesMapSorted3 = gradesMapSorted2.toSeq.sortBy(_._2)\n        val gradesMapSorted4 = gradesMapSorted3.toSeq.sortBy(_._2)\n        val gradesMapSorted5 = gradesMapSorted4.toSeq.sortBy(_._2)\n        val gradesMapSorted6 = gradesMapSorted5.toSeq.sortBy(_._2)\n        val gradesMapSorted7 = gradesMapSorted6.toSeq.sortBy(_._2)\n        val gradesMapSorted8 = gradesMapSorted7.toSeq.sortBy(_._2)\n        val gradesMapSorted9 = gradesMapSorted8.toSeq.sortBy(_._2)\n        val gradesMapSorted10 = gradesMapSorted9.toSeq.sortBy(_._2)\n        val gradesMapSorted11 = gradesMapSorted10.toSeq.sortBy(_._2)\n        val gradesMapSorted12 = gradesMapSorted11.toSeq.sortBy(_._2)\n        val gradesMapSorted13 = gradesMapSorted12.toSeq.sortBy(_._2)\n        val gradesMapSorted14 = gradesMapSorted13.toSeq.sortBy(_._2)\n        val gradesMapSorted15 = gradesMapSorted14.toSeq.sortBy(_._2)\n        val gradesMapSorted16 = gradesMapSorted15.toSeq.sortBy(_._2)\n        val gradesMapSorted17 = gradesMapSorted16.toSeq.sortBy(_._2)\n        val gradesMapSorted18 = gradesMapSorted17.toSeq.sortBy(_._2)\n        val gradesMapSorted19 = gradesMapSorted18.toSeq.sortBy(_._2)\n        val gradesMapSorted20 = gradesMapSorted19.toSeq.sortBy(_._2)\n        val gradesMapSorted21 = gradesMapSorted20.toSeq.sortBy(_._2)\n        val gradesMapSorted22 = gradesMapSorted21.toSeq.sortBy(_._2)\n        val gradesMapSorted23 = gradesMapSorted22.toSeq.sortBy(_._2)\n        val gradesMapSorted24 = gradesMapSorted23.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7mk_vzz4.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7mk_vzz4.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7mk_vzz4.scala:50:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010429
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMap = gradesSortedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMap = gradesSortedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMap = gradesSortedMapReversedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMapReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMap = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap = gradesSortedMapReversedMapReversedMapReversedMapReverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzm46kf88.scala:28:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversed\u001b[0m = gradesSortedMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpzm46kf88.scala:32:60 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversedMapReversedMapReversed\u001b[0m = gradesSortedMapReversedMapReversedMapReversed.map(\u001b[36mx\u001b[0m => (x._1, x._2)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedMapReversedMapReversedMapReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzm46kf88.scala:39:96 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap\u001b[0m = gradesSortedMapReversedMapReversedMapReversedMapReverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      Not found: gradesSortedMapReversedMapReversedMapReversedMapReverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzm46kf88.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010417
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        grades.map(grade => if(grade > 3.0) \"B+\" else if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade > 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else if (grade > 0.0) \"E\" else \"A+\" ).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcu8g7eoz.scala:28)\n\tat Problem.main(tmpcu8g7eoz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660010430
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(grade => (grade -> grade)).toMap\n        val gradesSortedByGPA = grades.sortBy(_.toDouble)\n        val gradesSortedByGPAWithLetterGrade = gradesSortedByGPA.map(grade => (grade -> grade)).toMap\n        val gradesSortedByGPAWithLetterGradeWithZero = gradesSortedByGPAWithLetterGrade.withDefault(0.0f, 0.0f)\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZero.withDefault(0.0f, 0.0f)\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZero.withDefault(0.0f, 0.0f)\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero.withDefault(0.0f, 0.0f)\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.withDefault(0.0f, 0.0f)\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.withDefault(0.0f, 0.0f)\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.withDefault(0.0f, 0.0f)\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.withDefault(0.0f, 0.0f)\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.withDefault(0.0f, 0.0f)\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWith\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjgzreb1y.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjgzreb1y.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\u001b[0m = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.withDefault(\u001b[31m0.0f\u001b[0m, \u001b[31m0.0f\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjgzreb1y.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\u001b[0m = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.withDefault(\u001b[31m0.0f\u001b[0m, \u001b[31m0.0f\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of ",
      "stdout": "",
      "timestamp": 1660010433
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.map(_ + 0.0).toList)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.length\n        val gradesMapSortedValuesLength = gradesMapSortedValues.length\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpspy5oh3m.scala:56:41 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedValuesLength\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpspy5oh3m.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedKeysLength\u001b[0m = gradesMapSortedKeysLength\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpspy5oh3m.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedValuesLength\u001b[0m = gradesMapSortedValuesLength\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpspy5oh3m.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedKeysLength\u001b[0m = gradesMapSortedKeysLength\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpspy5oh3m.scala:34:12 -------------",
      "stdout": "",
      "timestamp": 1660010430
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphfrkllkj.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmphfrkllkj.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphfrkllkj.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010399
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toInt).mapValues(_.toDouble)\n        val gradesMap2 = gradesMap.mapValues(_.toDouble)\n        val gradesMap3 = gradesMap2.mapValues(_.toInt)\n        val gradesMap4 = gradesMap3.mapValues(_.toDouble)\n        val gradesMap5 = gradesMap4.mapValues(_.toInt)\n        val gradesMap6 = gradesMap5.mapValues(_.toDouble)\n        val gradesMap7 = gradesMap6.mapValues(_.toInt)\n        val gradesMap8 = gradesMap7.mapValues(_.toDouble)\n        val gradesMap9 = gradesMap8.mapValues(_.toInt)\n        val gradesMap10 = gradesMap9.mapValues(_.toDouble)\n        val gradesMap11 = gradesMap10.mapValues(_.toInt)\n        val gradesMap12 = gradesMap11.mapValues(_.toDouble)\n        val gradesMap13 = gradesMap12.mapValues(_.toInt)\n        val gradesMap14 = gradesMap13.mapValues(_.toDouble)\n        val gradesMap15 = gradesMap14.mapValues(_.toInt)\n        val gradesMap16 = gradesMap15.mapValues(_.toDouble)\n        val gradesMap17 = gradesMap16.mapValues(_.toInt)\n        val gradesMap18 = gradesMap17.mapValues(_.toDouble)\n        val gradesMap19 = gradesMap18.mapValues(_.toInt)\n        val gradesMap20 = gradesMap19.mapValues(_.toDouble)\n        val gradesMap21 = gradesMap20.mapValues(_.toInt)\n        val gradesMap22 = gradesMap21.mapValues(_.toDouble)\n        val gradesMap23 = gradesMap22.mapValues(_.toInt)\n        val gradesMap24 = gradesMap23.mapValues(_.toDouble)\n        val gradesMap25 = gradesMap24.mapValues(_.toInt)\n        val gradesMap26 = gradesMap25.mapValues(_.toDouble)\n        val gradesMap27 = gradesMap26.mapValues(_.toInt)\n        val gradesMap28 = gradesMap27.mapValues(_.toDouble)\n        val gradesMap29 = gradesMap28.map\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp32aw90rr.scala:25:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m4\u001b[0m).mapValues(_.toInt).mapValues(_.toDouble)\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp32aw90rr.scala:25:77 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m4\u001b[0m).mapValues(_.toInt).mapValues(_.toDouble)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toDouble is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Byte.byte2double\n\u001b[31m   |\u001b[0m  import Byte.byte2float\n\u001b[31m   |\u001b[0m  import Byte.byte2int\n\u001b[31m   |\u001b[0m  import Byte.byte2long\n\u001b[31m   |\u001b[0m  import Byte.byte2short\n\u001b[31m   |\u001b[0m  import Char.char2double\n\u001b[31m   |\u001b[0m  import Char.char2float\n\u001b[31m   |\u001b[0m  import Char.char2int\n\u001b[31m   |\u001b[0m  import Char.char2long\n\u001b[31m   |\u001b[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp32aw90rr.scala:26:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap2\u001b[0m = gradesMap.mapValues(_.toDouble)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toDouble is not a member of Nothing, but could be made available as a",
      "stdout": "",
      "timestamp": 1660010436
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> grade match {\n            case 3.0 => \"B+\"\n            case 2.7 => \"B\"\n            case 2.3 => \"B-\"\n            case 2.0 => \"C+\"\n            case 1.7 => \"C\"\n            case 1.3 => \"C-\"\n            case 1.0 => \"D+\"\n            case 0.7 => \"D\"\n            case 0.0 => \"D-\"\n            case _ => \"E\"\n        })).toMap\n        val gradesList : List[String] = grades.map(grade => gradesMap(grade))\n        gradesList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpyj1q4rom.scala:26:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m3.0\u001b[0m => \u001b[31m\"B+\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Float, Float) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyj1q4rom.scala:27:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m2.7\u001b[0m => \u001b[31m\"B\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Float, Float) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyj1q4rom.scala:28:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m2.3\u001b[0m => \u001b[31m\"B-\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Float, Float) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyj1q4rom.scala:29:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m2.0\u001b[0m => \u001b[31m\"C+\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Float, Float) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyj1q4rom.scala:30:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m1.7\u001b[0m => \u001b[31m\"C\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Float, Float) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyj1q4rom.scala:31:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m1.3\u001b[0m => \u001b[31m\"C-\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Float, Float) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyj1q4rom.scala:32:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m1.0\u001b[0m => \u001b[31m\"D+\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Floa",
      "stdout": "",
      "timestamp": 1660010434
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n        val gradesSum = gradesSorted.sum\n        val gradesCount = gradesSorted.length\n        val gradesSumOfSquares = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresOf = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresOfSquares = gradesSorted.map(x => x * x * x).sum\n        val gradesSumOfSquaresOfSquares = gradesSorted.map(x => x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOf = gradesSorted.map(x => x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquares = gradesSorted.map(x => x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOf = gradesSorted.map(x => x * x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquares = gradesSorted.map(x => x * x * x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOf = gradesSorted.map(x => x * x * x * x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSorted.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOf = gradesSorted.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSorted.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOf = gradesSorted.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSorted.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSqu\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpc9_cs6k4.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpc9_cs6k4.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSumOfSquaresOfSquares\u001b[0m = gradesSorted.map(\u001b[36mx\u001b[0m => x * x * x * x).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSumOfSquaresOfSquares is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSumOfSquaresOfSquares\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpc9_cs6k4.scala:40:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOf\u001b[0m = gradesSorted.map(\u001b[36mx\u001b[0m => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOf is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOf\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpc9_cs6k4.scala:41:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\u001b[0m = gradesSorted.map(\u001b[36mx\u001b[0m => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfS",
      "stdout": "",
      "timestamp": 1660010433
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesSortedByGPA = gradesSortedByGPAReversedValues.sortBy(_._1)\n        val gradesSortedByGPAReversedValuesSortedByGPAReversed = gradesSortedByGPAReversedValuesSortedByGPA.reverse\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedMap = gradesSortedByGPAReversedValuesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedKeys = gradesSortedByGPAReversedValuesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValues = gradesSortedByGPAReversedValuesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPA = gradesSortedByGPAReversedValuesSortedByGPAReversedValues.sortBy(_._1)\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversed = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPA.reverse\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedMap = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedKeys = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedValues = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnnu0_52c.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnu0_52c.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010435
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> \"E\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float, String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMapWithZeros : Map[Float\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf4ica8_e.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf4ica8_e.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapWithZeros\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> \u001b[31m\"D\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapWithZeros is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapWithZeros\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf4ica8_e.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapWithZeros\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> \u001b[31m\"D\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapWithZeros is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapWithZeros\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf4ica8_e.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapWithZeros\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> \u001b[31m\"D\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapWithZeros is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapWithZeros\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf4i",
      "stdout": "",
      "timestamp": 1660010439
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGrade = grades.sortBy(_)\n        val gradesSortedByGradeReversed = gradesSortedByGrade.sortBy(-_)\n        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.toMap\n        val gradesSortedByGradeReversedMapKeys = gradesSortedByGradeReversedMap.keys\n        val gradesSortedByGradeReversedMapValues = gradesSortedByGradeReversedMap.values.toList\n        val gradesSortedByGradeReversedMapValuesSum = gradesSortedByGradeReversedMapValues.sum\n        val gradesSortedByGradeReversedMapValuesSum2 = gradesSortedByGradeReversedMapValuesSum * gradesSortedByGradeReversedMapValuesSum\n        val gradesSortedByGradeReversedMapValuesSum3 = gradesSortedByGradeReversedMapValuesSum2 * gradesSortedByGradeReversedMapValuesSum\n        val gradesSortedByGradeReversedMapValuesSum4 = gradesSortedByGradeReversedMapValuesSum3 * gradesSortedByGradeReversedMapValuesSum\n        val gradesSortedByGradeReversedMapValuesSum5 = gradesSortedByGradeReversedMapValuesSum4 * gradesSortedByGradeReversedMapValuesSum\n        val gradesSortedByGradeReversedMapValuesSum6 = gradesSortedByGradeReversedMapValuesSum5 * gradesSortedByGradeReversedMapValuesSum\n        val gradesSortedByGradeReversedMapValuesSum7 = gradesSortedByGradeReversedMapValuesSum6 * gradesSortedByGradeReversedMapValuesSum\n        val gradesSortedByGradeReversedMapValuesSum8 = gradesSortedByGradeReversedMapValuesSum7 * gradesSortedByGradeReversedMapValuesSum\n        val gradesSortedByGradeReversedMapValuesSum9 = gradesSortedByGradeReversedMapValuesSum8 * gradesSortedByGradeReversedMapValuesSum\n        val gradesSortedByGradeReversedMapValuesSum10 = gradesSortedByGradeReversedMapValuesSum9 * gradesSortedByGradeReversedMapValuesSum\n        val gradesSortedByGradeReversedMapValuesSum11 = gradesSortedByGrade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpiatjni7e.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiatjni7e.scala:26:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGrade\u001b[0m = grades.sortBy(_)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiatjni7e.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010439
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x => x -> \"D-\").withDefaultValue(\"E\")\n        val gradesMap2 = grades.map(x => x -> \"D+\").withDefaultValue(\"E\")\n        val gradesMap3 = grades.map(x => x -> \"D\").withDefaultValue(\"E\")\n        val gradesMap4 = grades.map(x => x -> \"C\").withDefaultValue(\"E\")\n        val gradesMap5 = grades.map(x => x -> \"B\").withDefaultValue(\"E\")\n        val gradesMap6 = grades.map(x => x -> \"B+\").withDefaultValue(\"E\")\n        val gradesMap7 = grades.map(x => x -> \"B-\").withDefaultValue(\"E\")\n        val gradesMap8 = grades.map(x => x -> \"A\").withDefaultValue(\"E\")\n        val gradesMap9 = grades.map(x => x -> \"A+\").withDefaultValue(\"E\")\n        val gradesMap10 = grades.map(x => x -> \"A-\").withDefaultValue(\"E\")\n        val gradesMap11 = grades.map(x => x -> \"A\").withDefaultValue(\"E\")\n        val gradesMap12 = grades.map(x => x -> \"C+\").withDefaultValue(\"E\")\n        val gradesMap13 = grades.map(x => x -> \"C\").withDefaultValue(\"E\")\n        val gradesMap14 = grades.map(x => x -> \"B-\").withDefaultValue(\"E\")\n        val gradesMap15 = grades.map(x => x -> \"B\").withDefaultValue(\"E\")\n        val gradesMap16 = grades.map(x => x -> \"A+\").withDefaultValue(\"E\")\n        val gradesMap17 = grades.map(x => x -> \"A\").withDefaultValue(\"E\")\n        val gradesMap18 = grades.map(x => x -> \"B+\").withDefaultValue(\"E\")\n        val gradesMap19 = grades.map(x => x -> \"B-\").withDefaultValue(\"E\")\n        val gradesMap20 = grades.map(x => x -> \"B\").withDefaultValue(\"E\")\n        val gradesMap21 = grades.map(x => x -> \"A-\").withDefaultValue(\"E\")\n        val gradesMap22 = grades.map(x => x -> \"A\").withDefaultValue(\"E\")\n        val gradesMap23\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp4m84vtf.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp4m84vtf.scala:25:72 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => x -> \u001b[31m\"D-\"\u001b[0m).withDefaultValue(\u001b[31m\"E\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         value withDefaultValue is not a member of List[(Float, String)]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp4m84vtf.scala:26:52 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap2\u001b[0m = grades.map(\u001b[36mx\u001b[0m => x -> \u001b[31m\"D+\"\u001b[0m).withDefaultValue(\u001b[31m\"E\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         value withDefaultValue is not a member of List[(Float, String)]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp4m84vtf.scala:27:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap3\u001b[0m = grades.map(\u001b[36mx\u001b[0m => x -> \u001b[31m\"D\"\u001b[0m).withDefaultValue(\u001b[31m\"E\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         value withDefaultValue is not a member of List[(Float, String)]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp4m84vtf.scala:28:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap4\u001b[0m = grades.map(\u001b[36mx\u001b[0m => x -> \u001b[31m\"C\"\u001b[0m).withDefaultValue(\u001b[31m\"E\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         value withDefaultValue is not a member of List[(Float, String)]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp4m84vtf.scala:29:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap5\u001b[0m = grades.",
      "stdout": "",
      "timestamp": 1660010443
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(grade => (grade / 4.0, grade.toString)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2 != gradesMapSorted.last._2)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 != gradesMapSorted2.last._2)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 != gradesMapSorted3.last._2)\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2 != gradesMapSorted4.last._2)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2 != gradesMapSorted5.last._2)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 != gradesMapSorted6.last._2)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 != gradesMapSorted7.last._2)\n        val gradesMapSorted9 = gradesMapSorted8.filter(_._2 != gradesMapSorted8.last._2)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2 != gradesMapSorted9.last._2)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2 != gradesMapSorted10.last._2)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 != gradesMapSorted11.last._2)\n        val gradesMapSorted13 = gradesMapSorted12.filter(_._2 != gradesMapSorted12.last._2)\n        val gradesMapSorted14 = gradesMapSorted13.filter(_._2 != gradesMapSorted13.last._2)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 != gradesMapSorted14.last._2)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 != gradesMapSorted15.last._2)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 != gradesMapSorted16.last._2)\n        val gradesMapSorted18 = gradesMapSorted17.filter(_._2 != gradesMapSorted17.last._2)\n        val gradesMapSorted19 = gradesMapSorted18.filter(_._2 != gradesMapSorted18.last._\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9au6gs6q.scala:44:88 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted19\u001b[0m = gradesMapSorted18.filter(_._2 != gradesMapSorted18.last._\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   an identifier expected, but '_' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9au6gs6q.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value sortBy is not a member of Map[Double, String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9au6gs6q.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010441
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = new mutable.HashMap[Float, String]()\n        grades.foreach { grade =>\n            gradesMap(grade) = if (grade > 3.0) \"A+\" else if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade > 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else \"E\"\n        }\n        gradesMap.values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkr5_dg7d.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010436
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphfrkllkj.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmphfrkllkj.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphfrkllkj.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010399
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPA\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqx0ppr4n.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpqx0ppr4n.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqx0ppr4n.scala:41:68 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedValuesValuesValuesValuesKeys\u001b[0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   Not found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqx0ppr4n.scala:42:70 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedValuesValuesValuesValuesValues\u001b[0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.values.toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   Not found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqx0ppr4n.scala:43:79 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36m",
      "stdout": "",
      "timestamp": 1660010398
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float,String] = grades.map(x => (x,x.toString.toUpperCase)).toMap\n        val gradesList : List[String] = grades.map(x => gradesMap.get(x))\n        gradesList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpknmrlrc5.scala:25:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m,\u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => (x,x.toString.toUpperCase)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpknmrlrc5.scala:26:69 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesList\u001b[0m : \u001b[35mList\u001b[0m[\u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => gradesMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m                                                Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010441
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        grades.map(grade => if(grade > 3.0) \"B+\" else if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade > 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else if (grade > 0.0) \"E\" else \"A+\" ).filter(_.nonEmpty)\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyx_75di7.scala:28)\n\tat Problem.main(tmpyx_75di7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660010442
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPA = gradesSortedByGPAReversed.sortBy(x => x)\n        val gradesSortedByGPAReversedSortedByGPAReversed = gradesSortedByGPAReversedSortedByGPA.reverse\n        val gradesSortedByGPAReversedSortedByGPAReversedMap = gradesSortedByGPAReversedSortedByGPAReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPA = gradesSortedByGPAReversedSortedByGPAReversed.sortBy(x => x)\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPA.reverse\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedMap = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA.reverse\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed.reverse\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqmqaplhm.scala:35:89 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA\u001b[0m = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqmqaplhm.scala:36:116 --------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed\u001b[0m = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqmqaplhm.scala:37:127 --------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA\u001b[0m = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedByGPAReversedSortedByGPAReversedSortedByGPARev",
      "stdout": "",
      "timestamp": 1660010442
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        grades.sortWith(_ < _)\n        val gradesCount = grades.size\n        val gradesSum = grades.sum\n        val gradesAvg = gradesSum / gradesCount\n        val gradesMin = grades.min\n        val gradesMax = grades.max\n        val gradesSumSquare = grades.map(x => x * x).sum\n        val gradesAvgSquare = gradesSumSquare / gradesCount\n        val gradesMinSquare = gradesSumSquare / gradesCount\n        val gradesMaxSquare = gradesSumSquare / gradesCount\n        val gradesSumSquareMin = grades.map(x => x * x).sum\n        val gradesAvgSquareMin = gradesSumSquareMin / gradesCount\n        val gradesMinSquareMin = gradesSumSquareMin / gradesCount\n        val gradesMaxSquareMin = gradesSumSquareMin / gradesCount\n        val gradesSumSquareMax = grades.map(x => x * x).sum\n        val gradesAvgSquareMax = gradesSumSquareMax / gradesCount\n        val gradesMinSquareMax = gradesSumSquareMax / gradesCount\n        val gradesMaxSquareMax = gradesSumSquareMax / gradesCount\n        val gradesSumSquareAvg = grades.map(x => x * x).sum\n        val gradesAvgSquareAvg = gradesSumSquareAvg / gradesCount\n        val gradesMinSquareAvg = gradesSumSquareAvg / gradesCount\n        val gradesMaxSquareAvg = gradesSumSquareAvg / gradesCount\n        val gradesSumSquareMinMax = grades.map(x => x * x).sum\n        val gradesAvgSquareMinMax = gradesSumSquareMinMax / gradesCount\n        val gradesMinSquareMinMax = gradesSumSquareMinMax / gradesCount\n        val gradesMaxSquareMinMax = gradesSumSquareMinMax / gradesCount\n        val gradesSumSquareAvgMax = grades.map(x => x * x).sum\n        val gradesAvgSquareAvgMax = gradesSumSquareAvgMax / gradesCount\n        val gradesMinSquareAvgMax = gradesSumSquareAvgMax / gradesCount\n        val gradesMaxSquareAvgMax = gradesSumSquareAvgMax / gradesCount\n        val gradesSumSquareMinMaxAvg = grades.map(x \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdz1mnd_3.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdz1mnd_3.scala:55:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSumSquareMinMaxAvg\u001b[0m = grades.map(x \n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdz1mnd_3.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010441
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValue\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk2knuzif.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk2knuzif.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk2knuzif.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk2knuzif.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[",
      "stdout": "",
      "timestamp": 1660010386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysSorted = gradesMapSortedReversedKeys.sortBy(_._1)\n        val gradesMapSortedReversedValuesSorted = gradesMapSortedReversedValues.sortBy(_._1)\n        val gradesMapSortedReversedKeysSortedSortedReversed = gradesMapSortedReversedKeysSorted.reverse\n        val gradesMapSortedReversedValuesSortedSortedReversed = gradesMapSortedReversedValuesSorted.reverse\n        val gradesMapSortedReversedKeysSortedSortedReversedKeysSortedSortedReversed = gradesMapSortedReversedKeysSortedSortedReversed.reverse\n        val gradesMapSortedReversedValuesSortedSortedReversedValuesSortedReversed = gradesMapSortedReversedValuesSortedReversed.reverse\n        val gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed = gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed.reverse\n        val gradesMapSortedReversedValuesSortedSortedReversedValuesSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed = gradesMapSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed.reverse\n        val gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed = gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed.reverse\n        val gradesMapSortedReversedValuesSortedSortedReversedValuesSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed = gradesMapSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpezfi6h2j.scala:25:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m10\u001b[0m).mapValues(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpezfi6h2j.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sortBy is not a member of scala.collection.MapView[Float, Nothing]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpezfi6h2j.scala:35:84 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesSortedSortedReversedValuesSortedReversed\u001b[0m = gradesMapSortedReversedValuesSortedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: gradesMapSortedReversedValuesSortedReversed\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpezfi6h2j.scala:36:138 -----------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed\u001b[0m = gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                            ",
      "stdout": "",
      "timestamp": 1660010444
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n        val gradesLength = gradesSorted.length\n        val gradesSum = gradesSorted.sum\n        val gradesAverage = gradesSum / gradesLength\n        val gradesSumOfSquares = gradesSorted.map(x => x * x).sum\n        val gradesAverageOfSquares = gradesSumOfSquares / gradesLength\n        val gradesSumOfSquaresOfDifferences = gradesSorted.zip(gradesSorted).map(x => x._1 - x._2).sum\n        val gradesAverageOfSquaresOfDifferences = gradesSumOfSquaresOfDifferences / gradesLength\n        val gradesSumOfSquaresOfSquaresOfDifferences = gradesSorted.zip(gradesSorted).map(x => x._1 * x._1).sum\n        val gradesAverageOfSquaresOfSquaresOfDifferences = gradesSumOfSquaresOfSquaresOfDifferences / gradesLength\n        val gradesSumOfSquaresOfSquaresOfSquaresOfDifferences = gradesSorted.zip(gradesSorted).map(x => x._1 * x._1 * x._1).sum\n        val gradesAverageOfSquaresOfSquaresOfSquaresOfDifferences = gradesSumOfSquaresOfSquaresOfSquaresOfDifferences / gradesLength\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences = gradesSorted.zip(gradesSorted).map(x => x._1 * x._1 * x._1 * x._1).sum\n        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesLength\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences = gradesSorted.zip(gradesSorted).map(x => x._1 * x._1 * x._1 * x._1 * x._1).sum\n        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesLength\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences = gradesSorted.zip(gradesSorted).map(x => x._1 * x._\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmnghj9pw.scala:41:131 --------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\u001b[0m = gradesSorted.zip(gradesSorted).map(\u001b[36mx\u001b[0m => x._1 * x._\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   an identifier expected, but '_' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmnghj9pw.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010442
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x).mapValues(_.size).toMap\n        val sortedGrades = grades.sortWith(_ < _)\n        val gradesCount = grades.count\n        val gradesSum = grades.sum\n        val gradesAvg = gradesSum / gradesCount\n        val gradesMin = grades.min\n        val gradesMax = grades.max\n        val gradesMedian = grades.median\n        val gradesStdDev = grades.stdDev\n        val gradesVariance = grades.variance\n        val gradesMedianOfGrades = gradesMedian.map(x => gradesMap.getOrElse(x, 0))\n        val gradesMedianOfGradesSum = gradesMedianOfGrades.sum\n        val gradesMedianOfGradesCount = gradesMedianOfGrades.count\n        val gradesMedianOfGradesAvg = gradesMedianOfGradesSum / gradesMedianOfGradesCount\n        val gradesMedianOfGradesMin = gradesMedianOfGrades.min\n        val gradesMedianOfGradesMax = gradesMedianOfGrades.max\n        val gradesMedianOfGradesMedian = gradesMedianOfGrades.median\n        val gradesMedianOfGradesStdDev = gradesMedianOfGrades.stdDev\n        val gradesMedianOfGradesVariance = gradesMedianOfGrades.variance\n        val gradesMedianOfGradesMedianOfGrades = gradesMedianOfGradesMedian.map(x => gradesMap.getOrElse(x, 0))\n        val gradesMedianOfGradesMedianOfGradesSum = gradesMedianOfGradesMedianOfGrades.sum\n        val gradesMedianOfGradesMedianOfGradesCount = gradesMedianOfGradesMedianOfGrades.count\n        val gradesMedianOfGradesMedianOfGradesAvg = gradesMedianOfGradesMedianOfGradesSum / gradesMedianOfGradesMedianOfGradesCount\n        val gradesMedianOfGradesMedianOfGradesMin = gradesMedianOfGradesMedianOfGrades.min\n        val gradesMedianOfGradesMedianOf\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgfl9cs73.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpgfl9cs73.scala:29:34 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesAvg\u001b[0m = gradesSum / gradesCount\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m/\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mFloat\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Double\n\u001b[31m   |\u001b[0m (x: Float): Float\n\u001b[31m   |\u001b[0m (x: Long): Float\n\u001b[31m   |\u001b[0m (x: Int): Float\n\u001b[31m   |\u001b[0m (x: Char): Float\n\u001b[31m   |\u001b[0m (x: Short): Float\n\u001b[31m   |\u001b[0m (x: Byte): Float\n\u001b[31m   |\u001b[0mmatch arguments ((gradesCount : (Float => Boolean) => Int))\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgfl9cs73.scala:32:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMedian\u001b[0m = grades.median\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value median is not a member of List[Float]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgfl9cs73.scala:33:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesStdDev\u001b[0m = grades.stdDev\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value stdDev is not a member of List[Float]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgfl9cs73.scala:34:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesVariance\u001b[0m = grades.variance\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value variance is not a member of List[Float]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfl9cs73.scala:50:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m",
      "stdout": "",
      "timestamp": 1660010444
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x => x -> x.toString.toUpperCase).toMap\n        val gradesList : List[String] = grades.map(x => gradesMap.get(x))\n        gradesList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph63jo0f8.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => x -> x.toString.toUpperCase).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph63jo0f8.scala:26:69 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesList\u001b[0m : \u001b[35mList\u001b[0m[\u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => gradesMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m                                                Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010443
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphfrkllkj.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmphfrkllkj.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphfrkllkj.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010399
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAWithLetterGrade = gradesSortedByGPA.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPAWithLetterGradeWithLetterGrade = gradesSortedByGPAWithLetterGrade.map(x => (x._2, x._1)).toMap\n        val gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGrade = gradesSortedByGPAWithLetterGradeWithLetterGrade.map(x => (x._3, x._1)).toMap\n        val gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade = gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGrade.map(x => (x._4, x._1)).toMap\n        val gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade = gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade.map(x => (x._5, x._1)).toMap\n        val gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade = gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade.map(x => (x._6, x._1)).toMap\n        val gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade = gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade.map(x => (x._7, x._1)).toMap\n        val gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade = gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade.map(x => (x._8, x._1)).toMap\n        val gradesSortedByGP\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqqv0e0c4.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqqv0e0c4.scala:29:137 -----------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGrade\u001b[0m = gradesSortedByGPAWithLetterGradeWithLetterGrade.map(\u001b[36mx\u001b[0m => (x._3, x._1)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           value _3 is not a member of (Float, Int) - did you mean x._1?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqqv0e0c4.scala:30:167 -----------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade\u001b[0m = gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGrade.map(\u001b[36mx\u001b[0m => (x._4, x._1)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value _4 is not a member of (Nothing, Float) - did you mean x._1?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqqv0e0c4.scala:31:197 -----------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade\u001b[0m = gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade.map(\u001b[36mx\u001b[0m => (x._5, x._1)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m     value _5 is not a member of (Nothing, Nothing) - did you mean x._1?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqqv0e0c4.",
      "stdout": "",
      "timestamp": 1660010445
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysSorted = gradesMapSortedReversedKeys.sortBy(_)\n        val gradesMapSortedReversedValuesSorted = gradesMapSortedReversedValues.sortBy(_)\n        val gradesMapSortedReversedKeysSortedSorted: Map[String, List[Float]] = gradesMapSortedReversedKeysSorted.zip(gradesMapSortedReversedValuesSorted)\n        val gradesMapSortedReversedKeysSortedSortedSorted: Map[Float, List[String]] = gradesMapSortedReversedKeysSortedSorted.map(x => (x._1, x._2.sortBy(_)))\n        val gradesMapSortedReversedKeysSortedSortedSorted: Map[Float, List[String]] = gradesMapSortedReversedKeysSortedSortedSorted.map(x => (x._1, x._2.sortBy(_)))\n        val gradesMapSortedReversedKeysSortedSortedSorted: Map[Float, List[String]] = gradesMapSortedReversedKeysSortedSortedSorted.map(x => (x._1, x._2.sortBy(_)))\n        val gradesMapSortedReversedKeysSortedSortedSorted: Map[Float, List[String]] = gradesMapSortedReversedKeysSortedSortedSorted.map(x => (x._1, x._2.sortBy(_)))\n        val gradesMapSortedReversedKeysSortedSortedSorted: Map[Float, List[String]] = gradesMapSortedReversedKeysSortedSortedSorted.map(x => (x._1, x._2.sortBy(_)))\n        val gradesMapSortedReversedKeysSortedSortedSorted: Map[Float, List[String]] = gradesMapSortedReversedKeysSortedSortedSorted.map(x => (x._1, x._2.sortBy(_)))\n        val gradesMapSortedReversedKeysSortedSortedSorted: Map[Float, List[String]] = gradesMapSortedReversedKeysSortedSortedSorted.map(x => (x._1, x._2.sortBy(_)))\n        val gradesMapSortedReversedKeysSortedSortedSorted: Map[Float, \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqzumjvd5.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqzumjvd5.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysSortedSortedSorted\u001b[0m: \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mString\u001b[0m]] = gradesMapSortedReversedKeysSortedSortedSorted.map(\u001b[36mx\u001b[0m => (x._1, x._2.sortBy(_)))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedKeysSortedSortedSorted is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysSortedSortedSorted\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqzumjvd5.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysSortedSortedSorted\u001b[0m: \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mString\u001b[0m]] = gradesMapSortedReversedKeysSortedSortedSorted.map(\u001b[36mx\u001b[0m => (x._1, x._2.sortBy(_)))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedKeysSortedSortedSorted is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysSortedSortedSorted\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqzumjvd5.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysSortedSortedSorted\u001b[0m: \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mString\u001b[0m]] = gradesMapSort",
      "stdout": "",
      "timestamp": 1660010446
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x => x -> \"D-\").withDefault(x => \"E\")\n        grades.map(x => if (x < 3.0) \"A+\" else if (x < 3.7) \"A\" else if (x < 3.3) \"A-\" else if (x < 3.0) \"B+\" else if (x < 2.7) \"B\" else if (x < 2.3) \"B-\" else if (x < 2.0) \"C+\" else if (x < 1.7) \"C\" else if (x < 1.3) \"C-\" else if (x < 1.0) \"D+\" else if (x < 0.7) \"D\" else \"E\")\n            .map(x => gradesMap.getOrElse(x, x))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe0ewit_4.scala:25:72 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => x -> \u001b[31m\"D-\"\u001b[0m).withDefault(\u001b[36mx\u001b[0m => \u001b[31m\"E\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value withDefault is not a member of List[(Float, String)]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0ewit_4.scala:27:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            .map(x => gradesMap.getOrElse(x, x))\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    (x : String)\n\u001b[31m   |\u001b[0m                                          Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010444
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReverse = gradesSortedMap.reverse\n        val gradesSortedMapReverseMap = gradesSortedMapReverse.toMap\n        val gradesSortedMapReverseMapKeys = gradesSortedMapReverseMap.keys\n        val gradesSortedMapReverseMapValues = gradesSortedMapReverseMap.values.toList\n        val gradesSortedMapReverseMapValuesSorted = gradesSortedMapReverseMapValues.sortBy(x => x)\n        val gradesSortedMapReverseMapValuesSortedMap = gradesSortedMapReverseMapValuesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReverseMapValuesSortedMapKeys = gradesSortedMapReverseMapValuesSortedMap.keys\n        val gradesSortedMapReverseMapValuesSortedMapValues = gradesSortedMapReverseMapValuesSortedMap.values.toList\n        val gradesSortedMapReverseMapValuesSortedMapValuesSorted = gradesSortedMapReverseMapValuesSortedMapValuesSorted.sortBy(x => x)\n        val gradesSortedMapReverseMapValuesSortedMapValuesSortedMap = gradesSortedMapReverseMapValuesSortedMapValuesSortedMap.toMap\n        val gradesSortedMapReverseMapValuesSortedMapValuesSortedMapKeys = gradesSortedMapReverseMapValuesSortedMapValuesSortedMapKeys.keys\n        val gradesSortedMapReverseMapValuesSortedMapValuesSortedMapValues = gradesSortedMapReverseMapValuesSortedMapValuesSortedMapValues.toList\n        val gradesSortedMapReverseMapValuesSortedMapValuesSortedMapValuesSorted = gradesSortedMapReverseMapValuesSortedMapValuesSortedMapValuesSorted.sortBy(x => x)\n        val gradesSortedMapReverseMapValuesSortedMapValuesSortedMapValuesSortedMap = gradesSortedMapReverseMapValuesSortedMapValuesSortedMapValuesSortedMap.toMap\n        val gradesSortedMapReverseMapValuesSortedMapValuesSortedMapValuesSortedMapKeys = gradesSortedMapReverseMapValuesSortedMapValuesSortedMapValuesSortedMapKeys.keys\n        val gradesSortedMapReverseMapValuesSortedMapValuesSortedMapValuesSortedMapValues = gradesSortedMapReverseMapValuesSortedMapValuesSortedMapValuesSortedMapValuesSorted.toList\n        val gradesSortedMapReverseMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprn4gi7s4.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprn4gi7s4.scala:28:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReverse\u001b[0m = gradesSortedMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprn4gi7s4.scala:36:67 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReverseMapValuesSortedMapValuesSorted\u001b[0m = gradesSortedMapReverseMapValuesSortedMapValuesSorted.sortBy(\u001b[36mx\u001b[0m => x)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedMapReverseMapValuesSortedMapValuesSorted\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprn4gi7s4.scala:37:70 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReverseMapValuesSortedMapValuesSortedMap\u001b[0m = gradesSortedMapReverseMapValuesSortedMapValuesSortedMap.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedMapReverseMapValuesSortedMapValuesSortedMap\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprn4gi7s4.scala:38:74 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReverseMapValuesSortedMapValuesSortedMapKeys\u001b[0m = gradesSortedMapReverseMapValuesSortedMapValuesSortedMapKeys.keys\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ",
      "stdout": "",
      "timestamp": 1660010446
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSorted2 = gradesMapSorted.toList\n        val gradesMapSorted3 = gradesMapSorted2.sortBy(_._2)\n        val gradesMapSorted4 = gradesMapSorted3.toList\n        val gradesMapSorted5 = gradesMapSorted4.toList\n        val gradesMapSorted6 = gradesMapSorted5.toList\n        val gradesMapSorted7 = gradesMapSorted6.toList\n        val gradesMapSorted8 = gradesMapSorted7.toList\n        val gradesMapSorted9 = gradesMapSorted8.toList\n        val gradesMapSorted10 = gradesMapSorted9.toList\n        val gradesMapSorted11 = gradesMapSorted10.toList\n        val gradesMapSorted12 = gradesMapSorted11.toList\n        val gradesMapSorted13 = gradesMapSorted12.toList\n        val gradesMapSorted14 = gradesMapSorted13.toList\n        val gradesMapSorted15 = gradesMapSorted14.toList\n        val gradesMapSorted16 = gradesMapSorted15.toList\n        val gradesMapSorted17 = gradesMapSorted16.toList\n        val gradesMapSorted18 = gradesMapSorted17.toList\n        val gradesMapSorted19 = gradesMapSorted18.toList\n        val gradesMapSorted20 = gradesMapSorted19.toList\n        val gradesMapSorted21 = gradesMapSorted20.toList\n        val gradesMapSorted22 = gradesMapSorted21.toList\n        val gradesMapSorted23 = gradesMapSorted22.toList\n        val gradesMapSorted24 = gradesMapSorted23.toList\n        val gradesMapSorted25 = gradesMapSorted24.toList\n        val gradesMapSorted26 = gradesMapSorted25.toList\n        val gradesMapSorted27 = gradesMapSorted26.toList\n        val gradesMapSorted28 = gradesMapSorted27.toList\n        val gradesMapSorted29 = gradesMapSorted28.toList\n        val gradesMapSorted30 = gradesMapSorted29.toList\n        val gradesMapSorted31 = gradesMapSorted30.toList\n        val gradesMapSorted32 = gradesMapSorted31.to\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbwi3ddn1.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbwi3ddn1.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010445
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGrade = gradesMap.sortBy(_._1)\n        val gradesSortedByGradeReversed = gradesSortedByGrade.sortBy(_._1).reverse\n        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.toMap\n        val gradesSortedByGradeReversedKeys = gradesSortedByGradeReversedMap.keys\n        val gradesSortedByGradeReversedValues = gradesSortedByGradeReversedMap.values.toList\n        val gradesSortedByGradeReversedValuesMap = gradesSortedByGradeReversedValues.toMap\n        val gradesSortedByGradeReversedValuesKeys = gradesSortedByGradeReversedValuesMap.keys\n        val gradesSortedByGradeReversedValuesValues = gradesSortedByGradeReversedValuesMap.values.toList\n        val gradesSortedByGradeReversedValuesValuesMap = gradesSortedByGradeReversedValuesValues.toMap\n        val gradesSortedByGradeReversedValuesValuesKeys = gradesSortedByGradeReversedValuesValuesMap.keys\n        val gradesSortedByGradeReversedValuesValuesValues = gradesSortedByGradeReversedValuesValuesMap.values.toList\n        val gradesSortedByGradeReversedValuesValuesValuesMap = gradesSortedByGradeReversedValuesValuesValues.toMap\n        val gradesSortedByGradeReversedValuesValuesValuesKeys = gradesSortedByGradeReversedValuesValuesValuesMap.keys\n        val gradesSortedByGradeReversedValuesValuesValuesValues = gradesSortedByGradeReversedValuesValuesValuesMap.values.toList\n        val gradesSortedByGradeReversedValuesValuesValuesValuesMap = gradesSortedByGradeReversedValuesValuesValuesValues.toMap\n        val gradesSortedByGradeReversedValuesValuesValuesValuesKeys = gradesSortedByGradeReversedValuesValuesValuesValuesMap.keys\n        val gradesSortedByGradeReversedValuesValuesValuesValuesValues = gradesSortedByGradeReversedValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGradeReversedValuesValuesValuesValuesValuesMap = gradesSortedByGradeReversedValuesValuesValuesValuesValues.toMap\n        val gradesSortedByGradeReverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe8s9pyls.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpe8s9pyls.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe8s9pyls.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010447
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpuzozw3am.scala:36:188 --------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedSortedSortedSortedSortedSortedSortedSortedMap\u001b[0m = gradesSorted.sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpuzozw3am.scala:37:4 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances: both \u001b[33mobject\u001b[0m \u001b[35mByte\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m and \u001b[33mobject\u001b[0m \u001b[35mChar\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m match type Ordering[B] of parameter ord of \u001b[33mmethod\u001b[0m \u001b[35msortBy\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuzozw3am.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010447
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedValuesSum = gradesMapReversedValues.sum\n        val gradesMapReversedValuesSum2 = gradesMapReversedValuesSum * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum3 = gradesMapReversedValuesSum2 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum4 = gradesMapReversedValuesSum3 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum5 = gradesMapReversedValuesSum4 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum6 = gradesMapReversedValuesSum5 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum7 = gradesMapReversedValuesSum6 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum8 = gradesMapReversedValuesSum7 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum9 = gradesMapReversedValuesSum8 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum10 = gradesMapReversedValuesSum9 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum11 = gradesMapReversedValuesSum10 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum12 = gradesMapReversedValuesSum11 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum13 = gradesMapReversedValuesSum12 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum14 = gradesMapReversedValuesSum13 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum15 = gradesMapReversedValuesSum14 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum16 = gradesMapReversedValuesSum15 * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum17 = gradesMapReversedValuesSum16 * gradesMapReversedValuesSum\n        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvnw0r7h7.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapReversed\u001b[0m = gradesMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesMap.reversed?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvnw0r7h7.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010448
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3 = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5 = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7 = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9 = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11 = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13 = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15 = gradesMapSortedReversedValuesSum14 * gradesMapSortedReversedValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprj20h90q.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprj20h90q.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversed\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqgd8zppf.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqgd8zppf.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqgd8zppf.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqgd8zppf.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m",
      "stdout": "",
      "timestamp": 1660010449
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysSum = gradesMapSortedReversedKeys.sum\n        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n        val gradesMapSortedReversedKeysProduct = gradesMapSortedReversedKeys.product\n        val gradesMapSortedReversedValuesProduct = gradesMapSortedReversedValues.product\n        val gradesMapSortedReversedKeysProductLength = gradesMapSortedReversedKeysProduct.size\n        val gradesMapSortedReversedValuesProductLength = gradesMapSortedReversedValuesProduct.size\n        val gradesMapSortedReversedKeysProductSum = gradesMapSortedReversedKeysProduct.sum\n        val gradesMapSortedReversedValuesProductSum = gradesMapSortedReversedValuesProduct.sum\n        val gradesMapSortedReversedKeysProductProduct = gradesMapSortedReversedKeysProduct.product\n        val gradesMapSortedReversedValuesProductProduct = gradesMapSortedReversedValuesProduct.product\n        val gradesMapSortedReversedKeysProductProductLength = gradesMapSortedReversedKeysProductProduct.size\n        val gradesMapSortedReversedValuesProductProductLength = gradesMapSortedReversedValuesProductProduct.size\n        val gradesMapSortedReversedKeysProductProductSum = gradesMapSortedReversedKeysProductProduct.sum\n        val gradesMapSortedReversedValuesProductProductSum = gradesMapSortedReversedValuesProductProduct.sum\n        val gradesMapSortedReversedKeysProductProductProduct = gradesMapSortedReversedKeysProductProduct.product\n        val gradesMapSortedReversedValuesProductProductProduct = gradesMapSortedReversedValuesProductProduct.product\n        val gradesMapSortedReversedKeysProductProductProductLength = gradesMapSortedReversedKeysProductProductProduct.size\n        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp4895ca_z.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4895ca_z.scala:50:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010451
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n        val gradesSortedMapReversedKeys = gradesSortedMapReversed.keys\n        val gradesSortedMapReversedValues = gradesSortedMapReversed.values\n        val gradesSortedMapReversedValuesSorted = gradesSortedMapReversedValues.sortBy(x => x)\n        val gradesSortedMapReversedValuesSortedKeys = gradesSortedMapReversedValuesSorted.keys\n        val gradesSortedMapReversedValuesSortedValues = gradesSortedMapReversedValuesSorted.values\n        val gradesSortedMapReversedValuesSortedValuesSorted = gradesSortedMapReversedValuesSortedValues.sortBy(x => x)\n        val gradesSortedMapReversedValuesSortedValuesSortedKeys = gradesSortedMapReversedValuesSortedValuesSorted.keys\n        val gradesSortedMapReversedValuesSortedValuesSortedValues = gradesSortedMapReversedValuesSortedValuesSorted.values\n        val gradesSortedMapReversedValuesSortedValuesSortedValuesSorted = gradesSortedMapReversedValuesSortedValuesSortedValues.sortBy(x => x)\n        val gradesSortedMapReversedValuesSortedValuesSortedValuesSortedKeys = gradesSortedMapReversedValuesSortedValuesSortedValuesSorted.keys\n        val gradesSortedMapReversedValuesSortedValuesSortedValuesSortedValues = gradesSortedMapReversedValuesSortedValuesSortedValuesSorted.values\n        val gradesSortedMapReversedValuesSortedValuesSortedValuesSortedValues = gradesSortedMapReversedValuesSortedValuesSortedValuesSortedValues.sortBy(x => x)\n        val gradesSortedMapReversedValuesSortedValuesSortedValuesSortedValuesSortedKeys = gradesSortedMapReversedValuesSortedValuesSortedValuesSortedValuesSortedKeys\n        val gradesSortedMapReversedValuesSortedValuesSortedValuesSortedValuesSortedValues = gradesSortedMapReversedValuesSortedValuesSortedValuesSortedValuesSortedValues.sortBy(x => x)\n        val gradesSortedMapReversedValuesSortedValuesSortedValuesSortedValuesSortedValuesSortedKeys = gradesSortedMapReversedValuesSortedValuesSortedValuesSortedValuesSortedValuesSortedKeys\n        val gradesSortedMapReversedValuesSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpposp384s.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpposp384s.scala:40:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversedValuesSortedValuesSortedValuesSortedValues\u001b[0m = gradesSortedMapReversedValuesSortedValuesSortedValuesSortedValues.sortBy(\u001b[36mx\u001b[0m => x)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedMapReversedValuesSortedValuesSortedValuesSortedValues is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedMapReversedValuesSortedValuesSortedValuesSortedValues\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpposp384s.scala:28:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversed\u001b[0m = gradesSortedMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpposp384s.scala:41:90 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversedValuesSortedValuesSortedValuesSortedValuesSortedKeys\u001b[0m = gradesSortedMapReversedValuesSortedValuesSortedValuesSortedValuesSortedKeys\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSortedMapReversedValuesSortedValuesSortedValuesSortedValuesSortedKeys\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cycl",
      "stdout": "",
      "timestamp": 1660010452
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPA = gradesSortedByGPAReversed.sortBy(x => x)\n        val gradesSortedByGPAReversedSortedByGPAReversed = gradesSortedByGPAReversedSortedByGPA.reverse\n        val gradesSortedByGPAReversedSortedByGPAReversedMap = gradesSortedByGPAReversedSortedByGPAReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPA = gradesSortedByGPAReversedSortedByGPAReversed.sortBy(x => x)\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPA.reverse\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedMap = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed.sortBy(x => x)\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA.reverse\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedMap = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf1jz8_mw.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf1jz8_mw.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010451
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(grade => (grade -> grade)).toMap\n        val gradesSortedByGrade = grades.sortBy(_.toDouble)\n        val gradesSortedByGradeReversed = gradesSortedByGrade.map(grade => (grade -> grade)).toMap.reverse\n        val gradesSortedByGradeReversedKeys = gradesSortedByGradeReversed.keys\n        val gradesSortedByGradeReversedValues = gradesSortedByGradeReversed.values\n        val gradesSortedByGradeReversedKeysLength = gradesSortedByGradeReversedKeys.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversedValuesLength = gradesSortedByGradeReversedValues.size\n        val gradesSortedByGradeReversed\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwgogjc3q.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwgogjc3q.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGradeReversedValuesLength\u001b[0m = gradesSortedByGradeReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedByGradeReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedByGradeReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwgogjc3q.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGradeReversedValuesLength\u001b[0m = gradesSortedByGradeReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedByGradeReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedByGradeReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwgogjc3q.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGradeReversedValuesLength\u001b[0m = gradesSortedByGradeReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedByGradeReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedByGradeReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwgogjc3q.scala:35:12 ---------",
      "stdout": "",
      "timestamp": 1660010453
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => math.ceil(x)).mapValues(_.size)\n        val gradesMapSorted = gradesMap.sortBy(_._2).reverse\n        val gradesMapSortedWithZero = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSortedWithZeroAndOne = gradesMapSorted.filter(_._2 == 1)\n        val gradesMapSortedWithZeroAndOneAndTwo = gradesMapSorted.filter(_._2 == 2)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThree = gradesMapSorted.filter(_._2 == 3)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFour = gradesMapSorted.filter(_._2 == 4)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFive = gradesMapSorted.filter(_._2 == 5)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix = gradesMapSorted.filter(_._2 == 6)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven = gradesMapSorted.filter(_._2 == 7)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight = gradesMapSorted.filter(_._2 == 8)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine = gradesMapSorted.filter(_._2 == 9)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen = gradesMapSorted.filter(_._2 == 10)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndEleven = gradesMapSorted.filter(_._2 == 11)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndElevenAndTwelve = gradesMapSorted.filter(_._2 == 12)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz08qrynt.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpz08qrynt.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._2).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   value sortBy is not a member of scala.collection.MapView[Double, Int]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz08qrynt.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010454
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted = gradesValues.sortBy(x => x)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortBy(x => x._2)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortBy(x => x._2)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.map(x => (x._2, x._1))\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.map(x => (x._2, x._1))\n        val gradesKeysSortedWithIndexAndGradeAndGrade = gradesKeysSortedWithIndexAndGrade.map(x => (x._1, x._2))\n        val gradesValuesSortedWithIndexAndGradeAndGrade = gradesValuesSortedWithIndexAndGrade.map(x => (x._1, x._2))\n        val gradesKeysSortedWithIndexAndGradeAndGradeAndGrade = gradesKeysSortedWithIndexAndGrade.map(x => (x._1, x._2, x._3))\n        val gradesValuesSortedWithIndexAndGradeAndGradeAndGrade = gradesValuesSortedWithIndexAndGrade.map(x => (x._1, x._2, x._3))\n        val gradesKeysSortedWithIndexAndGradeAndGradeAndGradeAndGrade = gradesKeysSortedWithIndexAndGrade.map(x => (x._1, x._2, x._3, x._4))\n        val gradesValuesSortedWithIndexAndGradeAndGradeAndGradeAndGrade = gradesValuesSortedWithIndexAndGrade.map(x => (x._1, x._2, x._3, x._4))\n        val gradesKeysSortedWithIndexAndGradeAndGradeAndGradeAndGradeAndGrade = gradesKeysSortedWithIndexAndGrade.map(x => (x._1, x._2, x._3, x._4, x._5))\n        val gradesValuesSortedWithIndexAndGradeAndGradeAndGradeAndGra\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmrf1loi6.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmrf1loi6.scala:28:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSorted\u001b[0m = gradesKeys.sortBy(\u001b[36mx\u001b[0m => x)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value sortBy is not a member of Iterable[Int]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmrf1loi6.scala:30:64 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysSortedWithIndex\u001b[0m = gradesKeys.zipWithIndex.sortBy(\u001b[36mx\u001b[0m => x._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sortBy is not a member of Iterable[(Int @uncheckedVariance, Int)]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmrf1loi6.scala:37:126 -----------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesValuesSortedWithIndexAndGradeAndGradeAndGrade\u001b[0m = gradesValuesSortedWithIndexAndGrade.map(\u001b[36mx\u001b[0m => (x._1, x._2, x._3))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    value _3 is not a member of (Int, (Float, Int)) - did you mean x._1?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmrf1loi6.scala:39:134 -----------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesValuesSortedWithIndexAndGradeAndGradeAndGradeAndGrade\u001b[0m = gradesValuesSortedWithIndexAndGrade.map(\u001b[36mx\u001b[0m => (x._1, x._2, x._3, x._4))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    value _3 is not a member of (Int, (Float, Int)) - did you mean x._1?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmrf1loi6.scala:39:140 -",
      "stdout": "",
      "timestamp": 1660010456
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1 < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1 < _._1)\n        val gradesKeysSortedWithIndexAndIndex = gradesKeysSortedWithIndex.zipWithIndex.sortWith(_._1 < _._1)\n        val gradesValuesSortedWithIndexAndIndex = gradesValuesSortedWithIndex.zipWithIndex.sortWith(_._1 < _._1)\n        val gradesKeysSortedWithIndexAndIndexAndIndex = gradesKeysSortedWithIndexAndIndex.zipWithIndex.sortWith(_._1 < _._1)\n        val gradesValuesSortedWithIndexAndIndexAndIndex = gradesValuesSortedWithIndexAndIndex.zipWithIndex.sortWith(_._1 < _._1)\n        val gradesKeysSortedWithIndexAndIndexAndIndexAndIndex = gradesKeysSortedWithIndexAndIndexAndIndex.zipWithIndex.sortWith(_._1 < _._1)\n        val gradesValuesSortedWithIndexAndIndexAndIndexAndIndex = gradesValuesSortedWithIndexAndIndexAndIndex.zipWithIndex.sortWith(_._1 < _._1)\n        val gradesKeysSortedWithIndexAndIndexAndIndexAndIndexAndIndex = gradesKeysSortedWithIndexAndIndexAndIndexAndIndex.zipWithIndex.sortWith(_._1 < _._1)\n        val gradesValuesSortedWithIndexAndIndexAndIndexAndIndexAndIndex = gradesValuesSortedWithIndexAndIndexAndIndexAndIndex.zipWithIndex.sortWith(_._1 < _._1)\n        val gradesKeysSortedWithIndexAndIndexAndIndexAndIndexAndIndexAndIndex = gradesKeysSortedWithIndexAndIndexAndIndexAndIndexAndIndex.zipWithIndex.sortWith(_._1 < _._1)\n        val gradesValuesSortedWithIndexAndIndexAndIndexAndIndexAndIndexAndIndex = gradesValuesSortedWithIndexAndIndexAndIndexAndIndexAndIndex.zipWithIndex.sortWith(_._1 < _._1)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpjnfub9je.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjnfub9je.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010455
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysIterator = gradesMapSortedReversedKeys.iterator\n        val gradesMapSortedReversedValuesIterator = gradesMapSortedReversedValues.iterator\n        val gradesMapSortedReversedKeysIteratorValue = gradesMapSortedReversedKeysIterator.next()\n        val gradesMapSortedReversedValuesIteratorValue = gradesMapSortedReversedValuesIterator.next()\n        val gradesMapSortedReversedKeysIteratorValueValue = gradesMapSortedReversedKeysIteratorValue._1\n        val gradesMapSortedReversedValuesIteratorValueValue = gradesMapSortedReversedValuesIteratorValue._1\n        val gradesMapSortedReversedKeysIteratorValueValueValue = gradesMapSortedReversedKeysIteratorValueValue._1\n        val gradesMapSortedReversedValuesIteratorValueValueValue = gradesMapSortedReversedValuesIteratorValueValue._1\n        val gradesMapSortedReversedKeysIteratorValueValueValueValue = gradesMapSortedReversedKeysIteratorValueValueValue._1\n        val gradesMapSortedReversedValuesIteratorValueValueValueValue = gradesMapSortedReversedValuesIteratorValueValueValue._1\n        val gradesMapSortedReversedKeysIteratorValueValueValueValueValue = gradesMapSortedReversedKeysIteratorValueValueValueValue._1\n        val gradesMapSortedReversedValuesIteratorValueValueValueValueValue = gradesMapSortedReversedValuesIteratorValueValueValueValue._1\n        val gradesMapSortedReversedKeysIteratorValueValueValueValueValueValue = gradesMapSortedReversedKeysIteratorValueValueValueValueValue._1\n        val gradesMapSortedReversedValuesIteratorValueValueValueValueValueValue = gradesMapSortedReversedValuesIteratorValueValueValueValueValue._1\n        val gradesMapSortedReversedKeysIteratorValueValueValueValueValueValueValue = gradesMapSortedReversedKeysIteratorValueValueValueValueValueValue._1\n        val gradesMapSortedReversedValuesIteratorValueValueValueValueValueValueValueValue = gradesMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp7m1d082p.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7m1d082p.scala:46:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010455
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversed\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqgd8zppf.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqgd8zppf.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqgd8zppf.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqgd8zppf.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m",
      "stdout": "",
      "timestamp": 1660010449
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._2)\n        val gradesMapSortedGroupedSorted = gradesMapSortedGrouped.sortBy(_._1)\n        val gradesMapSortedGroupedSortedGrouped = gradesMapSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGrouped.sortBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnl8zu9pv.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\u001b[0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnl8zu9pv.scala:25:65 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(\u001b[36mx\u001b[0m => x.toInt).mapValues(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnl8zu9pv.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value sortBy is not a member of scala.collection.MapView[Int, Nothing]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnl8zu9pv.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b",
      "stdout": "",
      "timestamp": 1660010457
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList).mapValues(_.sortBy(x => x))\n        val gradesMap2 = gradesMap.mapValues(_.map(x => x.toDouble))\n        val gradesMap3 = gradesMap2.mapValues(_.map(x => x.toInt))\n        val gradesMap4 = gradesMap3.mapValues(_.map(x => x.toDouble))\n        val gradesMap5 = gradesMap4.mapValues(_.map(x => x.toInt))\n        val gradesMap6 = gradesMap5.mapValues(_.map(x => x.toDouble))\n        val gradesMap7 = gradesMap6.mapValues(_.map(x => x.toInt))\n        val gradesMap8 = gradesMap7.mapValues(_.map(x => x.toDouble))\n        val gradesMap9 = gradesMap8.mapValues(_.map(x => x.toInt))\n        val gradesMap10 = gradesMap9.mapValues(_.map(x => x.toDouble))\n        val gradesMap11 = gradesMap10.mapValues(_.map(x => x.toInt))\n        val gradesMap12 = gradesMap11.mapValues(_.map(x => x.toDouble))\n        val gradesMap13 = gradesMap12.mapValues(_.map(x => x.toInt))\n        val gradesMap14 = gradesMap13.mapValues(_.map(x => x.toDouble))\n        val gradesMap15 = gradesMap14.mapValues(_.map(x => x.toInt))\n        val gradesMap16 = gradesMap15.mapValues(_.map(x => x.toDouble))\n        val gradesMap17 = gradesMap16.mapValues(_.map(x => x.toInt))\n        val gradesMap18 = gradesMap17.mapValues(_.map(x => x.toDouble))\n        val gradesMap19 = gradesMap18.mapValues(_.map(x => x.toInt))\n        val gradesMap20 = gradesMap19.mapValues(_.map(x => x.toDouble))\n        val gradesMap21 = gradesMap20.mapValues(_.map(x => x.toInt))\n        val gradesMap22 = gradesMap21.mapValues(_.map(x => x.toDouble))\n        val gradesMap23 = gradesMap22.mapValues(_.map(x => x.toInt))\n        val gradesMap24 = gradesMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphxfi5gh0.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010456
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n        val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n        val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n        val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20 = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2 > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n        val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25 = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26 = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpgi9zl845.scala:51:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted26\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgi9zl845.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value sortBy is not a member of Map[Int, Float]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgi9zl845.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010457
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesSum = gradesValues.sum\n        val gradesAvg = gradesSum / gradesKeys.size\n        val gradesDiff = gradesValues.map(x => x - gradesAvg).sum\n        val gradesDiffPercent = gradesDiff / gradesSum * 100\n        val gradesDiffPercentString = gradesDiffPercent.toString\n        val gradesDiffPercentStringWithZeros = gradesDiffPercentString.padTo(gradesKeys.size, ' ')\n        val gradesDiffPercentStringWithZerosAndSpaces = gradesDiffPercentStringWithZeros.replaceAll(\"0\", \" \")\n        val gradesDiffPercentStringWithZerosAndSpacesAndNewLines = gradesDiffPercentStringWithZerosAndSpaces.replace(\"  \", \" \")\n        val gradesDiffPercentStringWithZerosAndSpacesAndNewLinesAndNewLines = gradesDiffPercentStringWithZerosAndSpacesAndNewLines.replace(\"  \", \" \")\n        val gradesDiffPercentStringWithZerosAndSpacesAndNewLinesAndNewLinesAndNewLines = gradesDiffPercentStringWithZerosAndSpacesAndNewLinesAndNewLines.replace(\"  \", \" \")\n        val gradesDiffPercentStringWithZerosAndSpacesAndNewLinesAndNewLinesAndNewLinesAndNewLines = gradesDiffPercentStringWithZerosAndSpacesAndNewLinesAndNewLinesAndNewLines.replace(\"  \", \" \")\n        val gradesDiffPercentStringWithZerosAndSpacesAndNewLinesAndNewLinesAndNewLinesAndNewLinesAndNewLines = gradesDiffPercentStringWithZerosAndSpacesAndNewLinesAndNewLinesAndNewLinesAndNewLines.replace(\"  \", \" \")\n        val gradesDiffPercentStringWithZerosAndSpacesAndNewLinesAndNewLinesAndNewLinesAndNewLinesAndNewLinesAndNewLines = gradesDiffPercentStringWithZerosAndSpacesAndNewLinesAndNewLinesAndNewLinesAndNewLinesAndNewLines.replace(\"  \", \" \")\n        val gradesDiffPercentStringWithZerosAndSpacesAndNewLinesAndNewLinesAndNewLinesAndNewLinesAndNewLinesAndNewLinesAndNew\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvi5lfetz.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvi5lfetz.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010457
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(grade => (grade -> grade)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedSortedByKey = gradesMapSorted.sortBy(_._1)\n        val gradesMapSortedSortedByKeyReversed = gradesMapSortedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversed.sortBy(_._1)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n        val gradesMapSortedSortedByKeyReversed\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1x63cf0c.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1x63cf0c.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value sortBy is not a member of Map[Float, Float]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1x63cf0c.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010456
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n        val gradesMapKeysSortedByValues = gradesMapKeys.sortBy(_._2)\n        val gradesMapKeysSortedByValuesWithDuplicates = gradesMapKeysSortedByValues.distinct\n        val gradesMapKeysSortedByValuesWithDuplicatesReversed = gradesMapKeysSortedByValuesWithDuplicates.reverse\n        val gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicates = gradesMapKeysSortedByValuesWithDuplicatesReversed.distinct\n        val gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicatesReversed = gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicates.reverse\n        val gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicatesReversedWithDuplicates = gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicatesReversed.distinct\n        val gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversed = gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicatesReversedWithDuplicates.reverse\n        val gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicates = gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversed.distinct\n        val gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversed = gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicates.reverse\n        val gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicates = gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversed.distinct\n        val gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversed = gradesMapKeysSortedByValuesWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicates.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmph6k2wrqq.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmph6k2wrqq.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6k2wrqq.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010457
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._1).mapValues(_.map(_._2))\n        val gradesMapSortedGroupedWithIndex = gradesMapSortedGrouped.mapValues(_.zipWithIndex)\n        val gradesMapSortedGroupedWithIndexSorted = gradesMapSortedGroupedWithIndex.sortBy(_._2._1).reverse\n        val gradesMapSortedGroupedWithIndexSortedWithIndex = gradesMapSortedGroupedWithIndexSorted.mapValues(_.map(_._2._2))\n        val gradesMapSortedGroupedWithIndexSortedWithIndexSorted = gradesMapSortedGroupedWithIndexSortedWithIndex.sortBy(_._2._1).reverse\n        val gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndex = gradesMapSortedGroupedWithIndexSortedWithIndexSorted.mapValues(_.map(_._2._2))\n        val gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndexSorted = gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2._1).reverse\n        val gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex = gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndexSorted.mapValues(_.map(_._2._2))\n        val gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted = gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2._1).reverse\n        val gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex = gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2._1).reverse\n        val gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted = gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.mapValues(_.map(_._2._2))\n        val gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjllf55ht.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjllf55ht.scala:25:65 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(\u001b[36mx\u001b[0m => x.toInt).mapValues(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjllf55ht.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value sortBy is not a member of scala.collection.MapView[Int, Nothing]\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjllf55ht.scala:36:106 --------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\u001b[0m = gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesMapSortedGroupedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cycli",
      "stdout": "",
      "timestamp": 1660010460
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x => (x, x.toString.toUpperCase)).toMap\n        val gradesList : List[String] = grades.map(x => gradesMap.get(x))\n        gradesList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz0d_iyzx.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => (x, x.toString.toUpperCase)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz0d_iyzx.scala:26:69 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesList\u001b[0m : \u001b[35mList\u001b[0m[\u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => gradesMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    \u001b[1m\u001b[31mOption\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m                                                Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010459
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x => x -> \"A+\".toUpperCase)\n        val gradesMap2 : Map[Float, String] = grades.map(x => x -> \"A\".toUpperCase)\n        val gradesMap3 : Map[Float, String] = grades.map(x => x -> \"A-\".toUpperCase)\n        val gradesMap4 : Map[Float, String] = grades.map(x => x -> \"B+\".toUpperCase)\n        val gradesMap5 : Map[Float, String] = grades.map(x => x -> \"B\".toUpperCase)\n        val gradesMap6 : Map[Float, String] = grades.map(x => x -> \"B-\".toUpperCase)\n        val gradesMap7 : Map[Float, String] = grades.map(x => x -> \"C+\".toUpperCase)\n        val gradesMap8 : Map[Float, String] = grades.map(x => x -> \"C\".toUpperCase)\n        val gradesMap9 : Map[Float, String] = grades.map(x => x -> \"C-\".toUpperCase)\n        val gradesMap10 : Map[Float, String] = grades.map(x => x -> \"D+\".toUpperCase)\n        val gradesMap11 : Map[Float, String] = grades.map(x => x -> \"D\".toUpperCase)\n        val gradesMap12 : Map[Float, String] = grades.map(x => x -> \"D-\".toUpperCase)\n        val gradesMap13 : Map[Float, String] = grades.map(x => x -> \"E\".toUpperCase)\n        val gradesMap14 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap15 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap16 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap17 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap18 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap19 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap20 : Map[Float, String] = grades.map(x \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2687c8js.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2687c8js.scala:25:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => x -> \u001b[31m\"A+\"\u001b[0m.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    List[(Float, String)]\n\u001b[31m   |\u001b[0m                         Required: collection.mutable.Map[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2687c8js.scala:26:56 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap2\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => x -> \u001b[31m\"A\"\u001b[0m.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    List[(Float, String)]\n\u001b[31m   |\u001b[0m                         Required: collection.mutable.Map[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2687c8js.scala:27:56 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap3\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => x -> \u001b[31m\"A-\"\u001b[0m.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    List[(Float, String)]\n\u001b[31m   |\u001b[0m                         Required: collection.mutable.Map[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mis",
      "stdout": "",
      "timestamp": 1660010462
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n        val gradesMapValuesSorted = gradesMapValues.sortBy(_)\n        val gradesMapValuesSortedReversed = gradesMapValuesSorted.reverse\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversedLength.toInt\n        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4fhdaet7.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapValuesSortedReversedLength\u001b[0m = gradesMapValuesSortedReversedLength.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapValuesSortedReversedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapValuesSortedReversedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4fhdaet7.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapValuesSortedReversedLength\u001b[0m = gradesMapValuesSortedReversedLength.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapValuesSortedReversedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapValuesSortedReversedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4fhdaet7.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapValuesSortedReversedLength\u001b[0m = gradesMapValuesSortedReversedLength.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapValuesSortedReversedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapValuesSortedReversedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4fhdaet7.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapValuesSortedReversedLength\u001b[0m = gradesMapValuesSortedReversedLength.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010460
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 0.0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 0.0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0.0)\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0.0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2 > 0.0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 0.0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0.0)\n        val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0.0)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2 > 0.0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 0.0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0.0)\n        val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0.0)\n        val gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0.0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 > 0.0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 0.0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0.0)\n        val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0.0)\n        val gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0.0)\n        val gradesMapSorted20 = gradesMapSorted19.filter(_._2 > 0.0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2 > 0.0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0.0)\n        val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0.0)\n        val gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0.0)\n        val gradesMapSorted25 = gradesMapSorted24.filter(_._2 > 0.0)\n        val gradesMapSorted26 = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpaikr26jk.scala:51:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted26\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaikr26jk.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value sortBy is not a member of Map[Int, Float]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaikr26jk.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010461
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x => (x, \"E\")).toMap\n        val gradesMapWithZero = gradesMap + (0.0 -> \"D\")\n        val gradesMapWithZeroAndNegative = gradesMapWithZero + (-7.0 -> \"C\")\n        val gradesMapWithZeroAndNegativeAndPositive = gradesMapWithZeroAndNegative + (7.0 -> \"B\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositive + (-3.0 -> \"B-\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositive = gradesMapWithZeroAndNegativeAndPositiveAndNegative + (3.0 -> \"B-\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositive + (-2.0 -> \"B-\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegative + (2.0 -> \"B-\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive + (1.0 -> \"B-\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative + (0.0 -> \"B-\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive + (-7.0 -> \"B\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative + (7.0 -> \"B\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive + (-3.0 -> \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpbv0wqfgc.scala:37:280 --------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive\u001b[0m = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive + (-\u001b[31m3.0\u001b[0m -> \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbv0wqfgc.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative\u001b[0m = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative + (\u001b[31m7.0\u001b[0m -> \u001b[31m\"B\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[3",
      "stdout": "",
      "timestamp": 1660010464
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3 = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5 = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7 = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9 = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11 = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13 = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15 = gradesMapSortedReversedValuesSum14 * gradesMapSortedReversedValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprj20h90q.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprj20h90q.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedMap = gradesMapSortedReversed.toMap\n        val gradesMapSortedReversedMapKeys = gradesMapSortedReversedMap.keys\n        val gradesMapSortedReversedMapValues = gradesMapSortedReversedMap.values.toList\n        val gradesMapSortedReversedMapValuesSorted = gradesMapSortedReversedMapValues.sortBy(_._1)\n        val gradesMapSortedReversedMapValuesSortedReversed = gradesMapSortedReversedMapValuesSorted.reverse\n        val gradesMapSortedReversedMapValuesSortedReversedMap = gradesMapSortedReversedMapValuesSortedReversed.toMap\n        val gradesMapSortedReversedMapValuesSortedReversedMapKeys = gradesMapSortedReversedMapValuesSortedReversedMap.keys\n        val gradesMapSortedReversedMapValuesSortedReversedMapValues = gradesMapSortedReversedMapValuesSortedReversedMapValues.toList\n        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSorted = gradesMapSortedReversedMapValuesSortedReversedMapValuesSorted.sortBy(_._1)\n        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversed = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversed.reverse\n        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMap = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMap.toMap\n        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapKeys = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapKeys.toList\n        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValues = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSorted.toList\n        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSorted = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedReversed.sortBy(_._1)\n        val gradesMapSortedReversedMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpq1gclsn3.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq1gclsn3.scala:25:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m10\u001b[0m).mapValues(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq1gclsn3.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sortBy is not a member of scala.collection.MapView[Float, Nothing]\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpq1gclsn3.scala:35:70 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedMapValuesSortedReversedMapValues\u001b[0m = gradesMapSortedReversedMapValuesSortedReversedMapValues.toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedMapValuesSortedReversedMapValues\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpq1gclsn3.scala:36:76 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedMapValuesSortedReversedMapValuesSorted\u001b[0m = gradesMapSortedReversedMapValu",
      "stdout": "",
      "timestamp": 1660010464
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAWithKey = gradesSortedByGPA.map(x => (x, x))\n        val gradesSortedByGPAWithKeyAndValues = gradesSortedByGPAWithKey.map(x => (x._1, x._2))\n        val gradesSortedByGPAWithKeyAndValuesGrouped = gradesSortedByGPAWithKeyAndValues.groupBy(x => x._1)\n        val gradesSortedByGPAWithKeyAndValuesGroupedGrouped = gradesSortedByGPAWithKeyAndValuesGrouped.map(x => (x._1, x._2.map(x => x._2)))\n        val gradesSortedByGPAWithKeyAndValuesGroupedGroupedGrouped = gradesSortedByGPAWithKeyAndValuesGroupedGrouped.map(x => (x._1, x._2.map(x => x._2.map(x => x._2))))\n        val gradesSortedByGPAWithKeyAndValuesGroupedGroupedGroupedGrouped = gradesSortedByGPAWithKeyAndValuesGroupedGroupedGrouped.map(x => (x._1, x._2.map(x => x._2.map(x => x._2.map(x => x._2)))))\n        val gradesSortedByGPAWithKeyAndValuesGroupedGroupedGroupedGroupedGrouped = gradesSortedByGPAWithKeyAndValuesGroupedGroupedGroupedGrouped.map(x => (x._1, x._2.map(x => x._2.map(x => x._2.map(x => x._2.map(x => x._2))))))\n        val gradesSortedByGPAWithKeyAndValuesGroupedGroupedGroupedGroupedGroupedGrouped = gradesSortedByGPAWithKeyAndValuesGroupedGroupedGroupedGroupedGrouped.map(x => (x._1, x._2.map(x => x._2.map(x => x._2.map(x => x._2.map(x => x._2.map(x => x._2)))))))\n        val gradesSortedByGPAWithKeyAndValuesGroupedGroupedGroupedGroupedGrou\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkbtp8cn0.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkbtp8cn0.scala:31:149 -----------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithKeyAndValuesGroupedGroupedGrouped\u001b[0m = gradesSortedByGPAWithKeyAndValuesGroupedGrouped.map(\u001b[36mx\u001b[0m => (x._1, x._2.map(\u001b[36mx\u001b[0m => x._2.map(\u001b[36mx\u001b[0m => x._2))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkbtp8cn0.scala:32:163 -----------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithKeyAndValuesGroupedGroupedGroupedGrouped\u001b[0m = gradesSortedByGPAWithKeyAndValuesGroupedGroupedGrouped.map(\u001b[36mx\u001b[0m => (x._1, x._2.map(\u001b[36mx\u001b[0m => x._2.map(\u001b[36mx\u001b[0m => x._2.map(\u001b[36mx\u001b[0m => x._2)))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value _2 is not a member of Nothing\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkbtp8cn0.scala:33:177 -----------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithKeyAndValuesGroupedGroupedGroupedGroupedGrouped\u001b[0m = gradesSortedByGPAWithKeyAndValuesGroupedGroupedGroupedGrouped.map(\u001b[36mx\u001b[0m => (x._1, x._2.map(\u001b[36mx\u001b[0m => x._2.map(\u001b[36mx\u001b[0m => x._2.map(\u001b[36mx\u001b[0m => x._2.map(\u001b[36mx\u001b[0m => x._2))))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue _2 is n",
      "stdout": "",
      "timestamp": 1660010464
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(grade => (grade -> grade)).toMap\n        val gradesSorted = grades.sortBy(_)\n        val gradesSortedMap = gradesSorted.map(grade => (grade -> grade)).toMap\n        val gradesSortedSortedMap = gradesSorted.sortBy(_).map(grade => (grade -> grade)).toMap\n        val gradesSortedSortedSortedMap = gradesSorted.sortBy(_).sortBy(_).map(grade => (grade -> grade)).toMap\n        val gradesSortedSortedSortedSortedMap = gradesSorted.sortBy(_).sortBy(_).sortBy(_).map(grade => (grade -> grade)).toMap\n        val gradesSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(_).sortBy(_).sortBy(_).sortBy(_).map(grade => (grade -> grade)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).map(grade => (grade -> grade)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).map(grade => (grade -> grade)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).map(grade => (grade -> grade)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).map(grade => (grade -> grade)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).map(grade => (grade -> grade)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpey2e2wya.scala:37:144 --------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedMap\u001b[0m = gradesSorted.sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpey2e2wya.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedSortedSortedSortedSortedSortedSortedMap\u001b[0m = gradesSorted.sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).sortBy(_).map(\u001b[36mgrade\u001b[0m => (grade -> grade)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSortedSortedSortedSortedSortedSortedSortedSortedMap is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedSortedSortedSortedSortedSortedSortedSortedMap\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpey2e2wya.scala:26:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSorted\u001b[0m = grades.sortBy(_)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type ",
      "stdout": "",
      "timestamp": 1660010466
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList).mapValues(_.sortBy(x => x))\n        val gradesMapSorted = gradesMap.mapValues(_.sortBy(x => x))\n        val gradesMapSortedSortedByKey = gradesMapSorted.mapValues(_.sortBy(x => x._1))\n        val gradesMapSortedSortedByKeyReversed = gradesMapSortedSortedByKey.mapValues(_.sortBy(x => x._2))\n        val gradesMapSortedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversed.mapValues(_.sortBy(x => x._1))\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKey.mapValues(_.sortBy(x => x._2))\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversed.mapValues(_.sortBy(x => x._1))\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey.mapValues(_.sortBy(x => x._2))\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.mapValues(_.sortBy(x => x._1))\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.mapValues(_.sortBy(x => x._2))\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.mapValues(_.sortBy(x => x._1))\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.mapValues(_.sortBy(x => x.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyfn8ker3.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyfn8ker3.scala:27:83 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedSortedByKey\u001b[0m = gradesMapSorted.mapValues(_.sortBy(\u001b[36mx\u001b[0m => x._1))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value _1 is not a member of Float\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyfn8ker3.scala:27:86 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedSortedByKey\u001b[0m = gradesMapSorted.mapValues(_.sortBy(\u001b[36mx\u001b[0m => x._1))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances: both \u001b[33mobject\u001b[0m \u001b[35mByte\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m and \u001b[33mobject\u001b[0m \u001b[35mChar\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m match type Ordering[B] of parameter ord of \u001b[33mmethod\u001b[0m \u001b[35msortBy\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyfn8ker3.scala:28:102 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedSortedByKeyReversed\u001b[0m = gradesMapSortedSortedByKey.mapValues(_.sortBy(\u001b[36mx\u001b[0m => x._2))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value _2 is not a member of Float\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyfn8ker3.scala:28:105 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedSortedByKeyReversed\u001b[0m = gradesMapSortedSortedByKey.mapValues(_.sortBy(\u001b[36mx\u001b[0m => x._2))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ",
      "stdout": "",
      "timestamp": 1660010468
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesSortedByGPA = gradesSortedByGPAReversedValues.sortBy(_._1)\n        val gradesSortedByGPAReversedValuesSortedByGPAReversed = gradesSortedByGPAReversedValuesSortedByGPA.reverse\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedMap = gradesSortedByGPAReversedValuesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedKeys = gradesSortedByGPAReversedValuesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValues = gradesSortedByGPAReversedValuesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPA = gradesSortedByGPAReversedValuesSortedByGPAReversedValues.sortBy(_._1)\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversed = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPA.reverse\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedMap = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedKeys = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedValues = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnnu0_52c.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnu0_52c.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010435
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).toMap\n        val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse2 = gradesMapReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse3 = gradesMapReverse2.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse4 = gradesMapReverse3.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse5 = gradesMapReverse4.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse6 = gradesMapReverse5.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse7 = gradesMapReverse6.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse8 = gradesMapReverse7.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse9 = gradesMapReverse8.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse10 = gradesMapReverse9.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse11 = gradesMapReverse10.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse12 = gradesMapReverse11.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse13 = gradesMapReverse12.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse14 = gradesMapReverse13.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse15 = gradesMapReverse14.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse16 = gradesMapReverse15.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse17 = gradesMapReverse16.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse18 = gradesMapReverse17.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse19 = gradesMapReverse18.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse20 = gradesMapReverse19.map(x => (x._1, x._2)).toMap\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp8lsgk32z.scala:46:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8lsgk32z.scala:25:65 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(\u001b[36mx\u001b[0m => x.toInt).mapValues(_.toInt).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8lsgk32z.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010468
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> grade match {\n            case 3.0 => \"B+\"\n            case 3.7 => \"B\"\n            case 3.3 => \"B-\"\n            case 3.0 => \"C+\"\n            case 2.7 => \"C\"\n            case 2.3 => \"C-\"\n            case 2.0 => \"D+\"\n            case 1.7 => \"D\"\n            case 1.3 => \"D-\"\n            case 1.0 => \"E\"\n            case 0.0 => \"F\"\n            case _ => \"F\"\n        })).toMap\n        val gradesList : List[String] = grades.map(grade => gradesMap(grade))\n        gradesList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpiqybnz2v.scala:26:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m3.0\u001b[0m => \u001b[31m\"B+\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Float, Float) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiqybnz2v.scala:27:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m3.7\u001b[0m => \u001b[31m\"B\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Float, Float) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiqybnz2v.scala:28:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m3.3\u001b[0m => \u001b[31m\"B-\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Float, Float) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiqybnz2v.scala:29:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m3.0\u001b[0m => \u001b[31m\"C+\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Float, Float) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiqybnz2v.scala:30:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m2.7\u001b[0m => \u001b[31m\"C\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Float, Float) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiqybnz2v.scala:31:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m2.3\u001b[0m => \u001b[31m\"C-\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Float, Float) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiqybnz2v.scala:32:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mcase\u001b[0m \u001b[31m2.0\u001b[0m => \u001b[31m\"D+\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Double and (Floa",
      "stdout": "",
      "timestamp": 1660010470
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n        val gradesLength = gradesSorted.length\n        val gradesAverage = gradesSorted.sum / gradesLength\n        val gradesSum = gradesSorted.sum\n        val gradesSumOfSquares = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesLength\n        val gradesSumOfSquaresSum = gradesSumOfSquares.sum\n        val gradesSumOfSquaresSumOfSquares = gradesSumOfSquaresSum * gradesSumOfSquaresSum\n        val gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquares / gradesLength\n        val gradesSumOfSquaresSumOfSquaresSum = gradesSumOfSquaresSumOfSquares.sum\n        val gradesSumOfSquaresSumOfSquaresSumOfSquares = gradesSumOfSquaresSumOfSquaresSum * gradesSumOfSquaresSumOfSquaresSum\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresSumOfSquares / gradesLength\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSum = gradesSumOfSquaresSumOfSquaresSumOfSquares.sum\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares = gradesSumOfSquaresSumOfSquaresSumOfSquaresSum * gradesSumOfSquaresSumOfSquaresSumOfSquaresSum\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares / gradesLength\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum = gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares.sum\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares = gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum * gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum\n        val gradesSumOfSqu\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf8682gpk.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf8682gpk.scala:31:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSumOfSquaresSum\u001b[0m = gradesSumOfSquares.sum\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value sum is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8682gpk.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010467
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => math.floor(x)).mapValues(_.size)\n        val gradesMapSorted = gradesMap.sortBy(_._2).reverse\n        val gradesMapSortedSorted: Map[Float, Int] = gradesMapSorted.toSeq.sortBy(_._1).reverse\n        val gradesMapSortedSortedSorted: Map[Int, Float] = gradesMapSortedSorted.toSeq.sortBy(_._1).reverse\n        val gradesMapSortedSortedSortedSorted: Map[Float, Float] = gradesMapSortedSortedSorted.toSeq.sortBy(_._2).reverse\n        val gradesMapSortedSortedSortedSortedSorted: Map[Int, Float] = gradesMapSortedSortedSortedSorted.toSeq.sortBy(_._2).reverse\n        val gradesMapSortedSortedSortedSortedSortedSorted: Map[Float, Float] = gradesMapSortedSortedSortedSortedSorted.toSeq.sortBy(_._3).reverse\n        val gradesMapSortedSortedSortedSortedSortedSortedSorted: Map[Int, Float] = gradesMapSortedSortedSortedSortedSortedSorted.toSeq.sortBy(_._3).reverse\n        val gradesMapSortedSortedSortedSortedSortedSortedSortedSorted: Map[Float, Float] = gradesMapSortedSortedSortedSortedSortedSortedSorted.toSeq.sortBy(_._4).reverse\n        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted: Map[Int, Float] = gradesMapSortedSortedSortedSortedSortedSortedSortedSorted.toSeq.sortBy(_._4).reverse\n        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted: Map[Float, Float] = gradesMapSortedSortedSortedSortedSortedSortedSortedSorted.toSeq.sortBy(_._5).reverse\n        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted: Map[Int, Float] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted.toSeq.sortBy(_._5).reverse\n        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted: Map[Float, Float] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.toSeq.sortBy(_._6).reverse\n        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted: Map[Int, Float] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.toSeq.sortBy(_._6).reverse\n        val gradesMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptj6nx5ct.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptj6nx5ct.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\u001b[0m: \u001b[35mMap\u001b[0m[\u001b[35mInt\u001b[0m, \u001b[35mFloat\u001b[0m] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted.toSeq.sortBy(_._5).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptj6nx5ct.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._2).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   value sortBy is not a member of scala.collection.MapView[Double, Int]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptj6nx5ct.scala:28:100 -------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedSortedSorted\u001b[0m: \u001b[35mMap\u001b[0m[\u001b[35mInt\u001b[0m, \u001b[35mFloat\u001b[0m] = gradesMapSortedSorted.toSeq.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    Seq[(Float, Int)]\n\u001b[31m   |\u001b[0m                            Required: collection.mutable.Map[Int, Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-ex",
      "stdout": "",
      "timestamp": 1660010472
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n        val gradesMapKeysSorted = gradesMapKeys.sortBy(_)\n        val gradesMapValuesSorted = gradesMapValues.sortBy(_)\n        val gradesMapKeysSortedWithDuplicates = gradesMapKeysSorted.distinct\n        val gradesMapValuesSortedWithDuplicates = gradesMapValuesSorted.distinct\n        val gradesMapKeysSortedWithDuplicatesAndDuplicates = gradesMapKeysSortedWithDuplicates.zip(gradesMapValuesSortedWithDuplicates)\n        val gradesMapKeysSortedWithDuplicatesAndDuplicatesSorted = gradesMapKeysSortedWithDuplicatesAndDuplicates.sortBy(_._1)\n        val gradesMapValuesSortedWithDuplicatesAndDuplicatesSorted = gradesMapValuesSortedWithDuplicatesAndDuplicates.sortBy(_._1)\n        val gradesMapKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicates = gradesMapKeysSortedWithDuplicatesAndDuplicatesSorted.map(x => x._2)\n        val gradesMapValuesSortedWithDuplicatesAndDuplicatesSortedWithDuplicates = gradesMapValuesSortedWithDuplicatesAndDuplicatesSorted.map(x => x._2)\n        val gradesMapKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesAndDuplicates = gradesMapKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicates.zip(gradesMapValuesSortedWithDuplicatesAndDuplicatesSortedWithDuplicates)\n        val gradesMapKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesAndDuplicatesSorted = gradesMapKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesAndDuplicates.sortBy(_._1)\n        val gradesMapValuesSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesAndDuplicatesSorted = gradesMapValuesSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesAndDuplicates.sortBy(_._1)\n        val gradesMapKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesAndDuplicatesSortedWithDuplicates = gradesMapKeysSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesAndDuplicatesSorted.map(x => x._2)\n        val gradesMapValuesSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesAndDuplicatesSortedWithDuplicates = gradesMapValuesSortedWithDuplicatesAndDuplicatesSortedWithDuplicatesAndDuplicatesSorted.map(x => x._2)\n        val grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2c7z2_ao.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2c7z2_ao.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp2c7z2_ao.scala:28:55 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapKeysSorted\u001b[0m = gradesMapKeys.sortBy(_)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => gradesMapKeys.sortBy(_$1).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp2c7z2_ao.scala:29:59 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapValuesSorted\u001b[0m = gradesMapValues.sortBy(_)\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => gradesMapValues.sortBy(_$2).\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2c7z2_ao.scala:34:69 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapValuesSortedWithDuplicatesAndDuplicatesSorted\u001b[0m = gradesMapValuesSortedWithDuplicatesAndDuplicates.sortBy(_._1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0",
      "stdout": "",
      "timestamp": 1660010469
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3 = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5 = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7 = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9 = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11 = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13 = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13 * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15 = gradesMapSortedReversedValuesSum14 * gradesMapSortedReversedValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprj20h90q.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprj20h90q.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n        val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n        val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n        val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20 = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2 > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n        val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25 = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvemr0est.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvemr0est.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sortBy is not a member of scala.collection.MapView[Int, List[Float]]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvemr0est.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010471
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap2 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap3 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap4 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap5 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap6 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap7 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap8 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap9 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap10 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap11 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap12 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap13 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap14 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap15 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap16 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap17 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap18 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap19 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap20 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap21 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap22 = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph_bu6lyl.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010471
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortWith((a, b) => a.toDouble < b.toDouble)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.toMap\n        val gradesSortedMapReversedMapValues = gradesSortedMapReversedMap.values.toList\n        val gradesSortedMapReversedMapValuesSorted = gradesSortedMapReversedMapValues.sortWith((a, b) => a.toDouble < b.toDouble)\n        val gradesSortedMapReversedMapValuesSortedMap = gradesSortedMapReversedMapValuesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapValuesSortedMapValues = gradesSortedMapReversedMapValuesSortedMap.values.toList\n        val gradesSortedMapReversedMapValuesSortedMapValuesSorted = gradesSortedMapReversedMapValuesSortedMapValues.sortWith((a, b) => a.toDouble < b.toDouble)\n        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMap = gradesSortedMapReversedMapValuesSortedMapValuesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValues = gradesSortedMapReversedMapValuesSortedMapValuesSortedMap.values.toList\n        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSorted = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValues.sortWith((a, b) => a.toDouble < b.toDouble)\n        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMap = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValues = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValuesSorted.values.toList\n        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValuesSorted = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValuesSortedMapValues.sortWith((\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmphrkm1v35.scala:40:201 --------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValuesSorted\u001b[0m = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValuesSortedMapValues.sortWith((\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphrkm1v35.scala:28:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversed\u001b[0m = gradesSortedMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphrkm1v35.scala:40:98 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValuesSorted\u001b[0m = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValuesSortedMapValues.sortWith((\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValuesSortedMapValues\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphrkm1v35.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit",
      "stdout": "",
      "timestamp": 1660010470
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSorted = gradesMapSortedGrouped.sortBy(_._2.last)\n        val gradesMapSortedGroupedSortedGrouped = gradesMapSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGrouped.sortBy(_._2.last)\n        val gradesMapSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2.last)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2.last)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2.last)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt69mnuch.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt69mnuch.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\u001b[0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2.last)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt69mnuch.scala:25:65 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(\u001b[36mx\u001b[0m => x.toInt).mapValues(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt69mnuch.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  val",
      "stdout": "",
      "timestamp": 1660010473
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphfrkllkj.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmphfrkllkj.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphfrkllkj.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010399
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapWithKeys = gradesSortedMapReversedMap.mapValues(x => x._1)\n        val gradesSortedMapReversedMapWithKeysReversed = gradesSortedMapReversedMapWithKeys.reverse\n        val gradesSortedMapReversedMapWithKeysReversedMap = gradesSortedMapReversedMapWithKeysReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysReversedMapWithKeys = gradesSortedMapReversedMapWithKeysReversedMap.mapValues(x => x._1)\n        val gradesSortedMapReversedMapWithKeysReversedMapWithKeysReversed = gradesSortedMapReversedMapWithKeysReversedMapWithKeys.reverse\n        val gradesSortedMapReversedMapWithKeysReversedMapWithKeysReversedMap = gradesSortedMapReversedMapWithKeysReversedMapWithKeysReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys = gradesSortedMapReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys.mapValues(x => x._1)\n        val gradesSortedMapReversedMapWithKeysReversedMapWithKeysReversedMapWithKeysReversed = gradesSortedMapReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys.reverse\n        val gradesSortedMapReversedMapWithKeysReversedMapWithKeysReversedMapWithKeysReversedMap = gradesSortedMapReversedMapWithKeysReversedMapWithKeysReversedMapWithKeysReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys = gradesSortedMapReverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxhmo94qp.scala:28:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversed\u001b[0m = gradesSortedMap.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpxhmo94qp.scala:36:87 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys\u001b[0m = gradesSortedMapReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys.mapValues(\u001b[36mx\u001b[0m => x._1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesSortedMapReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxhmo94qp.scala:39:106 -----------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversedMapWithKeysReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys\u001b[0m = gradesSortedMapReverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: gradesSortedMapReverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxhmo94qp.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010472
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => math.floor(x * 10).toInt).mapValues(_.map(_ / 10).sum).toMap\n        val gradesSorted = grades.sortBy(x => math.floor(x * 10).toInt)\n        val gradesSortedMap = gradesSorted.groupBy(x => math.floor(x * 10).toInt).mapValues(_.map(_ / 10).sum).toMap\n        val gradesSortedReversed = gradesSorted.reverse\n        val gradesSortedMapReversed = gradesSortedMap.mapValues(_.map(_ / 10).sum).toMap\n        val gradesSortedReversedMap = gradesSortedReversed.groupBy(x => math.floor(x * 10).toInt).mapValues(_.map(_ / 10).sum).toMap\n        val gradesSortedReversedMapReversed = gradesSortedReversedMap.mapValues(_.map(_ / 10).sum).toMap\n        val gradesSortedReversedMapReversedMap = gradesSortedReversedMapReversed.mapValues(_.map(_ / 10).sum).toMap\n        val gradesSortedReversedMapReversedMapReversed = gradesSortedReversedMapReversedMap.mapValues(_.map(_ / 10).sum).toMap\n        val gradesSortedReversedMapReversedMapReversedMap = gradesSortedReversedMapReversedMapReversed.mapValues(_.map(_ / 10).sum).toMap\n        val gradesSortedReversedMapReversedMapReversedMapReversed = gradesSortedReversedMapReversedMapReversedMap.mapValues(_.map(_ / 10).sum).toMap\n        val gradesSortedReversedMapReversedMapReversedMapReversedMap = gradesSortedReversedMapReversedMapReversedMapReversed.mapValues(_.map(_ / 10).sum).toMap\n        val gradesSortedReversedMapReversedMapReversedMapReversedMapReversed = gradesSortedReversedMapReversedMapReversedMapReversedMap.mapValues(_.map(_ / 10).sum).toMap\n        val gradesSortedReversedMapReversedMapReversedMapReversedMapReversedMap = gradesSortedReversedMapReversedMapReversedMapReversedMapReversed.mapValues(_.map(_ / 10).sum).toMap\n        val gradesSortedReversedMapReversedMapReversedMapReversedMapReversedMapReversed = gradesSortedReversedMapReversedMapReversedMapReversedMapReversedMap.mapValues(_.map\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxpu2v11s.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxpu2v11s.scala:29:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedMapReversed\u001b[0m = gradesSortedMap.mapValues(_.map(_ / \u001b[31m10\u001b[0m).sum).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value map is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxpu2v11s.scala:31:82 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedReversedMapReversed\u001b[0m = gradesSortedReversedMap.mapValues(_.map(_ / \u001b[31m10\u001b[0m).sum).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value map is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxpu2v11s.scala:32:93 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedReversedMapReversedMap\u001b[0m = gradesSortedReversedMapReversed.mapValues(_.map(_ / \u001b[31m10\u001b[0m).sum).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue map is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitCon",
      "stdout": "",
      "timestamp": 1660010477
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedSortedByKey = gradesMapSorted.sortBy(_._2)\n        val gradesMapSortedSortedByKeyReversed = gradesMapSortedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversed.sortBy(_._1)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversed.sortBy(_._2)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._3)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._4)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._5)\n        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppno1iljj.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmppno1iljj.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppno1iljj.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010429
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        grades.toList.sortWith((x,y) => x.toDouble > y.toDouble).reverse.map(x => if (x < 3.0) \"A+\" else if (x < 3.7) \"A\" else if (x < 3.3) \"A-\" else if (x < 3.0) \"B+\" else if (x < 2.7) \"B\" else if (x < 2.3) \"B-\" else if (x < 2.0) \"C+\" else if (x < 1.7) \"C\" else if (x < 1.3) \"C-\" else if (x < 1.0) \"D+\" else if (x < 0.7) \"D\" else if (x < 0.0) \"D-\" else \"E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeyzswh0j.scala:28)\n\tat Problem.main(tmpeyzswh0j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660010473
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList.sortBy(x => x))\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps9gy2o6z.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps9gy2o6z.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedKeysLength\u001b[0m = gradesMapSortedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps9gy2o6z.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedValuesLength\u001b[0m = gradesMapSortedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps9gy2o6z.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedKeysLength\u001b[0m = gradesMapSortedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps9gy2o6z.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedValuesLength\u001b[0m = gradesMapSortedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMap",
      "stdout": "",
      "timestamp": 1660010473
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesIter = grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk1igyef8.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMap is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMap\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk1igyef8.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSet\u001b[0m = grades.toSet\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSet is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSet\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk1igyef8.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSeq\u001b[0m = grades.toSeq\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSeq is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesSeq\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk1igyef8.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesIter\u001b[0m = grades.iterator\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesIter is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesIter\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk1igyef8.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMap is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMap\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that over",
      "stdout": "",
      "timestamp": 1660010475
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float,String] = grades.map(x => (x,x.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,String)] = gradesMap.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList : List[(Float,String)] = gradesList.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList1 : List[(Float,String)] = gradesMapList.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList2 : List[(Float,String)] = gradesMapList1.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList3 : List[(Float,String)] = gradesMapList2.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList4 : List[(Float,String)] = gradesMapList3.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList5 : List[(Float,String)] = gradesMapList4.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList6 : List[(Float,String)] = gradesMapList5.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList7 : List[(Float,String)] = gradesMapList6.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList8 : List[(Float,String)] = gradesMapList7.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList9 : List[(Float,String)] = gradesMapList8.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList10 : List[(Float,String)] = gradesMapList9.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList11 : List[(Float,String)] = gradesMapList10.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList12 : List[(Float,String)] = gradesMapList11.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList13 : List[(Float,String)] = gradesMapList12.filter(_._2 != \"E\").sortBy(_._1).reverse\n        val gradesMapList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcgty0a5_.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcgty0a5_.scala:25:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m,\u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => (x,x.toString.toUpperCase)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcgty0a5_.scala:26:78 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesList\u001b[0m : \u001b[35mList\u001b[0m[(\u001b[35mFloat\u001b[0m,\u001b[35mString\u001b[0m)] = gradesMap.filter(_._2 != \u001b[31m\"E\"\u001b[0m).sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sortBy is not a member of scala.collection.mutable.Map[Float, String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcgty0a5_.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010476
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        grades.map(grade => if (grade > 3.0) \"B+\" else if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade > 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else if (grade > 0.0) \"E\" else \"A+\" else if (grade > 3.0) \"A\" else if (grade > 3.0) \"A\" else \"A\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2za7rcbz.scala:25:299 --------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        grades.map(\u001b[36mgrade\u001b[0m => \u001b[33mif\u001b[0m (grade > \u001b[31m3.0\u001b[0m) \u001b[31m\"B+\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m2.7\u001b[0m) \u001b[31m\"B\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m2.3\u001b[0m) \u001b[31m\"B-\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m2.0\u001b[0m) \u001b[31m\"C+\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m1.7\u001b[0m) \u001b[31m\"C\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m1.3\u001b[0m) \u001b[31m\"C-\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m1.0\u001b[0m) \u001b[31m\"D+\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m0.7\u001b[0m) \u001b[31m\"D\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m0.0\u001b[0m) \u001b[31m\"D-\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m0.0\u001b[0m) \u001b[31m\"E\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"A+\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m3.0\u001b[0m) \u001b[31m\"A\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (grade > \u001b[31m3.0\u001b[0m) \u001b[31m\"A\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"A\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                           ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          ')' expected, but 'else' found\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010470
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toInt).mapValues(_.toDouble).mapValues(_.toString.toUpperCase)\n        val gradesMapReverse = gradesMap.mapValues(_.swap)\n        val gradesMapReverse2 = gradesMapReverse.mapValues(_.swap)\n        val gradesMapReverse3 = gradesMapReverse2.mapValues(_.swap)\n        val gradesMapReverse4 = gradesMapReverse3.mapValues(_.swap)\n        val gradesMapReverse5 = gradesMapReverse4.mapValues(_.swap)\n        val gradesMapReverse6 = gradesMapReverse5.mapValues(_.swap)\n        val gradesMapReverse7 = gradesMapReverse6.mapValues(_.swap)\n        val gradesMapReverse8 = gradesMapReverse7.mapValues(_.swap)\n        val gradesMapReverse9 = gradesMapReverse8.mapValues(_.swap)\n        val gradesMapReverse10 = gradesMapReverse9.mapValues(_.swap)\n        val gradesMapReverse11 = gradesMapReverse10.mapValues(_.swap)\n        val gradesMapReverse12 = gradesMapReverse11.mapValues(_.swap)\n        val gradesMapReverse13 = gradesMapReverse12.mapValues(_.swap)\n        val gradesMapReverse14 = gradesMapReverse13.mapValues(_.swap)\n        val gradesMapReverse15 = gradesMapReverse14.mapValues(_.swap)\n        val gradesMapReverse16 = gradesMapReverse15.mapValues(_.swap)\n        val gradesMapReverse17 = gradesMapReverse16.mapValues(_.swap)\n        val gradesMapReverse18 = gradesMapReverse17.mapValues(_.swap)\n        val gradesMapReverse19 = gradesMapReverse18.mapValues(_.swap)\n        val gradesMapReverse20 = gradesMapReverse19.mapValues(_.swap)\n        val gradesMapReverse21 = gradesMapReverse20.mapValues(_.swap)\n        val gradesMapReverse22 = gradesMapReverse21.mapValues(_.swap)\n        val gradesMapReverse23 = gradesMapReverse22.mapValues(_.swap)\n        val gradesMapReverse24 = gradesMapReverse23.mapValues(_.swap)\n        val gradesMapReverse25 = gradesMapReverse24.mapValues(_.swap)\n        val gradesMapReverse26 = gradesMapReverse25.mapValues(_.swap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1en_er3p.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1en_er3p.scala:25:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m4\u001b[0m).mapValues(_.toInt).mapValues(_.toDouble).mapValues(_.toString.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1en_er3p.scala:25:77 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m4\u001b[0m).mapValues(_.toInt).mapValues(_.toDouble).mapValues(_.toString.toUpperCase)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toDouble is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Byte.byte2double\n\u001b[31m   |\u001b[0m  import Byte.byte2float\n\u001b[31m   |\u001b[0m  import Byte.byte2int\n\u001b[31m   |\u001b[0m  import Byte.byte2long\n\u001b[31m   |\u001b[0m  import Byte.byte2short\n\u001b[31m   |\u001b[0m  import Char.char2double\n\u001b[31m   |\u001b[0m  import Char.char2float\n\u001b[31m   |\u001b[0m  import Char.char2int\n\u001b[31m   |\u001b[0m  import Char.char2long\n\u001b[31m   |\u001b[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1en_er3p.scala:26:53 ------------------------\u001b[0m",
      "stdout": "",
      "timestamp": 1660010480
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sort\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5r5eqwuw.scala:36:202 -----------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedMap\u001b[0m = gradesSorted.sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sortBy(\u001b[36mx\u001b[0m => x).sort\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[Float] - did you mean List[Float].sortBy?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5r5eqwuw.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010479
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAWithLetterGrade = gradesSortedByGPA.map(x => (x.toInt, x))\n        val gradesSortedByGPAWithLetterGradeWithLetterGrade = gradesSortedByGPAWithLetterGrade.map(x => (x._1, x._2.toChar))\n        val gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGrade = gradesSortedByGPAWithLetterGradeWithLetterGrade.map(x => (x._1, x._2.toChar, x._3))\n        val gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade = gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGrade.map(x => (x._1, x._2.toChar, x._3, x._4))\n        val gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade = gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade.map(x => (x._1, x._2.toChar, x._3, x._4, x._5))\n        val gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade = gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade.map(x => (x._1, x._2.toChar, x._3, x._4, x._5, x._6))\n        val gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade = gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade.map(x => (x._1, x._2.toChar, x._3, x._4, x._5, x._6, x._7))\n        val gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade = gradesSortedBy\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_mb56iao.scala:29:156 -----------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGrade\u001b[0m = gradesSortedByGPAWithLetterGradeWithLetterGrade.map(\u001b[36mx\u001b[0m => (x._1, x._2.toChar, x._3))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                          ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value _3 is not a member of (Int, Char) - did you mean x._1?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_mb56iao.scala:30:192 -----------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade\u001b[0m = gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGrade.map(\u001b[36mx\u001b[0m => (x._1, x._2.toChar, x._3, x._4))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   value _4 is not a member of (Int, Char, Nothing) - did you mean x._1?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_mb56iao.scala:31:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade\u001b[0m = gradesSortedByGPAWithLetterGradeWithLetterGradeWithLetterGradeWithLetterGrade.map(\u001b[36mx\u001b[0m => (x._1, x._2.toChar, x._3, x._4, x._5))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                  ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue _5 is not a member of (Int, Char, Nothing, Nothing) - did you mean x._1?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_mb56iao.scala:32:264 -----------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33m",
      "stdout": "",
      "timestamp": 1660010480
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => math.floor(x)).mapValues(_.size)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 1)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 2)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 3)\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 4)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2 > 5)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 6)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 7)\n        val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 8)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2 > 9)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 10)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 11)\n        val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 12)\n        val gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 13)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 > 14)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 15)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 16)\n        val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 17)\n        val gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 18)\n        val gradesMapSorted20 = gradesMapSorted19.filter(_._2 > 19)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2 > 20)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 21)\n        val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 22)\n        val gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 23)\n        val gradesMapSorted25 = gradesMapSorted24.filter(_._2 > 24)\n        val grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4o8_d_gu.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4o8_d_gu.scala:25:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(\u001b[36mx\u001b[0m => math.floor(x)).mapValues(_.size)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue groupBy is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToScala.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToScala.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4o8_d_gu.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010478
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSorted2 = gradesMapSorted.toSeq.sortBy(_._2)\n        val gradesMapSorted3 = gradesMapSorted2.toSeq.sortBy(_._1)\n        val gradesMapSorted4 = gradesMapSorted3.toSeq.sortBy(_._2)\n        val gradesMapSorted5 = gradesMapSorted4.toSeq.sortBy(_._1)\n        val gradesMapSorted6 = gradesMapSorted5.toSeq.sortBy(_._2)\n        val gradesMapSorted7 = gradesMapSorted6.toSeq.sortBy(_._1)\n        val gradesMapSorted8 = gradesMapSorted7.toSeq.sortBy(_._2)\n        val gradesMapSorted9 = gradesMapSorted8.toSeq.sortBy(_._1)\n        val gradesMapSorted10 = gradesMapSorted9.toSeq.sortBy(_._2)\n        val gradesMapSorted11 = gradesMapSorted10.toSeq.sortBy(_._1)\n        val gradesMapSorted12 = gradesMapSorted11.toSeq.sortBy(_._2)\n        val gradesMapSorted13 = gradesMapSorted12.toSeq.sortBy(_._1)\n        val gradesMapSorted14 = gradesMapSorted13.toSeq.sortBy(_._2)\n        val gradesMapSorted15 = gradesMapSorted14.toSeq.sortBy(_._1)\n        val gradesMapSorted16 = gradesMapSorted15.toSeq.sortBy(_._2)\n        val gradesMapSorted17 = gradesMapSorted16.toSeq.sortBy(_._1)\n        val gradesMapSorted18 = gradesMapSorted17.toSeq.sortBy(_._2)\n        val gradesMapSorted19 = gradesMapSorted18.toSeq.sortBy(_._1)\n        val gradesMapSorted20 = gradesMapSorted19.toSeq.sortBy(_._2)\n        val gradesMapSorted21 = gradesMapSorted20.toSeq.sortBy(_._1)\n        val gradesMapSorted22 = gradesMapSorted21.toSeq.sortBy(_._2)\n        val gradesMapSorted23 = gradesMapSorted22.toSeq.sortBy(_._1)\n        val gradesMapSorted24 = gradesMapSorted23.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk6s_jkli.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpk6s_jkli.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk6s_jkli.scala:50:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010477
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._2)\n        val gradesMapSortedGroupedSorted = gradesMapSortedGrouped.sortBy(_._1).reverse\n        val gradesMapSortedGroupedSortedGrouped = gradesMapSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGrouped.sortBy(_._1).reverse\n        val gradesMapSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp0ro_70rm.scala:38:101 --------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0ro_70rm.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\u001b[0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0ro_70rm.scala:25:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m10\u001b[0m).mapValues(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |",
      "stdout": "",
      "timestamp": 1660010479
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo_n94wg0.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysLength\u001b[0m = gradesMapSortedReversedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysLength\u001b[0m = gradesMapSortedReversedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesL",
      "stdout": "",
      "timestamp": 1660010397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo_n94wg0.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysLength\u001b[0m = gradesMapSortedReversedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysLength\u001b[0m = gradesMapSortedReversedKeys.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedKeysLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo_n94wg0.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesL",
      "stdout": "",
      "timestamp": 1660010397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesValuesMap.values.toList\n        val gradesSortedByGPA\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqx0ppr4n.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpqx0ppr4n.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqx0ppr4n.scala:41:68 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedValuesValuesValuesValuesKeys\u001b[0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   Not found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqx0ppr4n.scala:42:70 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAReversedValuesValuesValuesValuesValues\u001b[0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.values.toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   Not found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqx0ppr4n.scala:43:79 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36m",
      "stdout": "",
      "timestamp": 1660010398
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> grade < 3.0 ? \"A+\" :\n            grade < 3.7 ? \"A\" :\n            grade < 3.3 ? \"A-\" :\n            grade < 3.0 ? \"B+\" :\n            grade < 2.7 ? \"B\" :\n            grade < 2.3 ? \"B-\" :\n            grade < 2.0 ? \"C+\" :\n            grade < 1.7 ? \"C\" :\n            grade < 1.3 ? \"C-\" :\n            grade < 1.0 ? \"D+\" :\n            grade < 0.7 ? \"D\" :\n            grade < 0.0 ? \"D-\" :\n            \"E\")).toMap\n        val gradesList : List[String] = grades.map(grade => gradesMap(grade))\n        gradesList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5f3xlois.scala:26:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            grade < \u001b[31m3.7\u001b[0m ? \u001b[31m\"A\"\u001b[0m :\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              ')' expected, but ':' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5f3xlois.scala:26:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            grade < \u001b[31m3.7\u001b[0m ? \u001b[31m\"A\"\u001b[0m :\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: type <\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5f3xlois.scala:25:81 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> grade < \u001b[31m3.0\u001b[0m ? \u001b[31m\"A+\"\u001b[0m :\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue < is not a member of (Float, Float), but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5f3xlois.scala:25:87 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> grade < \u001b[31m3.0\u001b[0m ? \u001b[31m\"A+\"\u001b[0m :\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value ? is not a member of Double\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010481
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x => x -> \"D-\").withDefaultValue(\"E\")\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysSorted = gradesMapSortedReversedKeys.sortBy(_._1)\n        val gradesMapSortedReversedKeysSortedReversed = gradesMapSortedReversedKeysSorted.reverse\n        val gradesMapSortedReversedKeysSortedReversedValues = gradesMapSortedReversedKeysSortedReversed.map(x => gradesMapSortedReversedValues.indexOf(x))\n        val gradesMapSortedReversedKeysSortedReversedValuesSorted = gradesMapSortedReversedKeysSortedReversedValues.sortBy(_._1)\n        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversed = gradesMapSortedReversedKeysSortedReversedValuesSortedReversed.reverse\n        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeys = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeys.map(x => gradesMapSortedReversedKeysSortedReversedValuesSortedReversed.indexOf(x))\n        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted.sortBy(_._1)\n        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversed = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversed.reverse\n        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValues = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSorted.map(x => gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted.indexOf(x))\n        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSorted = gradesMapSortedReversedKeysSortedReversedValuesSortedReversed\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp55ypidq.scala:25:72 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mx\u001b[0m => x -> \u001b[31m\"D-\"\u001b[0m).withDefaultValue(\u001b[31m\"E\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         value withDefaultValue is not a member of List[(Float, String)]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp55ypidq.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   value sortBy is not a member of collection.mutable.Map[Float, String]\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpp55ypidq.scala:34:76 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysSortedReversedValuesSortedReversed\u001b[0m = gradesMapSortedReversedKeysSortedReversedValuesSortedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysSortedReversedValuesSortedReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpp55ypidq.scala:35:80 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeys\u001b[0m = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeys.map(\u001b[36mx\u001b[0m => gradesMapSortedReversedKeysSortedReversedValuesSortedReversed.indexOf(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeys\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availabl",
      "stdout": "",
      "timestamp": 1660010481
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => x -> x).toMap\n        val gradesSorted = grades.sortWith((x,y) => x.toDouble < y.toDouble)\n        val gradesSortedMap = gradesSorted.map(x => x -> x).toMap\n        val gradesSortedSortedMap = gradesSorted.sortWith((x,y) => x.toDouble < y.toDouble).map(x => x -> x).toMap\n        val gradesSortedSortedSortedMap = gradesSorted.sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).map(x => x -> x).toMap\n        val gradesSortedSortedSortedSortedMap = gradesSorted.sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).map(x => x -> x).toMap\n        val gradesSortedSortedSortedSortedSortedMap = gradesSorted.sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).map(x => x -> x).toMap\n        val gradesSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).map(x => x -> x).toMap\n        val gradesSortedSortedSortedSortedSortedSortedSortedMap = gradesSorted.sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.toDouble).sortWith((x,y) => x.toDouble < y.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpc6_2ce6y.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6_2ce6y.scala:34:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010481
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n        val gradesValuesWithZero = gradesValues.map(_ + 0.0)\n        val gradesValuesWithZeroMap = gradesValuesWithZero.toMap\n        val gradesKeysWithZero = gradesKeys.map(_ + 0.0)\n        val gradesKeysWithZeroMap = gradesKeysWithZero.toMap\n        val gradesKeysWithZeroKeys = gradesKeysWithZeroMap.keys\n        val gradesKeysWithZeroValues = gradesKeysWithZeroMap.values.toList\n        val gradesKeysWithZeroValuesWithZero = gradesKeysWithZeroValues.map(_ + 0.0)\n        val gradesKeysWithZeroValuesWithZeroMap = gradesKeysWithZeroValuesWithZero.toMap\n        val gradesKeysWithZeroValuesWithZeroKeys = gradesKeysWithZeroValuesWithZeroMap.keys\n        val gradesKeysWithZeroValuesWithZeroValues = gradesKeysWithZeroValuesWithZeroMap.values.toList\n        val gradesKeysWithZeroValuesWithZeroValuesWithZero = gradesKeysWithZeroValuesWithZeroValues.map(_ + 0.0)\n        val gradesKeysWithZeroValuesWithZeroValuesWithZeroMap = gradesKeysWithZeroValuesWithZeroValuesWithZero.toMap\n        val gradesKeysWithZeroValuesWithZeroValuesWithZeroKeys = gradesKeysWithZeroValuesWithZeroValuesWithZeroMap.keys\n        val gradesKeysWithZeroValuesWithZeroValuesWithZeroValues = gradesKeysWithZeroValuesWithZeroValuesWithZeroMap.values.toList\n        val gradesKeysWithZeroValuesWithZeroValuesWithZeroValuesWithZero = gradesKeysWithZeroValuesWithZeroValuesWithZeroValuesWithZero.toMap\n        val gradesKeysWithZeroValuesWithZeroValuesWithZeroValuesWithZeroKeys = gradesKeysWithZeroValuesWithZeroValuesWithZeroValuesWithZeroMap.keys\n        val gradesKeysWithZeroValuesWithZeroValuesWithZeroValuesWithZeroValues = gradesKeysWithZeroValuesWithZeroValuesWithZeroValuesWithZeroMap.values.toList\n        val gradesKeysWithZeroValuesWithZeroValuesWithZeroValuesWithZeroValuesWithZero = gradesKeysWithZeroValuesWithZeroValuesWithZeroValuesWithZeroValuesWithZero.toMap\n        val grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvc7orhl_.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvc7orhl_.scala:25:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toMap is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvc7orhl_.scala:42:75 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesKeysWithZeroValuesWithZeroValuesWithZeroValuesWithZero\u001b[0m = gradesKeysWithZeroValuesWithZeroValuesWithZeroValuesWithZero.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mgradesKeysWithZeroValuesWithZeroValuesWithZeroValuesWithZero\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvc7orhl_.scala:43:79 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mva",
      "stdout": "",
      "timestamp": 1660010483
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n        val gradesMapWithZero = gradesMap.updated(0.0, \"E\")\n        val gradesMapWithZeroAndNegative = gradesMapWithZero.updated(-4.0, \"F\")\n        val gradesMapWithZeroAndNegativeAndPositive = gradesMapWithZeroAndNegative.updated(3.0, \"F\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositive.updated(-2.0, \"F\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositive = gradesMapWithZeroAndNegativeAndPositiveAndNegative.updated(-1.0, \"F\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositive.updated(0.0, \"F\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive.updated(1.0, \"F\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive.updated(2.0, \"F\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive.updated(3.0, \"F\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative.updated(4.0, \"F\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive.updated(5.0, \"F\")\n        val gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptn34ijzn.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> \u001b[31m\"D-\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmptn34ijzn.scala:32:98 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive\u001b[0m = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive.updated(\u001b[31m1.0\u001b[0m, \u001b[31m\"F\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptn34ijzn.scala:36:142 -----------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive\u001b[0m = gradesMapWithZeroAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive.updated(\u001b[31m5.0\u001b[0m, \u001b[31m\"F\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660010482
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesSortedByGPA = gradesSortedByGPAReversedValues.sortBy(_._1)\n        val gradesSortedByGPAReversedValuesSortedByGPAReversed = gradesSortedByGPAReversedValuesSortedByGPA.reverse\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedMap = gradesSortedByGPAReversedValuesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedKeys = gradesSortedByGPAReversedValuesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValues = gradesSortedByGPAReversedValuesSortedByGPAReversedMap.values.toList\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPA = gradesSortedByGPAReversedValuesSortedByGPAReversedValues.sortBy(_._1)\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversed = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPA.reverse\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedMap = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversed.toMap\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedKeys = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedMap.keys\n        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedValues = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnnu0_52c.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnu0_52c.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660010435
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.map(_._1)\n        val gradesMapSorted4 = gradesMapSorted3.map(_ + 48)\n        val gradesMapSorted5 = gradesMapSorted4.map(_ + 64)\n        val gradesMapSorted6 = gradesMapSorted5.map(_ + 80)\n        val gradesMapSorted7 = gradesMapSorted6.map(_ + 96)\n        val gradesMapSorted8 = gradesMapSorted7.map(_ + 112)\n        val gradesMapSorted9 = gradesMapSorted8.map(_ + 128)\n        val gradesMapSorted10 = gradesMapSorted9.map(_ + 144)\n        val gradesMapSorted11 = gradesMapSorted10.map(_ + 160)\n        val gradesMapSorted12 = gradesMapSorted11.map(_ + 176)\n        val gradesMapSorted13 = gradesMapSorted12.map(_ + 192)\n        val gradesMapSorted14 = gradesMapSorted13.map(_ + 208)\n        val gradesMapSorted15 = gradesMapSorted14.map(_ + 224)\n        val gradesMapSorted16 = gradesMapSorted15.map(_ + 240)\n        val gradesMapSorted17 = gradesMapSorted16.map(_ + 256)\n        val gradesMapSorted18 = gradesMapSorted17.map(_ + 272)\n        val gradesMapSorted19 = gradesMapSorted18.map(_ + 288)\n        val gradesMapSorted20 = gradesMapSorted19.map(_ + 304)\n        val gradesMapSorted21 = gradesMapSorted20.map(_ + 320)\n        val gradesMapSorted22 = gradesMapSorted21.map(_ + 336)\n        val gradesMapSorted23 = gradesMapSorted22.map(_ + 352)\n        val gradesMapSorted24 = gradesMapSorted23.map(_ + 368)\n        val gradesMapSorted25 = gradesMapSorted24.map(_ + 384)\n        val gradesMapSorted26 = gradesMapSorted25.map(_ + 400)\n        val gradesMapSorted27 = gradesMapSorted26.map(_ + 4\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphvb4f5ec.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphvb4f5ec.scala:25:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.groupBy(_ / \u001b[31m10\u001b[0m).mapValues(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of List[Float], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphvb4f5ec.scala:26:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSorted\u001b[0m = gradesMap.sortBy(_._1).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sortBy is not a member of scala.collection.MapView[Float, Nothing]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphvb4f5ec.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010483
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.groupBy(x => math.floor(x)).mapValues(_.size)\n        val gradesMapSorted = gradesMap.sortBy(_._2).reverse\n        val gradesMapSortedWithMax = gradesMapSorted.take(gradesMapSorted.size - 1)\n        val gradesMapSortedWithMaxWithMax = gradesMapSortedWithMax.map(_._1)\n        val gradesMapSortedWithMaxWithMaxWithMax = gradesMapSortedWithMaxWithMax.map(_._2)\n        val gradesMapSortedWithMaxWithMaxWithMaxWithMax = gradesMapSortedWithMaxWithMaxWithMax.map(_._3)\n        val gradesMapSortedWithMaxWithMaxWithMaxWithMax = gradesMapSortedWithMaxWithMaxWithMaxWithMax.map(_._4)\n        val gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedWithMaxWithMaxWithMaxWithMax.map(_._5)\n        val gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMax.map(_._6)\n        val gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.map(_._7)\n        val gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.map(_._8)\n        val gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.map(_._9)\n        val gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.map(_._10)\n        val gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.map(_._11)\n        val gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps9f8oawk.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps9f8oawk.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedWithMaxWithMaxWithMaxWithMax\u001b[0m = gradesMapSortedWithMaxWithMaxWithMaxWithMax.map(_._4)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedWithMaxWithMaxWithMaxWithMax is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedWithMaxWithMaxWithMaxWithMax\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps9f8oawk.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMax\u001b[0m = gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMax.map(_._6)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMax is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMax\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps9f8oawk.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\u001b[0m = gradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.map(_._8)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax is already defined a",
      "stdout": "",
      "timestamp": 1660010482
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> grade < 3.0 ? \"A+\" :\n            grade < 3.7 ? \"A\" :\n            grade < 3.3 ? \"A-\" :\n            grade < 3.0 ? \"B+\" :\n            grade < 2.7 ? \"B\" :\n            grade < 2.3 ? \"B-\" :\n            grade < 2.0 ? \"C+\" :\n            grade < 1.7 ? \"C\" :\n            grade < 1.3 ? \"C-\" :\n            grade < 1.0 ? \"D+\" :\n            grade < 0.7 ? \"D\" :\n            grade < 0.0 ? \"D-\" :\n            \"E\")).toMap\n        val gradesList : List[String] = grades.map(grade => gradesMap(grade))\n        gradesList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5f3xlois.scala:26:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            grade < \u001b[31m3.7\u001b[0m ? \u001b[31m\"A\"\u001b[0m :\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              ')' expected, but ':' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5f3xlois.scala:26:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            grade < \u001b[31m3.7\u001b[0m ? \u001b[31m\"A\"\u001b[0m :\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: type <\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5f3xlois.scala:25:81 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> grade < \u001b[31m3.0\u001b[0m ? \u001b[31m\"A+\"\u001b[0m :\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue < is not a member of (Float, Float), but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5f3xlois.scala:25:87 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> grade < \u001b[31m3.0\u001b[0m ? \u001b[31m\"A+\"\u001b[0m :\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value ? is not a member of Double\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660010481
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysSorted = gradesMapSortedReversedKeys.sortBy(_._1)\n        val gradesMapSortedReversedValuesSorted = gradesMapSortedReversedValues.sortBy(_._1)\n        val gradesMapSortedReversedKeysSortedSortedReversed = gradesMapSortedReversedKeysSorted.reverse\n        val gradesMapSortedReversedValuesSortedSortedReversed = gradesMapSortedReversedValuesSorted.reverse\n        val gradesMapSortedReversedKeysSortedSortedReversedKeys = gradesMapSortedReversedKeysSortedSortedReversed.keys\n        val gradesMapSortedReversedValuesSortedSortedReversedValues = gradesMapSortedReversedValuesSortedReversed.values\n        val gradesMapSortedReversedKeysSortedSortedReversedValuesSorted = gradesMapSortedReversedKeysSortedSortedReversedValues.sortBy(_._1)\n        val gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed = gradesMapSortedReversedKeysSortedSortedReversedValuesSortedReversed.reverse\n        val gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeys = gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeys.keys\n        val gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedValues = gradesMapSortedReversedKeysSortedSortedReversedValuesSortedReversedValues.sortBy(_._1)\n        val gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedValuesSorted = gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedValuesSorted.reverse\n        val gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedSortedReversedKeys = gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversedKeysSorted.keys\n        val gradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedSortedReversedValuesSorted = gradesMapSortedReversed\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp4xxgncsp.scala:25:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m = grades.toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Cannot prove that Float <:< (K, V)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                    where:    K is a type variable\n\u001b[31m   |\u001b[0m                                              V is a type variable\n\u001b[31m   |\u001b[0m                                    .\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4xxgncsp.scala:35:70 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesSortedSortedReversedValues\u001b[0m = gradesMapSortedReversedValuesSortedReversed.values\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: gradesMapSortedReversedValuesSortedReversed\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4xxgncsp.scala:36:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysSortedSortedReversedValuesSorted\u001b[0m = gradesMapSortedReversedKeysSortedSortedReversedValues.sortBy(_._1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Not found: gradesMapSortedReversedKeysSortedSortedReversedValues\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4xxgncsp.scala:37:88 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedKeysSortedSortedReversedValuesSortedSortedReversed\u001b[0m = gradesMapSortedReversedKeysSortedSortedReversedValuesSortedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                            ",
      "stdout": "",
      "timestamp": 1660010483
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesSorted = grades.sortBy(_.toDouble)\n        val gradesSum = gradesSorted.sum\n        val gradesCount = gradesSorted.length\n        val gradesSumOfSquares = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresOfSquares = gradesSorted.map(x => x * x).map(x => x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquares = gradesSorted.map(x => x * x).map(x => x * x).map(x => x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquares = gradesSorted.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSorted.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSorted.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSorted.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSorted.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSorted.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpge862suh.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpge862suh.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\u001b[0m = gradesSorted.map(\u001b[36mx\u001b[0m => x * x).map(\u001b[36mx\u001b[0m => x * x).map(\u001b[36mx\u001b[0m => x * x).map(\u001b[36mx\u001b[0m => x * x).map(\u001b[36mx\u001b[0m => x * x).map(\u001b[36mx\u001b[0m => x * x).map(\u001b[36mx\u001b[0m => x * x).map(\u001b[36mx\u001b[0m => x * x).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge862suh.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660010483
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAWithLetterGrade = gradesSortedByGPA.map(x => (x, gradesMap.get(x)))\n        val gradesSortedByGPAWithLetterGradeWithZero = gradesSortedByGPAWithLetterGrade.map(x => (x._1, x._2._1, x._2._2))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZero.map(x => (x._1, x._2._1, x._2._2, x._2._3))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZero.map(x => (x._1, x._2._1, x._2._2, x._2._3, x._2._4))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZero.map(x => (x._1, x._2._1, x._2._2, x._2._3, x._2._4, x._2._5))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.map(x => (x._1, x._2._1, x._2._2, x._2._3, x._2._4, x._2._5, x._2._6))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZero.map(x => (x._1, x._2._1, x._2._2, x._2._3, x._2._4, x._2._5, x._2._6, x._2._7))\n        val gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith = gradesSortedByGPAWithLetterGradeWithZeroWithZeroWithZeroWithZeroWithZero.map(x => (x._1, \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1s_kg7v8.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1s_kg7v8.scala:27:92 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGrade\u001b[0m = gradesSortedByGPA.map(\u001b[36mx\u001b[0m => (x, gradesMap.get(x)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Found:    (x : Float)\n\u001b[31m   |\u001b[0m                                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1s_kg7v8.scala:28:109 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithZero\u001b[0m = gradesSortedByGPAWithLetterGrade.map(\u001b[36mx\u001b[0m => (x._1, x._2._1, x._2._2))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value _1 is not a member of Option[Float]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1s_kg7v8.scala:28:118 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithZero\u001b[0m = gradesSortedByGPAWithLetterGrade.map(\u001b[36mx\u001b[0m => (x._1, x._2._1, x._2._2))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                 ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value _2 is not a member of Option[Float]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1s_kg7v8.scala:29:125 -----------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesSortedByGPAWithLetterGradeWithZeroWithZero\u001b[0m = gradesSortedByGPAWithLetterGradeWithZero.map(\u001b[36mx\u001b[0m => (x._1, x._2._1, x._2._2, x._",
      "stdout": "",
      "timestamp": 1660010484
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> \"E\")).toMap\n        val gradesList : List[String] = grades.map(grade => gradesMap(grade))\n        gradesList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp09i0nxwy.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMap\u001b[0m : \u001b[35mMap\u001b[0m[\u001b[35mFloat\u001b[0m, \u001b[35mString\u001b[0m] = grades.map(\u001b[36mgrade\u001b[0m => (grade -> \u001b[31m\"E\"\u001b[0m)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Map[Float, String]\n\u001b[31m   |\u001b[0m                         Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Float, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660010483
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n        val gradesMapValuesSortedByKey = gradesMapValues.sortBy(_)\n        val gradesMapValuesSortedByKeyReversed = gradesMapValuesSortedByKey.reverse\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpn99y2qro.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpn99y2qro.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapValuesSortedByKeyReversedLength\u001b[0m = gradesMapValuesSortedByKeyReversedLength - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapValuesSortedByKeyReversedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapValuesSortedByKeyReversedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpn99y2qro.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapValuesSortedByKeyReversedLength\u001b[0m = gradesMapValuesSortedByKeyReversedLength - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapValuesSortedByKeyReversedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapValuesSortedByKeyReversedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpn99y2qro.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapValuesSortedByKeyReversedLength\u001b[0m = gradesMapValuesSortedByKeyReversedLength - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapValuesSortedByKeyReversedLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapValuesSortedByKeyReversedLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitio",
      "stdout": "",
      "timestamp": 1660010484
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValue\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk2knuzif.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk2knuzif.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk2knuzif.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mgradesMapSortedReversedValuesLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mgradesMapSortedReversedValuesLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk2knuzif.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mgradesMapSortedReversedValuesLength\u001b[0m = gradesMapSortedReversedValues.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[",
      "stdout": "",
      "timestamp": 1660010386
    }
  ]
}