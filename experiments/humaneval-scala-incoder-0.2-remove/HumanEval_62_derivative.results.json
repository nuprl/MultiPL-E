{
  "language": "scala",
  "name": "HumanEval_62_derivative",
  "results": [
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcb0upr8t.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg11p9401.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        val d = 0L\n        val dprev = 0L\n        val dnext = 0L\n        val dprevprev = 0L\n        val dnextnext = 0L\n        val dprevprevprev = 0L\n        val dnextnextnext = 0L\n        val dprevprevprevprev = 0L\n        val dnextnextnextnext = 0L\n        val dprevprevprevprevprev = 0L\n        val dnextnextnextnextnext = 0L\n        val dprevprevprevprevprevprev = 0L\n        val dnextnextnextnextnext = 0L\n        val dprevprevprevprevprevprev = 0L\n        val dnextnextnextnextnextnext = 0L\n        val dprevprevprevprevprevprevprev = 0L\n        val dnextnextnextnextnextnextnext = 0L\n        val dprevprevprevprevprevprevprevprev = 0L\n        val dnextnextnextnextnextnextnextnext = 0L\n        val dprevprevprevprevprevprevprevprevprev = 0L\n        val dnextnextnextnextnextnextnextnextnext = 0L\n        val dprevprevprevprevprevprevprevprevprevprev = 0L\n        val dnextnextnextnextnextnextnextnextnext = 0L\n        val dprevprevprevprevprevprevprevprevprevprev = 0L\n        val dnextnextnextnextnextnextnextnextnextnext = 0L\n        val dprevprevprevprevprevprevprevprevprevprevprev = 0L\n        val dnextnextnextnextnextnextnextnextnextnextnext = 0L\n        val dprevprevprevprevprevprevprevprevprevprevprev = 0L\n        val dnextnextnextnextnextnextnextnextnextnextnext = 0L\n        val dprevprevprevprevprevprevprevprevprevprevprev = 0L\n        val dnextnextnextnextnextnextnextnextnextnextnext = 0L\n        val dprevprevprevprevprevprevprevprevprevprevprevprev = 0L\n        val dnextnextnextnextnextnextnextnextnextnextnextnext = 0L\n        val dprevprevprevprevprevprevprevprevprevprevprevprev = 0L\n        val dnextnextnextnextnextnextnextnextnextnextnextnext = 0L\n        val dprevprevprevprevprevprevprevprevprevprevprevprev = 0L\n        val dnextnextnextnextnextnextnextnextnextnextnext\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbdf79a17.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbdf79a17.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdnextnextnextnextnext\u001b[0m = \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdnextnextnextnextnext is already defined as \u001b[33mvalue\u001b[0m \u001b[35mdnextnextnextnextnext\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbdf79a17.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdprevprevprevprevprevprev\u001b[0m = \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdprevprevprevprevprevprev is already defined as \u001b[33mvalue\u001b[0m \u001b[35mdprevprevprevprevprevprev\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbdf79a17.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdnextnextnextnextnextnextnextnextnext\u001b[0m = \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdnextnextnextnextnextnextnextnextnext is already defined as \u001b[33mvalue\u001b[0m \u001b[35mdnextnextnextnextnextnextnextnextnext\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbdf79a17.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdprevprevprevprevprevprevprevprevprevprev\u001b[0m = \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdprevprevprevprevprevprevprevprevprevprev is already defined as \u001b[33mvalue\u001b[0m \u001b[35mdprevprevprevprevprev",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynaqlg4x.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dx \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprjb4zfa_.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprjb4zfa_.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdx\u001b[0m : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = Nil\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdx is already defined as \u001b[33mvariable\u001b[0m \u001b[35mdx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprjb4zfa_.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdy\u001b[0m : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = Nil\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdy is already defined as \u001b[33mvariable\u001b[0m \u001b[35mdy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprjb4zfa_.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdp\u001b[0m : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = Nil\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdp is already defined as \u001b[33mvariable\u001b[0m \u001b[35mdp\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprjb4zfa_.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdx\u001b[0m : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = Nil\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdx is already defined as \u001b[33mvariable\u001b[0m \u001b[35mdx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprjb4zfa_.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdy\u001b[0m : \u001b[35mList\u001b[0m[",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val x0 = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xy = new Array[Long](n + 1)\n        val xxx = new Array[Long](n + 1)\n        val xxy = new Array[Long](n + 1)\n        val xyx = new Array[Long](n + 1)\n        val xyy = new Array[Long](n + 1)\n        val yyx = new Array[Long](n + 1)\n        val yyy = new Array[Long](n + 1)\n        val yx = new Array[Long](n + 1)\n        val yy = new Array[Long](n + 1)\n        val yxx = new Array[Long](n + 1)\n        val yxy = new Array[Long](n + 1)\n        val yyx = new Array[Long](n + 1)\n        val yyy = new Array[Long](n + 1)\n        val yxxx = new Array[Long](n + 1)\n        val yxxy = new Array[Long](n + 1)\n        val yxyx = new Array[Long](n + 1)\n        val yxyy = new Array[Long](n + 1)\n        val yyyx = new Array[Long](n + 1)\n        val yyyy = new Array[Long](n + 1)\n        val yxxxx = new Array[Long](n + 1)\n        val yxxxy = new Array[Long](n + 1)\n        val yxxyx = new Array[Long](n + 1)\n        val yxxyy = new Array[Long](n + 1)\n        val yxxyy = new Array[Long](n + 1)\n        val yxyyyx = new Array[Long](n + 1)\n        val yxyyyy = new Array[Long](n + 1)\n        val yxyxx = new Array[Long](n + 1)\n        val yxyxy = new Array[Long](n + 1)\n        val yxyyx = new Array[Long](n + 1)\n        val yxyyy = new Array[Long](n + 1)\n        val yxxxx = new Array[Long](n + 1)\n        val yxxxy = new Array[Long](n + 1)\n        val yxxyx = new Array[Long](n + 1)\n        val yxxyy = new Array[Long](n + 1)\n        val yxxyy = new Array[Long](n + 1)\n        val yxyyyx = \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmple77usup.scala:48:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myxyyyx\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmple77usup.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myyx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0myyx is already defined as \u001b[33mvalue\u001b[0m \u001b[35myyx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmple77usup.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myyy\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0myyy is already defined as \u001b[33mvalue\u001b[0m \u001b[35myyy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmple77usup.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myxxyy\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0myxxyy is already defined as \u001b[33mvalue\u001b[0m \u001b[35myxxyy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmple77usup.scala:43:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myxxxx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0myxxxx is already defined as ",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x59 = xs(59)\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy272za_j.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmwwrtqsj.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        for( i <- 0 until n ) {\n            if( i == 0 ) {\n                ds(i) = 1\n            } else {\n                ds(i) = xs(i) * ds(i-1)\n            }\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeft1gi48.scala:17:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmiqzplrp.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmiqzplrp.scala:13:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0md is already defined as \u001b[33mvalue\u001b[0m \u001b[35md\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmiqzplrp.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mx is already defined as \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmiqzplrp.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0my is already defined as \u001b[33mvalue\u001b[0m \u001b[35my\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmiqzplrp.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mz\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mz is already defined as \u001b[33mvalue\u001b[0m \u001b[35mz\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmiqzplrp.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mva",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcb0upr8t.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n        val x = new Array[Long](n)\n        val xx = new Array[Long](n)\n        val xxx = new Array[Long](n)\n        val xxxx = new Array[Long](n)\n        val xxxx_1 = new Array[Long](n)\n        val xxxx_2 = new Array[Long](n)\n        val xxxx_3 = new Array[Long](n)\n        val xxxx_4 = new Array[Long](n)\n        val xxxx_5 = new Array[Long](n)\n        val xxxx_6 = new Array[Long](n)\n        val xxxx_7 = new Array[Long](n)\n        val xxxx_8 = new Array[Long](n)\n        val xxxx_9 = new Array[Long](n)\n        val xxxx_10 = new Array[Long](n)\n        val xxxx_11 = new Array[Long](n)\n        val xxxx_12 = new Array[Long](n)\n        val xxxx_13 = new Array[Long](n)\n        val xxxx_14 = new Array[Long](n)\n        val xxxx_15 = new Array[Long](n)\n        val xxxx_16 = new Array[Long](n)\n        val xxxx_17 = new Array[Long](n)\n        val xxxx_18 = new Array[Long](n)\n        val xxxx_19 = new Array[Long](n)\n        val xxxx_20 = new Array[Long](n)\n        val xxxx_21 = new Array[Long](n)\n        val xxxx_22 = new Array[Long](n)\n        val xxxx_23 = new Array[Long](n)\n        val xxxx_24 = new Array[Long](n)\n        val xxxx_25 = new Array[Long](n)\n        val xxxx_26 = new Array[Long](n)\n        val xxxx_27 = new Array[Long](n)\n        val xxxx_28 = new Array[Long](n)\n        val xxxx_29 = new Array[Long](n)\n        val xxxx_30 = new Array[Long](n)\n        val xxxx_31 = new Array[Long](n)\n        val xxxx_32 = new Array[Long](n)\n        val xxxx_33 = new Array[Long](n)\n        val xxxx_34 = new Array[Long](n)\n        val xxxx_35 = new Array[Long](n)\n        val xxxx_36 = new Array[Long\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw1weyinu.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpw1weyinu.scala:51:22 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxxxx_36\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter _length of \u001b[33mconstructor\u001b[0m \u001b[35mArray\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m: (_length: Int): Array[Long]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw1weyinu.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - 1)\n            i += 1\n        }\n        var j = 0\n        while (j < n) {\n            ds(j) = 0\n            j += 1\n        }\n        var k = 0\n        while (k < (n - 1)) {\n            ds(k) = d(k) * xs(k)\n            k += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1qktisec.scala:26:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynaqlg4x.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmwwrtqsj.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            x(i) = xs(i)\n            i += 1\n        }\n        var j = 0\n        while (j < n) {\n            d(j) = xs(j) * xs(j)\n            j += 1\n        }\n        val n = d.length\n        var k = 0\n        while (k < (n - 1)) {\n            d(k) = d(k) + d(k + 1)\n            k += 1\n        }\n        val n = d.length\n        var l = 0\n        while (l < n) {\n            d(l) = d(l) + d(l + 1)\n            l += 1\n        }\n        val n = d.length\n        var m = 0\n        while (m < n) {\n            d(m) = d(m) + d(m + 1)\n            m += 1\n        }\n        val n = d.length\n        var n = 0\n        while (n + 1 < n) {\n            d(n) = d(n) + d(n + 1)\n            n += 1\n        }\n        val n = d.length\n        var o = 0\n        while (o + 1 < n) {\n            d(o) = d(o) + d(o + 1)\n            o += 1\n        }\n        val n = d.length\n        var p = 0\n        while (p + 1 < n) {\n            d(p) = d(p) + d(p + 1)\n            p += 1\n        }\n        val n = d.length\n        var q = 0\n        while (q + 1 < n) {\n            d(q) = d(q) + d(q + 1)\n            q += 1\n        }\n        val n = d.length\n        var r = 0\n        while (r + 1 < n) {\n            d(r) = d(r) + d(r + 1)\n            r += 1\n        }\n        val n = d.length\n        var s = 0\n        while (s + 1 < n) {\n            d(s) = d(s) + d(s + 1)\n            s += 1\n        }\n        val n = d.length\n        var t = 0\n        while (t + 1 < n) {\n            d(t) = d(t) + d(t + 1)\n            t += 1\n        }\n        val n = d.length\n        var u = 0\n        while (u + 1 < n) {\n            d(u) = d(u) + d(u + 1)\n            u += 1\n        }\n        val n = d.length\n        var v = 0\n        while (v + 1 < n) {\n            d(v) = d(v) + d(v + 1)\n            v += 1\n        }\n        val n = d.length\n        var w = 0\n        while (w  + 1 < n) {\n            d(w) = d(w) + d(w + 1)\n            w += 1\n        }\n        val n = d.length\n        var x = 0\n        while (x + 1 < n) {\n            d(x) = \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmppa_wqwyr.scala:102:18 --------------------------\u001b[0m\u001b[0m\n\u001b[31m102 |\u001b[0m            d(x) = \n\u001b[31m\u001b[31m    |\u001b[0m                  ^\u001b[0m\n\u001b[31m    |\u001b[0m                  expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppa_wqwyr.scala:113:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m113 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppa_wqwyr.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = d.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppa_wqwyr.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = d.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppa_wqwyr.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = d.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppa_wqwyr.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = d.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel defini",
      "stdout": "",
      "timestamp": 1659979988
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new ListBuffer[Long](n)\n        for( i <- 0 until n ) {\n            val x = xs(i)\n            ds.add(x * x * (n - 1))\n        }\n        ds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp639vsyv7.scala:9:38 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mds\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mListBuffer\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m  |\u001b[0m                                      ^\u001b[0m\n\u001b[31m  |\u001b[0mtoo many arguments for \u001b[33mconstructor\u001b[0m \u001b[35mListBuffer\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mListBuffer\u001b[0m: (): scala.collection.mutable.ListBuffer[Long]\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979977
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x = xs.head\n        val xs = xs.tail\n        val y = xs.head * x\n        val ys = xs.tail * x\n        val zs = ys.tail * x\n        val zs0 = zs.head\n        val zs1 = zs.tail\n        val zs2 = zs0.tail * x\n        val zs3 = zs1.tail * x\n        val zs4 = zs2.tail * x\n        val zs5 = zs3.tail * x\n        val zs6 = zs4.tail * x\n        val zs7 = zs5.tail * x\n        val zs8 = zs6.tail * x\n        val zs9 = zs7.tail * x\n        val zs10 = zs8.tail * x\n        val zs11 = zs9.tail * x\n        val zs12 = zs10.tail * x\n        val zs13 = zs11.tail * x\n        val zs14 = zs12.tail * x\n        val zs15 = zs13.tail * x\n        val zs16 = zs14.tail * x\n        val zs17 = zs15.tail * x\n        val zs18 = zs16.tail * x\n        val zs19 = zs17.tail * x\n        val zs20 = zs18.tail * x\n        val zs21 = zs19.tail * x\n        val zs22 = zs20.tail * x\n        val zs23 = zs21.tail * x\n        val zs24 = zs22.tail * x\n        val zs25 = zs23.tail * x\n        val zs26 = zs24.tail * x\n        val zs27 = zs25.tail * x\n        val zs28 = zs26.tail * x\n        val zs29 = zs27.tail * x\n        val zs30 = zs28.tail * x\n        val zs31 = zs29.tail * x\n        val zs32 = zs30.tail * x\n        val zs33 = zs31.tail * x\n        val zs34 = zs32.tail * x\n        val zs35 = zs33.tail * x\n        val zs36 = zs34.tail * x\n        val zs37 = z\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp6f75n5_s.scala:10:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs\u001b[0m = xs.tail\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mxs\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6f75n5_s.scala:51:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mzs37\u001b[0m = z\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: z\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6f75n5_s.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n        val x = new Array[Long](n)\n        val x2 = new Array[Long](n)\n        val x3 = new Array[Long](n)\n        val x4 = new Array[Long](n)\n        val x5 = new Array[Long](n)\n        val x6 = new Array[Long](n)\n        val x7 = new Array[Long](n)\n        val x8 = new Array[Long](n)\n        val x9 = new Array[Long](n)\n        val x10 = new Array[Long](n)\n        val x11 = new Array[Long](n)\n        val x12 = new Array[Long](n)\n        val x13 = new Array[Long](n)\n        val x14 = new Array[Long](n)\n        val x15 = new Array[Long](n)\n        val x16 = new Array[Long](n)\n        val x17 = new Array[Long](n)\n        val x18 = new Array[Long](n)\n        val x19 = new Array[Long](n)\n        val x20 = new Array[Long](n)\n        val x21 = new Array[Long](n)\n        val x22 = new Array[Long](n)\n        val x23 = new Array[Long](n)\n        val x24 = new Array[Long](n)\n        val x25 = new Array[Long](n)\n        val x26 = new Array[Long](n)\n        val x27 = new Array[Long](n)\n        val x28 = new Array[Long](n)\n        val x29 = new Array[Long](n)\n        val x30 = new Array[Long](n)\n        val x31 = new Array[Long](n)\n        val x32 = new Array[Long](n)\n        val x33 = new Array[Long](n)\n        val x34 = new Array[Long](n)\n        val x35 = new Array[Long](n)\n        val x36 = new Array[Long](n)\n        val x37 = new Array[Long](n)\n        val x38 = new Array[Long](n)\n        val x39 = new Array[Long](n)\n        val x40 = new Array[Long](n)\n        val x41 = new Array[Long](n)\n        val x42 = new Array[Long](n)\n        val x43 = new Array[Long](n)\n        val x44\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp20f0_luk.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp20f0_luk.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        val x = 1L\n        val xx = 1L\n        val xy = 1L\n        val xxx = 1L\n        val xxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n        val xxxx = 1L\n        val xxxy = 1L\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnaa_zubw.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxxxx\u001b[0m = \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxxxx is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxxxx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnaa_zubw.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxxxy\u001b[0m = \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxxxy is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxxxy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnaa_zubw.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxxxx\u001b[0m = \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxxxx is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxxxx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnaa_zubw.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxxxy\u001b[0m = \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxxxy is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxxxy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnaa_zubw.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxxxx\u001b[0m = \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxxxx is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxxxx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnaa_zubw.scala:22:12 -------------------------",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x = xs(0)\n        val xs = xs.drop(1)\n        val y = xs.sum\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.drop(1)\n        val ys = ys.\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj5cyhjmn.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj5cyhjmn.scala:13:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mys\u001b[0m = ys.drop(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mys is already defined as \u001b[33mvalue\u001b[0m \u001b[35mys\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj5cyhjmn.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mys\u001b[0m = ys.drop(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mys is already defined as \u001b[33mvalue\u001b[0m \u001b[35mys\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj5cyhjmn.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mys\u001b[0m = ys.drop(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mys is already defined as \u001b[33mvalue\u001b[0m \u001b[35mys\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj5cyhjmn.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mys\u001b[0m = ys.drop(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mys is already defined as \u001b[33mvalue\u001b[0m \u001b[35mys\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj5cyhjmn.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mys\u001b[0m = ys.drop(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mys is already def",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq94ei4eq.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            ds(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwx3xpkh1.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val x = scala.math.pow(xs.last, n - 1)\n        val xs = xs.dropRight(1)\n        val ys = xs.map(x => x * x)\n        val ys = ys.take(n - 1).reverse\n        ys.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzny195sf.scala:12:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mys\u001b[0m = ys.take(n - \u001b[31m1\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mys is already defined as \u001b[33mvalue\u001b[0m \u001b[35mys\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpzny195sf.scala:10:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs\u001b[0m = xs.dropRight(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mxs\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979975
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var d = 0L\n        var i = 0\n        while (i < xs.size) {\n            d += xs(i) * xs(i + 1)\n            i += 1\n        }\n        d / xs.size\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx0sq6i6.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        d / xs.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j = i + 1\n            while (j < n) {\n                val y = xs(j)\n                ds(i) = ds(i) + x * y\n                j += 1\n            }\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjfdcdte7.scala:17:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                j += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean j.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjfdcdte7.scala:21:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979999
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdjxe7zu6.scala:27:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdjxe7zu6.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980000
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynaqlg4x.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            result(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkbznzxv5.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        result\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (result : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i) + xs(i + 1) * xs(i + 1)\n            i += 2\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp323p_qa4.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980003
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcb0upr8t.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpou0fnk85.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpou0fnk85.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            result(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkbznzxv5.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        result\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (result : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl3x8ztqt.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var y = 0L\n        var z = 0L\n        var i = 0L\n        var j = 0L\n        var k = 0L\n        var l = 0L\n        var m = 0L\n        var n = 0L\n        var o = 0L\n        var p = 0L\n        var q = 0L\n        var r = 0L\n        var s = 0L\n        var t = 0L\n        var u = 0L\n        var v = 0L\n        var w = 0L\n        var xi = 0L\n        var yi = 0L\n        var zi = 0L\n        var i = 0L\n        var j = 0L\n        var k = 0L\n        var l = 0L\n        var m = 0L\n        var n = 0L\n        var o = 0L\n        var p = 0L\n        var q = 0L\n        var r = 0L\n        var s = 0L\n        var t = 0L\n        var u = 0L\n        var v = 0L\n        var w = 0L\n        var xi = 0L\n        var yi = 0L\n        var zi = 0L\n        var i = 0L\n        var j = 0L\n        var k = 0L\n        var l = 0L\n        var m = 0L\n        var n = 0L\n        var o = 0L\n        var p = 0L\n        var q = 0L\n        var r = 0L\n        var s = 0L\n        var t = 0L\n        var u = 0L\n        var v = 0L\n        var w = 0L\n        var xi = 0L\n        var yi = 0L\n        var zi = 0L\n        var i = 0L\n        var j = 0L\n        var k = 0L\n        var l = 0L\n        var m = 0L\n        var n = 0L\n        var o = 0L\n        var p = 0L\n        var q = 0L\n        var r = 0L\n        var s = 0L\n        var t = 0L\n        var u = 0L\n        var v = 0L\n        var w = 0L\n        var xi = 0L\n        var yi = 0L\n        var zi = 0L\n        var i = 0L\n        var j = 0L\n        var k = 0L\n        var l = 0L\n        var m = 0L\n        var n = 0L\n        var o = 0L\n        var p = 0L\n        var q = 0L\n        var r = 0L\n        var s = 0L\n        var t = 0L\n        var u = 0L\n        var v = 0L\n        var w = 0L\n        var xi = 0L\n        var yi = 0L\n        var zi = 0L\n        var i = 0L\n        var j = 0L\n        var k = 0L\n        var l = 0L\n        var m = 0L\n        var n = 0L\n        var o = 0L\n        var p = 0L\n        var q = 0L\n        var r = 0L\n        var s = 0L\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp26l_iwx0.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp26l_iwx0.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp26l_iwx0.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp26l_iwx0.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m = \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ml is already defined as \u001b[33mvariable\u001b[0m \u001b[35ml\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp26l_iwx0.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mm\u001b[0m = \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mm is already defined as \u001b[33mvariable\u001b[0m \u001b[35mm\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp26l_iwx0.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mvar\u001b[0m ",
      "stdout": "",
      "timestamp": 1659980006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        for( i <- 0 until n ) {\n            val x = xs(i)\n            val d = 0\n            for( j <- 0 until n ) {\n                d += xs(j) * xs(j + 1)\n            }\n            ds(i) = d\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgv3fklwb.scala:14:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                d += xs(j) * xs(j + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean d.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgv3fklwb.scala:18:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var y = 0L\n        var z = 0L\n        var n = 0L\n        var n1 = 1L\n        var n2 = 2L\n        var n3 = 3L\n        var n4 = 4L\n        var n5 = 5L\n        var n6 = 6L\n        var n7 = 7L\n        var n8 = 8L\n        var n9 = 9L\n        var n10 = 10L\n        var n11 = 11L\n        var n12 = 12L\n        var n13 = 13L\n        var n14 = 14L\n        var n15 = 15L\n        var n16 = 16L\n        var n17 = 17L\n        var n18 = 18L\n        var n19 = 19L\n        var n20 = 20L\n        var n21 = 21L\n        var n22 = 22L\n        var n23 = 23L\n        var n24 = 24L\n        var n25 = 25L\n        var n26 = 26L\n        var n27 = 27L\n        var n28 = 28L\n        var n29 = 29L\n        var n30 = 30L\n        var n31 = 31L\n        var n32 = 32L\n        var n33 = 33L\n        var n34 = 34L\n        var n35 = 35L\n        var n36 = 36L\n        var n37 = 37L\n        var n38 = 38L\n        var n39 = 39L\n        var n40 = 40L\n        var n41 = 41L\n        var n42 = 42L\n        var n43 = 43L\n        var n44 = 44L\n        var n45 = 45L\n        var n46 = 46L\n        var n47 = 47L\n        var n48 = 48L\n        var n49 = 49L\n        var n50 = 50L\n        var n51 = 51L\n        var n52 = 52L\n        var n53 = 53L\n        var n54 = 54L\n        var n55 = 55L\n        var n56 = 56L\n        var n57 = 57L\n        var n58 = 58L\n        var n59 = 59L\n        var n60 = 60L\n        var n61 = 61L\n        var n62 = 62L\n        var n63 = 63L\n        var n64 = 64L\n        var n65 = 65L\n        var n66 = 66L\n        var n67 = 67L\n        var n68 = 68L\n        var n69 = 69L\n        var n70 = 70L\n        var n71 = 71L\n        var n72 = 72L\n        var n73 = \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp9g5tioka.scala:85:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mn73\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9g5tioka.scala:86:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var xi : Long = 0L\n        var yi : Long = 0L\n        var i : Int = 0\n        for(i <- 0 until xs.size) {\n            xi = xs(i)\n            yi = y\n            dx = xs(i) * y\n            dy = y\n            x = xi\n            y = yi + dx\n            dx ::= dx\n            dy ::= dy\n        }\n        dx\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc3yq92xu.scala:19:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            dx = xs(i) * y\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc3yq92xu.scala:20:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            dy = y\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (y : Long)\n\u001b[31m   |\u001b[0m                 Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpc3yq92xu.scala:22:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            y = yi + dx\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m+\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Double\n\u001b[31m   |\u001b[0m (x: Float): Float\n\u001b[31m   |\u001b[0m (x: Long): Long\n\u001b[31m   |\u001b[0m (x: Int): Long\n\u001b[31m   |\u001b[0m (x: Char): Long\n\u001b[31m   |\u001b[0m (x: Short): Long\n\u001b[31m   |\u001b[0m (x: Byte): Long\n\u001b[31m   |\u001b[0m (x: String): String\n\u001b[31m   |\u001b[0mmatch arguments ((dx : List[Long]))\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc3yq92xu.scala:23:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            dx ::= dx\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   value ::= is not a member of List[Long] - did you mean List[Long].::?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc3yq92xu.scala:24:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            dy ::= dy\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   value ::= is not a member of List[Long] - did you mean List[Long].::?\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659980007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        for( i <- 0 until n ) {\n            val x = xs(i)\n            val d = 1L\n            for( j <- 0 until i ) {\n                d *= xs(j)\n            }\n            ds(i) = d\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy3dkevts.scala:14:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                d *= xs(j)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value *= is not a member of Long - did you mean d.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3dkevts.scala:18:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg11p9401.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val p = new Array[Long](n)\n        val q = new Array[Long](n)\n        val r = new Array[Long](n)\n        val s = new Array[Long](n)\n        val t = new Array[Long](n)\n        val u = new Array[Long](n)\n        val v = new Array[Long](n)\n        val w = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val p = new Array[Long](n)\n        val q = new Array[Long](n)\n        val r = new Array[Long](n)\n        val s = new Array[Long](n)\n        val t = new Array[Long](n)\n        val u = new Array[Long](n)\n        val v = new Array[Long](n)\n        val w = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val p = new Array[Long](n)\n        val q = new Array[Long](n)\n        val r = new Array[Long](n)\n        val s = new Array[Long](n)\n        val t = new Array[Long](n)\n        val u = new Array[Long](n)\n        val v = new Array[Long](n)\n        val w = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val p = new Array[Long](n)\n        val q = new Array[Long](n)\n        val r = new Array[Long](n)\n        val s = new Array[Long](n)\n        val t = new Array[Long](n)\n        val u = new Array[Long](n)\n        val v = new Array[Long](n)\n        val w = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9klq4o02.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mx is already defined as \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9klq4o02.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0my is already defined as \u001b[33mvalue\u001b[0m \u001b[35my\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9klq4o02.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mz\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mz is already defined as \u001b[33mvalue\u001b[0m \u001b[35mz\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9klq4o02.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0md is already defined as \u001b[33mvalue\u001b[0m \u001b[35md\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9klq4o02.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mp is already defined as \u001b[33mvalue\u001b[0m \u001b[35mp\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[",
      "stdout": "",
      "timestamp": 1659980006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvxpa10tm.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcb0upr8t.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x = xs.head\n        val xs = xs.tail\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * x\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpk03_l12b.scala:10:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs\u001b[0m = xs.tail\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mxs\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk03_l12b.scala:17:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq94ei4eq.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var x = 0L\n        var d = 0L\n        var dd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpho6jj8g2.scala:10:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmpho6jj8g2.scala:11:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmpho6jj8g2.scala:12:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmpho6jj8g2.scala:13:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmpho6jj8g2.scala:14:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmpho6jj8g2.scala:15:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmpho6jj8g2.scala:16:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmpho6jj8g2.scala:17:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmpho6jj8g2.scala:18:18 ----------",
      "stdout": "",
      "timestamp": 1659980006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmwwrtqsj.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp00avlv61.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynaqlg4x.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmwwrtqsj.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n + 1)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d(n) = 1\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvc4xbi02.scala:16:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail.tail.tail.tail.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6tyyqs8f.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val x = scala.math.pow(xs.last, n - 1)\n        val y = xs.drop(n - 1).foldLeft(x)(_ + _ * x)\n        List(y)\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplqlxn1is.scala:11:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        List(y)\n\u001b[31m\u001b[31m   |\u001b[0m             ^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    (y : Double)\n\u001b[31m   |\u001b[0m             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg11p9401.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq94ei4eq.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val zd = new Array[Long](n)\n        val zds = new Array[Long](n)\n        val zdd = new Array[Long](n)\n        val zdds = new Array[Long](n)\n        val zddd = new Array[Long](n)\n        val zddds = new Array[Long](n)\n        val zdddds = new Array[Long](n)\n        val zddddds = new Array[Long](n)\n        val zdddddd = new Array[Long](n)\n        val zdddddde = new Array[Long](n)\n        val zddddddes = new Array[Long](n)\n        val zddddddet = new Array[Long](n)\n        val zddddddets = new Array[Long](n)\n        val zddddddetm = new Array[Long](n)\n        val zddddddetm = new Array[Long](n)\n        val zddddddetms = new Array[Long](n)\n        val zddddddetms = new Array[Long](n)\n        val zddddddetmss = new Array[Long](n)\n        val zddddddetmsd = new Array[Long](n)\n        val zddddddetmsde = new Array[Long](n)\n        val zddddddetmsdes = new Array[Long](n)\n        val zddddddetmsdet = new Array[Long](n)\n        val zddddddetmsdets = new Array[Long](n)\n        val zddddddetmsdetm = new Array[Long](n)\n        val zddddddetmsdetms = new Array[Long](n)\n        val zddddddetmsdetmss = new Array[Long](n)\n        val zddddddetmsdetmsd = new Array[Long](n)\n        val zddddddetmsdetmsde = new Array[Long](n)\n        val zddddddetmsdetmsdes = new Array[Long](n)\n        val zddddddetmsdetmsdet = new Array[Long](n)\n        val zddddddetmsdetmsdetm = new Array[Long](n)\n        val zddddddet\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcbwkx9cf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcbwkx9cf.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mzddddddetm\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mzddddddetm is already defined as \u001b[33mvalue\u001b[0m \u001b[35mzddddddetm\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcbwkx9cf.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mzddddddetms\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mzddddddetms is already defined as \u001b[33mvalue\u001b[0m \u001b[35mzddddddetms\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbwkx9cf.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659980007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n        var n = 0L\n        var dd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n        var dd = 0.0L\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp7lrkg7c_.scala:12:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7lrkg7c_.scala:13:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7lrkg7c_.scala:14:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7lrkg7c_.scala:15:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7lrkg7c_.scala:16:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7lrkg7c_.scala:17:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7lrkg7c_.scala:18:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7lrkg7c_.scala:19:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7lrkg7c_.scala:20:17 -------------------------",
      "stdout": "",
      "timestamp": 1659980007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvxpa10tm.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val x1 = new Array[Long](n)\n        val x2 = new Array[Long](n)\n        val x3 = new Array[Long](n)\n        val x4 = new Array[Long](n)\n        val x5 = new Array[Long](n)\n        val x6 = new Array[Long](n)\n        val x7 = new Array[Long](n)\n        val x8 = new Array[Long](n)\n        val x9 = new Array[Long](n)\n        val x10 = new Array[Long](n)\n        val x11 = new Array[Long](n)\n        val x12 = new Array[Long](n)\n        val x13 = new Array[Long](n)\n        val x14 = new Array[Long](n)\n        val x15 = new Array[Long](n)\n        val x16 = new Array[Long](n)\n        val x17 = new Array[Long](n)\n        val x18 = new Array[Long](n)\n        val x19 = new Array[Long](n)\n        val x20 = new Array[Long](n)\n        val x21 = new Array[Long](n)\n        val x22 = new Array[Long](n)\n        val x23 = new Array[Long](n)\n        val x24 = new Array[Long](n)\n        val x25 = new Array[Long](n)\n        val x26 = new Array[Long](n)\n        val x27 = new Array[Long](n)\n        val x28 = new Array[Long](n)\n        val x29 = new Array[Long](n)\n        val x30 = new Array[Long](n)\n        val x31 = new Array[Long](n)\n        val x32 = new Array[Long](n)\n        val x33 = new Array[Long](n)\n        val x34 = new Array[Long](n)\n        val x35 = new Array[Long](n)\n        val x36 = new Array[Long](n)\n        val x37 = new Array[Long](n)\n        val x38 = new Array[Long](n)\n        val x39 = new Array[Long](n)\n        val x40 = new Array[Long](n)\n        val x41 = new Array[Long](n)\n        val x42 = new Array[Long](n)\n        val x43 = new Array[Long](n)\n        val x44 = new \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjswnbmz6.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjswnbmz6.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980010
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j = i + 1\n            while (j < n) {\n                val y = xs(j)\n                ds(i) = y * x\n                j += 1\n            }\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2zimjugt.scala:17:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                j += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean j.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2zimjugt.scala:21:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980022
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        val x = 1L\n        var i = 0\n        while (i < n) {\n            result(i) = xs(i) * x\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpra07v8fu.scala:16:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        result\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (result : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980023
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var x = 0L\n        var d = 0L\n        var dd = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var xx = 0.0\n        var x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprqfdzx1p.scala:111:4 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m111 |\u001b[0m    }\n\u001b[31m\u001b[31m    |\u001b[0m    ^\u001b[0m\n\u001b[31m    |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprqfdzx1p.scala:12:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mxx\u001b[0m = \u001b[31m0.0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxx is already defined as \u001b[33mvariable\u001b[0m \u001b[35mxx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprqfdzx1p.scala:13:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mxx\u001b[0m = \u001b[31m0.0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxx is already defined as \u001b[33mvariable\u001b[0m \u001b[35mxx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprqfdzx1p.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mxx\u001b[0m = \u001b[31m0.0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxx is already defined as \u001b[33mvariable\u001b[0m \u001b[35mxx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprqfdzx1p.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mxx\u001b[0m = \u001b[31m0.0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxx is already defined as \u001b[33mvariable\u001b[0m \u001b[35mxx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprqfdzx1p.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mxx\u001b[0m = \u001b[31m0.0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxx is already defined as \u001b[33mvariable\u001b[0m \u001b[35mxx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m",
      "stdout": "",
      "timestamp": 1659980025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var y = 0L\n        var z = 0L\n        var n = 0L\n        var i = 0L\n        val n = xs.length\n        val xs = xs.toList\n        val d = xs.head\n        val x = xs.tail.head\n        val y = xs.tail.tail.head\n        val z = xs.tail.tail.tail.head\n        val i = xs.tail.tail.tail.tail.head\n        val xs = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxasncy10.scala:22:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxasncy10.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = xs.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn is already defined as \u001b[33mvariable\u001b[0m \u001b[35mn\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxasncy10.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = xs.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0md is already defined as \u001b[33mvariable\u001b[0m \u001b[35md\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxasncy10.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = xs.tail.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mx is already defined as \u001b[33mvariable\u001b[0m \u001b[35mx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxasncy10.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = xs.tail.tail.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0my is already defined as \u001b[33mvariable\u001b[0m \u001b[35my\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxasncy10.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mz\u001b[0m = xs.tail.tail.tail.head\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mz is already defined as \u001b[33mvaria",
      "stdout": "",
      "timestamp": 1659980024
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val x2 = new Array[Long](n)\n        val y2 = new Array[Long](n)\n        val z2 = new Array[Long](n)\n        val x3 = new Array[Long](n)\n        val y3 = new Array[Long](n)\n        val z3 = new Array[Long](n)\n        val x4 = new Array[Long](n)\n        val y4 = new Array[Long](n)\n        val z4 = new Array[Long](n)\n        val x5 = new Array[Long](n)\n        val y5 = new Array[Long](n)\n        val z5 = new Array[Long](n)\n        val x6 = new Array[Long](n)\n        val y6 = new Array[Long](n)\n        val z6 = new Array[Long](n)\n        val x7 = new Array[Long](n)\n        val y7 = new Array[Long](n)\n        val z7 = new Array[Long](n)\n        val x8 = new Array[Long](n)\n        val y8 = new Array[Long](n)\n        val z8 = new Array[Long](n)\n        val x9 = new Array[Long](n)\n        val y9 = new Array[Long](n)\n        val z9 = new Array[Long](n)\n        val x10 = new Array[Long](n)\n        val y10 = new Array[Long](n)\n        val z10 = new Array[Long](n)\n        val x11 = new Array[Long](n)\n        val y11 = new Array[Long](n)\n        val z11 = new Array[Long](n)\n        val x12 = new Array[Long](n)\n        val y12 = new Array[Long](n)\n        val z12 = new Array[Long](n)\n        val x13 = new Array[Long](n)\n        val y13 = new Array[Long](n)\n        val z13 = new Array[Long](n)\n        val x14 = new Array[Long](n)\n        val y14 = new Array[Long](n)\n        val z14 = new Array[Long](n)\n        val x15 = new Array[Long](n)\n        val y15 = new Array[Long](n)\n        val z15 = new Array[Long](n)\n        val x16 = new Array[\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1d891i2r.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1d891i2r.scala:55:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx16\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter _length of \u001b[33mconstructor\u001b[0m \u001b[35mArray\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1d891i2r.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659980025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val z0 = new Array[Long](n)\n        val z1 = new Array[Long](n)\n        val z2 = new Array[Long](n)\n        val z3 = new Array[Long](n)\n        val z4 = new Array[Long](n)\n        val z5 = new Array[Long](n)\n        val z6 = new Array[Long](n)\n        val z7 = new Array[Long](n)\n        val z8 = new Array[Long](n)\n        val z9 = new Array[Long](n)\n        val z10 = new Array[Long](n)\n        val z11 = new Array[Long](n)\n        val z12 = new Array[Long](n)\n        val z13 = new Array[Long](n)\n        val z14 = new Array[Long](n)\n        val z15 = new Array[Long](n)\n        val z16 = new Array[Long](n)\n        val z17 = new Array[Long](n)\n        val z18 = new Array[Long](n)\n        val z19 = new Array[Long](n)\n        val z20 = new Array[Long](n)\n        val z21 = new Array[Long](n)\n        val z22 = new Array[Long](n)\n        val z23 = new Array[Long](n)\n        val z24 = new Array[Long](n)\n        val z25 = new Array[Long](n)\n        val z26 = new Array[Long](n)\n        val z27 = new Array[Long](n)\n        val z28 = new Array[Long](n)\n        val z29 = new Array[Long](n)\n        val z30 = new Array[Long](n)\n        val z31 = new Array[Long](n)\n        val z32 = new Array[Long](n)\n        val z33 = new Array[Long](n)\n        val z34 = new Array[Long](n)\n        val z35 = new Array[Long](n)\n        val z36 = new Array[Long](n)\n        val z37 = new Array[Long](n)\n        val z38 = new Array[Long](n)\n        val z39 = new Array[Long](n)\n        val z40 = new Array[Long](n)\n        val z\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbn6hc5_t.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbn6hc5_t.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980024
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpou0fnk85.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpou0fnk85.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val x2 = new Array[Long](n)\n        val x3 = new Array[Long](n)\n        val x4 = new Array[Long](n)\n        val x5 = new Array[Long](n)\n        val x6 = new Array[Long](n)\n        val x7 = new Array[Long](n)\n        val x8 = new Array[Long](n)\n        val x9 = new Array[Long](n)\n        val x10 = new Array[Long](n)\n        val x11 = new Array[Long](n)\n        val x12 = new Array[Long](n)\n        val x13 = new Array[Long](n)\n        val x14 = new Array[Long](n)\n        val x15 = new Array[Long](n)\n        val x16 = new Array[Long](n)\n        val x17 = new Array[Long](n)\n        val x18 = new Array[Long](n)\n        val x19 = new Array[Long](n)\n        val x20 = new Array[Long](n)\n        val x21 = new Array[Long](n)\n        val x22 = new Array[Long](n)\n        val x23 = new Array[Long](n)\n        val x24 = new Array[Long](n)\n        val x25 = new Array[Long](n)\n        val x26 = new Array[Long](n)\n        val x27 = new Array[Long](n)\n        val x28 = new Array[Long](n)\n        val x29 = new Array[Long](n)\n        val x30 = new Array[Long](n)\n        val x31 = new Array[Long](n)\n        val x32 = new Array[Long](n)\n        val x33 = new Array[Long](n)\n        val x34 = new Array[Long](n)\n        val x35 = new Array[Long](n)\n        val x36 = new Array[Long](n)\n        val x37 = new Array[Long](n)\n        val x38 = new Array[Long](n)\n        val x39 = new Array[Long](n)\n        val x40 = new Array[Long](n)\n        val x41 = new Array[Long](n)\n        val x42 = new Array[Long](n)\n        val x43 = new Array[Long](n)\n        val x44 = new Array\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp95bxy6cf.scala:55:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx44\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter _length of \u001b[33mconstructor\u001b[0m \u001b[35mArray\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m: (_length: Int): Array[T]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95bxy6cf.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        for( i <- 0 until n ) {\n            val x = xs(i)\n            val j = n - i - 1\n            if( j > 0 ) {\n                ds(i) = x * ds(j)\n            }\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpskhese3i.scala:17:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail.tail.tail.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmponn7uqlp.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980026
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcb0upr8t.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var xpow = 0L\n        var xpow2 = 0L\n        var xpow3 = 0L\n        var xpow4 = 0L\n        var xpow5 = 0L\n        var xpow6 = 0L\n        var xpow7 = 0L\n        var xpow8 = 0L\n        var xpow9 = 0L\n        var xpow10 = 0L\n        var xpow11 = 0L\n        var xpow12 = 0L\n        var xpow13 = 0L\n        var xpow14 = 0L\n        var xpow15 = 0L\n        var xpow16 = 0L\n        var xpow17 = 0L\n        var xpow18 = 0L\n        var xpow19 = 0L\n        var xpow20 = 0L\n        var xpow21 = 0L\n        var xpow22 = 0L\n        var xpow23 = 0L\n        var xpow24 = 0L\n        var xpow25 = 0L\n        var xpow26 = 0L\n        var xpow27 = 0L\n        var xpow28 = 0L\n        var xpow29 = 0L\n        var xpow30 = 0L\n        var xpow31 = 0L\n        var xpow32 = 0L\n        var xpow33 = 0L\n        var xpow34 = 0L\n        var xpow35 = 0L\n        var xpow36 = 0L\n        var xpow37 = 0L\n        var xpow38 = 0L\n        var xpow39 = 0L\n        var xpow40 = 0L\n        var xpow41 = 0L\n        var xpow42 = 0L\n        var xpow43 = 0L\n        var xpow44 = 0L\n        var xpow45 = 0L\n        var xpow46 = 0L\n        var xpow47 = 0L\n        var xpow48 = 0L\n        var xpow49 = 0L\n        var xpow50 = 0L\n        var xpow51 = 0L\n        var xpow52 = 0L\n        var xpow53 = 0L\n        var xpow54 = 0L\n        var xpow55 = 0L\n        var xpow56 = 0L\n        var xpow57 = 0L\n        var xpow58 = 0L\n        var xpow59 = 0L\n        var xpow60 = 0L\n        var xpow61 = 0L\n        var xpow62 = 0L\n        var xpow63 = 0L\n        var xpow64 = 0L\n        var xpow65 = 0L\n        var xpow66 = 0L\n        var xpow67 = 0L\n        var xpow68 = 0L\n        var xpow69 = 0L\n        var xpow70 = 0L\n        var xpow71 = 0L\n        var xpow72 = 0L\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp16d2alya.scala:82:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n        var n = 0L\n        var dd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n        var ddd = 0.0L\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp308ol2s5.scala:12:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp308ol2s5.scala:13:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp308ol2s5.scala:14:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp308ol2s5.scala:15:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp308ol2s5.scala:16:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp308ol2s5.scala:17:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp308ol2s5.scala:18:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp308ol2s5.scala:19:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mddd\u001b[0m = 0.0L\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Invalid literal number\n\u001b[31m\u001b[31m-- Error: /tmp/tmp308ol2s5.scala:20:18 ----------",
      "stdout": "",
      "timestamp": 1659980026
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail.tail.tail.tail.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6tyyqs8f.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x59 = xs(59)\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy272za_j.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        for( i <- 0 until n ) {\n            val x = xs(i)\n            if( i == 0 ) {\n                ds(i) = 1\n            } else {\n                ds(i) = x * ds(i-1) + xs(i-1) * ds(i-2) + xs(i-2) * ds(i-3) + xs(i-3) * ds(i-4) + xs(i-4) * ds(i-5) + xs(i-5) * ds(i-6) + xs(i-6) * ds(i-7) + xs(i-7) * ds(i-8) + xs(i-8) * ds(i-9) + xs(i-9) * ds(i-10) + xs(i-10) * ds(i-11) + xs(i-11) * ds(i-12) + xs(i-12) * ds(i-13) + xs(i-13) * ds(i-14) + xs(i-14) * ds(i-15) + xs(i-15) * ds(i-16) + xs(i-16) * ds(i-17) + xs(i-17) * ds(i-18) + xs(i-18) * ds(i-19) + xs(i-19) * ds(i-20) + xs(i-20) * ds(i-21) + xs(i-21) * ds(i-22) + xs(i-22) * ds(i-23) + xs(i-23) * ds(i-24) + xs(i-24) * ds(i-25) + xs(i-25) * ds(i-26) + xs(i-26) * ds(i-27) + xs(i-27) * ds(i-28) + xs(i-28) * ds(i-29) + xs(i-29) * ds(i-30) + xs(i-30) * ds(i-31)\n            }\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptztzm9zf.scala:18:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980027
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpou0fnk85.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpou0fnk85.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg11p9401.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val x = xs(0)\n        val xs = xs.drop(1)\n        val ys = xs.map(x => x * x)\n        val zs = xs.map(x => x * x * x)\n        val ds = xs.map(x => x * x * x * x)\n        val dz = xs.map(x => x * x * x * x * x)\n        val dd = xs.map(x => x * x * x * x * x * x)\n        val dc = xs.map(x => x * x * x * x * x * x * x * x)\n        val dp = xs.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8n34rbyn.scala:18:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8n34rbyn.scala:19:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m^^^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but 'end of statement' found\nException in thread \"main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1521)\n\tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\tat dotty.tools.dotc.ast.untpd$UntypedTreeAccumulator.foldMoreCases(untpd.scala:739)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1625)\n\tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\tat dotty.tools.dotc.ast.untpd$UntypedTreeAccumulator.foldMoreCases(untpd.scala:739)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1625)\n\tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\tat dotty.tools.dotc.ast.untpd$UntypedTreeAccumulator.foldMoreCases(untpd.sc",
      "stdout": "java.lang.StackOverflowError while compiling /tmp/tmp8n34rbyn.scala\n",
      "timestamp": 1659980013
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq94ei4eq.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x = scala.math.pow(xs(n-1), n-1)\n        val y = scala.math.pow(xs(n-2), n-2) * x\n        val z = scala.math.pow(xs(n-3), n-3) * x * x\n        val result = new ArrayList[Long](n)\n        result.add(1)\n        result.add(x)\n        result.add(y)\n        result.add(z)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfto62sv9.scala:12:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980020
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new ArrayList[Long](n)\n        var i = 0\n        while (i < n) {\n            result(i) = xs(i) / xs(n - 1)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv2z_k58d.scala:9:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m  |\u001b[0m                         ^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                         Not found: type ArrayList\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980020
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            result(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkbznzxv5.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        result\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (result : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new ListBuffer[Long](n)\n        for( i <- 0 until n ) {\n            val x = xs(i)\n            if( i == 0 ) {\n                ds += x\n            } else {\n                val y = xs(i-1)\n                val dx = x * y\n                val dy = xs(i-2) * y\n                ds += dx\n                ds += dy\n            }\n        }\n        ds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpl8_2cl3q.scala:9:38 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mds\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mListBuffer\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m  |\u001b[0m                                      ^\u001b[0m\n\u001b[31m  |\u001b[0mtoo many arguments for \u001b[33mconstructor\u001b[0m \u001b[35mListBuffer\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mListBuffer\u001b[0m: (): scala.collection.mutable.ListBuffer[Long]\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980020
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvxpa10tm.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x = scala.math.pow(xs(n-1), xs(n-2))\n        val y = scala.math.pow(xs(n-2), xs(n-1))\n        val z = (xs(n-1) * xs(n-2))\n        val result = new ArrayList[Long](n)\n        for (i<-0 until n) {\n            result(i) = xs(i-1) * x + xs(i-2) * y + xs(i-3) * z + xs(i-4) * x^2 + xs(i-5) * x^3 + xs(i-6) * x^4 + xs(i-7) * x^5 + xs(i-8) * x^6 + xs(i-9) * x^7 + xs(i-10) * x^8 + xs(i-11) * x^9 + xs(i-12) * x^10 + xs(i-13) * x^11 + xs(i-14) * x^12 + xs(i-15) * x^13 + xs(i-16) * x^14 + xs(i-17) * x^15 + xs(i-18) * x^16 + xs(i-19) * x^17 + xs(i-20) * x^18 + xs(i-21) * x^19 + xs(i-22) * x^20 + xs(i-23) * x^21 + xs(i-24) * x^22 + xs(i-25) * x^23 + xs(i-26) * x^24 + xs(i-27) * x^25 + xs(i-28) * x^26 + xs(i-29) * x^27 + xs(i-30) * x^28 + xs(i-31) * x^29 + xs(i-32) * x^30 + xs(i-33) * x^31 + xs(i-34) * x^32 + xs(i-35) * x^33 + xs(i-36) * x^34 + xs(i-37) * x^35 + xs(i-38) * x^36 + xs(i-39) * x^37 + xs(i-40) * x^38 + xs(i-41) * x^39 + xs(i-42) * x^40 + xs(i-43) * x^41 + xs(i-44) * x^42 + xs(i-45) * x^43 + xs(i-46) * x^44 + xs(i-47) * x^45 + xs(i-48) * x^46 + xs(i-49) * x^47 + xs(i-50) * x^\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpa_ovfs_1.scala:14:893 --------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result(i) = xs(i-\u001b[31m1\u001b[0m) * x + xs(i-\u001b[31m2\u001b[0m) * y + xs(i-\u001b[31m3\u001b[0m) * z + xs(i-\u001b[31m4\u001b[0m) * x^\u001b[31m2\u001b[0m + xs(i-\u001b[31m5\u001b[0m) * x^\u001b[31m3\u001b[0m + xs(i-\u001b[31m6\u001b[0m) * x^\u001b[31m4\u001b[0m + xs(i-\u001b[31m7\u001b[0m) * x^\u001b[31m5\u001b[0m + xs(i-\u001b[31m8\u001b[0m) * x^\u001b[31m6\u001b[0m + xs(i-\u001b[31m9\u001b[0m) * x^\u001b[31m7\u001b[0m + xs(i-\u001b[31m10\u001b[0m) * x^\u001b[31m8\u001b[0m + xs(i-\u001b[31m11\u001b[0m) * x^\u001b[31m9\u001b[0m + xs(i-\u001b[31m12\u001b[0m) * x^\u001b[31m10\u001b[0m + xs(i-\u001b[31m13\u001b[0m) * x^\u001b[31m11\u001b[0m + xs(i-\u001b[31m14\u001b[0m) * x^\u001b[31m12\u001b[0m + xs(i-\u001b[31m15\u001b[0m) * x^\u001b[31m13\u001b[0m + xs(i-\u001b[31m16\u001b[0m) * x^\u001b[31m14\u001b[0m + xs(i-\u001b[31m17\u001b[0m) * x^\u001b[31m15\u001b[0m + xs(i-\u001b[31m18\u001b[0m) * x^\u001b[31m16\u001b[0m + xs(i-\u001b[31m19\u001b[0m) * x^\u001b[31m17\u001b[0m + xs(i-\u001b[31m20\u001b[0m) * x^\u001b[31m18\u001b[0m + xs(i-\u001b[31m21\u001b[0m) * x^\u001b[31m19\u001b[0m + xs(i-\u001b[31m22\u001b[0m) * x^\u001b[31m20\u001b[0m + xs(i-\u001b[31m23\u001b[0m) * x^\u001b[31m21\u001b[0m + xs(i-\u001b[31m24\u001b[0m) * x^\u001b[31m22\u001b[0m + xs(i-\u001b[31m25\u001b[0m) * x^\u001b[31m23\u001b[0m + xs(i-\u001b[31m26\u001b[0m) * x^\u001b[31m24\u001b[0m + xs(i-\u001b[31m27\u001b[0m) * x^\u001b[31m25\u001b[0m + xs(i-\u001b[31m28\u001b[0m) * x^\u001b[31m26\u001b[0m + xs(i-\u001b[31m29\u001b[0m) * x^\u001b[31m27\u001b[0m + xs(i-\u001b[31m30\u001b[0m) * x^\u001b[31m28\u001b[0m + xs(i-\u001b[31m31\u001b[0m) * x^\u001b[31m29\u001b[0m + xs(i-\u001b[31m32\u001b[0m) * x^\u001b[31m30\u001b[0m + xs(i-\u001b[31m33\u001b[0m) * x^\u001b[31m31\u001b[0m + xs(i-\u001b[31m34\u001b[0m) * x^\u001b[31m32\u001b[0m + xs(i-\u001b[31m35\u001b[0m) * x^\u001b[31m33\u001b[0m + xs(i-\u001b[31m36\u001b[0m) * x^\u001b[31m34\u001b[0m + xs(i-\u001b[31m37\u001b[0m) * x^\u001b[31m35\u001b[0m + xs(i-\u001b[31m38\u001b[0m) * x^\u001b[31m36\u001b[0m + xs(i-\u001b[31m39\u001b[0m) * x^\u001b[31m37\u001b[0m + xs(i-\u001b[31m40\u001b[0m) * x^\u001b[31m38\u001b[0m + xs(i-\u001b[31m41\u001b[0m) * x^\u001b[31m39\u001b[0m + xs(i-\u001b[31m42\u001b[0m) * x^\u001b[31m40\u001b[0m + xs(i-\u001b[31m43\u001b[0m) * x^\u001b[31m41\u001b[0m + xs(i-\u001b[31m44\u001b[0m) * x^\u001b[31m42\u001b[0m + xs(i-\u001b[31m45\u001b[0m) * x^\u001b[31m43\u001b[0m + xs(i-\u001b[31m46\u001b[0m) * x^\u001b[31m44\u001b[0m + xs(i-\u001b[31m47\u001b[0m) * x^\u001b[31m45\u001b[0m + xs(i-\u001b[31m48\u001b[0m) * x^\u001b[31m46\u001b[0m + xs(i-\u001b[31m49\u001b[0m) * x^\u001b[31m47\u001b[0m + xs(i-\u001b[31m50\u001b[0m) * x^\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                ",
      "stdout": "",
      "timestamp": 1659980027
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j = i + 1\n            while (j < n) {\n                val xj = xs(j)\n                val term = xj * (x - xj)\n                val dterm = term * (x - xj)\n                ds(i) = ds.updated(i, dterm)\n                j += 2\n            }\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaviw4kd1.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                ds(i) = ds.updated(i, dterm)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    \u001b[1m\u001b[31mArray\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m                        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaviw4kd1.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                j += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean j.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaviw4kd1.scala:23:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659980029
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var xpow = 0L\n        var xpow2 = 0L\n        var xpow3 = 0L\n        var xpow4 = 0L\n        var xpow5 = 0L\n        var xpow6 = 0L\n        var xpow7 = 0L\n        var xpow8 = 0L\n        var xpow9 = 0L\n        var xpow10 = 0L\n        var xpow11 = 0L\n        var xpow12 = 0L\n        var xpow13 = 0L\n        var xpow14 = 0L\n        var xpow15 = 0L\n        var xpow16 = 0L\n        var xpow17 = 0L\n        var xpow18 = 0L\n        var xpow19 = 0L\n        var xpow20 = 0L\n        var xpow21 = 0L\n        var xpow22 = 0L\n        var xpow23 = 0L\n        var xpow24 = 0L\n        var xpow25 = 0L\n        var xpow26 = 0L\n        var xpow27 = 0L\n        var xpow28 = 0L\n        var xpow29 = 0L\n        var xpow30 = 0L\n        var xpow31 = 0L\n        var xpow32 = 0L\n        var xpow33 = 0L\n        var xpow34 = 0L\n        var xpow35 = 0L\n        var xpow36 = 0L\n        var xpow37 = 0L\n        var xpow38 = 0L\n        var xpow39 = 0L\n        var xpow40 = 0L\n        var xpow41 = 0L\n        var xpow42 = 0L\n        var xpow43 = 0L\n        var xpow44 = 0L\n        var xpow45 = 0L\n        var xpow46 = 0L\n        var xpow47 = 0L\n        var xpow48 = 0L\n        var xpow49 = 0L\n        var xpow50 = 0L\n        var xpow51 = 0L\n        var xpow52 = 0L\n        var xpow53 = 0L\n        var xpow54 = 0L\n        var xpow55 = 0L\n        var xpow56 = 0L\n        var xpow57 = 0L\n        var xpow58 = 0L\n        var xpow59 = 0L\n        var xpow60 = 0L\n        var xpow61 = 0L\n        var xpow62 = 0L\n        var xpow63 = 0L\n        var xpow64 = 0L\n        var xpow65 = 0L\n        var xpow66 = 0L\n        var xpow67 = 0L\n        var xpow68 = 0L\n        var xpow69 = 0L\n        var xpow70 = 0L\n        var xpow71 = 0L\n        var xpow72 = 0L\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp16d2alya.scala:82:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5qjpua9z.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980027
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x59 = xs(59)\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy272za_j.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x59 = xs(59)\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy272za_j.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            val x = xs(i)\n            val d = 1\n            while (i < n) {\n                val xx = xs(i)\n                d *= xx\n                i += 1\n            }\n            ds(i) = d\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn2llr1ux.scala:16:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                d *= xx\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value *= is not a member of Int - did you mean d.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn2llr1ux.scala:22:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980029
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        for( i <- 0 until n ) {\n            val x = xs(i)\n            if( i == 0 ) {\n                ds(i) = 1\n            } else {\n                ds(i) = x * ds(i-1) + xs(i-1) * ds(i-2) + xs(i-2) * ds(i-3)\n            }\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5plxnwbd.scala:18:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980027
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            ds(i) = xs(i) * xs(i)\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3kqe6xb.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980028
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            ds(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwx3xpkh1.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x = new Array[Long](n + 1)\n        xs(0) = 1\n        xs(1) = xs(0)\n        for (i<-1 to n-1) {\n            xs(i+1) = xs(i) * x\n        }\n        xs\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpshp7r3yr.scala:10:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        xs(\u001b[31m0\u001b[0m) = \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m   value update is not a member of List[Long] - did you mean xs.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpshp7r3yr.scala:11:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        xs(\u001b[31m1\u001b[0m) = xs(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m   value update is not a member of List[Long] - did you mean xs.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpshp7r3yr.scala:13:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            xs(i+\u001b[31m1\u001b[0m) = xs(i) * x\n\u001b[31m\u001b[31m   |\u001b[0m            ^^\u001b[0m\n\u001b[31m   |\u001b[0m   value update is not a member of List[Long] - did you mean xs.updated?\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpshp7r3yr.scala:13:28 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            xs(i+\u001b[31m1\u001b[0m) = xs(i) * x\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m*\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Double\n\u001b[31m   |\u001b[0m (x: Float): Float\n\u001b[31m   |\u001b[0m (x: Long): Long\n\u001b[31m   |\u001b[0m (x: Int): Long\n\u001b[31m   |\u001b[0m (x: Char): Long\n\u001b[31m   |\u001b[0m (x: Short): Long\n\u001b[31m   |\u001b[0m (x: Byte): Long\n\u001b[31m   |\u001b[0mmatch arguments ((x : Array[Long]))\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659980034
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n + 1)\n        var i = 0\n        var j = 0\n        while (i < n) {\n            d(j) = xs(i)\n            i += 1\n            j += 1\n        }\n        d(n) = 1\n        d(0) = 0\n        d \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpicvdwx5_.scala:19:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        d \n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980035
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j = i + 1\n            while (j < n) {\n                val y = xs(j)\n                ds(i) = ds(i) + x * y\n                j += 1\n            }\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjfdcdte7.scala:17:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                j += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean j.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjfdcdte7.scala:21:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979999
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        val x = 1L\n        val x0 = x(0)\n        val x1 = x(1)\n        val x2 = x(2)\n        val x3 = x(3)\n        val x4 = x(4)\n        val x5 = x(5)\n        val x6 = x(6)\n        val x7 = x(7)\n        val x8 = x(8)\n        val x9 = x(9)\n        val x10 = x(10)\n        val x11 = x(11)\n        val x12 = x(12)\n        val x13 = x(13)\n        val x14 = x(14)\n        val x15 = x(15)\n        val x16 = x(16)\n        val x17 = x(17)\n        val x18 = x(18)\n        val x19 = x(19)\n        val x20 = x(20)\n        val x21 = x(21)\n        val x22 = x(22)\n        val x23 = x(23)\n        val x24 = x(24)\n        val x25 = x(25)\n        val x26 = x(26)\n        val x27 = x(27)\n        val x28 = x(28)\n        val x29 = x(29)\n        val x30 = x(30)\n        val x31 = x(31)\n        val x32 = x(32)\n        val x33 = x(33)\n        val x34 = x(34)\n        val x35 = x(35)\n        val x36 = x(36)\n        val x37 = x(37)\n        val x38 = x(38)\n        val x39 = x(39)\n        val x40 = x(40)\n        val x41 = x(41)\n        val x42 = x(42)\n        val x43 = x(43)\n        val x44 = x(44)\n        val x45 = x(45)\n        val x46 = x(46)\n        val x47 = x(47)\n        val x48 = x(48)\n        val x49 = x(49)\n        val x50 = x(50)\n        val x51 = x(51)\n        val x52 = x(52)\n        val x53 = x(53)\n        val x54 = x(54)\n        val x55 = x(55)\n        val x56 = x(56)\n        val x57 = x(57)\n        val x58 = x(58)\n        val x59 = x(59)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpubi9720k.scala:11:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx0\u001b[0m = x(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpubi9720k.scala:12:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx1\u001b[0m = x(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpubi9720k.scala:13:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx2\u001b[0m = x(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpubi9720k.scala:14:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx3\u001b[0m = x(\u001b[31m3\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpubi9720k.scala:15:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx4\u001b[0m = x(\u001b[31m4\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpubi9720k.scala:16:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx5\u001b[0m = x(\u001b[31m5\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ",
      "stdout": "",
      "timestamp": 1659980042
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n        val x = new Array[Long](n)\n        val x2 = new Array[Long](n)\n        val x3 = new Array[Long](n)\n        val x4 = new Array[Long](n)\n        val x5 = new Array[Long](n)\n        val x6 = new Array[Long](n)\n        val x7 = new Array[Long](n)\n        val x8 = new Array[Long](n)\n        val x9 = new Array[Long](n)\n        val x10 = new Array[Long](n)\n        val x11 = new Array[Long](n)\n        val x12 = new Array[Long](n)\n        val x13 = new Array[Long](n)\n        val x14 = new Array[Long](n)\n        val x15 = new Array[Long](n)\n        val x16 = new Array[Long](n)\n        val x17 = new Array[Long](n)\n        val x18 = new Array[Long](n)\n        val x19 = new Array[Long](n)\n        val x20 = new Array[Long](n)\n        val x21 = new Array[Long](n)\n        val x22 = new Array[Long](n)\n        val x23 = new Array[Long](n)\n        val x24 = new Array[Long](n)\n        val x25 = new Array[Long](n)\n        val x26 = new Array[Long](n)\n        val x27 = new Array[Long](n)\n        val x28 = new Array[Long](n)\n        val x29 = new Array[Long](n)\n        val x30 = new Array[Long](n)\n        val x31 = new Array[Long](n)\n        val x32 = new Array[Long](n)\n        val x33 = new Array[Long](n)\n        val x34 = new Array[Long](n)\n        val x35 = new Array[Long](n)\n        val x36 = new Array[Long](n)\n        val x37 = new Array[Long](n)\n        val x38 = new Array[Long](n)\n        val x39 = new Array[Long](n)\n        val x40 = new Array[Long](n)\n        val x41 = new Array[Long](n)\n        val x42 = new Array[Long](n)\n        val x43 = new Array[Long](n)\n        val x44\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp20f0_luk.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp20f0_luk.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        val x = new Array[Long](n)\n        val xx = new Array[Long](n)\n        val xxx = new Array[Long](n)\n        val xxx2 = new Array[Long](n)\n        val xxx4 = new Array[Long](n)\n        val xxx6 = new Array[Long](n)\n        val xxx8 = new Array[Long](n)\n        val xxx10 = new Array[Long](n)\n        val xxx12 = new Array[Long](n)\n        val xxx14 = new Array[Long](n)\n        val xxx16 = new Array[Long](n)\n        val xxx18 = new Array[Long](n)\n        val xxx20 = new Array[Long](n)\n        val xx21 = new Array[Long](n)\n        val xxx22 = new Array[Long](n)\n        val xxx24 = new Array[Long](n)\n        val xxx26 = new Array[Long](n)\n        val xxx28 = new Array[Long](n)\n        val xxx30 = new Array[Long](n)\n        val xxx32 = new Array[Long](n)\n        val xxx34 = new Array[Long](n)\n        val xxx36 = new Array[Long](n)\n        val xxx38 = new Array[Long](n)\n        val xxx40 = new Array[Long](n)\n        val xxx52 = new Array[Long](n)\n        val xxx60 = new Array[Long](n)\n        val xxx72 = new Array[Long](n)\n        val xxx84 = new Array[Long](n)\n        val xxx96 = new Array[Long](n)\n        val xxx108 = new Array[Long](n)\n        val xxx120 = new Array[Long](n)\n        val xxx132 = new Array[Long](n)\n        val xxx144 = new Array[Long](n)\n        val xxx156 = new Array[Long](n)\n        val xxx168 = new Array[Long](n)\n        val xxx180 = new Array[Long](n)\n        val xxx192 = new Array[Long](n)\n        val xxx204 = new Array[Long](n)\n        val xx216 = new Array[Long](n)\n        val xx218 = new Array[Long](n)\n        val xx220 = new Array[Long](n)\n        val xxx222 = new Array[Long](n)\n        val xxx224 = new Array[Long](n)\n        val xxx226 = new Array[Long](n)\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnvy4ypmf.scala:54:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980042
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            result(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkbznzxv5.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        result\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (result : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynaqlg4x.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq94ei4eq.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n + 1)\n        ds(0) = 1\n        for (i<-n;i>=0;i--) ds(i) = xs(i) * ds(i-1)\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnl3s6fkd.scala:11:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i<-n;i>=\u001b[31m0\u001b[0m;i--) ds(i) = xs(i) * ds(i-\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpnl3s6fkd.scala:11:26 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i<-n;i>=\u001b[31m0\u001b[0m;i--) ds(i) = xs(i) * ds(i-\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnl3s6fkd.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i<-n;i>=\u001b[31m0\u001b[0m;i--) ds(i) = xs(i) * ds(i-\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                value foreach is not a member of Int\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnl3s6fkd.scala:12:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659980044
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvxpa10tm.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmwwrtqsj.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        for( i <- 0 until n ) {\n            val x = xs(i)\n            val j = n - 1\n            while( j >= 0 ) {\n                val y = (xs(j) + x * xs(j + 1))\n                if( y > 0 ) ds(j) = y\n                j -= 1\n            }\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpet2w0ml0.scala:16:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                j -= \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value -= is not a member of Int - did you mean j.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpet2w0ml0.scala:19:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980045
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dn \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4jf3yp2k.scala:67:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4jf3yp2k.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdn\u001b[0m : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = Nil\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdn is already defined as \u001b[33mvariable\u001b[0m \u001b[35mdn\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4jf3yp2k.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdn\u001b[0m : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = Nil\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdn is already defined as \u001b[33mvariable\u001b[0m \u001b[35mdn\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4jf3yp2k.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdn\u001b[0m : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = Nil\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdn is already defined as \u001b[33mvariable\u001b[0m \u001b[35mdn\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4jf3yp2k.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdn\u001b[0m : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = Nil\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdn is already defined as \u001b[33mvariable\u001b[0m \u001b[35mdn\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4jf3yp2k.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdn\u001b[0m : \u001b[35mList\u001b[0m[",
      "stdout": "",
      "timestamp": 1659980044
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        val x = new Array[Long](n)\n        val xx = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xxx = new Array[Long](n)\n        val xxy = new Array[Long](n)\n        val xyx = new Array[Long](n)\n        val xyy = new Array[Long](n)\n        val xxxyy = new Array[Long](n)\n        val xxxyx = new Array[Long](n)\n        val xxxyy = new Array[Long](n)\n        val xyxx = new Array[Long](n)\n        val xyxy = new Array[Long](n)\n        val xyy = new Array[Long](n)\n        val xxyy = new Array[Long](n)\n        val xxyx = new Array[Long](n)\n        val xxyy = new Array[Long](n)\n        val xx = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val zx = new Array[Long](n)\n        val zy = new Array[Long](n)\n        val zxx = new Array[Long](n)\n        val zxy = new Array[Long](n)\n        val zyx = new Array[Long](n)\n        val zyy = new Array[Long](n)\n        val zz = new Array[Long](n)\n        val zzx = new Array[Long](n)\n        val zzy = new Array[Long](n)\n        val zzz = new Array[Long](n)\n        val zzzx = new Array[Long](n)\n        val zzzy = new Array[Long](n)\n        val zzzz = new Array[Long](n)\n        val zzzzx = new Array[Long](n)\n        val zzzzy = new Array[Long](n)\n        val zzzzz = new Array[Long](n)\n        val zzzzzx = new Array[Long](n)\n        val zzzzzy = new Array[Long](n)\n        val zzzzzz = new Array[Long](n)\n        val zzzzzzx = new Array[Long](n)\n        val zzzzzzy = new Array[Long](n)\n        val zzzzzzz = new Array[Long](n)\n        val zzzzzzzx = new Array[Long](n)\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1uq2yj0v.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxxxyy\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxxxyy is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxxxyy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1uq2yj0v.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxyy\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxyy is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxyy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1uq2yj0v.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxxyy\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxxyy is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxxyy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1uq2yj0v.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxx is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1uq2yj0v.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mx is already defined as \u001b[",
      "stdout": "",
      "timestamp": 1659980046
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        val x = 1L\n        val xs = xs.toList\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpg4fs9h8_.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpg4fs9h8_.scala:11:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs\u001b[0m = xs.toList\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mxs\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg4fs9h8_.scala:29:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659980044
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x = xs(0)\n        val xs = xs.drop(1)\n        val ys = xs.map(x => x * x)\n        val zs = xs.map(x => x * x * x)\n        val yzs = ys.zip(zs)\n        val yzsLength = yzs.length\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n        val yzsLength = yzsLength - 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprca_1yyu.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myzsLength\u001b[0m = yzsLength - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0myzsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35myzsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprca_1yyu.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myzsLength\u001b[0m = yzsLength - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0myzsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35myzsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprca_1yyu.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myzsLength\u001b[0m = yzsLength - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0myzsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35myzsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprca_1yyu.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myzsLength\u001b[0m = yzsLength - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0myzsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35myzsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprca_1yyu.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myzsLength\u001b[0m = yzsLength - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0myzsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35myzsLength\u001b",
      "stdout": "",
      "timestamp": 1659980045
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq94ei4eq.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val result = new Array[Long](n)\n        val x = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val d = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjr_1erre.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjr_1erre.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxs is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxs\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjr_1erre.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx0\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mx0 is already defined as \u001b[33mvalue\u001b[0m \u001b[35mx0\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjr_1erre.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxs is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxs\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjr_1erre.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx0\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mx0 is already defined as \u001b[33mvalue\u001b[0m \u001b[35mx0\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjr_1erre.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0",
      "stdout": "",
      "timestamp": 1659980047
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcb0upr8t.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x59 = xs(59)\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy272za_j.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x = xs(n - 1)\n        val xs = xs.dropRight(1)\n        val ys = xs.map(x => x * x)\n        val ys = ys.take(n).reverse\n        ys.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplig_7vhf.scala:12:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mys\u001b[0m = ys.take(n).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mys is already defined as \u001b[33mvalue\u001b[0m \u001b[35mys\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmplig_7vhf.scala:10:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs\u001b[0m = xs.dropRight(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mxs\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var dx: List[Long] = Nil\n        var d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9gt1opyy.scala:67:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9gt1opyy.scala:13:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdx\u001b[0m: \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = Nil\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdx is already defined as \u001b[33mvariable\u001b[0m \u001b[35mdx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9gt1opyy.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdy\u001b[0m: \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = Nil\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdy is already defined as \u001b[33mvariable\u001b[0m \u001b[35mdy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9gt1opyy.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdx\u001b[0m: \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = Nil\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdx is already defined as \u001b[33mvariable\u001b[0m \u001b[35mdx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9gt1opyy.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdy\u001b[0m: \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = Nil\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdy is already defined as \u001b[33mvariable\u001b[0m \u001b[35mdy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9gt1opyy.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdx\u001b[0m: \u001b[35mList\u001b[0m[\u001b[35mLong",
      "stdout": "",
      "timestamp": 1659980047
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var x = 0L\n        var d = 0L\n        var dx : List[Long] = Nil\n        var i = 0\n        while(i < xs.size) {\n            x += 1L\n            d += 1L\n            dx :+= d\n            i += 1\n        }\n        dx\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2a24v19f.scala:21)\n\tat Problem.main(tmp2a24v19f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659980049
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            val x = xs(i)\n            val d = 1\n            while (i < n) {\n                val xx = xs(i)\n                d *= xx - x\n                i += 1\n            }\n            ds(i) = d\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpna9sfrpj.scala:16:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                d *= xx - x\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value *= is not a member of Int - did you mean d.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpna9sfrpj.scala:21:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980048
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val x2 = new Array[Long](n)\n        val x3 = new Array[Long](n)\n        val x4 = new Array[Long](n)\n        val x5 = new Array[Long](n)\n        val x6 = new Array[Long](n)\n        val x7 = new Array[Long](n)\n        val x8 = new Array[Long](n)\n        val x9 = new Array[Long](n)\n        val x10 = new Array[Long](n)\n        val x11 = new Array[Long](n)\n        val x12 = new Array[Long](n)\n        val x13 = new Array[Long](n)\n        val x14 = new Array[Long](n)\n        val x15 = new Array[Long](n)\n        val x16 = new Array[Long](n)\n        val x17 = new Array[Long](n)\n        val x18 = new Array[Long](n)\n        val x19 = new Array[Long](n)\n        val x20 = new Array[Long](n)\n        val x21 = new Array[Long](n)\n        val x22 = new Array[Long](n)\n        val x23 = new Array[Long](n)\n        val x24 = new Array[Long](n)\n        val x25 = new Array[Long](n)\n        val x26 = new Array[Long](n)\n        val x27 = new Array[Long](n)\n        val x28 = new Array[Long](n)\n        val x29 = new Array[Long](n)\n        val x30 = new Array[Long](n)\n        val x31 = new Array[Long](n)\n        val x32 = new Array[Long](n)\n        val x33 = new Array[Long](n)\n        val x34 = new Array[Long](n)\n        val x35 = new Array[Long](n)\n        val x36 = new Array[Long](n)\n        val x37 = new Array[Long](n)\n        val x38 = new Array[Long](n)\n        val x39 = new Array[Long](n)\n        val x40 = new Array[Long](n)\n        val x41 = new Array[Long](n)\n        val x42 = new Array[Long](n)\n        val x43 = new Array[Long](n)\n        val x44 = new Array[Long](n)\n        val x45 = new Array[Long](n)\n        val x46 = \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp16_9n_im.scala:55:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx46\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp16_9n_im.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980047
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvxpa10tm.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        val x = new Array[Long](n)\n        val x2 = new Array[Long](n)\n        val x3 = new Array[Long](n)\n        val x4 = new Array[Long](n)\n        val x5 = new Array[Long](n)\n        val x6 = new Array[Long](n)\n        val x7 = new Array[Long](n)\n        val x8 = new Array[Long](n)\n        val x9 = new Array[Long](n)\n        val x10 = new Array[Long](n)\n        val x11 = new Array[Long](n)\n        val x12 = new Array[Long](n)\n        val x13 = new Array[Long](n)\n        val x14 = new Array[Long](n)\n        val x15 = new Array[Long](n)\n        val x16 = new Array[Long](n)\n        val x17 = new Array[Long](n)\n        val x18 = new Array[Long](n)\n        val x19 = new Array[Long](n)\n        val x20 = new Array[Long](n)\n        val x21 = new Array[Long](n)\n        val x22 = new Array[Long](n)\n        val x23 = new Array[Long](n)\n        val x24 = new Array[Long](n)\n        val x25 = new Array[Long](n)\n        val x26 = new Array[Long](n)\n        val x27 = new Array[Long](n)\n        val x28 = new Array[Long](n)\n        val x29 = new Array[Long](n)\n        val x30 = new Array[Long](n)\n        val x31 = new Array[Long](n)\n        val x32 = new Array[Long](n)\n        val x33 = new Array[Long](n)\n        val x34 = new Array[Long](n)\n        val x35 = new Array[Long](n)\n        val x36 = new Array[Long](n)\n        val x37 = new Array[Long](n)\n        val x38 = new Array[Long](n)\n        val x39 = new Array[Long](n)\n        val x40 = new Array[Long](n)\n        val x41 = new Array[Long](n)\n        val x42 = new Array[Long](n)\n        val x43 = new Array[Long](n)\n        val x44 = new Array[Long](n)\n        val x45 = new Array[Long](n)\n        val x46 = \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp9w4q77iw.scala:55:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx46\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9w4q77iw.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980048
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var d2: List[Long] = Nil\n        var d3: List[Long] = Nil\n        var d4: List[Long] = Nil\n        var d5: List[Long] = Nil\n        var d6: List[Long] = Nil\n        var d7: List[Long] = Nil\n        var d8: List[Long] = Nil\n        var d9: List[Long] = Nil\n        var d10: List[Long] = Nil\n        var d11: List[Long] = Nil\n        var d12: List[Long] = Nil\n        var d13: List[Long] = Nil\n        var d14: List[Long] = Nil\n        var d15: List[Long] = Nil\n        var d16: List[Long] = Nil\n        var d17: List[Long] = Nil\n        var d18: List[Long] = Nil\n        var d19: List[Long] = Nil\n        var d20: List[Long] = Nil\n        var d21: List[Long] = Nil\n        var d22: List[Long] = Nil\n        var d23: List[Long] = Nil\n        var d24: List[Long] = Nil\n        var d25: List[Long] = Nil\n        var d26: List[Long] = Nil\n        var d27: List[Long] = Nil\n        var d28: List[Long] = Nil\n        var d29: List[Long] = Nil\n        var d30: List[Long] = Nil\n        var d31: List[Long] = Nil\n        var d32: List[Long] = Nil\n        var d33: List[Long] = Nil\n        var d34: List[Long] = Nil\n        var d35: List[Long] = Nil\n        var d36: List[Long] = Nil\n        var d37: List[Long] = Nil\n        var d38: List[Long] = Nil\n        var d39: List[Long] = Nil\n        var d40: List[Long] = Nil\n        var d41: List[Long] = Nil\n        var d42: List[Long] = Nil\n        var d43: List[Long] = Nil\n        var d44: List[Long] = Nil\n        var d45: List[Long] = Nil\n        var d46: List[Long] = Nil\n        var d47: List[Long] = Nil\n        var d48: List[Long] = Nil\n        var d49: List[Long] = Nil\n        var d50: List[Long] = Nil\n        var d51: List[Long] = Nil\n        var d52: List[Long] = Nil\n        var d53: List[Long] = Nil\n        var d54: List[Long] = Nil\n        var d55: List[Long] = Nil\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp72o9owmd.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980048
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq94ei4eq.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvxpa10tm.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var xs = xs.toList\n        for(i <- 0 until xs.size) {\n            d += xs(i) * x\n            x += 1L\n        }\n        d / x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpg8wh5fs5.scala:10:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mxs\u001b[0m = xs.toList\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvariable\u001b[0m \u001b[35mxs\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg8wh5fs5.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d / x\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980047
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var x = 0\n        var y = 0\n        var d = 0\n        var dx: List[Long] = Nil\n        var dy: List[Long] = Nil\n        var d2: List[Long] = Nil\n        var d3: List[Long] = Nil\n        var d4: List[Long] = Nil\n        var d5: List[Long] = Nil\n        var d6: List[Long] = Nil\n        var d7: List[Long] = Nil\n        var d8: List[Long] = Nil\n        var d9: List[Long] = Nil\n        var d10: List[Long] = Nil\n        var d11: List[Long] = Nil\n        var d12: List[Long] = Nil\n        var d13: List[Long] = Nil\n        var d14: List[Long] = Nil\n        var d15: List[Long] = Nil\n        var d16: List[Long] = Nil\n        var d17: List[Long] = Nil\n        var d18: List[Long] = Nil\n        var d19: List[Long] = Nil\n        var d20: List[Long] = Nil\n        var d21: List[Long] = Nil\n        var d22: List[Long] = Nil\n        var d23: List[Long] = Nil\n        var d24: List[Long] = Nil\n        var d25: List[Long] = Nil\n        var d26: List[Long] = Nil\n        var d27: List[Long] = Nil\n        var d28: List[Long] = Nil\n        var d29: List[Long] = Nil\n        var d30: List[Long] = Nil\n        var d31: List[Long] = Nil\n        var d32: List[Long] = Nil\n        var d33: List[Long] = Nil\n        var d34: List[Long] = Nil\n        var d35: List[Long] = Nil\n        var d36: List[Long] = Nil\n        var d37: List[Long] = Nil\n        var d38: List[Long] = Nil\n        var d39: List[Long] = Nil\n        var d40: List[Long] = Nil\n        var d41: List[Long] = Nil\n        var d42: List[Long] = Nil\n        var d43: List[Long] = Nil\n        var d44: List[Long] = Nil\n        var d45: List[Long] = Nil\n        var d46: List[Long] = Nil\n        var d47: List[Long] = Nil\n        var d48: List[Long] = Nil\n        var d49: List[Long] = Nil\n        var d50: List[Long] = Nil\n        var d51: List[Long] = Nil\n        var d52: List[Long] = Nil\n        var d53: List[Long] = Nil\n        var d54: List[Long] = Nil\n        var d55: List[Long] = Nil\n        var d56\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz7qk1e2r.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz7qk1e2r.scala:68:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980048
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i) + xs(i + 1) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf25c86ob.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980048
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            val x = xs(i)\n            val d = xs(i) - xs(i - 1)\n            ds.updated(i, d)\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvktq0oc.scala:17:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980050
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph7eu4l02.scala:13:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0md is already defined as \u001b[33mvalue\u001b[0m \u001b[35md\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph7eu4l02.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mx is already defined as \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph7eu4l02.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0my is already defined as \u001b[33mvalue\u001b[0m \u001b[35my\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph7eu4l02.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mz\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mz is already defined as \u001b[33mvalue\u001b[0m \u001b[35mz\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph7eu4l02.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659980051
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n + 1)\n        val dd = new Array[Long](n + 1)\n        val ddd = new Array[Long](n + 1)\n        val dpp = new Array[Long](n + 1)\n        val dppp = new Array[Long](n + 1)\n        val dpppp = new Array[Long](n + 1)\n        val dppppp = new Array[Long](n + 1)\n        val dpppppp = new Array[Long](n + 1)\n        val dppppppp = new Array[Long](n + 1)\n        val dpppppppp = new Array[Long](n + 1)\n        val dppppppppp = new Array[Long](n + 1)\n        val dpppppppppp = new Array[Long](n + 1)\n        val dppppppppppp = new Array[Long](n + 1)\n        val dpppppppppppp = new Array[Long](n + 1)\n        val dppppppppppppp = new Array[Long](n + 1)\n        val dppppppppppppp = new Array[Long](n + 1)\n        val dpppppppppppppp = new Array[Long](n + 1)\n        val dppppppppppppppp = new Array[Long](n + 1)\n        val dpppppppppppppppp = new Array[Long](n + 1)\n        val dppppppppppppppppp = new Array[Long](n + 1)\n        val dppppppppppppppppp = new Array[Long](n + 1)\n        val dpppppppppppppppppp = new Array[Long](n + 1)\n        val dppppppppppppppppp = new Array[Long](n + 1)\n        val dpppppppppppppppppp = new Array[Long](n + 1)\n        val dppppppppppppppppppp = new Array[Long](n + 1)\n        val dppppppppppppppppppp = new Array[Long](n + 1)\n        val dppppppppppppppppppp = new Array[Long](n + 1)\n        val dppppppppppppppppppp = new Array[Long](n + 1)\n        val dpppppppppppppppppppp = new Array[Long](n + 1)\n        val dpppppppppppppppppp\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpew_zzbg_.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpew_zzbg_.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdppppppppppppp\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdppppppppppppp is already defined as \u001b[33mvalue\u001b[0m \u001b[35mdppppppppppppp\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpew_zzbg_.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdppppppppppppppppp\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdppppppppppppppppp is already defined as \u001b[33mvalue\u001b[0m \u001b[35mdppppppppppppppppp\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpew_zzbg_.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdppppppppppppppppp\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdppppppppppppppppp is already defined as \u001b[33mvalue\u001b[0m \u001b[35mdppppppppppppppppp\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpew_zzbg_.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdpppppppppppppppppp\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdpppppppppppp",
      "stdout": "",
      "timestamp": 1659980054
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvxpa10tm.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val result = new Array[Long](n)\n        val x = new Array[Long](n)\n        val xx = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xyx = new Array[Long](n)\n        val xyy = new Array[Long](n)\n        val xxx = new Array[Long](n)\n        val xxy = new Array[Long](n)\n        val xxyx = new Array[Long](n)\n        val xxyy = new Array[Long](n)\n        val xxyyx = new Array[Long](n)\n        val xxyyy = new Array[Long](n)\n        val xyyx = new Array[Long](n)\n        val xyyy = new Array[Long](n)\n        val xyxx = new Array[Long](n)\n        val xyxy = new Array[Long](n)\n        val xyyxx = new Array[Long](n)\n        val xyyxy = new Array[Long](n)\n        val xyyyx = new Array[Long](n)\n        val xyyyy = new Array[Long](n)\n        val yx = new Array[Long](n)\n        val yy = new Array[Long](n)\n        val yxx = new Array[Long](n)\n        val yxy = new Array[Long](n)\n        val yxyx = new Array[Long](n)\n        val yxyy = new Array[Long](n)\n        val yyx = new Array[Long](n)\n        val yyy = new Array[Long](n)\n        val yyxx = new Array[Long](n)\n        val yyxy = new Array[Long](n)\n        val yyyx = new Array[Long](n)\n        val yyyy = new Array[Long](n)\n        val yxyxx = new Array[Long](n)\n        val yxyxy = new Array[Long](n)\n        val yxyyx = new Array[Long](n)\n        val yxyyy = new Array[Long](n)\n        val yxyyx = new Array[Long](n)\n        val yxyyy = new Array[Long](n)\n        val yxyyxx = new Array[Long](n)\n        val yxyyxy = new Array[Long](n)\n        val yxyyyx = new Array[Long](n)\n        val yxyyyy = new Array[Long]\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgyfzyc71.scala:45:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myxyyx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0myxyyx is already defined as \u001b[33mvalue\u001b[0m \u001b[35myxyyx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgyfzyc71.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myxyyy\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0myxyyy is already defined as \u001b[33mvalue\u001b[0m \u001b[35myxyyy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgyfzyc71.scala:50:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myxyyyy\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter _length of \u001b[33mconstructor\u001b[0m \u001b[35mArray\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m: (_length: Int): Array[Long]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgyfzyc71.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659980055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpou0fnk85.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpou0fnk85.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynaqlg4x.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmwwrtqsj.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph7eu4l02.scala:13:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0md is already defined as \u001b[33mvalue\u001b[0m \u001b[35md\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph7eu4l02.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mx is already defined as \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph7eu4l02.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0my is already defined as \u001b[33mvalue\u001b[0m \u001b[35my\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph7eu4l02.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mz\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mz is already defined as \u001b[33mvalue\u001b[0m \u001b[35mz\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph7eu4l02.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659980051
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new Array[\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8wcm1xa6.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8wcm1xa6.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mds\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mds is already defined as \u001b[33mvalue\u001b[0m \u001b[35mds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8wcm1xa6.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mz\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mz is already defined as \u001b[33mvalue\u001b[0m \u001b[35mz\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8wcm1xa6.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0md is already defined as \u001b[33mvalue\u001b[0m \u001b[35md\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8wcm1xa6.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mzs\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mzs is already defined as \u001b[33mvalue\u001b[0m \u001b[35mzs\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8wcm1xa6.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m       ",
      "stdout": "",
      "timestamp": 1659980058
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var x = 0L\n        var d = 0L\n        var dd = 1L\n        var n = 0L\n        var nn = xs.length\n        var i = 0L\n        var j = 0L\n        var k = 0L\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = xs.length\n        var kk = \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpbsv_6a1o.scala:94:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mkk\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbsv_6a1o.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mkk\u001b[0m = xs.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mkk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mkk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbsv_6a1o.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mkk\u001b[0m = xs.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mkk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mkk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbsv_6a1o.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mkk\u001b[0m = xs.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mkk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mkk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbsv_6a1o.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mkk\u001b[0m = xs.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mkk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mkk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbsv_6a1o.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m",
      "stdout": "",
      "timestamp": 1659980063
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i) + xs(i + 1) * xs(i + 1)\n            i += 2\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp49q6_9lp.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980062
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val w = new Array[Long](n)\n        val a = new Array[Long](n)\n        val b = new Array[Long](n)\n        val c = new Array[Long](n)\n        val d = new Array[Long](n)\n        val e = new Array[Long](n)\n        val f = new Array[Long](n)\n        val g = new Array[Long](n)\n        val h = new Array[Long](n)\n        val i = new Array[Long](n)\n        val j = new Array[Long](n)\n        val k = new Array[Long](n)\n        val l = new Array[Long](n)\n        val m = new Array[Long](n)\n        val n = new Array[Long](n)\n        val o = new Array[Long](n)\n        val p = new Array[Long](n)\n        val q = new Array[Long](n)\n        val r = new Array[Long](n)\n        val s = new Array[Long](n)\n        val t = new Array[Long](n)\n        val u = new Array[Long](n)\n        val v = new Array[Long](n)\n        val w = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val a = new Array[Long](n)\n        val b = new Array[Long](n)\n        val c = new Array[Long](n)\n        val d = new Array[Long](n)\n        val e = new Array[Long](n)\n        val f = new Array[Long](n)\n        val g = new Array[Long](n)\n        val h = new Array[Long](n)\n        val i = new Array[Long](n)\n        val j = new Array[Long](n)\n        val k = new Array[Long](n)\n        val l = new Array[Long](n)\n        val m = new Array[Long](n)\n        val n = new Array[Long](n)\n        val o = new Array[Long](n)\n        val p = new Array[Long](n)\n        val q = new Array[Long](n)\n        val r = new Array[Long](n)\n        val s = new Array[Long](n)\n        val t = new Array[Long]\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvnmo4pv0.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0md is already defined as \u001b[33mvalue\u001b[0m \u001b[35md\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvnmo4pv0.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvnmo4pv0.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mw\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mw is already defined as \u001b[33mvalue\u001b[0m \u001b[35mw\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvnmo4pv0.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mx is already defined as \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvnmo4pv0.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0my is already defined as \u001b[33mvalue\u001b[0m \u001b[35my\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[",
      "stdout": "",
      "timestamp": 1659980063
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynaqlg4x.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n        val z = new Array[Long](n + 1)\n        val x2 = new Array[Long](n + 1)\n        val y2 = new Array[Long](n + 1)\n        val z2 = new Array[Long](n + 1)\n        val x3 = new Array[Long](n + 1)\n        val y3 = new Array[Long](n + 1)\n        val z3 = new Array[Long](n + 1)\n        val x4 = new Array[Long](n + 1)\n        val y4 = new Array[Long](n + 1)\n        val z4 = new Array[Long](n + 1)\n        val x5 = new Array[Long](n + 1)\n        val y5 = new Array[Long](n + 1)\n        val z5 = new Array[Long](n + 1)\n        val x6 = new Array[Long](n + 1)\n        val y6 = new Array[Long](n + 1)\n        val z6 = new Array[Long](n + 1)\n        val x7 = new Array[Long](n + 1)\n        val y7 = new Array[Long](n + 1)\n        val z7 = new Array[Long](n + 1)\n        val x8 = new Array[Long](n + 1)\n        val y8 = new Array[Long](n + 1)\n        val z8 = new Array[Long](n + 1)\n        val x9 = new Array[Long](n + 1)\n        val y9 = new Array[Long](n + 1)\n        val z9 = new Array[Long](n + 1)\n        val x10 = new Array[Long](n + 1)\n        val y10 = new Array[Long](n + 1)\n        val z10 = new Array[Long](n + 1)\n        val x11 = new Array[Long](n + 1)\n        val y11 = new Array[Long](n + 1)\n        val z11 = new Array[Long](n + 1)\n        val x12 = new Array[Long](n + 1)\n        val y12 = new Array[Long](n + 1)\n        val z12 = new Array[Long](n + 1)\n        val x13 = new Array[Long](n + 1)\n        val y13 = new Array[Long](n + 1)\n        val z13 = new Array[Long](n + 1)\n        val x14 = new Array[Long](n + 1)\n        val y14 = new Array[Long](n + 1)\n        val z14 = new Array[Long]\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpvncbt6rn.scala:51:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mz14\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter _length of \u001b[33mconstructor\u001b[0m \u001b[35mArray\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m: (_length: Int): Array[Long]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvncbt6rn.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980064
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            result(i) = xs(i) / xs(n - 1)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpidqndaw_.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        result\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (result : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980063
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9l6cdiq5.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980064
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n + 1)\n        val x = new Array[Long](n + 1)\n        val x0 = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = new Array[Long](n + 1)\n        val xx = \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpaal17h0r.scala:51:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxx\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpaal17h0r.scala:13:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxx is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpaal17h0r.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxx is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpaal17h0r.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxx is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxx\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpaal17h0r.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxx is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxx\u001b[0m\n\u001b[31m   |\u001b[0m\n",
      "stdout": "",
      "timestamp": 1659980065
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val xd = new Array[Long](n)\n        val xd2 = new Array[Long](n)\n        val xd3 = new Array[Long](n)\n        val xds = new Array[Long](n)\n        val xdd = new Array[Long](n)\n        val xdd2 = new Array[Long](n)\n        val xdd3 = new Array[Long](n)\n        val xdds = new Array[Long](n)\n        val xddd = new Array[Long](n)\n        val xdddd2 = new Array[Long](n)\n        val xdddd3 = new Array[Long](n)\n        val xdddds = new Array[Long](n)\n        val xddddd = new Array[Long](n)\n        val xddddd2 = new Array[Long](n)\n        val xddddd3 = new Array[Long](n)\n        val xddddds = new Array[Long](n)\n        val xdddddd2 = new Array[Long](n)\n        val xdddddd3 = new Array[Long](n)\n        val xdddddds = new Array[Long](n)\n        val xddddddd = new Array[Long](n)\n        val xdddddddd2 = new Array[Long](n)\n        val xdddddddd3 = new Array[Long](n)\n        val xdddddddds = new Array[Long](n)\n        val xddddddddd = new Array[Long](n)\n        val xddddddddd2 = new Array[Long](n)\n        val xddddddddd3 = new Array[Long](n)\n        val xddddddddds = new Array[Long](n)\n        val xdddddddddd2 = new Array[Long](n)\n        val xdddddddddd3 = new Array[Long](n)\n        val xdddddddddds = new Array[Long](n)\n        val xddddddddddd = new Array[Long](n)\n        val xdddddddddddd2 = new Array[Long](n)\n        val xdddddddddddd3 = new Array[Long](n)\n        val xdddddddddddds = new Array[Long](n)\n        val xddddddddddddd = new Array[Long](n)\n        val xddddddddddddd2 = new Array[Long](n)\n        val xddddddddddddd3 = new Array[\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjn2dr8_h.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjn2dr8_h.scala:12:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjn2dr8_h.scala:49:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxddddddddddddd3\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter _length of \u001b[33mconstructor\u001b[0m \u001b[35mArray\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjn2dr8_h.scala:50:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659980065
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            val x = xs(i)\n            val d = 1\n            while (i < n && xs(i) == x) {\n                d *= xs(i + 1)\n                i += 1\n            }\n            ds(i) = d\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpytdnoni8.scala:15:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                d *= xs(i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value *= is not a member of Int - did you mean d.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpytdnoni8.scala:21:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980067
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        val x = 1L\n        val d = 1L\n        for(i <- 0 until n){\n            ds(i) = x * d\n            d *= xs(i)\n            x += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfttp6tdo.scala:14:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            d *= xs(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean d.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfttp6tdo.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            x += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean x.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfttp6tdo.scala:17:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659980067
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpou0fnk85.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpou0fnk85.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg11p9401.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x59 = xs(59)\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy272za_j.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x59 = xs(59)\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy272za_j.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val w = new Array[Long](n)\n        val h = new Array[Long](n)\n        val r = new Array[Long](n)\n        val s = new Array[Long](n)\n        val t = new Array[Long](n)\n        val u = new Array[Long](n)\n        val v = new Array[Long](n)\n        val w1 = new Array[Long](n)\n        val w2 = new Array[Long](n)\n        val w3 = new Array[Long](n)\n        val w4 = new Array[Long](n)\n        val w5 = new Array[Long](n)\n        val w6 = new Array[Long](n)\n        val w7 = new Array[Long](n)\n        val w8 = new Array[Long](n)\n        val w9 = new Array[Long](n)\n        val w10 = new Array[Long](n)\n        val w11 = new Array[Long](n)\n        val w12 = new Array[Long](n)\n        val w13 = new Array[Long](n)\n        val w14 = new Array[Long](n)\n        val w15 = new Array[Long](n)\n        val w16 = new Array[Long](n)\n        val w17 = new Array[Long](n)\n        val w18 = new Array[Long](n)\n        val w19 = new Array[Long](n)\n        val w20 = new Array[Long](n)\n        val w21 = new Array[Long](n)\n        val w22 = new Array[Long](n)\n        val w23 = new Array[Long](n)\n        val w24 = new Array[Long](n)\n        val w25 = new Array[Long](n)\n        val w26 = new Array[Long](n)\n        val w27 = new Array[Long](n)\n        val w28 = new Array[Long](n)\n        val w29 = new Array[Long](n)\n        val w30 = new Array[Long](n)\n        val w31 = new Array[Long](n)\n        val w32 = new Array[Long](n)\n        val w33 = new Array[Long](n)\n        val w34 = new Array[Long](n)\n        val w35 = new Array[Long](n)\n        val w36 = new Array[Long](n)\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0wwwlwz4.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980066
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val x = scala.math.pow(xs(n-1), n-1)\n        val xs = xs.drop(n-1)\n        val ys = xs.map(x => x * x)\n        val zs = ys.map(x => x * x)\n        val zs = zs.drop(n-1)\n        val zs = zs.take(n-1)\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.reverse\n        val zs = zs.\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdtglxggc.scala:70:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdtglxggc.scala:13:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mzs\u001b[0m = zs.drop(n-\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mzs is already defined as \u001b[33mvalue\u001b[0m \u001b[35mzs\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdtglxggc.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mzs\u001b[0m = zs.take(n-\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mzs is already defined as \u001b[33mvalue\u001b[0m \u001b[35mzs\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdtglxggc.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mzs\u001b[0m = zs.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mzs is already defined as \u001b[33mvalue\u001b[0m \u001b[35mzs\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdtglxggc.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mzs\u001b[0m = zs.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mzs is already defined as \u001b[33mvalue\u001b[0m \u001b[35mzs\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdtglxggc.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mzs\u001b[0m = zs.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mzs is already defined as \u001b[33mvalue\u001b",
      "stdout": "",
      "timestamp": 1659980066
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvxpa10tm.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tmcaw4t.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        d\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (d : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        for( i <- 0 until n ) ds(i) = xs(i) * xs(i+1)\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6yed3h18.scala:11:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980067
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x59 = xs(59)\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy272za_j.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new ListBuffer[Long](n)\n        for( i <- 0 until n ) {\n            val x = xs(i)\n            if( i == 0 ) {\n                ds += x\n            } else {\n                val y = xs(i-1)\n                ds += x * y\n            }\n        }\n        ds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2bvx54u7.scala:9:38 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mds\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mListBuffer\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m  |\u001b[0m                                      ^\u001b[0m\n\u001b[31m  |\u001b[0mtoo many arguments for \u001b[33mconstructor\u001b[0m \u001b[35mListBuffer\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mListBuffer\u001b[0m: (): scala.collection.mutable.ListBuffer[Long]\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980063
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n + 1)\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < n) {\n            while (j < n) {\n                d(k) = xs(j) * xs(i)\n                j += 1\n            }\n            i += 1\n            k += 1\n        }\n        d(n)\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy5hf8nqc.scala:21:9 ---------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        d(n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980066
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n        var n = 0L\n        var xs = xs.toList\n        val length = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdqmbbwep.scala:71:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpdqmbbwep.scala:12:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mxs\u001b[0m = xs.toList\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvariable\u001b[0m \u001b[35mxs\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqmbbwep.scala:71:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659980067
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        var d = 0L\n        var dd = 1L\n        var x = 0L\n        var xx = 1L\n        var xx2 = 0L\n        var xx3 = 0L\n        var xx4 = 0L\n        var xx5 = 0L\n        var xx6 = 0L\n        var xx7 = 0L\n        var xx8 = 0L\n        var xx9 = 0L\n        var xx10 = 0L\n        var xx11 = 0L\n        var xx12 = 0L\n        var xx13 = 0L\n        var xx14 = 0L\n        var xx15 = 0L\n        var xx16 = 0L\n        var xx17 = 0L\n        var xx18 = 0L\n        var xx19 = 0L\n        var xx20 = 0L\n        var xx21 = 0L\n        var xx22 = 0L\n        var xx23 = 0L\n        var xx24 = 0L\n        var xx25 = 0L\n        var xx26 = 0L\n        var xx27 = 0L\n        var xx28 = 0L\n        var xx29 = 0L\n        var xx30 = 0L\n        var xx31 = 0L\n        var xx32 = 0L\n        var xx33 = 0L\n        var xx34 = 0L\n        var xx35 = 0L\n        var xx36 = 0L\n        var xx37 = 0L\n        var xx38 = 0L\n        var xx39 = 0L\n        var xx40 = 0L\n        var xx41 = 0L\n        var xx42 = 0L\n        var xx43 = 0L\n        var xx44 = 0L\n        var xx45 = 0L\n        var xx46 = 0L\n        var xx47 = 0L\n        var xx48 = 0L\n        var xx49 = 0L\n        var xx50 = 0L\n        var xx51 = 0L\n        var xx52 = 0L\n        var xx53 = 0L\n        var xx54 = 0L\n        var xx55 = 0L\n        var xx56 = 0L\n        var xx57 = 0L\n        var xx58 = 0L\n        var xx59 = 0L\n        var xx60 = 0L\n        var xx61 = 0L\n        var xx62 = 0L\n        var xx63 = 0L\n        var xx64 = 0L\n        var xx65 = 0L\n        var xx66 = 0L\n        var xx67 = 0L\n        var xx68 = 0L\n        var xx69 = 0L\n        var xx70 = 0L\n        var xx71 = 0L\n        var xx72 = 0L\n        var xx73 = 0L\n        var xx74 = 0L\n        var xx75 = 0L\n        var xx76 = 0L\n        var xx77 = 0L\n        var xx78 = 0L\n        var xx79 = 0L\n        var xx80 = 0L\n        var xx81 = 0L\n        var xx82 = 0L\n        var xx\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy67ih4do.scala:94:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy67ih4do.scala:94:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659980066
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val x0 = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val x2 = new Array[Long](n)\n        val x3 = new Array[Long](n)\n        val x4 = new Array[Long](n)\n        val x5 = new Array[Long](n)\n        val x6 = new Array[Long](n)\n        val x7 = new Array[Long](n)\n        val x8 = new Array[Long](n)\n        val x9 = new Array[Long](n)\n        val x10 = new Array[Long](n)\n        val x11 = new Array[Long](n)\n        val x12 = new Array[Long](n)\n        val x13 = new Array[Long](n)\n        val x14 = new Array[Long](n)\n        val x15 = new Array[Long](n)\n        val x16 = new Array[Long](n)\n        val x17 = new Array[Long](n)\n        val x18 = new Array[Long](n)\n        val x19 = new Array[Long](n)\n        val x20 = new Array[Long](n)\n        val x21 = new Array[Long](n)\n        val x22 = new Array[Long](n)\n        val x23 = new Array[Long](n)\n        val x24 = new Array[Long](n)\n        val x25 = new Array[Long](n)\n        val x26 = new Array[Long](n)\n        val x27 = new Array[Long](n)\n        val x28 = new Array[Long](n)\n        val x29 = new Array[Long](n)\n        val x30 = new Array[Long](n)\n        val x31 = new Array[Long](n)\n        val x32 = new Array[Long](n)\n        val x33 = new Array[Long](n)\n        val x34 = new Array[Long](n)\n        val x35 = new Array[Long](n)\n        val x36 = new Array[Long](n)\n        val x37 = new Array[Long](n)\n        val x38 = new Array[Long](n)\n        val x39 = new Array[Long](n)\n        val x40 = new Array[Long](n)\n        val x41 = new Array[Long](n)\n        val x42 = new Array[Long](n)\n        val x43 = new Array[Long](n)\n        val x44 = new \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwjfbeg_7.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwjfbeg_7.scala:12:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwjfbeg_7.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659980067
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            result(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkbznzxv5.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        result\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (result : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n        for( i <- 0 until n ) {\n            if( i == 0 ) {\n                ds(i) = 1\n            } else {\n                ds(i) = xs(i) * ds(i-1)\n            }\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeft1gi48.scala:17:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        ds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (ds : Array[Long])\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979984
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4m5kkjc.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4m5kkjc.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val xx = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val xy = new Array[Long](n)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmps6ikyes9.scala:55:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps6ikyes9.scala:13:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxy\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxy is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps6ikyes9.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxy\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxy is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps6ikyes9.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxy\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxy is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps6ikyes9.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxy\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxy is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxy\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [",
      "stdout": "",
      "timestamp": 1659980067
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    def derivative(xs : List[Long]) : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x18 = xs.tail\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvxpa10tm.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659980005
    }
  ]
}