{
  "language": "rb",
  "name": "HumanEval_66_digitSum",
  "results": [
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  puts (s.delete(\"a-z\").bytes.map { |byte| byte - 'A'.ord + 1 }.sum)\nend\ndigitSum(\"woArBld\")\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "3\nLoaded suite /tmp/tmp553x2mla\nStarted\n0\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp553x2mla.rb:25:in `test_digitSum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n  => 25:     assert_equal(0, candidate.call(\"\"))\n     26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007544222 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.55 tests/s, 132.55 assertions/s\n",
      "timestamp": 1659823921
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return 0 if s.empty?\n  s.sum { |c| c.ord if c == c.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp3jt0jn_i\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp3jt0jn_i.rb:26:in `test_digitSum'\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n     25:     assert_equal(0, candidate.call(\"\"))\n  => 26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n     29:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131 \n?   26\n? - ?\n===============================================================================\n\nFinished in 0.00777772 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.57 tests/s, 257.14 assertions/s\n",
      "timestamp": 1659823921
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.reduce(0) { |a, e| e =~ /[A-Z]/ ? a + e.ord : a}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzpl2vaf5\nStarted\n.\nFinished in 0.000484349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2064.63 tests/s, 16517.02 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823921
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  total = 0\n  s.each_char { |c| total += c.ord if c.ord.between?(65, 90) }\n  total\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc4yaep0t\nStarted\n.\nFinished in 0.000446444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2239.92 tests/s, 17919.38 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823921
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.scan(/[A-Z]/).each { |i| sum += i.ord }\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp747_z3cv\nStarted\n.\nFinished in 0.00043081 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.21 tests/s, 18569.67 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823921
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.select { |c| c.match(/[A-Z]/) }.map { |c| c.ord }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqwkco97v\nStarted\n.\nFinished in 0.000470318 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2126.22 tests/s, 17009.77 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823921
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').select { |c| c =~ /[A-Z]/ }.map { |c| c.ord }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp6z25v4wg\nStarted\n.\nFinished in 0.000446029 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2242.01 tests/s, 17936.05 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823921
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').bytes.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp7pvd7dpl\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp7pvd7dpl.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007520238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 132.97 assertions/s\n",
      "timestamp": 1659823921
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.reduce(0) { |sum, c| sum + c.ord - 96 if c.upcase == c } || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp2wb9xaq8\nStarted\nE\n===============================================================================\nError: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n  \n    s.chars.reduce(0) { |sum, c| sum + c.ord - 96 if c.upcase == c } || 0\n                                     ^\n/tmp/tmp2wb9xaq8.rb:18:in `block in digitSum'\n/tmp/tmp2wb9xaq8.rb:18:in `each'\n/tmp/tmp2wb9xaq8.rb:18:in `reduce'\n/tmp/tmp2wb9xaq8.rb:18:in `digitSum'\n/tmp/tmp2wb9xaq8.rb:25:in `call'\n/tmp/tmp2wb9xaq8.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n===============================================================================\n\nFinished in 0.001894093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n527.96 tests/s, 527.96 assertions/s\n",
      "timestamp": 1659823921
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|v| v.ord}.select{|v| (65..90).cover?(v)}.sum\nend\np digitSum(\"\")# 0\np digitSum(\"abAB\")# 131\np digitSum(\"abcCd\")# 67\np digitSum(\"helloE\")# 69\np digitSum(\"woArBld\")# 131\np digitSum(\"aAaaaXa\")# 153\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "0\n131\n67\n69\n131\n153\nLoaded suite /tmp/tmpojgti08_\nStarted\n.\nFinished in 0.000461453 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2167.07 tests/s, 17336.54 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823921
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.sum{|c| c.ord if c.ord >= 65 && c.ord <= 90}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpu8yzsce_\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpu8yzsce_.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131 \n?   26\n? - ?\n===============================================================================\n\nFinished in 0.008127445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.04 tests/s, 246.08 assertions/s\n",
      "timestamp": 1659823921
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.sum == 32 ? 0 : c.sum }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp8r_jidno\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp8r_jidno.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007246485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.00 tests/s, 138.00 assertions/s\n",
      "timestamp": 1659823921
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  a = s.split('')\n  b = a.map(&:ord)\n  c = b.select { |x| x >= 65 && x <= 90 }\n  d = c.inject(0, :+)\n  return d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_uelz71v\nStarted\n.\nFinished in 0.000490284 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2039.63 tests/s, 16317.07 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823921
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.each_byte.inject(0) { |sum, n| n >= 65 && n <= 90 ? sum + n : sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp21zf3qob\nStarted\n.\nFinished in 0.001258691 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n794.48 tests/s, 6355.81 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823921
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.gsub(/[^A-Z]/, '').split('').map { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpy124qtpm\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpy124qtpm.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008413167 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.86 tests/s, 118.86 assertions/s\n",
      "timestamp": 1659823921
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.bytes.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpy_g6bk8a\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpy_g6bk8a.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.009362456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n106.81 tests/s, 213.62 assertions/s\n",
      "timestamp": 1659823921
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x| x.sum}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpou4finlh\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpou4finlh.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.014541636 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.77 tests/s, 68.77 assertions/s\n",
      "timestamp": 1659823921
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    s.each_char.sum{|x| x.ord>96&&x.ord<123 ? x.ord-32 : 0}\nend\nputs digitSum(\"\")\nputs digitSum(\"abAB\")\nputs digitSum(\"abcCd\")\nputs digitSum(\"helloE\")\nputs digitSum(\"woArBld\")\nputs digitSum(\"aAaaaXa\")\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "0\n131\n266\n372\n392\n325\nLoaded suite /tmp/tmpeg01plkp\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpeg01plkp.rb:32:in `test_digitSum'\n     29:     candidate = method(:digitSum)\n     30:     assert_equal(0, candidate.call(\"\"))\n     31:     assert_equal(131, candidate.call(\"abAB\"))\n  => 32:     assert_equal(67, candidate.call(\"abcCd\"))\n     33:     assert_equal(69, candidate.call(\"helloE\"))\n     34:     assert_equal(131, candidate.call(\"woArBld\"))\n     35:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n<67> expected but was\n<266>\n\ndiff:\n?  67\n? 2 6\n? + ?\n===============================================================================\n\nFinished in 0.008522621 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n117.33 tests/s, 352.00 assertions/s\n",
      "timestamp": 1659823921
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.chars.each do |ch|\n    ascii = ch.ord\n    if ascii >= 65 && ascii <= 90\n      sum += ascii\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmps0rmvxp9\nStarted\n.\nFinished in 0.000452712 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2208.91 tests/s, 17671.28 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823921
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.chars.each do |char|\n    sum += char.ord if char =~ /[A-Z]/\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzmpz109d\nStarted\n.\nFinished in 0.000739594 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1352.09 tests/s, 10816.75 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823921
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  a = \"0\"..\"9\"\n  b = \"a\"..\"z\"\n  c = s.chars.map(&:ord)\n  d = c.map { |x| a.include?(x.chr) ? 0 : x}\n  e = d.map { |x| b.include?(x.chr) ? 0 : x}\n  e.reduce(:+)\nend\nputs digitSum(\"abcCd\")\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "67\nLoaded suite /tmp/tmp6sebzyxs\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp6sebzyxs.rb:30:in `test_digitSum'\n     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_digitSum\n     29:     candidate = method(:digitSum)\n  => 30:     assert_equal(0, candidate.call(\"\"))\n     31:     assert_equal(131, candidate.call(\"abAB\"))\n     32:     assert_equal(67, candidate.call(\"abcCd\"))\n     33:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.01197401 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n83.51 tests/s, 83.51 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  if (s.length) == 0\n    return 0\n  end\n  sum = 0\n  for i in (0..s.length-1)\n    if s[i] >= \"A\" && s[i] <= \"Z\"\n      sum += s[i].ord\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcxq56gke\nStarted\n.\nFinished in 0.00107091 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n933.79 tests/s, 7470.28 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.sum - (s.count \"a-z\") * 32\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp2ydcokjp\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp2ydcokjp.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.012513984 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.91 tests/s, 159.82 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.inject(0) { |sum, char| char == char.upcase ? sum + char.ord : sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpv7u0a1o3\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpv7u0a1o3.rb:30:in `test_digitSum'\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n     29:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 30:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     31:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     32:   end\n     33: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.010601588 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.33 tests/s, 660.28 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  a = s.split('')\n  b = a.map { |i| i.unpack('U*')[0] }\n  b.select! { |i| i > 64 && i < 91 }\n  b.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpws2pi55d\nStarted\n.\nFinished in 0.001203018 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n831.24 tests/s, 6649.94 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.each_byte do |i|\n    sum += i if i >=65 && i <= 90\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpox19p65p\nStarted\n.\nFinished in 0.0010736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n931.45 tests/s, 7451.56 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^a-zA-Z]/, '').chars.map(&:ord).reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpt2bvpd4q\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpt2bvpd4q.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131 \n?   26\n? - ?\n===============================================================================\n\nFinished in 0.012626695 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.20 tests/s, 158.39 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpy1m66vjx\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpy1m66vjx.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008650363 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.60 tests/s, 115.60 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.upcase.ord }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp_2usre7g\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp_2usre7g.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010153213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.49 tests/s, 98.49 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    if s == \"\"\n        return 0\n    else\n        s.scan(/[A-Z]/).reduce(0) {|sum, c| sum + c.ord}\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp6daxxtnv\nStarted\n.\nFinished in 0.000863033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1158.70 tests/s, 9269.63 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  str1 = \"\"\n  sum = 0\n  if s == \"\"\n    sum = 0\n  else\n    str1 = s.gsub(/[^A-Z]/, '')\n    sum = str1.split(\"\").map(&:ord).reduce(:+)\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpaf6xezru\nStarted\n.\nFinished in 0.000701236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1426.05 tests/s, 11408.43 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.sum - s.sum { |c| c.ord unless (65..90).include?(c.ord) }\nend\np digitSum(\"\") == 0\np digitSum(\"abAB\") == 131\np digitSum(\"abcCd\") == 67\np digitSum(\"helloE\") == 69\np digitSum(\"woArBld\") == 131\np digitSum(\"aAaaaXa\") == 153\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nLoaded suite /tmp/tmpsneu9sgr\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpsneu9sgr.rb:31:in `test_digitSum'\n     28:   def test_digitSum\n     29:     candidate = method(:digitSum)\n     30:     assert_equal(0, candidate.call(\"\"))\n  => 31:     assert_equal(131, candidate.call(\"abAB\"))\n     32:     assert_equal(67, candidate.call(\"abcCd\"))\n     33:     assert_equal(69, candidate.call(\"helloE\"))\n     34:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<0>\n===============================================================================\n\nFinished in 0.010924153 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n91.54 tests/s, 183.08 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    # Assign variables\n    cnt = 0\n    sum = 0\n    # Find the length of the string\n    cnt = s.length\n    # Iterate over the string\n    cnt.times do |n|\n        # Check if the character is uppercase\n        if s[n].ord >= 65 && s[n].ord <= 90\n            # Add the value of the character to the sum\n            sum += s[n].ord\n        end\n    end\n    # Return the sum\n    return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwvz81l7u\nStarted\n.\nFinished in 0.001034146 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n966.98 tests/s, 7735.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    letters = s.split(\"\")\n    sum = 0\n    letters.each do |char|\n        sum += char.ord if char == char.upcase\n    end\n    sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp956yl_dt\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp956yl_dt.rb:35:in `test_digitSum'\n     32:     assert_equal(69, candidate.call(\"helloE\"))\n     33:     assert_equal(131, candidate.call(\"woArBld\"))\n     34:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 35:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     36:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     37:   end\n     38: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.012976176 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.06 tests/s, 539.45 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).map { |x| x - 96 if x > 96 }.compact.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpshwiyoc1\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpshwiyoc1.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<3>\n\ndiff:\n? 131\n===============================================================================\n\nFinished in 0.011820778 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n84.60 tests/s, 169.19 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  a = s.chars.select{|x| x == x.upcase}\n  a.map{|x| x.ord}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpchxho72w\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpchxho72w.rb:31:in `test_digitSum'\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n     29:     assert_equal(131, candidate.call(\"woArBld\"))\n     30:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 31:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     32:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     33:   end\n     34: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.008966215 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n111.53 tests/s, 780.71 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.sum - s.sum { |c| c.ord.between?(97, 122) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmphn5sabqb\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmphn5sabqb.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<0>\n===============================================================================\n\nFinished in 0.011020001 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.74 tests/s, 181.49 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpt_2gwsnh\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpt_2gwsnh.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009988717 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.11 tests/s, 100.11 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return 0 if s.length == 0\n  s.scan(/[A-Z]/).map { |x| x.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpgt8c6xrb\nStarted\n.\nFinished in 0.001066927 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n937.27 tests/s, 7498.17 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.select { |x| x == x.upcase }.reduce(0) { |a, b| a + b.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpp2r549jy\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpp2r549jy.rb:30:in `test_digitSum'\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n     29:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 30:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     31:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     32:   end\n     33: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.012822267 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.99 tests/s, 545.93 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.chars.each { |c| sum += c.ord if c == c.upcase }\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpg8xv1tdx\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpg8xv1tdx.rb:32:in `test_digitSum'\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131, candidate.call(\"woArBld\"))\n     31:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 32:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     33:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     34:   end\n     35: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.008819294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.39 tests/s, 793.71 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    sum = 0\n    s.chars.each do |x|\n      sum += x.ord if (x.ord >= 65 && x.ord <= 90)\n    end\n    sum\nend\nputs digitSum(\"abAB\")\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "131\nLoaded suite /tmp/tmppa_xdf65\nStarted\n.\nFinished in 0.001133607 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n882.14 tests/s, 7057.12 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  result = 0\n  s.split('').each { |c| result += c.ord if c.ord.between?(65, 90) }\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmps0rqdqln\nStarted\n.\nFinished in 0.000898353 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1113.15 tests/s, 8905.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').map { |c| c.ord.to_i }.select { |i| i > 64 && i < 91 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpirhuao95\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpirhuao95.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007965774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.54 tests/s, 125.54 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    # s.upcase.scan(/[A-Z]/).join.split('').map(&:ord).reduce(:+)\n    s.upcase.split('').map(&:ord).select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpdypt8cvp\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpdypt8cvp.rb:25:in `test_digitSum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n  => 25:     assert_equal(0, candidate.call(\"\"))\n     26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.01060126 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.33 tests/s, 94.33 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').map { |e| e.ord unless e.match(/[a-z]/) }.compact.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpaj36l16o\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpaj36l16o.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010338235 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.73 tests/s, 96.73 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return 0 if s.length == 0\n  return s.bytes.map { |e| e.to_i }.inject(:+) if s.length == 1\n  s.bytes.map { |e| e.to_i }.inject(:+) - s.downcase.bytes.map { |e| e.to_i }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp5tg9pard\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp5tg9pard.rb:27:in `test_digitSum'\n     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n     26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131, candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<-64>\n===============================================================================\n\nFinished in 0.009858082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.44 tests/s, 202.88 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').bytes.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp7pvd7dpl\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp7pvd7dpl.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007520238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.97 tests/s, 132.97 assertions/s\n",
      "timestamp": 1659823921
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.chars.each do |ch|\n    sum += ch.ord if ch.ord >= 65 && ch.ord <= 90\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjoh8t6oh\nStarted\n.\nFinished in 0.000868359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1151.60 tests/s, 9212.78 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  if s.empty?\n    sum = 0\n  else\n    s.split('').each { |char| sum += char.ord if char.ord >= 65 && char.ord <= 90 }\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3ty0g914\nStarted\n.\nFinished in 0.000613092 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1631.08 tests/s, 13048.61 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    sum = 0\n    s.each_byte do |v|\n        if v > 64 && v < 91\n            sum += v\n        end\n    end\n    sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpq71oxu9j\nStarted\n.\nFinished in 0.000941644 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1061.97 tests/s, 8495.78 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).sum{|e| e.ord - 65 + 1}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpmzksw328\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpmzksw328.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<3>\n\ndiff:\n? 131\n===============================================================================\n\nFinished in 0.00930343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.49 tests/s, 214.97 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  n = 0\n  s.chars.each { |l| n += l.ord }\n  n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpb1ybs7jd\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpb1ybs7jd.rb:27:in `test_digitSum'\n     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n     26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131, candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131 \n?   26\n? - ?\n===============================================================================\n\nFinished in 0.010148954 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.53 tests/s, 197.06 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map(&:ord).select { |char| char.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp2yanq4b2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp2yanq4b2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010340358 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.71 tests/s, 96.71 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map(&:ord).select { |o| o >= 65 && o <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpmjasd946\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpmjasd946.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.01041042 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.06 tests/s, 192.12 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.sum - s.gsub(/[A-Z]/, '').sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmprsxqbvqw\nStarted\n.\nFinished in 0.000854292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1170.56 tests/s, 9364.48 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |v| v.ord }.select { |v| v >= 65 && v <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7yvbpm9r\nStarted\n.\nFinished in 0.001511651 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n661.53 tests/s, 5292.23 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    s.to_s.gsub(/[^a-zA-Z]/, '').chars.reduce(0) { |sum, c| sum + c.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp0x2mhlq9\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp0x2mhlq9.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131 \n?   26\n? - ?\n===============================================================================\n\nFinished in 0.010052334 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.48 tests/s, 198.96 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.gsub(/[^A-Z]/, '').sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpqkdkrrmw\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpqkdkrrmw.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.006744751 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.26 tests/s, 296.53 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.each_byte.reduce(0) { |acc, v| (65..90).include?(v) ? acc + v : acc }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfehzwf8i\nStarted\n.\nFinished in 0.000540281 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1850.89 tests/s, 14807.11 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map { |x| x.ord }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpk5ttp0ci\nStarted\n.\nFinished in 0.000879559 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1136.93 tests/s, 9095.47 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|c| c.ord if c == c.upcase}.compact.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpdzvn1tjf\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpdzvn1tjf.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006466144 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.65 tests/s, 154.65 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).sum{|c| c.ord}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc2rzcuhy\nStarted\n.\nFinished in 0.000787644 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1269.61 tests/s, 10156.87 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.inject(0) { |sum, c| sum + c.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpbxl_238p\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpbxl_238p.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.006282317 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.18 tests/s, 318.35 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.each_char do |x|\n    sum += x.ord if x.ord >= 65 && x.ord <= 90\n  end\n  sum\nend\ndigitSum(\"woArBld\")\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwqf3jsv8\nStarted\n.\nFinished in 0.000495706 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2017.32 tests/s, 16138.60 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^a-zA-Z]/, '').chars.reduce(0) { |sum, item| sum + item.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpttuzvq90\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpttuzvq90.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131 \n?   26\n? - ?\n===============================================================================\n\nFinished in 0.006775751 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.59 tests/s, 295.17 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpvitx3t8b\nStarted\n.\nFinished in 0.000509695 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1961.96 tests/s, 15695.66 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    sum = 0\n    s.chars.each do |ch|\n        sum += ch.ord if ch.ord.between?(65, 90)\n    end\n    sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp1l45lx6w\nStarted\n.\nFinished in 0.000499402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2002.39 tests/s, 16019.16 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  total = 0\n  s.split(\"\").each { |char| total += char.ord if char =~ /[A-Z]/ }\n  total\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpeyzag3oe\nStarted\n.\nFinished in 0.000602519 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1659.70 tests/s, 13277.59 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).inject(0) { |sum, s| sum + s.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpot95eayi\nStarted\n.\nFinished in 0.00063913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1564.63 tests/s, 12517.02 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    s.each_byte.sum{|x| x < 97 ? x : 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpvpy35xz1\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpvpy35xz1.rb:30:in `test_digitSum'\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n     29:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 30:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     31:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     32:   end\n     33: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.009043725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.57 tests/s, 774.02 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  if s == \"\"\n    0\n  else\n    s.gsub(/[a-z]/, \"\").split(\"\").map{|x| x.ord }.reduce(:+)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp55uqf_lt\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp55uqf_lt.rb:34:in `test_digitSum'\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131, candidate.call(\"woArBld\"))\n     33:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 34:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     35:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     36:   end\n     37: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.0101548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.48 tests/s, 689.33 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return s.bytes.reduce(0) { |acc, b| b >= 65 && b <= 90 ? acc + b : acc }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp6gx4qe0n\nStarted\n.\nFinished in 0.000544063 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1838.02 tests/s, 14704.18 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return 0 if s.empty?\n  s.split('').map { |char| char.ord }.inject(0) { |sum, ord| ord.between?(65, 90) ? sum + ord : sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpuk42yl78\nStarted\n.\nFinished in 0.000646961 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1545.69 tests/s, 12365.51 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  # code goes here\n  s.each_char do |c|\n    if c.ord >= 65 && c.ord <= 90\n      sum += c.ord\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpi95mg52t\nStarted\n.\nFinished in 0.000874006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1144.16 tests/s, 9153.26 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x| x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpmof_t_5s\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpmof_t_5s.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009824858 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.78 tests/s, 101.78 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpryu2wahm\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpryu2wahm.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009394632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n106.44 tests/s, 106.44 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  count = 0\n  s.chars.each do |char|\n    if char.match(/[A-Z]/)\n      count += char.ord\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwxx5u_eq\nStarted\n.\nFinished in 0.000733543 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1363.25 tests/s, 10905.97 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').inject(0) { |sum, c| sum + c.ord.to_i if c.ord > 64 && c.ord < 91 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpigrnm2io\nStarted\nE\n===============================================================================\nError: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n  \n    s.split('').inject(0) { |sum, c| sum + c.ord.to_i if c.ord > 64 && c.ord < 91 }\n                                         ^\n/tmp/tmpigrnm2io.rb:18:in `block in digitSum'\n/tmp/tmpigrnm2io.rb:18:in `each'\n/tmp/tmpigrnm2io.rb:18:in `inject'\n/tmp/tmpigrnm2io.rb:18:in `digitSum'\n/tmp/tmpigrnm2io.rb:25:in `call'\n/tmp/tmpigrnm2io.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n===============================================================================\n\nFinished in 0.002394981 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n417.54 tests/s, 417.54 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  i = 0\n  sum = 0\n  while i < s.length\n    if s[i].ord <= 90 && s[i].ord >= 65\n      sum += s[i].ord\n    end\n    i += 1\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2wd903bj\nStarted\n.\nFinished in 0.000868014 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1152.06 tests/s, 9216.44 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  # your code\n  s.each_char do |char|\n    if char.ord >= 65 && char.ord <= 90\n      sum += char.ord\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpuvh4pwp6\nStarted\n.\nFinished in 0.000677059 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1476.98 tests/s, 11815.81 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  #your code here\n  s.split(\"\").select{|i| i =~ /[A-Z]/}.map{|i| i.ord}.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpd0_llbyc\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpd0_llbyc.rb:25:in `test_digitSum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n  => 25:     assert_equal(0, candidate.call(\"\"))\n     26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009604209 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.12 tests/s, 104.12 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptl0dpaj8\nStarted\n.\nFinished in 0.000785607 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1272.90 tests/s, 10183.21 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return 0 if s.empty?\n  s.gsub(/[^A-Z]/, '').bytes.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpvfpmif5n\nStarted\n.\nFinished in 0.000771952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1295.42 tests/s, 10363.34 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n   sum = 0\n   s.each_char do |char|\n     sum += char.ord if char =~ /[A-Z]/\n   end\n   sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpdajk6c7n\nStarted\n.\nFinished in 0.000902858 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1107.59 tests/s, 8860.75 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.bytes.reduce(0) { |sum, b| b.between?(65, 90) ? sum + b : sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpa265qpy2\nStarted\n.\nFinished in 0.000722447 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1384.18 tests/s, 11073.48 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return 0 if s.length == 0\n  sum = 0\n  s.chars.each do |char|\n    sum += char.ord if char.ord.between?(65, 90)\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwoijrx0u\nStarted\n.\nFinished in 0.000506753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.35 tests/s, 15786.78 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  if s.empty?\n    0\n  else\n    s.each_char.select { |i| i =~ /[A-Z]/ }.map { |i| i.ord }.reduce(:+)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpro8jb59m\nStarted\n.\nFinished in 0.000535167 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1868.58 tests/s, 14948.60 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.split('').map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpbnutiw6x\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpbnutiw6x.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006545803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.77 tests/s, 152.77 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.each_byte do |n|\n    sum += n if n >= 65 && n <= 90\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpskjjo8aq\nStarted\n.\nFinished in 0.000769466 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1299.60 tests/s, 10396.82 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  # \u6b63\u898f\u8868\u73fe\u3067\u6587\u5b57\u3092\u7f6e\u63db\u3057\u3066\u6570\u5024\u306b\u5909\u63db\u3059\u308b\n  str = s.gsub(/[^A-Z]/, '').tr('A-Z', '1-9a-z')\n  # \u5c0f\u6587\u5b57\u30920\u3068\u3057\u3066\u6570\u5024\u3092\u6570\u3048\u308b\n  str.chars.sum(&:ord) - str.chars.sum(&:downcase.ord)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp18zu8_kq\nStarted\nE\n===============================================================================\nError: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `ord' for :downcase:Symbol\n  \n    str.chars.sum(&:ord) - str.chars.sum(&:downcase.ord)\n                                                   ^^^^\n/tmp/tmp18zu8_kq.rb:21:in `digitSum'\n/tmp/tmp18zu8_kq.rb:27:in `call'\n/tmp/tmp18zu8_kq.rb:27:in `test_digitSum'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_digitSum\n     26:     candidate = method(:digitSum)\n  => 27:     assert_equal(0, candidate.call(\"\"))\n     28:     assert_equal(131, candidate.call(\"abAB\"))\n     29:     assert_equal(67, candidate.call(\"abcCd\"))\n     30:     assert_equal(69, candidate.call(\"helloE\"))\n===============================================================================\n\nFinished in 0.004600491 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n217.37 tests/s, 0.00 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.codepoints.inject(0) { |sum, x| x > 96 ? sum + x : sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpn_zpj028\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpn_zpj028.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<195>\n\ndiff:\n? 131\n?  95\n?  ??\n===============================================================================\n\nFinished in 0.009386005 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n106.54 tests/s, 213.08 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5_whiz65\nStarted\n.\nFinished in 0.000672575 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1486.82 tests/s, 11894.58 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  count = 0\n  s.each_char do |char|\n    count += char.ord if char.ord.between?(65, 90)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpuztn661f\nStarted\n.\nFinished in 0.000742377 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1347.02 tests/s, 10776.20 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return 0 if s.nil? || s.empty?\n  return s.sum { |x| x.ord } if s.is_a?(Array)\n  return s.sum - (s.length * s[0].ord) if s.match(/^[a-z]+$/)\n  s.sum - (s.length * 'a'.ord)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp3x7_8umw\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp3x7_8umw.rb:28:in `test_digitSum'\n     25:   def test_digitSum\n     26:     candidate = method(:digitSum)\n     27:     assert_equal(0, candidate.call(\"\"))\n  => 28:     assert_equal(131, candidate.call(\"abAB\"))\n     29:     assert_equal(67, candidate.call(\"abcCd\"))\n     30:     assert_equal(69, candidate.call(\"helloE\"))\n     31:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<-62>\n===============================================================================\n\nFinished in 0.010604488 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.30 tests/s, 188.60 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.each_char do |char|\n    sum += char.ord if char =~ /[A-Z]/\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpz2lz240h\nStarted\n.\nFinished in 0.000547154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1827.64 tests/s, 14621.11 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    s.bytes.reduce(0) { |acc, num| num < 97 ? acc + num : acc }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp242uvclr\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp242uvclr.rb:30:in `test_digitSum'\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n     29:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 30:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     31:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     32:   end\n     33: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.009682566 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.28 tests/s, 722.95 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    sum = 0\n    if s == \"\"\n        sum = 0\n    elsif s[0] == s[0].upcase\n        sum = s[0].ord + digitSum(s[1..-1])\n    else\n        sum = digitSum(s[1..-1])\n    end\n    return sum\nend\nputs digitSum(\"\")\nputs digitSum(\"abAB\")\nputs digitSum(\"abcCd\")\nputs digitSum(\"helloE\")\nputs digitSum(\"woArBld\")\nputs digitSum(\"aAaaaXa\")\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "0\n131\n67\n69\n131\n153\nLoaded suite /tmp/tmpnqudokyg\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpnqudokyg.rb:44:in `test_digitSum'\n     41:     assert_equal(69, candidate.call(\"helloE\"))\n     42:     assert_equal(131, candidate.call(\"woArBld\"))\n     43:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 44:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     45:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     46:   end\n     47: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.010167827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.35 tests/s, 688.45 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\ns.chars.select{|i|i=~/[A-Z]/}.map{|i|i.ord}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp2k38_onq\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp2k38_onq.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007794769 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.29 tests/s, 128.29 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return 0 if s.nil? || s.empty?\n  s.upcase.chars.reduce(0) { |acc, char| acc + char.ord }\nend\nputs \"Should be 0: #{digitSum('')}\"\nputs \"Should be 131: #{digitSum('abAB')}\"\nputs \"Should be 67: #{digitSum('abcCd')}\"\nputs \"Should be 69: #{digitSum('helloE')}\"\nputs \"Should be 131: #{digitSum('woArBld')}\"\nputs \"Should be 153: #{digitSum('aAaaaXa')}\"\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Should be 0: 0\nShould be 131: 262\nShould be 67: 333\nShould be 69: 441\nShould be 131: 523\nShould be 153: 478\nLoaded suite /tmp/tmpul6tmdut\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpul6tmdut.rb:32:in `test_digitSum'\n     29:   def test_digitSum\n     30:     candidate = method(:digitSum)\n     31:     assert_equal(0, candidate.call(\"\"))\n  => 32:     assert_equal(131, candidate.call(\"abAB\"))\n     33:     assert_equal(67, candidate.call(\"abcCd\"))\n     34:     assert_equal(69, candidate.call(\"helloE\"))\n     35:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.010195605 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.08 tests/s, 196.16 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.bytes.inject(0) { |total, b| (65..90).include?(b) ? total + b : total }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpakg9ohxe\nStarted\n.\nFinished in 0.000856411 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1167.66 tests/s, 9341.31 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  chars = s.chars\n  chars.map{|c| (c.ord - 64) unless c.ord < 65 || c.ord > 90}.compact.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp9wn0tk54\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp9wn0tk54.rb:25:in `test_digitSum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n  => 25:     assert_equal(0, candidate.call(\"\"))\n     26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009205577 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.63 tests/s, 108.63 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  (s.gsub(/[^A-Z]/, '').chars.reduce(0) { |sum, c| sum + c.ord } - 'A'.ord * s.count('A-Z')) / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpehygeit4\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpehygeit4.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<0>\n===============================================================================\n\nFinished in 0.00768374 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.14 tests/s, 260.29 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  p s.sum { |x| x.ord if x.upcase == x }.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpldpxuqx1\nStarted\n0\n326\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpldpxuqx1.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131 \n?   26\n? - ?\n===============================================================================\n\nFinished in 0.01075702 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n92.96 tests/s, 185.93 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.sum(&:ord)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp1vnkos1n\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp1vnkos1n.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131 \n?   26\n? - ?\n===============================================================================\n\nFinished in 0.007152254 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.82 tests/s, 279.63 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.bytes.reduce(0) { |sum, byte| byte < 97 ? sum + byte : sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp7sdrealz\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp7sdrealz.rb:30:in `test_digitSum'\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n     29:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 30:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     31:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     32:   end\n     33: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.009952615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.48 tests/s, 703.33 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  total = 0\n  s.each_byte { |e| total += e if e >= 65 && e <= 90 }\n  total\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpthzur1a8\nStarted\n.\nFinished in 0.000672221 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1487.61 tests/s, 11900.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  a = s.split('')\n  a.map(&:ord).keep_if { |x| x > 64 && x < 91 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpmb8idp8q\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpmb8idp8q.rb:25:in `test_digitSum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n  => 25:     assert_equal(0, candidate.call(\"\"))\n     26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010035908 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.64 tests/s, 99.64 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|c|c.ord}.select{|x|x>64&&x<91}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgssu8bcs\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpgssu8bcs.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006917504 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.56 tests/s, 144.56 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  #Code and Coding\n  s.scan(/[A-Z]/).map{|s| s.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmprtm7kvqs\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmprtm7kvqs.rb:25:in `test_digitSum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n  => 25:     assert_equal(0, candidate.call(\"\"))\n     26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010710257 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.37 tests/s, 93.37 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.inject(0) { |sum, c| sum + c.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpbxl_238p\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpbxl_238p.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.006282317 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.18 tests/s, 318.35 assertions/s\n",
      "timestamp": 1660012504
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^a-zA-Z]/, '').chars.inject(0) { |sum, n| sum + n.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp6nf27frg\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp6nf27frg.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131 \n?   26\n? - ?\n===============================================================================\n\nFinished in 0.010077886 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.23 tests/s, 198.45 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    return 0 if s.empty?\n    sum = 0\n    s.each_char do |c|\n        sum += c.ord if c.ord >= 65 && c.ord <= 90\n    end\n    sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpyqp8p_ba\nStarted\n.\nFinished in 0.000531504 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1881.45 tests/s, 15051.63 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.split('').map{|x| x.ord}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp4ziurvxq\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp4ziurvxq.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.009582006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.36 tests/s, 208.72 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map { |char| char.ord }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp88u60a4a\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp88u60a4a.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.009723894 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n102.84 tests/s, 205.68 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  \tsum=0\n  \ts.each_char{|c|\n\t  sum+=c.ord if c.ord>=65 and c.ord<=90\n\t}\n\treturn sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpz3g_w4jm\nStarted\n.\nFinished in 0.000602766 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1659.02 tests/s, 13272.15 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.chars.each do |c|\n    sum += c.ord if c.ord.between?(65, 90)\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpbwokkvil\nStarted\n.\nFinished in 0.000847255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1180.28 tests/s, 9442.26 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  if s.nil? || s.length < 1\n    return 0\n  end\n  #use the sum and downcase method instead\n  upper = 0\n  s.downcase.each_char do |character|\n    upper += character.ord if character.match(/[[:upper:]]/)\n  end\n  upper\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpag609clk\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpag609clk.rb:33:in `test_digitSum'\n     30:   def test_digitSum\n     31:     candidate = method(:digitSum)\n     32:     assert_equal(0, candidate.call(\"\"))\n  => 33:     assert_equal(131, candidate.call(\"abAB\"))\n     34:     assert_equal(67, candidate.call(\"abcCd\"))\n     35:     assert_equal(69, candidate.call(\"helloE\"))\n     36:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<0>\n===============================================================================\n\nFinished in 0.009677813 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.33 tests/s, 206.66 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return 0 if s.empty?\n  s.chars.select{|i|i.ord>=65&&i.ord<=90}.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpkjfoxt1o\nStarted\n.\nFinished in 0.00097525 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1025.38 tests/s, 8203.02 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|v|v.ord}.select{|v|v>=65&&v<=90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpjels4d89\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpjels4d89.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008913411 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.19 tests/s, 112.19 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  digits = ('A'..'Z').to_a\n  sum = 0\n  s.chars.each do |ch|\n    sum += ch.ord if digits.include?(ch)\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpbps1e59a\nStarted\n.\nFinished in 0.001155537 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n865.40 tests/s, 6923.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return 0 if s.empty?\n  s.upcase.bytes.select { |c| 65 <= c && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpobrm4r0b\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpobrm4r0b.rb:26:in `test_digitSum'\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n     25:     assert_equal(0, candidate.call(\"\"))\n  => 26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n     29:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.008926964 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.02 tests/s, 224.04 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  (s.each_char.map(&:ord).sum - s.downcase.each_char.map(&:ord).sum) / 2\nend\nputs \"Task 1\"\nputs digitSum(\"helloE\") == 69\nputs digitSum(\"woArBld\") == 131\nputs \"-------------\"\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Task 1\nfalse\nfalse\n-------------\nLoaded suite /tmp/tmpl36dpog8\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpl36dpog8.rb:29:in `test_digitSum'\n     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n     28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131, candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<-32>\n\ndiff:\n? 131\n? - 2\n? ? ?\n===============================================================================\n\nFinished in 0.008765853 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.08 tests/s, 228.16 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.select { |l| l.ord >= 65 && l.ord <= 90 }.map(&:ord).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpxmiacuua\nStarted\n.\nFinished in 0.000982641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1017.67 tests/s, 8141.33 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.reduce(0) { |sum, c|\n    c =~ /[[:upper:]]/ ? sum + c.ord : sum\n  }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzs1nbwmg\nStarted\n.\nFinished in 0.000688814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1451.77 tests/s, 11614.17 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.each_byte do |byte|\n    sum += byte if byte > 64 && byte < 91\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpsfcmbhln\nStarted\n.\nFinished in 0.000611596 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1635.07 tests/s, 13080.53 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  #puts s.scan(/[A-Z]/).map{|c| c.ord}.sum\n  s.scan(/[A-Z]/).map{|c| c.ord}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpy4qsttde\nStarted\n.\nFinished in 0.000836051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1196.10 tests/s, 9568.79 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n   s.upcase.chars.map{|c| c.ord - 64}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp7okcx63e\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp7okcx63e.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009801966 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n102.02 tests/s, 102.02 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    sum = 0\n    s.each_char { |c| sum += c.ord if c.ord >= 65 && c.ord <= 90 }\n    sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpdpj2abkq\nStarted\n.\nFinished in 0.000747529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1337.74 tests/s, 10701.93 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.select { |c| c.match(/[A-Z]/) }.map { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp0d5rf_ok\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp0d5rf_ok.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010324371 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.86 tests/s, 96.86 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^a-zA-Z]/, '').split('').reduce(0) { |sum, char| sum + char.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp7nu393ga\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp7nu393ga.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131 \n?   26\n? - ?\n===============================================================================\n\nFinished in 0.008123981 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.09 tests/s, 246.18 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map{|x| x.ord}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpxh_2cvnm\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpxh_2cvnm.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009694387 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.15 tests/s, 103.15 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  total = 0\n  s.upcase.chars.each do |c|\n    total += c.ord\n  end\n  total\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp7z61nssw\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp7z61nssw.rb:29:in `test_digitSum'\n     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n     28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131, candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.009673722 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.37 tests/s, 206.75 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').inject(0) { |res, c| res += c.ord if c =~ /[A-Z]/; res }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpuoh9nmtm\nStarted\n.\nFinished in 0.000677851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1475.25 tests/s, 11802.00 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^a-zA-Z]/, '').split('').map(&:ord).select { |v| v.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp62op05yo\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp62op05yo.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009688466 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.22 tests/s, 103.22 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.codepoints.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmps__zgpt1\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmps__zgpt1.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010120848 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.81 tests/s, 98.81 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.chars.each do |char|\n    sum += char.ord if char.ord >= 65 && char.ord <= 90\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpvkmey7gh\nStarted\n.\nFinished in 0.000588397 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1699.53 tests/s, 13596.26 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.reduce(0) { |sum, ch| ch.upcase! ? sum + ch.ord : sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpzz5sa9fo\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpzz5sa9fo.rb:26:in `test_digitSum'\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n  => 26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n     29:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n<67> expected but was\n<266>\n\ndiff:\n?  67\n? 2 6\n? + ?\n===============================================================================\n\nFinished in 0.009998113 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.02 tests/s, 300.06 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').map{|c| c.ord}.select{|n| n.between?(65,90)}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpfvbrsxb4\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpfvbrsxb4.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009443871 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n105.89 tests/s, 105.89 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.to_s.split('').inject(0) { |sum, c|\n    if c.match(/[A-Z]/)\n      sum += c.ord\n    end\n    sum\n  }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmporyq5wo4\nStarted\n.\nFinished in 0.000902755 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1107.72 tests/s, 8861.76 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n\tsum = 0\n\ts.split(\"\").each do |x|\n\t\tsum += x.ord if x.ord <= 90\n\tend\n\tsum\nend\nputs digitSum(\"abAB\")\nputs digitSum(\"abcCd\")\nputs digitSum(\"helloE\")\nputs digitSum(\"woArBld\")\nputs digitSum(\"aAaaaXa\")\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "131\n67\n69\n131\n153\nLoaded suite /tmp/tmpt2k2icy7\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpt2k2icy7.rb:39:in `test_digitSum'\n     36:     assert_equal(69, candidate.call(\"helloE\"))\n     37:     assert_equal(131, candidate.call(\"woArBld\"))\n     38:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 39:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     40:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     41:   end\n     42: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.007812479 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.00 tests/s, 896.00 assertions/s\n",
      "timestamp": 1660012505
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').each_byte.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp10qh8ce0\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp10qh8ce0.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008647145 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.65 tests/s, 115.65 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |i| i.between?(65, 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjyuwod1f\nStarted\n.\nFinished in 0.000800558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1249.13 tests/s, 9993.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map { |ch| ch.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa9v79cim\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpa9v79cim.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00929942 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.53 tests/s, 107.53 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  raise 'Invalid input' if s.length == 0\n  s.split('').map(&:ord).reduce(0) { |acc, x| (x >= 65 && x <= 90) ? acc + x : acc }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp9880ycu2\nStarted\nE\n===============================================================================\nError: test_digitSum(TestHumanEval): RuntimeError: Invalid input\n/tmp/tmp9880ycu2.rb:18:in `digitSum'\n/tmp/tmp9880ycu2.rb:25:in `call'\n/tmp/tmp9880ycu2.rb:25:in `test_digitSum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n  => 25:     assert_equal(0, candidate.call(\"\"))\n     26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n===============================================================================\n\nFinished in 0.001830541 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n546.29 tests/s, 0.00 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return 0 if s.empty?\n  s.split('').reduce(0) { |sum, c| sum + c.ord if c.ord.between?(65, 90) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp4vikf_qq\nStarted\nE\n===============================================================================\nError: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n  \n    s.split('').reduce(0) { |sum, c| sum + c.ord if c.ord.between?(65, 90) }\n                                         ^\n/tmp/tmp4vikf_qq.rb:19:in `block in digitSum'\n/tmp/tmp4vikf_qq.rb:19:in `each'\n/tmp/tmp4vikf_qq.rb:19:in `reduce'\n/tmp/tmp4vikf_qq.rb:19:in `digitSum'\n/tmp/tmp4vikf_qq.rb:26:in `call'\n/tmp/tmp4vikf_qq.rb:26:in `test_digitSum'\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n     25:     assert_equal(0, candidate.call(\"\"))\n  => 26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n     29:     assert_equal(131, candidate.call(\"woArBld\"))\n===============================================================================\n\nFinished in 0.002711398 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n368.81 tests/s, 368.81 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.count(\"A-Z\") > 0 ? s.upcase.bytes.reduce(:+) : 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmptrjo_xxg\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmptrjo_xxg.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.009821145 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.82 tests/s, 203.64 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.sum { |c| c.upcase.ord - 64 if c.upcase == c } || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp57wqidon\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp57wqidon.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131 \n?   26\n? - ?\n===============================================================================\n\nFinished in 0.011045445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.54 tests/s, 181.07 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n\tascii_sum = 0\n\ts.each_char do |char|\n\t\tascii_sum += char.ord if char.ord >= 65 && char.ord <= 90\n\tend\n\treturn ascii_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5sauii6n\nStarted\n.\nFinished in 0.000521346 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1918.11 tests/s, 15344.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).join.chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpvlhmyzsj\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpvlhmyzsj.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009579097 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.39 tests/s, 104.39 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  # your code\n  counter = 0\n  if s.empty? == true\n    puts 0\n  else\n    s.chars.each do |x|\n    counter += x.ord if x == x.upcase\n    end\n    puts counter\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpw6nqokeu\nStarted\n0\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpw6nqokeu.rb:33:in `test_digitSum'\n     30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_digitSum\n     32:     candidate = method(:digitSum)\n  => 33:     assert_equal(0, candidate.call(\"\"))\n     34:     assert_equal(131, candidate.call(\"abAB\"))\n     35:     assert_equal(67, candidate.call(\"abcCd\"))\n     36:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009702825 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.06 tests/s, 103.06 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.delete! '^A-Z'\n  s.chars.map { |n| n.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp5mx33ngx\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp5mx33ngx.rb:25:in `test_digitSum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n  => 25:     assert_equal(0, candidate.call(\"\"))\n     26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006709411 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.04 tests/s, 149.04 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.delete!('^A-Za-z')\n  s.split('').map(&:ord).inject(:+) || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpcd1jnidi\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpcd1jnidi.rb:26:in `test_digitSum'\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n     25:     assert_equal(0, candidate.call(\"\"))\n  => 26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n     29:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131 \n?   26\n? - ?\n===============================================================================\n\nFinished in 0.006783107 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.43 tests/s, 294.85 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.each_char do |ch|\n    if ch =~ /[A-Z]/\n      sum += ch.ord\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpthtrfzo6\nStarted\n.\nFinished in 0.000758026 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1319.22 tests/s, 10553.73 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.each_char.select { |c| c =~ /[A-Z]/ }.inject(0) { |sum, c| sum + c.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpo8ooffqf\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpo8ooffqf.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.006476811 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.40 tests/s, 308.79 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').map{|e|e.ord}.select{|e| e <= 90}.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpubbovlft\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpubbovlft.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009811572 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.92 tests/s, 101.92 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.reduce(0) { |sum, c| sum + c.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpnfm7rlyf\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpnfm7rlyf.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.00972193 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n102.86 tests/s, 205.72 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpkb6kl02p\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpkb6kl02p.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010272593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n97.35 tests/s, 97.35 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  if s.empty?\n    0\n  else\n    s.upcase.split('').map(&:ord).reduce(:+)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp0d_9wmze\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp0d_9wmze.rb:29:in `test_digitSum'\n     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n     28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131, candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.008723075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.64 tests/s, 229.28 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.inject(0) { |sum, n| n.between?(65, 90) ? sum + n : sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmput34jof4\nStarted\n.\nFinished in 0.000852145 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1173.51 tests/s, 9388.07 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    return 0 if s.empty?\n    s.upcase.codepoints.inject(0){|r, e| e >= 65 && e <= 90 ? r + e : r}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp15hp6sk8\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp15hp6sk8.rb:26:in `test_digitSum'\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n     25:     assert_equal(0, candidate.call(\"\"))\n  => 26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n     29:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.008149308 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n122.71 tests/s, 245.42 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.each_byte do |c|\n    if c > 64 && c < 91\n      sum += c\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfymdmb4d\nStarted\n.\nFinished in 0.000775051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1290.24 tests/s, 10321.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  b = 0\n  sum = 0\n  s.split(\"\").each do |i|\n    if i.match(/[A-Z]/)\n      sum += i.ord\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7sjs0rx_\nStarted\n.\nFinished in 0.000754365 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1325.62 tests/s, 10604.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n\ts.upcase.bytes.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpiijeoji5\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpiijeoji5.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.00944006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n105.93 tests/s, 211.86 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.split('').each do |c|\n    sum += c.ord if c.ord >= 65 && c.ord <= 90\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp6vi4levd\nStarted\n.\nFinished in 0.000581736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1718.99 tests/s, 13751.94 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map(&:ord).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpkubv7dto\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpkubv7dto.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010475574 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.46 tests/s, 95.46 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.split('').each do |letter|\n    if letter =~ /[[:upper:]]/\n      sum += letter.ord\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7ozfw66z\nStarted\n.\nFinished in 0.000663857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1506.35 tests/s, 12050.79 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    # puts s.upcase.split('').map{|i| i.ord}.inject(:+)\n    puts s.upcase.chars.map{|i| i.ord}.sum\nend\ndigitSum(\"helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "441\n523\n478\nLoaded suite /tmp/tmpavbtajek\nStarted\n0\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpavbtajek.rb:28:in `test_digitSum'\n     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  => 28:     assert_equal(0, candidate.call(\"\"))\n     29:     assert_equal(131, candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009000443 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n111.11 tests/s, 111.11 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map{|e| e.ord}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpiz0_9i1j\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpiz0_9i1j.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010423309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.94 tests/s, 95.94 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  uppers = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  s.split(\"\").each { |c| uppers.include?(c) ? sum += c.ord : sum }\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpj9ijkkqe\nStarted\n.\nFinished in 0.000752157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1329.51 tests/s, 10636.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.each_char.reduce(0) { |sum, c| sum + c.ord }\nend\np digitSum(\"\")\np digitSum(\"abAB\")\np digitSum(\"abcCd\")\np digitSum(\"helloE\")\np digitSum(\"woArBld\")\np digitSum(\"aAaaaXa\")\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "0\n262\n333\n441\n523\n478\nLoaded suite /tmp/tmpwfbdk47c\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpwfbdk47c.rb:31:in `test_digitSum'\n     28:   def test_digitSum\n     29:     candidate = method(:digitSum)\n     30:     assert_equal(0, candidate.call(\"\"))\n  => 31:     assert_equal(131, candidate.call(\"abAB\"))\n     32:     assert_equal(67, candidate.call(\"abcCd\"))\n     33:     assert_equal(69, candidate.call(\"helloE\"))\n     34:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.009365182 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n106.78 tests/s, 213.56 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  (0..s.length-1).each do |i|\n    if s[i]==s[i].upcase\n      sum+=s[i].ord\n    end\n  end\n  sum\nend\ns = \"\"\ns = gets.chomp\nputs digitSum(s)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprwgi2jhm.rb:27:in `<main>': undefined method `chomp' for nil:NilClass (NoMethodError)\n\ns = gets.chomp\n        ^^^^^^\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return 0 if s.empty?\n  s.chars.map { |i| i =~ /[A-Z]/ ? i.ord - 64 : 0 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpzomhfjo8\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpzomhfjo8.rb:26:in `test_digitSum'\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n     25:     assert_equal(0, candidate.call(\"\"))\n  => 26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n     29:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<3>\n\ndiff:\n? 131\n===============================================================================\n\nFinished in 0.010203478 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.01 tests/s, 196.01 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.each_char do |ch|\n    sum += ch.ord if ch.ord >= 65 && ch.ord <= 90\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9qi2t71p\nStarted\n.\nFinished in 0.001040463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n961.11 tests/s, 7688.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.each_byte do |num|\n    sum += num if num.between?(65, 90)\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpx96vlp3c\nStarted\n.\nFinished in 0.000755579 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1323.49 tests/s, 10587.91 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.inject(0) { |result, elem| elem.ord.between?(65, 90) ? result + elem.ord : result}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgpyo8vlr\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpgpyo8vlr.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.010412829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.04 tests/s, 192.07 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  arr = s.split('')\n  sum = 0\n  arr.each do |char|\n    sum += char.ord if char.upcase == char\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpkzp9d3qe\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpkzp9d3qe.rb:35:in `test_digitSum'\n     32:     assert_equal(69, candidate.call(\"helloE\"))\n     33:     assert_equal(131, candidate.call(\"woArBld\"))\n     34:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 35:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     36:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     37:   end\n     38: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.006969185 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.49 tests/s, 1004.42 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  return 0 if s.empty?\n  s.chars.map { |c| c.ord }.select { |a| a.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9f9opjdw\nStarted\n.\nFinished in 0.000537973 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1858.83 tests/s, 14870.63 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|i| i.ord <= 90 ? i.ord : 0}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpixf6sdy9\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpixf6sdy9.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009720688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n102.87 tests/s, 102.87 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map { |c| c.ord - 65 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp30kj135l\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp30kj135l.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009657445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.55 tests/s, 103.55 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  # your code here\n  sum = 0\n  s.split(\"\").each do |i|\n    sum += i.ord if i.ord <= 90\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmplh7ubyor\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmplh7ubyor.rb:35:in `test_digitSum'\n     32:     assert_equal(69, candidate.call(\"helloE\"))\n     33:     assert_equal(131, candidate.call(\"woArBld\"))\n     34:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 35:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     36:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     37:   end\n     38: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.010831446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n92.32 tests/s, 646.27 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.each_byte.inject(0) { |sum, code| code >= 65 && code <= 90 ? sum + code : sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfb31v2ir\nStarted\n.\nFinished in 0.000512782 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1950.15 tests/s, 15601.17 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.each_byte do |c|\n    sum += c if (c >= 65 && c <= 90)\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpuir9nooa\nStarted\n.\nFinished in 0.00048475 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2062.92 tests/s, 16503.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').inject(0) { |sum, c| sum + (c.ord - 96) if c =~ /[A-Z]/ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpdj3tqim8\nStarted\nE\n===============================================================================\nError: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n  \n    s.split('').inject(0) { |sum, c| sum + (c.ord - 96) if c =~ /[A-Z]/ }\n                                         ^\n/tmp/tmpdj3tqim8.rb:18:in `block in digitSum'\n/tmp/tmpdj3tqim8.rb:18:in `each'\n/tmp/tmpdj3tqim8.rb:18:in `inject'\n/tmp/tmpdj3tqim8.rb:18:in `digitSum'\n/tmp/tmpdj3tqim8.rb:25:in `call'\n/tmp/tmpdj3tqim8.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n===============================================================================\n\nFinished in 0.003618577 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n276.35 tests/s, 276.35 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').map { |letter| letter.upcase.ord }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpz0cv7o0w\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpz0cv7o0w.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.007021696 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.42 tests/s, 284.83 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.count('A-Z') > 0 ? s.count('A-Z') + 26 : 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpncws1rfe\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpncws1rfe.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<28>\n===============================================================================\n\nFinished in 0.009006347 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n111.03 tests/s, 222.07 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  # sum = 0\n  # s.upcase.split('').each do |ch|\n  #   sum += ch.ord\n  # end\n  # sum\n  sum = 0\n  s.split('').each do |ch|\n    if ch == ch.upcase\n      sum += ch.ord\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpbcxd4m75\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpbcxd4m75.rb:41:in `test_digitSum'\n     38:     assert_equal(69, candidate.call(\"helloE\"))\n     39:     assert_equal(131, candidate.call(\"woArBld\"))\n     40:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 41:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     42:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     43:   end\n     44: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.009931447 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.69 tests/s, 704.83 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.chars.each { |c| sum += c.ord if c.ord >= 65 && c.ord <= 90 }\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwaz__a9e\nStarted\n.\nFinished in 0.000592046 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1689.06 tests/s, 13512.46 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x| x.ord}.inject{|sum,x| sum + x.to_i - 96}\nend\np digitSum(\"abcCd\")\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "77\nLoaded suite /tmp/tmpg30qqfri\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpg30qqfri.rb:25:in `test_digitSum'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_digitSum\n     24:     candidate = method(:digitSum)\n  => 25:     assert_equal(0, candidate.call(\"\"))\n     26:     assert_equal(131, candidate.call(\"abAB\"))\n     27:     assert_equal(67, candidate.call(\"abcCd\"))\n     28:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006463007 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.73 tests/s, 154.73 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.select { |c| c.match?(/[[:upper:]]/) }.map { |c| c.ord }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmppbo0s42l\nStarted\n.\nFinished in 0.000484381 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2064.49 tests/s, 16515.92 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.select { |i| i.ord >= 'A'.ord && i.ord <= 'Z'.ord }.reduce(0) { |sum, c| sum + c.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpykby_tyx\nStarted\n.\nFinished in 0.000621381 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1609.32 tests/s, 12874.55 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  if s.empty? then return 0 end\n  s.scan(/[A-Z]/).map{|x| x.ord}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpt3teno3d\nStarted\n.\nFinished in 0.000593556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1684.76 tests/s, 13478.09 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.split('').each do |x|\n    sum += x.ord if x.ord >= 65 && x.ord <= 90\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoi775iu3\nStarted\n.\nFinished in 0.000811047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1232.97 tests/s, 9863.79 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpyfbu5wzc\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpyfbu5wzc.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006313814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.38 tests/s, 158.38 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.split('').select{|a| a.ord >= 65 && a.ord <= 90}.map{|b| b.ord}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpw10z35aj\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpw10z35aj.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006018504 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.15 tests/s, 166.15 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n    s.scan(/[[:upper:]]/).map{|e| e.ord}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpxvu269f0\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpxvu269f0.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.005943762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n168.24 tests/s, 168.24 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.each_char do |char|\n    sum += char.ord if char.ord.between?(65, 90)\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpw344pmp8\nStarted\n.\nFinished in 0.000408309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2449.13 tests/s, 19593.00 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').map { |l| l.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpk0xz9rsq\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpk0xz9rsq.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.005774041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n173.19 tests/s, 173.19 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').reduce(0) { |r, e| e.upcase == e ? r + e.ord : r }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpkc_2p30b\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpkc_2p30b.rb:30:in `test_digitSum'\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n     29:     assert_equal(153, candidate.call(\"aAaaaXa\"))\n  => 30:     assert_equal(151, candidate.call(\" How are yOu?\"))\n     31:     assert_equal(327, candidate.call(\"You arE Very Smart\"))\n     32:   end\n     33: end\n<151> expected but was\n<310>\n\ndiff:\n?  151\n? 3 0 \n? + ?? \n===============================================================================\n\nFinished in 0.006040181 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.56 tests/s, 1158.91 assertions/s\n",
      "timestamp": 1660012506
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  if s.length == 0\n    return 0\n  else\n    arr = s.split('')\n    arr.each do |a|\n      if a.ord >= 65 && a.ord <= 90\n        sum += a.ord\n      end\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0k098kxm\nStarted\n.\nFinished in 0.000444049 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2252.00 tests/s, 18016.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1660012506
    }
  ]
}