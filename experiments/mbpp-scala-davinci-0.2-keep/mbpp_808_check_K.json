{
  "name": "mbpp_808_check_K",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given tuples contain the k or not.\n    def checkK(test_tup : Long, K : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkK((10l, 4l, 5l, 6l, 8l), (6l)) == (true));\n    assert(checkK((1l, 2l, 3l, 4l, 5l, 6l), (7l)) == (false));\n    assert(checkK((7l, 8l, 9l, 44l, 11l, 12l), (11l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_rev = test_tup_str_arr_len - test_tup_str_arr_len_half\n        var test_tup_str_arr_len_half_rev_arr = test_tup_str_arr.slice(test_tup_str_arr_len_half, test_tup_str_arr_len)\n        var test_tup_str_arr_len_half_arr = test_tup_str_arr.slice(0, test_tup_str_arr_len_half)\n        var test_tup_str_arr_len_half_rev_arr_str = test_tup_str_arr_len_half_rev_arr.mkString(\"\")\n        var test_tup_str_arr_len_half_arr_str = test_tup_str_arr_len_half_arr.mkString(\"\")\n        var test_tup_str_arr_len_half_rev_arr_str_rev = test_tup_str_arr_len_half_rev_arr_str.reverse\n        var test_tup_str_arr_len_half_arr_str_rev = test_tup_str_arr_len_half_arr_str.reverse\n        var test_tup_str_arr_len_half_rev_arr_str_rev_int = test_tup_str_arr_len_half_rev_arr_str_rev.toInt\n        var test_tup_str_arr_len_half_arr_str_rev_int = test_tup_str_arr_len_half_arr_str_rev.toInt\n        var test_tup_str_arr_len_half_rev_arr_str",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        val test_tup_str_arr = test_tup_str.toCharArray\n        var i = 0\n        var j = test_tup_str_len - 1\n        while (i < j) {\n            if (test_tup_str_arr(i) != test_tup_str_arr(j)) return false\n            i += 1\n            j -= 1\n        }\n        return true",
    "        var tup_sum = 0L\n        var tup_prod = 1L\n        var tup_str = test_tup.toString\n        for (i <- 0 until tup_str.length) {\n            tup_sum += tup_str(i).asDigit\n            tup_prod *= tup_str(i).asDigit\n        }\n        if (tup_sum == K && tup_prod == K) {\n            return true\n        }\n        return false",
    "        var k_found = false\n        var curr_tup = test_tup\n        while (curr_tup > 0) {\n            if (curr_tup % 10 == K) {\n                k_found = true\n                curr_tup = 0\n            }\n            else curr_tup /= 10\n        }\n        k_found",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        var i = 0\n        var j = test_tup_str_len - 1\n        var flag = true\n        while(i < j && flag) {\n            if(test_tup_str(i) != test_tup_str(j)) flag = false\n            i += 1\n            j -= 1\n        }\n        if(flag && test_tup_str_len == K.toString.length) true\n        else false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_len = test_tup_str.length\n        var test_tup_arr = test_tup_str.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        var i = 0\n        while (i < test_tup_str_len) {\n            if (test_tup_str(i) == K.toString()(0)) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_ceil = ceil(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_floor = floor(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_ceil_sum = 0\n        var test_tup_str_arr_len_half_floor_sum = 0\n        for (i <- 0 until test_tup_str_arr_len_half_ceil) {\n            test_tup_str_arr_len_half_ceil_sum += test_tup_str_arr(i).toInt - 48\n        }\n        for (i <- test_tup_str_arr_len_half_floor until test_tup_str_arr_len) {\n            test_tup_str_arr_len_half_floor_sum += test_tup_str_arr(i).toInt - 48\n        }\n        if (test_tup_str_arr_len_half_ceil_sum == K || test_tup_str_arr_len_half_floor_sum == K) {\n            return true\n        }\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_ceil = ceil(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_floor = floor(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_ceil_sum = 0\n        var test_tup_str_arr_len_half_floor_sum = 0\n        for (i <- 0 until test_tup_str_arr_len_half_ceil) {\n            test_tup_str_arr_len_half_ceil_sum += test_tup_str_arr(i).toInt - 48\n        }\n        for (i <- test_tup_str_arr_len_half_floor until test_tup_str_arr_len) {\n            test_tup_str_arr_len_half_floor_sum += test_tup_str_arr(i).toInt - 48\n        }\n        if (test_tup_str_arr_len_half_ceil_sum == K || test_tup_str_arr_len_half_floor_sum == K) {\n            return true\n        }\n        return false",
    "        var test_tup_copy = test_tup\n        while (test_tup_copy > 0) {\n            if (test_tup_copy % 10 == K) return true\n            test_tup_copy /= 10\n        }\n        return false",
    "        val test_tup_str = test_tup.toString\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_set = test_tup_str_arr.toSet\n        if (test_tup_str_arr_set.size == 1) {\n            if (test_tup_str_arr_set.head == K.toString.toCharArray.head) return true\n            else return false\n        }\n        var test_tup_str_arr_set_arr = test_tup_str_arr_set.toArray\n        var test_tup_str_arr_set_arr_size = test_tup_str_arr_set_arr.size\n        var test_tup_str_arr_set_arr_size_half = test_tup_str_arr_set_arr_size / 2\n        var test_tup_str_arr_set_arr_size_half_ceil = ceil(test_tup_str_arr_set_arr_size_half).toInt\n        var test_tup_str_arr_set_arr_size_half_floor = floor(test_tup_str_arr_set_arr_size_half).toInt\n        var test_tup_str_arr_set_arr_size_half_ceil_arr = test_tup_str_arr_set_arr.slice(0, test_tup_str_arr_set_arr_size_half_ceil)\n        var test_tup_str_arr_set_arr_size_half_floor_arr = test_tup_str_arr_set_arr.slice(test_tup_str_arr_set_arr_size_half_ceil, test_tup_str_arr_set_arr_size)\n        var test_tup_str_arr_set_arr_size_half_ceil_arr_str = test_tup_str_arr_set_arr_size_half_ceil_arr.mkString\n        var test_tup_str_arr_set_arr_size_",
    "        var tup = test_tup\n        while (tup > 0) {\n            if (tup % 10 == K) return true\n            tup /= 10\n        }\n        return false",
    "        var test_tup_arr = test_tup.toString.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var test_tup_arr_sum = 0\n        for (i <- 0 until test_tup_arr_len) {\n            test_tup_arr_sum += test_tup_arr(i).toString.toInt\n        }\n        if (test_tup_arr_sum == K) {\n            return true\n        }\n        return false",
    "        var k_found = false\n        for (i <- test_tup.toString) {\n            if (i.toString.toLong == K) {\n                k_found = true\n            }\n        }\n        return k_found",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) true else false",
    "        var flag = false\n        for (i <- 0 to test_tup.toString.length - 1) {\n            if (test_tup.toString.charAt(i) == K.toString.charAt(0)) {\n                flag = true\n            }\n        }\n        return flag",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) true else false",
    "        if (test_tup == K) {\n            return true\n        }\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.split(\"\")\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_arr = test_tup_str_arr.slice(0, test_tup_str_arr_len_half)\n        var test_tup_str_arr_len_half_arr_len = test_tup_str_arr_len_half_arr.length\n        var test_tup_str_arr_len_half_arr_len_sum = 0\n        for (i <- 0 until test_tup_str_arr_len_half_arr_len) {\n            test_tup_str_arr_len_half_arr_len_sum += test_tup_str_arr_len_half_arr(i).toInt\n        }\n        var test_tup_str_arr_len_half_arr_len_sum_half = test_tup_str_arr_len_half_arr_len_sum / 2\n        if (test_tup_str_arr_len_half_arr_len_sum_half == K) {\n            return true\n        } else {\n            return false\n        }"
  ]
}