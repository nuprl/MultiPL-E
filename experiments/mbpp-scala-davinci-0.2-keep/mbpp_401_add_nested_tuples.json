{
  "name": "mbpp_401_add_nested_tuples",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    def addNestedTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addNestedTuples(((1l, 3l), (4l, 5l), (2l, 9l), (1l, 10l)), ((6l, 7l), (3l, 9l), (1l, 1l), (7l, 3l))) == ((7l, 10l), (7l, 14l), (3l, 10l), (8l, 13l)));\n    assert(addNestedTuples(((2l, 4l), (5l, 6l), (3l, 10l), (2l, 11l)), ((7l, 8l), (4l, 10l), (2l, 2l), (8l, 4l))) == ((9l, 12l), (9l, 16l), (5l, 12l), (10l, 15l)));\n    assert(addNestedTuples(((3l, 5l), (6l, 7l), (4l, 11l), (3l, 12l)), ((8l, 9l), (5l, 11l), (3l, 3l), (9l, 5l))) == ((11l, 14l), (11l, 18l), (7l, 14l), (12l, 17l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var tup1_list = List[Long]()\n        var tup2_list = List[Long]()\n        while (tup1 != 0) {\n            tup1_list = (tup1 % 10) :: tup1_list\n            tup1 /= 10\n        }\n        while (tup2 != 0) {\n            tup2_list = (tup2 % 10) :: tup2_list\n            tup2 /= 10\n        }\n        for (i <- 0 until tup1_list.length) {\n            sum = sum * 10 + (tup1_list(i) + tup2_list(i))\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until test_tup1.toString.length) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            result = result * 10 + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        // Write your code here\n        return 0",
    "        var test_tup1_str = test_tup1.toString\n        var test_tup2_str = test_tup2.toString\n        var test_tup1_arr = test_tup1_str.toCharArray\n        var test_tup2_arr = test_tup2_str.toCharArray\n        var test_tup1_arr_len = test_tup1_arr.length\n        var test_tup2_arr_len = test_tup2_arr.length\n        var test_tup1_arr_len_half = test_tup1_arr_len / 2\n        var test_tup2_arr_len_half = test_tup2_arr_len / 2\n        var test_tup1_arr_len_half_str = test_tup1_arr_len_half.toString\n        var test_tup2_arr_len_half_str = test_tup2_arr_len_half.toString\n        var test_tup1_arr_len_half_str_arr = test_tup1_arr_len_half_str.toCharArray\n        var test_tup2_arr_len_half_str_arr = test_tup2_arr_len_half_str.toCharArray\n        var test_tup1_arr_len_half_str_arr_len = test_tup1_arr_len_half_str_arr.length\n        var test_tup2_arr_len_half_str_arr_len = test_tup2_arr_len_half_str_arr.length\n        var test_tup1_arr_len_half_str_arr_len_half = test_tup1_arr_len_half_str_arr_len / 2\n        var test_tup2_arr_len_half_str_arr_len_half = test_tup2_arr_len_half_str_arr_len / 2\n        var test_tup1_arr_len_half_str_arr_len_half_str = test_tup1_arr_len_half_str_arr",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        var sum = 0L\n        for (i <- 0 until test_tup1.toString.length) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        // Write your code here\n        return 0",
    "        return test_tup1 + test_tup2",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0 && tup2 > 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        sum",
    "        var result = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0) {\n            result += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var result = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            result += (test_tup1.toString.charAt(i).toInt - '0'.toInt) + (test_tup2.toString.charAt(i).toInt - '0'.toInt)\n        }\n        return result",
    "        val tup1 = (1, 2, 3, 4, 5)\n        val tup2 = (6, 7, 8, 9, 10)\n        val tup3 = tup1.zip(tup2).map(x => x._1 + x._2)\n        return tup3.product",
    "        var result = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0) {\n            result = result + (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var sum = 0L\n        for (i <- 0 until test_tup1.toString.length) {\n            sum += (test_tup1.toString.charAt(i).toString.toInt + test_tup2.toString.charAt(i).toString.toInt)\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n        val tup3 = (21, 22, 23, 24, 25, 26, 27, 28, 29, 30)\n        val tup4 = (31, 32, 33, 34, 35, 36, 37, 38, 39, 40)\n        val tup5 = (41, 42, 43, 44, 45, 46, 47, 48, 49, 50)\n        val tup6 = (51, 52, 53, 54, 55, 56, 57, 58, 59, 60)\n        val tup7 = (61, 62, 63, 64, 65, 66, 67, 68, 69, 70)\n        val tup8 = (71, 72, 73, 74, 75, 76, 77, 78, 79, 80)\n        val tup9 = (81, 82, 83, 84, 85, 86, 87, 88, 89, 90)\n        val tup10 = (91, 92, 93, 94, 95, 96, 97, 98, 99, 100)\n        val tup11 = (101, 102, 103, 104, 105, 106, 107, 108, 109, 110)\n        val tup12 = (111, 112, 113, 114, 115, 116, 117, 118, 119, 120)\n        val tup13 = (121, 122, 123, 124, 125, 126, 127, 128, 129, 130)\n        val tup14 = (131, 132, 133, 134, 135, 136, 137, 138, 139, 140)\n        val tup15 = (141, 142, 143, 144, 145, 146, 147, 148, 149, 150)\n        val tup16 = (151, 152, 153, 154, 155, 156, 157, 158, 159, 160)\n        val tup17 = (161, 162, 163, 164, 165, 166, 167, 168, 169, 170)\n        val tup18 = (171, 172, 173, 174, 175, 176, 177, 178, 179, 180)\n        val tup19 = (",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 != 0 || tup2 != 0) {\n            sum += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Long] + x._2.asInstanceOf[Long]).toList\n        tup3(test_tup1.toInt - 1) + tup3(test_tup2.toInt - 1)"
  ]
}