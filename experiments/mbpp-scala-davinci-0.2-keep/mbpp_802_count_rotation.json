{
  "name": "mbpp_802_count_rotation",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    def countRotation(arr : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countRotation((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(countRotation((List[Long](4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (2l));\n    assert(countRotation((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(countRotation((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (0l));\n    assert(countRotation((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count = 0\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) > arr(i + 1)) {\n                count = i + 1\n                return count\n            }\n        }\n        return count",
    "        var min = arr(0)\n        var minIndex = 0\n        for (i <- 1 until arr.length) {\n            if (arr(i) < min) {\n                min = arr(i)\n                minIndex = i\n            }\n        }\n        minIndex",
    "        val n = arr.length\n        var low = 0\n        var high = n - 1\n        while (low <= high) {\n            if (arr(low) <= arr(high)) return low\n            val mid = (low + high) / 2\n            val next = (mid + 1) % n\n            val prev = (mid + n - 1) % n\n            if (arr(mid) <= arr(next) && arr(mid) <= arr(prev)) return mid\n            else if (arr(mid) <= arr(high)) high = mid - 1\n            else if (arr(mid) >= arr(low)) low = mid + 1\n        }\n        return -1",
    "        val n = arr.length\n        var low = 0\n        var high = n - 1\n        while (low <= high) {\n            if (arr(low) <= arr(high)) return low\n            val mid = (low + high) / 2\n            val next = (mid + 1) % n\n            val prev = (mid + n - 1) % n\n            if (arr(mid) <= arr(next) && arr(mid) <= arr(prev)) return mid\n            else if (arr(mid) <= arr(high)) high = mid - 1\n            else if (arr(mid) >= arr(low)) low = mid + 1\n        }\n        return -1",
    "        var min = arr(0)\n        var minIndex = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) < min) {\n                min = arr(i)\n                minIndex = i\n            }\n        }\n        minIndex",
    "        var min = arr(0)\n        var minIndex = 0\n        for (i <- 1 until arr.length) {\n            if (arr(i) < min) {\n                min = arr(i)\n                minIndex = i\n            }\n        }\n        minIndex",
    "        val n = arr.length\n        var low = 0\n        var high = n - 1\n        while (low <= high) {\n            if (arr(low) <= arr(high)) return low\n            var mid = (low + high) / 2\n            var next = (mid + 1) % n\n            var prev = (mid + n - 1) % n\n            if (arr(mid) <= arr(next) && arr(mid) <= arr(prev)) return mid\n            else if (arr(mid) <= arr(high)) high = mid - 1\n            else if (arr(mid) >= arr(low)) low = mid + 1\n        }\n        return -1",
    "        val n = arr.length\n        var low = 0\n        var high = n - 1\n        while (low <= high) {\n            if (arr(low) <= arr(high)) return low\n            val mid = (low + high) / 2\n            val next = (mid + 1) % n\n            val prev = (mid + n - 1) % n\n            if (arr(mid) <= arr(next) && arr(mid) <= arr(prev)) return mid\n            else if (arr(mid) <= arr(high)) high = mid - 1\n            else if (arr(mid) >= arr(low)) low = mid + 1\n        }\n        return -1",
    "        var min = arr(0)\n        var minIndex = 0\n        for (i <- 1 until arr.length) {\n            if (arr(i) < min) {\n                min = arr(i)\n                minIndex = i\n            }\n        }\n        minIndex",
    "        var min = arr(0)\n        var minIndex = 0\n        for (i <- 1 until arr.length) {\n            if (arr(i) < min) {\n                min = arr(i)\n                minIndex = i\n            }\n        }\n        minIndex",
    "        val n = arr.length\n        var low = 0\n        var high = n - 1\n        while (low <= high) {\n            if (arr(low) <= arr(high)) return low\n            var mid = (low + high) / 2\n            var next = (mid + 1) % n\n            var prev = (mid + n - 1) % n\n            if (arr(mid) <= arr(next) && arr(mid) <= arr(prev)) return mid\n            else if (arr(mid) <= arr(high)) high = mid - 1\n            else if (arr(mid) >= arr(low)) low = mid + 1\n        }\n        return -1",
    "        val n = arr.length\n        var low = 0\n        var high = n - 1\n        while (low <= high) {\n            if (arr(low) <= arr(high)) return low\n            val mid = (low + high) / 2\n            val next = (mid + 1) % n\n            val prev = (mid + n - 1) % n\n            if (arr(mid) <= arr(next) && arr(mid) <= arr(prev)) return mid\n            else if (arr(mid) <= arr(high)) high = mid - 1\n            else if (arr(mid) >= arr(low)) low = mid + 1\n        }\n        -1",
    "        val n = arr.length\n        var low = 0\n        var high = n - 1\n        while (low <= high) {\n            if (arr(low) <= arr(high)) return low\n            val mid = low + (high - low) / 2\n            val next = (mid + 1) % n\n            val prev = (mid + n - 1) % n\n            if (arr(mid) <= arr(next) && arr(mid) <= arr(prev)) return mid\n            else if (arr(mid) <= arr(high)) high = mid - 1\n            else if (arr(mid) >= arr(low)) low = mid + 1\n        }\n        return -1",
    "        val n = arr.length\n        var low = 0\n        var high = n - 1\n        while (low <= high) {\n            if (arr(low) <= arr(high)) return low\n            val mid = low + (high - low) / 2\n            val next = (mid + 1) % n\n            val prev = (mid + n - 1) % n\n            if (arr(mid) <= arr(next) && arr(mid) <= arr(prev)) return mid\n            else if (arr(mid) <= arr(high)) high = mid - 1\n            else if (arr(mid) >= arr(low)) low = mid + 1\n        }\n        -1",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) > arr(i + 1)) {\n                count = i + 1\n                return count\n            }\n        }\n        return count",
    "        var min = arr(0)\n        var minIndex = 0\n        for (i <- 1 until arr.length) {\n            if (arr(i) < min) {\n                min = arr(i)\n                minIndex = i\n            }\n        }\n        return minIndex",
    "        val n = arr.length\n        var low = 0\n        var high = n - 1\n        while (low < high) {\n            if (arr(low) <= arr(high)) return low\n            var mid = (low + high) / 2\n            var next = (mid + 1) % n\n            var prev = (mid + n - 1) % n\n            if (arr(mid) <= arr(next) && arr(mid) <= arr(prev)) return mid\n            if (arr(mid) <= arr(high)) high = mid - 1\n            else if (arr(mid) >= arr(low)) low = mid + 1\n        }\n        return -1",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) > arr((i + 1) % arr.length)) {\n                count = i + 1\n                return count\n            }\n        }\n        return count",
    "        val n = arr.length\n        var low = 0\n        var high = n - 1\n        while (low <= high) {\n            if (arr(low) <= arr(high)) return low\n            var mid = (low + high) / 2\n            var next = (mid + 1) % n\n            var prev = (mid + n - 1) % n\n            if (arr(mid) <= arr(next) && arr(mid) <= arr(prev)) return mid\n            else if (arr(mid) <= arr(high)) high = mid - 1\n            else if (arr(mid) >= arr(low)) low = mid + 1\n        }\n        return -1",
    "        val n = arr.length\n        var low = 0\n        var high = n - 1\n        while (low <= high) {\n            if (arr(low) <= arr(high)) return low\n            val mid = (low + high) / 2\n            val next = (mid + 1) % n\n            val prev = (mid + n - 1) % n\n            if (arr(mid) <= arr(next) && arr(mid) <= arr(prev)) return mid\n            else if (arr(mid) <= arr(high)) high = mid - 1\n            else if (arr(mid) >= arr(low)) low = mid + 1\n        }\n        return -1"
  ]
}