{
  "name": "mbpp_72_dif_Square",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var x = sqrt(n).toLong\n        while (x > 0) {\n            if (x * x == n) return true\n            x -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyrw_sub5.scala:14)\n\tat Problem.main(tmpyrw_sub5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            if (sq > n) return false\n            val dif = n - sq\n            val sqrtDif = sqrt(dif).toLong\n            if (sqrtDif * sqrtDif == dif) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpz0bvowta.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5si3fgvu.scala:16)\n\tat Problem.main(tmp5si3fgvu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i <= n) {\n            val j = n - i * i\n            if (j < 0) return false\n            if (j == 0) return true\n            if (j == i * i) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg41j10yi.scala:17)\n\tat Problem.main(tmpg41j10yi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_fi9vw6d.scala:14)\n\tat Problem.main(tmp_fi9vw6d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1L to sqrt) {\n            val j = sqrt(n - i * i)\n            if (j * j == n - i * i) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510652,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfii14k8m.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg8eja6ix.scala:18)\n\tat Problem.main(tmpg8eja6ix.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            val sq = sqrt * sqrt\n            if (sq == n) return true\n            else if (sq < n) {\n                val sq2 = (sqrt + 1) * (sqrt + 1)\n                if (sq2 == n) return true\n                else if (sq2 < n) return false\n            }\n            sqrt -= 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpt590w9hg.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 0\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmtbc450x.scala:14)\n\tat Problem.main(tmpmtbc450x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            var sq = i * i\n            if (sq > n) return false\n            var sq2 = sqrt(n - sq).toLong\n            if (sq2 * sq2 == n - sq) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510652,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp5nb7bs7j.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (sqrt(n - i * i).toLong == sqrt(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk22d9m4_.scala:15)\n\tat Problem.main(tmpk22d9m4_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = sqrt(n).toInt\n        while (i > 0) {\n            if (i * i == n) return true\n            i -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_22ep4_y.scala:14)\n\tat Problem.main(tmp_22ep4_y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            var sq = sqrt * sqrt\n            if (sq < n) {\n                var sq2 = sqrt * sqrt\n                while (sq2 < n) {\n                    if (sq + sq2 == n) return true\n                    sq2 += 2 * sqrt + 1\n                }\n            }\n            sqrt -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpcdby3t87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        if (sqrt * sqrt == n) return true\n        var i = 1\n        while (i <= sqrt) {\n            var j = 1\n            while (j <= sqrt) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510652,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpcwmin9k9.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg8eja6ix.scala:18)\n\tat Problem.main(tmpg8eja6ix.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        if (n < 0) return false\n        var i = 0\n        while (i * i <= n) {\n            var j = 0\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6577w2v.scala:19)\n\tat Problem.main(tmpc6577w2v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var s = sqrt(n).toLong\n        while (s * s > n) s -= 1\n        while (s * s < n) s += 1\n        return s * s == n\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeqhkc3ne.scala:12)\n\tat Problem.main(tmpeqhkc3ne.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqk3_29kf.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toInt\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toInt\n            if (i * i + j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123959,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpearu6ud_.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toInt\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg8eja6ix.scala:18)\n\tat Problem.main(tmpg8eja6ix.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrtN = sqrt(n).toLong\n        var i = sqrtN\n        while (i > 0) {\n            var sq = i * i\n            var diff = n - sq\n            var sqrtDiff = sqrt(diff).toLong\n            if (sqrtDiff * sqrtDiff == diff) return true\n            i -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgk3xd8fi.scala:19)\n\tat Problem.main(tmpgk3xd8fi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_fi9vw6d.scala:14)\n\tat Problem.main(tmp_fi9vw6d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i <= sqrt(n)) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpoga60efr.scala:15)\n\tat Problem.main(tmpoga60efr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_fi9vw6d.scala:14)\n\tat Problem.main(tmp_fi9vw6d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj693we4d.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbvd_880u.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val sq = i * i\n            if (sq > n) return false\n            val sq2 = sqrt(n - sq).toLong\n            if (sq2 * sq2 == n - sq) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpad3fo6c9.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        var i = sqrt\n        while (i >= 0) {\n            if (i * i == n) return true\n            i -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123959,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfn6cvfwu.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg8eja6ix.scala:18)\n\tat Problem.main(tmpg8eja6ix.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbvd_880u.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 0\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpntebpnm8.scala:16)\n\tat Problem.main(tmpntebpnm8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpohyd3x87.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var m = sqrt(n / 2).toLong\n        while (m > 0) {\n            if (m * m + (n - m * m) == n) return true\n            m -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaz2ta6gy.scala:15)\n\tat Problem.main(tmpaz2ta6gy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps7odpmn.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps7odpmn.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpohyd3x87.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            val sq = sqrt * sqrt\n            if (sq * 2 == n) return true\n            sqrt -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprem4mk2k.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123959,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmposr2f0b4.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            var j = 1\n            while (j * j < n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphln0tbsi.scala:18)\n\tat Problem.main(tmphln0tbsi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var s = sqrt(n).toLong\n        while (s > 0) {\n            if (s * s == n) return true\n            s -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyt0kwb6d.scala:14)\n\tat Problem.main(tmpyt0kwb6d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj693we4d.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j + i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp515qfjn1.scala:16)\n\tat Problem.main(tmp515qfjn1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            val sq = sqrt * sqrt\n            val dif = n - sq\n            val difSqrt = sqrt(dif).toLong\n            if (difSqrt * difSqrt == dif) return true\n            sqrt -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123959,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpk1kyzcp8.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123959,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpv9wxqxus.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            val j = sqrt(n + i * i)\n            if (j == j.toInt) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        if (n < 0) return false\n        var i = 1\n        while (i * i <= n) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_77t_ul4.scala:16)\n\tat Problem.main(tmp_77t_ul4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpbvod_d13.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            if (sq > n) return false\n            val dif = n - sq\n            val difSqrt = sqrt(dif).toLong\n            if (difSqrt * difSqrt == dif) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123966,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8v2blp9t.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123969,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (i * i + (n - i * i) * (n - i * i) == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123968,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmperbhpb03.scala:15)\n\tat Problem.main(tmperbhpb03.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj693we4d.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123969,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps7odpmn.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbvd_880u.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            if (sqrt(n + i * i).toLong == sqrt(n + i * i)) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123968,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl79rzo80.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_fi9vw6d.scala:14)\n\tat Problem.main(tmp_fi9vw6d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_fi9vw6d.scala:14)\n\tat Problem.main(tmp_fi9vw6d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i <= sqrt(n)) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpoga60efr.scala:15)\n\tat Problem.main(tmpoga60efr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj693we4d.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i)\n            if (j * j == n - i * i) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123966,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpncl5f_fg.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        var i = sqrt\n        while (i >= 1) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n            i -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123965,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_t2qj1lv.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps7odpmn.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123966,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp67g7cl46.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val m = sqrt(n).toLong\n        for (i <- 1 to m) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123968,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpefe9pshm.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (m : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            val sq = sqrt * sqrt\n            val dif = n - sq\n            val sqrt2 = sqrt(dif).toLong\n            if (sqrt2 * sqrt2 == dif) return true\n            sqrt -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123966,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpbne70r69.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val m = sqrt(n).toLong\n        for (i <- 1 to m) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123969,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiim5l83f.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (m : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        if (n < 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123968,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpdolzc61b.scala:7:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        if (n == 0) return true\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123968,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbu18n4wt.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpohyd3x87.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbvd_880u.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val sq = i * i\n            if (sq > n) return false\n            val dif = n - sq\n            val sqrtDif = sqrt(dif).toLong\n            if (sqrtDif * sqrtDif == dif) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123971,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1y_uhjs0.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var r = sqrt(n).toLong\n        if (r * r == n) return true\n        var i = 1\n        while (i <= r) {\n            var j = 1\n            while (j <= r) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123971,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxo9jo0cs.scala:20)\n\tat Problem.main(tmpxo9jo0cs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj693we4d.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toInt\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i)\n            if (j * j == n - i * i) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123969,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpq1aiatuk.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toInt\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj693we4d.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqk3_29kf.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg8eja6ix.scala:18)\n\tat Problem.main(tmpg8eja6ix.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (Math.sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfu1envlu.scala:15)\n\tat Problem.main(tmpfu1envlu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqk3_29kf.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i <= sqrt(n)) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3mj9dgpx.scala:14)\n\tat Problem.main(tmp3mj9dgpx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj693we4d.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        if (n < 0) return false\n        var i = 1L\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123969,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwxxka_in.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrtN = sqrt(n).toLong\n        if (sqrtN * sqrtN == n) return true\n        for (i <- 1 to sqrtN) {\n            var sqrtDiff = sqrt(n + i * i).toLong\n            if (sqrtDiff * sqrtDiff == n + i * i) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123971,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4eh2b3t5.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            if (sq * sq + n == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123969,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqpmhuzib.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toInt\n        for (i <- 1 to sqrt) {\n            var sq = i * i\n            var sq2 = sqrt(n - sq).toInt\n            if (sq2 * sq2 == n - sq) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123970,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpgsb872q0.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toInt\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_fi9vw6d.scala:14)\n\tat Problem.main(tmp_fi9vw6d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp57kk26qa.scala:16)\n\tat Problem.main(tmp57kk26qa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            val sq2 = sqrt(n - sq).toLong\n            if (sq2 * sq2 == n - sq) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpbvjp6mj6.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        if (n < 0) return false\n        var i = 0\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf0z_4yn9.scala:17)\n\tat Problem.main(tmpf0z_4yn9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1L to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp6tasccfw.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqk3_29kf.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp57kk26qa.scala:16)\n\tat Problem.main(tmp57kk26qa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpbvod_d13.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        var i = 0\n        while (i <= sqrt) {\n            var j = 0\n            while (j <= sqrt) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpx1vrm41h.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var s = sqrt(n).toLong\n        while (s * s > n) s -= 1\n        while (s * s < n) s += 1\n        return s * s == n\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeqhkc3ne.scala:12)\n\tat Problem.main(tmpeqhkc3ne.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps7odpmn.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8wb304wj.scala:16)\n\tat Problem.main(tmp8wb304wj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpucafhla0.scala:15)\n\tat Problem.main(tmpucafhla0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            var sq = sqrt * sqrt\n            if (sq < n) {\n                var sq2 = sqrt * sqrt\n                while (sq2 < n) {\n                    if (sq + sq2 == n) return true\n                    sq2 += 2 * sqrt + 1\n                }\n            }\n            sqrt -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpcdby3t87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        if (n < 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpms75jrbr.scala:7:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphsbkvuqh.scala:14)\n\tat Problem.main(tmphsbkvuqh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i <= n) {\n            if (i * i > n) return false\n            if (i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiipzoro6.scala:15)\n\tat Problem.main(tmpiipzoro6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp42__b0lb.scala:15)\n\tat Problem.main(tmp42__b0lb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val x = i * i\n            val y = n + x\n            val sqrt2 = sqrt(y).toLong\n            if (sqrt2 * sqrt2 == y) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpizu3e5nx.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg8eja6ix.scala:18)\n\tat Problem.main(tmpg8eja6ix.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123966,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp67g7cl46.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        if (sqrt * sqrt == n) return true\n        for (i <- 1L to sqrt) {\n            val sq = i * i\n            if (sq > n) return false\n            if (sqSquare(n - sq)) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuw9j39jf.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuw9j39jf.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mif\u001b[0m (sqSquare(n - sq)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: sqSquare\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        if (sqrt * sqrt == n) return true\n        for (i <- 1 to sqrt) {\n            var sq = i * i\n            if (sq > n) return false\n            var sq2 = sqrt(n - sq).toLong\n            if (sq2 * sq2 == n - sq) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprbd2f1i6.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrtN = sqrt(n).toLong\n        while (sqrtN * sqrtN > n) sqrtN -= 1\n        while (sqrtN * sqrtN < n) sqrtN += 1\n        return sqrtN * sqrtN == n\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiwd4g05n.scala:12)\n\tat Problem.main(tmpiwd4g05n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i)\n            if (j * j == n - i * i) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123966,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpncl5f_fg.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var m = sqrt(n).toLong\n        while (m * m > n) m -= 1\n        while (m * m < n) m += 1\n        return m * m == n\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvkivpj76.scala:12)\n\tat Problem.main(tmpvkivpj76.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 0\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0lh5_5yb.scala:16)\n\tat Problem.main(tmp0lh5_5yb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        if (n < 0) return false\n        var i = 0\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toInt\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1j2vb_eu.scala:17)\n\tat Problem.main(tmp1j2vb_eu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            var j = 1\n            while (j * j < n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphln0tbsi.scala:18)\n\tat Problem.main(tmphln0tbsi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            val sq2 = (n + sq) / 2\n            val sq3 = (n - sq) / 2\n            if (sq2 * sq2 == sq3 * sq3) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_xitz781.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbvd_880u.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj693we4d.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123966,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp67g7cl46.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg8eja6ix.scala:18)\n\tat Problem.main(tmpg8eja6ix.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg8eja6ix.scala:18)\n\tat Problem.main(tmpg8eja6ix.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var x = sqrt(n / 2).toLong\n        while (x > 0) {\n            if (x * x + (n - x * x) * (n - x * x) == n) return true\n            x -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp24oiusl4.scala:14)\n\tat Problem.main(tmp24oiusl4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        if (sqrt * sqrt == n) return true\n        for (i <- 1 to sqrt) {\n            var j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpppl3wplw.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg8eja6ix.scala:18)\n\tat Problem.main(tmpg8eja6ix.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var x = sqrt(n).toLong\n        while (x * x > n) x -= 1\n        while (x * x < n) x += 1\n        return x * x == n\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkfuujypg.scala:12)\n\tat Problem.main(tmpkfuujypg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123966,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp67g7cl46.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val sq = i * i\n            val sq2 = sqrt(n + sq).toLong\n            if (sq2 * sq2 == n + sq) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphupns73b.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        var i = 1\n        while (i <= sqrt) {\n            if (sqrt * sqrt == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7k05snnn.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1L to sqrt) {\n            if (sqrt * sqrt == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp6x4u65dv.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sq = sqrt(n).toLong\n        if (sq * sq == n) return true\n        for (i <- 1 to sq.toInt) {\n            var j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpak0a6vax.scala:16)\n\tat Problem.main(tmpak0a6vax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpucafhla0.scala:15)\n\tat Problem.main(tmpucafhla0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj693we4d.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val x = sqrt - i\n            val y = sqrt + i\n            if (x * x - y * y == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwa26ma4i.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toInt\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjk6p_e2o.scala:16)\n\tat Problem.main(tmpjk6p_e2o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var x = 1L\n        while (x * x < n) {\n            val y = sqrt(n - x * x)\n            if (y == y.toInt) return true\n            x += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn96rrdvf.scala:16)\n\tat Problem.main(tmpn96rrdvf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123966,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp67g7cl46.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_tb04u4.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isSquare(n - i * i)) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1L to sqrt) {\n            if (sqrt * sqrt == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp6x4u65dv.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_fi9vw6d.scala:14)\n\tat Problem.main(tmp_fi9vw6d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqk3_29kf.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var x = sqrt(n).toLong\n        while (x > 0) {\n            if (x * x == n) return true\n            x -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyrw_sub5.scala:14)\n\tat Problem.main(tmpyrw_sub5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123966,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp67g7cl46.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_fi9vw6d.scala:14)\n\tat Problem.main(tmp_fi9vw6d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj693we4d.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var sqrt = sqrt(n).toInt\n        for (i <- 1 to sqrt) {\n            var sq = i * i\n            if (sq > n) return false\n            var dif = n - sq\n            var sqrt2 = sqrt(dif).toInt\n            if (sqrt2 * sqrt2 == dif) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpj7c3l2eo.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toInt\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 0\n        while (i * i <= n) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510653,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_fi9vw6d.scala:14)\n\tat Problem.main(tmp_fi9vw6d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvu72pb87.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpbvod_d13.scala:6:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}