{
  "name": "mbpp_412_remove_odd",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = new ListBuffer[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) {\n                result += i\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(_ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        val evens = l.filter(x => x % 2 == 0)\n        evens\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp469snjml.scala:14)\n\tat Problem.main(tmp469snjml.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(_ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(_ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- l) {\n            if (i % 2 == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n        return l.filter(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}