{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert more than one list to nested dictionary.\n    def convertListDictionary(l1 : List[String], l2 : List[String], l3 : List[Long]) : List[Map[String,Map[String,Long]]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(convertListDictionary((List[String](\"S001\", \"S002\", \"S003\", \"S004\")), (List[String](\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\")), (List[Long](85l.toLong, 98l.toLong, 89l.toLong, 92l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"S001\" -> Map[String,Long](\"Adina Park\" -> 85l)), Map[String,Map[String,Long]](\"S002\" -> Map[String,Long](\"Leyton Marsh\" -> 98l)), Map[String,Map[String,Long]](\"S003\" -> Map[String,Long](\"Duncan Boyle\" -> 89l)), Map[String,Map[String,Long]](\"S004\" -> Map[String,Long](\"Saim Richards\" -> 92l))))));\n    assert(convertListDictionary((List[String](\"abc\", \"def\", \"ghi\", \"jkl\")), (List[String](\"python\", \"program\", \"language\", \"programs\")), (List[Long](100l.toLong, 200l.toLong, 300l.toLong, 400l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"abc\" -> Map[String,Long](\"python\" -> 100l)), Map[String,Map[String,Long]](\"def\" -> Map[String,Long](\"program\" -> 200l)), Map[String,Map[String,Long]](\"ghi\" -> Map[String,Long](\"language\" -> 300l)), Map[String,Map[String,Long]](\"jkl\" -> Map[String,Long](\"programs\" -> 400l))))));\n    assert(convertListDictionary((List[String](\"A1\", \"A2\", \"A3\", \"A4\")), (List[String](\"java\", \"C\", \"C++\", \"DBMS\")), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"A1\" -> Map[String,Long](\"java\" -> 10l)), Map[String,Map[String,Long]](\"A2\" -> Map[String,Long](\"C\" -> 20l)), Map[String,Map[String,Long]](\"A3\" -> Map[String,Long](\"C++\" -> 30l)), Map[String,Map[String,Long]](\"A4\" -> Map[String,Long](\"DBMS\" -> 40l))))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val list = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val map = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            list += map\n        }\n        list.toList",
    "        var result : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 until l1.length) {\n            var map1 : Map[String,Map[String,Long]] = Map()\n            var map2 : Map[String,Long] = Map()\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = result :+ map1\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        var result = List[Map[String,Map[String,Long]]]()\n        var map = Map[String,Map[String,Long]]()\n        for(i <- 0 until l1.length) {\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n        }\n        result = map :: result\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = map :: result\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            map += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        var result : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 until l1.length) {\n            var temp : Map[String,Map[String,Long]] = Map()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => x.grouped(2).toList)\n        val l6 = l5.map(x => x.map(y => y.head -> y.tail.head))\n        val l7 = l6.map(x => x.toMap)\n        val l8 = l7.map(x => Map(\"first\" -> x))\n        l8",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 to l1.length - 1) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        return result"
  ]
}