{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert more than one list to nested dictionary.\n    def convertListDictionary(l1 : List[String], l2 : List[String], l3 : List[Long]) : List[Map[String,Map[String,Long]]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(convertListDictionary((List[String](\"S001\", \"S002\", \"S003\", \"S004\")), (List[String](\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\")), (List[Long](85l.toLong, 98l.toLong, 89l.toLong, 92l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"S001\" -> Map[String,Long](\"Adina Park\" -> 85l)), Map[String,Map[String,Long]](\"S002\" -> Map[String,Long](\"Leyton Marsh\" -> 98l)), Map[String,Map[String,Long]](\"S003\" -> Map[String,Long](\"Duncan Boyle\" -> 89l)), Map[String,Map[String,Long]](\"S004\" -> Map[String,Long](\"Saim Richards\" -> 92l))))));\n    assert(convertListDictionary((List[String](\"abc\", \"def\", \"ghi\", \"jkl\")), (List[String](\"python\", \"program\", \"language\", \"programs\")), (List[Long](100l.toLong, 200l.toLong, 300l.toLong, 400l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"abc\" -> Map[String,Long](\"python\" -> 100l)), Map[String,Map[String,Long]](\"def\" -> Map[String,Long](\"program\" -> 200l)), Map[String,Map[String,Long]](\"ghi\" -> Map[String,Long](\"language\" -> 300l)), Map[String,Map[String,Long]](\"jkl\" -> Map[String,Long](\"programs\" -> 400l))))));\n    assert(convertListDictionary((List[String](\"A1\", \"A2\", \"A3\", \"A4\")), (List[String](\"java\", \"C\", \"C++\", \"DBMS\")), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"A1\" -> Map[String,Long](\"java\" -> 10l)), Map[String,Map[String,Long]](\"A2\" -> Map[String,Long](\"C\" -> 20l)), Map[String,Map[String,Long]](\"A3\" -> Map[String,Long](\"C++\" -> 30l)), Map[String,Map[String,Long]](\"A4\" -> Map[String,Long](\"DBMS\" -> 40l))))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val list = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val map = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            list += map\n        }\n        list.toList",
    "        var result : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 until l1.length) {\n            var map1 : Map[String,Map[String,Long]] = Map()\n            var map2 : Map[String,Long] = Map()\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = result :+ map1\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        var result = List[Map[String,Map[String,Long]]]()\n        var map = Map[String,Map[String,Long]]()\n        for(i <- 0 until l1.length) {\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n        }\n        result = map :: result\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = map :: result\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            map += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        var result : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 until l1.length) {\n            var temp : Map[String,Map[String,Long]] = Map()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => x.grouped(2).toList)\n        val l6 = l5.map(x => x.map(y => y.head -> y.tail.head))\n        val l7 = l6.map(x => x.toMap)\n        val l8 = l7.map(x => Map(\"first\" -> x))\n        l8",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 to l1.length - 1) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map1 = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = result :+ map1\n        }\n        return result",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1.get(x).map(y => Map(y -> m2.get(y).get)).get)).toList\n        m3",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        val l = List(l1,l2,l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var list = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map1 = Map[String,Long]()\n            map1 += (l2(i) -> l3(i))\n            map += (l1(i) -> map1)\n            list = list :+ map\n        }\n        list",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            map += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val l = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))\n        l",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))\n        m1",
    "        val l = List(l1,l2,l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var l : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 until l1.length) {\n            var m : Map[String,Map[String,Long]] = Map()\n            var m1 : Map[String,Long] = Map()\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            l = l :+ m\n        }\n        return l",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m1 = Map[String,Long]()\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            result = result :+ m\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m1 = Map[String,Long]()\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            result = result :+ m\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2))).toList\n        m1",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2))).toList\n        m1",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1.get(x).map(y => Map(y -> m2.get(y).get)).get)).toList\n        m3",
    "        val l = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))\n        l",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 until l1.length) {\n            var temp : Map[String,Map[String,Long]] = Map()\n            var temp2 : Map[String,Long] = Map()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = m1.map(x => x._1 -> m2)\n        val m4 = m3.map(x => Map(x._1 -> x._2))\n        m4.toList",
    "        // Write your code here\n        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        val l = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))\n        l",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = map :: result\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val result = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val m1 = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            result += m1\n        }\n        result.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = m1 :: result\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        val l = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))\n        l",
    "        val l = l1.zip(l2).zip(l3)\n        val m = Map[String,Map[String,Long]]()\n        for (i <- 0 until l.length) {\n            val (x, y) = l(i)\n            val (a, b) = x\n            if (m.contains(a)) {\n                val n = m(a)\n                n += (b -> y)\n                m += (a -> n)\n            } else {\n                m += (a -> Map(b -> y))\n            }\n        }\n        m.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 until l1.length) {\n            var map : Map[String,Map[String,Long]] = Map()\n            var map2 : Map[String,Long] = Map()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.zip(m2).toMap\n        val m4 = m1.zip(m3).toMap\n        val l4 = List(m4)\n        l4",
    "        var result = List[Map[String,Map[String,Long]]]()\n        var m1 = Map[String,Map[String,Long]]()\n        var m2 = Map[String,Long]()\n        for (i <- 0 until l1.length) {\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result ::= map\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        val map = Map[String,Map[String,Long]]()\n        val list = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            map.put(l1(i), Map(l2(i) -> l3(i)))\n        }\n        list.::(map)",
    "        val m1 = l1.zip(l2).map(x => Map(x._1 -> Map(x._2 -> l3(l1.indexOf(x._1)))))\n        m1",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map1 = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = result :+ map1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1(x).map(y => y -> m2(y)).toMap)).toList\n        m3",
    "        val l = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))\n        l",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var inner = Map[String,Map[String,Long]]()\n            var inner2 = Map[String,Long]()\n            inner2 += (l2(i) -> l3(i))\n            inner += (l1(i) -> inner2)\n            result = result :+ inner\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        var result : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 until l1.length) {\n            var map1 : Map[String,Map[String,Long]] = Map()\n            var map2 : Map[String,Long] = Map()\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = result :+ map1\n        }\n        return result",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m1 = Map[String,Long]()\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            result = result :+ m\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        var i = 0\n        while (i < l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n            i += 1\n        }\n        return result",
    "        val result = new ListBuffer[Map[String,Map[String,Long]]]\n        for (i <- 0 until l1.length) {\n            val m1 = new HashMap[String,Map[String,Long]]\n            val m2 = new HashMap[String,Long]\n            m2.put(l2(i), l3(i))\n            m1.put(l1(i), m2)\n            result += m1\n        }\n        result.toList",
    "        var result : List[Map[String,Map[String,Long]]] = List()\n        var map1 : Map[String,Map[String,Long]] = Map()\n        var map2 : Map[String,Long] = Map()\n        for (i <- 0 until l1.length) {\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = result :+ map1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp(l1(i)) = Map(l2(i) -> l3(i))\n            result = result :+ temp\n        }\n        return result",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1(x).map(y => Map(y -> m2(y))).toMap)).toList\n        m3",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        val l = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))\n        l",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 to l1.length - 1) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        val d1 = l1.zip(l2).toMap\n        val d2 = l2.zip(l3).toMap\n        val d3 = l1.map(x => Map(x -> d1(x).zip(d2(d1(x))).toMap))\n        d3",
    "        val l = List(l1,l2,l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            map += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m1 = Map[String,Long]()\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            result = result :+ m\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp(l1(i)) = Map(l2(i) -> l3(i))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        val list = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val map = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            list += map\n        }\n        list.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        val d1 = l1.distinct\n        val d2 = l2.distinct\n        val d3 = l3.distinct\n        val d1_d2 = d1.map(x => (x, d2))\n        val d1_d2_d3 = d1_d2.map(x => (x._1, x._2.map(y => (y, d3))))\n        d1_d2_d3.map(x => Map(x._1 -> x._2.toMap))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1(x))).map(x => x.map(y => y._1 -> m2(y._2)))\n        m3",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 to l1.length - 1) {\n            var d = Map[String,Map[String,Long]]()\n            var d1 = Map[String,Long]()\n            d1 += (l2(i) -> l3(i))\n            d += (l1(i) -> d1)\n            result = result :+ d\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val transposed = l.transpose\n        val result = transposed.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        result",
    "        if (l1.length != l2.length || l2.length != l3.length) return List()\n        val result = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val m1 = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            result += m1\n        }\n        result.toList",
    "        var result : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 until l1.length) {\n            var m1 : Map[String,Map[String,Long]] = Map()\n            var m2 : Map[String,Long] = Map()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        var i = 0\n        while (i < l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n            i += 1\n        }\n        return result",
    "        val result = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val m1 = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            result += m1\n        }\n        result.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m1 = Map[String,Long]()\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            result = result :+ m\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => x -> m1(x)).toMap\n        val m4 = m3.map(x => x._1 -> m2(x._2)).toMap\n        m4.toList",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m1 = Map[String,Long]()\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            result = result :+ m\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        val l = l1.zip(l2).zip(l3)\n        l.map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))",
    "        val l = l1.zip(l2.zip(l3))\n        val m = l.groupBy(_._1)\n        val n = m.map(x => Map(x._1 -> x._2.map(y => Map(y._2._1 -> y._2._2)).reduceLeft(_ ++ _)))\n        n.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 to l1.length - 1) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        // Write your code here\n        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val l : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 until l1.length) {\n            val m : Map[String,Map[String,Long]] = Map()\n            val m2 : Map[String,Long] = Map()\n            m2 += (l2(i) -> l3(i))\n            m += (l1(i) -> m2)\n            l :+ m\n        }\n        l",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = m1 :: result\n        }\n        result",
    "        val result = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val m1 = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            result += m1\n        }\n        result.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val t = l.transpose\n        val res = t.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        res",
    "        val list = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val map = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            list += map\n        }\n        list.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val m = l.transpose.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        m",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val l = List(l1,l2,l3).transpose\n        val m = l.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        m",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m1 = Map[String,Long]()\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            result = m :: result\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        var result : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 until l1.length) {\n            var m1 : Map[String,Map[String,Long]] = Map()\n            var m2 : Map[String,Long] = Map()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map1 = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = result :+ map1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val lt = l.transpose\n        val lm = lt.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        lm",
    "        val l = List(l1, l2, l3)\n        val m = l.transpose.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        m",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map1 = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = result :+ map1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1(x).map(y => Map(y -> m2(y))).toMap)).toList\n        m3",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp(l1(i)) = Map(l2(i) -> l3(i))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        return result",
    "        val result = new ListBuffer[Map[String,Map[String,Long]]]\n        for (i <- 0 until l1.length) {\n            val m1 = new HashMap[String,Map[String,Long]]\n            val m2 = new HashMap[String,Long]\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2.toMap)\n            result += m1.toMap\n        }\n        result.toList",
    "        val result = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val m = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            result += m\n        }\n        result.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var result : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 to l1.length - 1) {\n            var temp : Map[String,Map[String,Long]] = Map()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        // Write your code here\n        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        result",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        val result = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val m1 = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            result += m1\n        }\n        result.toList",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1.get(x).map(y => Map(y -> m2.get(y).get)).get)).toList\n        m3",
    "        var result : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 until l1.length) {\n            var map1 : Map[String,Map[String,Long]] = Map()\n            var map2 : Map[String,Long] = Map()\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = result :+ map1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result"
  ]
}