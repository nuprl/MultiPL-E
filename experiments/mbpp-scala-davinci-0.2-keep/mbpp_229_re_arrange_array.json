{
  "name": "mbpp_229_re_arrange_array",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        negSorted ::: posSorted",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val neg = arr.filter(_ < 0)\n        val pos = arr.filter(_ >= 0)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        val negSortedReversed = negSorted.reverse\n        val posSortedReversed = posSorted.reverse\n        val negSortedReversedFirstN = negSortedReversed.take(n.toInt)\n        val posSortedReversedFirstN = posSortedReversed.take(n.toInt)\n        val negSortedReversedFirstNReversed = negSortedReversedFirstN.reverse\n        val posSortedReversedFirstNReversed = posSortedReversedFirstN.reverse\n        val negSortedReversedFirstNReversedLastN = negSortedReversedFirstNReversed.drop(n.toInt)\n        val posSortedReversedFirstNReversedLastN = posSortedReversedFirstNReversed.drop(n.toInt)\n        val negSortedReversedFirstNReversedLastNReversed = negSortedReversedFirstNReversedLastN.reverse\n        val posSortedReversedFirstNReversedLastNReversed = posSortedReversedFirstNReversedLastN.reverse\n        val negSortedReversedFirstNReversedLastNReversedSorted = negSortedReversedFirstNReversedLastNReversed.sorted\n        val posSortedReversedFirstNReversedLastNReversedSorted = posSortedReversedFirstNReversedLastNReversed.sorted\n        val negSortedReversedFirstNReversedLastNReversedSortedReversed = negSortedReversedFirstNReversedLastNReversedSorted.reverse\n        val posSortedReversedFirstNReversedLastNReversedSortedReversed = posSortedReversedFirstNReversedLastNReversedSorted.reverse\n        val negSortedReversedFirstNReversedLastNReversedS",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        negSorted ::: posSorted",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        // First, we sort the array.\n        val sorted = arr.sorted\n        // Next, we split the array into two parts.\n        val (neg, pos) = sorted.splitAt(n.toInt)\n        // Finally, we merge the two parts.\n        neg.zip(pos).flatMap(x => List(x._1, x._2))",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sortWith(_ < _)\n        val posSorted = pos.sortWith(_ > _)\n        negSorted ::: posSorted",
    "        var i = 0\n        var j = n - 1\n        while (i < j) {\n            while (arr(i.toInt) < 0 && i < j) i += 1\n            while (arr(j.toInt) > 0 && i < j) j -= 1\n            if (i < j) {\n                val temp = arr(i.toInt)\n                arr(i.toInt) = arr(j.toInt)\n                arr(j.toInt) = temp\n            }\n        }\n        arr",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos"
  ]
}