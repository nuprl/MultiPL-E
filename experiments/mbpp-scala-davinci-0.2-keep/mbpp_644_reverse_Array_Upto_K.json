{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to reverse an array upto a given position.\n    def reverseArrayUptoK(input : List[Long], k : Long) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reverseArrayUptoK((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (4l)).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))));\n    assert(reverseArrayUptoK((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (2l)).equals((List[Long](5l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))));\n    assert(reverseArrayUptoK((List[Long](9l.toLong, 8l.toLong, 7l.toLong, 6l.toLong, 5l.toLong)), (3l)).equals((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 6l.toLong, 5l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = input.length\n        val output = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            if (i < k) output += input(k - 1 - i)\n            else output += input(i)\n        }\n        output.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until input.length) {\n            if (i < k) result += input(input.length - 1 - i)\n            else result += input(i)\n        }\n        result.toList",
    "        val output = new ListBuffer[Long]\n        for (i <- 0 until k) {\n            output += input(k - i - 1)\n        }\n        for (i <- k until input.length) {\n            output += input(i)\n        }\n        output.toList",
    "        val n = input.length\n        val output = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (i < k) {\n                output(i) = input(k - i - 1)\n            } else {\n                output(i) = input(i)\n            }\n        }\n        output.toList",
    "        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        if (k > input.length) {\n            input.reverse\n        } else {\n            val (first, second) = input.splitAt(k.toInt)\n            first.reverse ::: second\n        }",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until input.length) {\n            if (i < k) result += input(input.length - 1 - i)\n            else result += input(i)\n        }\n        result.toList",
    "        val output = new ListBuffer[Long]\n        for (i <- 0 until k) {\n            output += input(k - i - 1)\n        }\n        for (i <- k until input.length) {\n            output += input(i)\n        }\n        return output.toList",
    "        val n = input.length\n        val output = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            if (i < k) output += input(n - 1 - i)\n            else output += input(i)\n        }\n        output.toList",
    "        val output = new ListBuffer[Long]()\n        for (i <- 0 to input.length - 1) {\n            if (i < k) output += input(input.length - 1 - i)\n            else output += input(i)\n        }\n        output.toList",
    "        var result : List[Long] = List()\n        for (i <- 0 until k) {\n            result = input(i) :: result\n        }\n        for (i <- k until input.length) {\n            result = result :+ input(i)\n        }\n        return result",
    "        val output = new ListBuffer[Long]\n        for (i <- 0 until k) {\n            output += input(k - i - 1)\n        }\n        for (i <- k until input.length) {\n            output += input(i)\n        }\n        output.toList",
    "        val n = input.length\n        val output = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (i < k) output(i) = input(k - i - 1)\n            else output(i) = input(i)\n        }\n        output.toList",
    "        val n = input.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until k.toInt) {\n            result += input(k.toInt - i - 1)\n        }\n        for (i <- k.toInt until n) {\n            result += input(i)\n        }\n        result.toList",
    "        val n = input.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = if (i < k) n - k + i else i\n            result(j) = input(i)\n        }\n        result.toList",
    "        val n = input.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (i < k) result(i) = input(k - i - 1)\n            else result(i) = input(i)\n        }\n        result.toList",
    "        if (k == 0) input\n        else reverseArrayUptoK(input.tail :+ input.head, k - 1)",
    "        var result = List[Long]()\n        for (i <- 0 to k.toInt - 1) {\n            result = input(i) :: result\n        }\n        for (i <- k.toInt until input.length) {\n            result = result :+ input(i)\n        }\n        return result",
    "        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        val n = input.length\n        val output = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (i < k) output(i) = input(k - i - 1)\n            else output(i) = input(i)\n        }\n        output.toList"
  ]
}