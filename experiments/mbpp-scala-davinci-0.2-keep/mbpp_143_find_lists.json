{
  "name": "mbpp_143_find_lists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find number of lists present in the given tuple.\n    def findLists(Input : Any) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findLists((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)))) == (2l));\n    assert(findLists((Any(1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (3l));\n    assert(findLists((Any(9l.toLong, 8l.toLong, 7l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case _ : List[Any] => count += 1\n            case _ : Tuple2[Any, Any] => count += findLists(Input._1) + findLists(Input._2)\n            case _ => count\n        }\n        count",
    "        var count = 0\n        Input match {\n            case l : List[Any] => {\n                count += 1\n                for (i <- l) {\n                    count += findLists(i)\n                }\n            }\n            case _ =>\n        }\n        count",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => 1 + findLists(x) + findLists(y)\n            case (x : List[Any], y : Any) => 1 + findLists(x) + findLists(y)\n            case (x : Any, y : List[Any]) => 1 + findLists(x) + findLists(y)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case x : List[Any] => 1 + findLists(x)\n            case x : Any => 0\n        }",
    "        Input match {\n            case Input : List[Any] => Input.foldLeft(0)((a, b) => a + findLists(b))\n            case _ => 1\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case _ => 0\n        }",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => findLists(x) + findLists(y)\n            case (x : List[Any], y : Any) => findLists(x) + findLists(y)\n            case (x : Any, y : List[Any]) => findLists(x) + findLists(y)\n            case (x : List[Any]) => findLists(x)\n            case (x : Any) => findLists(x)\n            case (x : List[Any], y : Any, z : Any) => findLists(x) + findLists(y) + findLists(z)\n            case (x : Any, y : List[Any], z : Any) => findLists(x) + findLists(y) + findLists(z)\n            case (x : Any, y : Any, z : List[Any]) => findLists(x) + findLists(y) + findLists(z)\n            case (x : Any, y : Any, z : Any) => 0\n            case (x : List[Any], y : Any, z : Any, w : Any) => findLists(x) + findLists(y) + findLists(z) + findLists(w)\n            case (x : Any, y : List[Any], z : Any, w : Any) => findLists(x) + findLists(y) + findLists(z) + findLists(w)\n            case (x : Any, y : Any, z : List[Any], w : Any) => findLists(x) + findLists(y) + findLists(z) + findLists(w)\n            case (x : Any, y : Any, z : Any, w : List[Any]) => findLists(x) + findLists(y) + findLists(z) + findLists(w)\n            case (x : Any, y : Any, z : Any, w : Any) => 0\n            case (x : List[Any], y : Any, z : Any, w : Any, v : Any) => findLists(x",
    "        var count = 0\n        Input match {\n            case l : List[Any] => {\n                count += 1\n                for (i <- l) {\n                    count += findLists(i)\n                }\n            }\n            case _ =>\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        return count",
    "        Input match {\n            case x : List[Any] => x.foldLeft(1L)((a, b) => a + findLists(b))\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any]",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ =>\n        }\n        count",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => findLists(x) + findLists(y)\n            case (x : List[Any], y : Any) => findLists(x) + findLists(y)\n            case (x : Any, y : List[Any]) => findLists(x) + findLists(y)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case x : List[Any] => 1\n            case x : Any => 0\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any",
    "        Input match {\n            case List(x) => 1\n            case List(x, y) => 1\n            case List(x, y, z) => 1\n            case List(x, y, z, w) => 1\n            case List(x, y, z, w, v) => 1\n            case List(x, y, z, w, v, u) => 1\n            case List(x, y, z, w, v, u, t) => 1\n            case List(x, y, z, w, v, u, t, s) => 1\n            case List(x, y, z, w, v, u, t, s, r) => 1\n            case List(x, y, z, w, v, u, t, s, r, q) => 1\n            case List(x, y, z, w, v, u, t, s, r, q, p) => 1\n            case List(x, y, z, w, v, u, t, s, r, q, p, o) => 1\n            case List(x, y, z, w, v, u, t, s, r, q, p, o, n) => 1\n            case List(x, y, z, w, v, u, t, s, r, q, p, o, n, m) => 1\n            case List(x, y, z, w, v, u, t, s, r, q, p, o, n, m, l) => 1\n            case List(x, y, z, w, v, u, t, s, r, q, p, o, n, m, l, k) => 1\n            case List(x, y, z, w, v, u, t, s, r, q, p, o, n, m, l, k, j) => 1\n            case List(x, y, z, w, v, u, t, s, r, q, p, o, n, m, l, k, j, i) => 1\n            case List(x, y, z, w, v, u, t, s, r, q, p, o, n, m, l, k, j,",
    "        var count = 0\n        Input match {\n            case l : List[Any] => {\n                count += 1\n                for (i <- l) {\n                    count += findLists(i)\n                }\n            }\n            case t : Tuple2[Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n            }\n            case _ => {\n                count += 0\n            }\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    count += findLists(i)\n                }\n                count += 1\n            }\n            case t : Tuple2[Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n            }\n            case t : Tuple3[Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n            }\n            case t : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n                count += findLists(t._4)\n            }\n            case t : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n                count += findLists(t._4)\n                count += findLists(t._5)\n            }\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n                count += findLists(t._4)\n                count += findLists(t._5)\n                count += findLists(t._6)\n            }\n            case t : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n                count += findLists(t._4)\n                count += findLists(t._5)\n                count += findLists(t._6)\n                count += findLists(t._7",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count = count + 1\n                for (i <- x) {\n                    count = count + findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count = count + findLists(x._1) + findLists(x._2)\n            }\n            case x : Tuple3[Any, Any, Any] => {\n                count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            }\n            case x : Tuple4[Any, Any, Any, Any] => {\n                count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            }\n            case x : Tuple5[Any, Any, Any, Any, Any] => {\n                count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            }\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            }\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            }\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => {\n                count = count + findLists(x._1) + find",
    "        var count = 0\n        Input match {\n            case l : List[Any] => count += 1\n            case t : Tuple2[Any, Any] => count += findLists(t._1) + findLists(t._2)\n            case t : Tuple3[Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3)\n            case t : Tuple4[Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4)\n            case t : Tuple5[Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5)\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6)\n            case t : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7)\n            case t : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7) + findLists(t._8)\n            case t : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => count = count + 1\n            case t : Tuple2[Any, Any] => count = count + findLists(t._1) + findLists(t._2)\n            case t : Tuple3[Any, Any, Any] => count = count + findLists(t._1) + findLists(t._2) + findLists(t._3)\n            case t : Tuple4[Any, Any, Any, Any] => count = count + findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4)\n            case t : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5)\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6)\n            case t : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7)\n            case t : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7) + findLists(t._8)\n            case t : Tuple9",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => findLists(x) + findLists(y)\n            case (x : List[Any], y : Any) => findLists(x) + findLists(y)\n            case (x : Any, y : List[Any]) => findLists(x) + findLists(y)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case x : List[Any] => 1\n            case x : Any => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count += 0\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case l : List[_] => 1 + l.map(findLists).sum\n            case _ => 0\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + find",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists(_)).sum\n            case (x : Any) => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    count += findLists(i)\n                }\n                count += 1\n            }\n            case t : Tuple2[Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n            }\n            case _ => count\n        }\n        count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case (x : List[Any]) => count += 1\n            case (x : Any, y : Any) => count += findLists(x) + findLists(y)\n            case _ =>\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case _ => count = count\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ =>\n        }\n        count",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => findLists(x) + findLists(y)\n            case (x : List[Any], y : Any) => findLists(x) + findLists(y)\n            case (x : Any, y : List[Any]) => findLists(x) + findLists(y)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case x : List[Any] => 1\n            case x : Any => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => count += 1\n            case t : Tuple2[Any, Any] => count += findLists(t._1) + findLists(t._2)\n            case t : Tuple3[Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3)\n            case t : Tuple4[Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4)\n            case t : Tuple5[Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5)\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6)\n            case t : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7)\n            case t : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7) + findLists(t._8)\n            case t : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (x : List[_], y : List[_]) => 2\n            case (x : List[_], y : Any) => 1\n            case (x : Any, y : List[_]) => 1\n            case (x : Any, y : Any) => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ =>\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x: List[Any] => count += 1\n            case x: Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x: Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x: Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x: Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x: Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x: Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x: Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x: Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case Input : List[Any] => 1 + Input.map(findLists(_)).sum\n            case Input : Tuple2[Any, Any] => findLists(Input._1) + findLists(Input._2)\n            case _ => 0\n        }",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => findLists(x) + findLists(y)\n            case (x : List[Any], y : Any) => findLists(x) + findLists(y)\n            case (x : Any, y : List[Any]) => findLists(x) + findLists(y)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case x : List[Any] => 1\n            case x : Any => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[_] => count += 1\n            case x : Tuple2[_, _] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[_, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[_, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[_, _, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[_, _, _, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[_, _, _, _, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[_, _, _, _, _, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[_, _, _, _, _, _, _, _, _] => count += findLists",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        Input match {\n            case (x : List[Any]) => 1 + findLists(x)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case (a : List[Any], b : List[Any]) => count += 2\n            case (a : List[Any], b : Any) => count += 1\n            case (a : Any, b : List[Any]) => count += 1\n            case (a : Any, b : Any) => count += 0\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case (a : List[Any], b : List[Any]) => count += 2\n            case (a : List[Any], b : Any) => count += 1\n            case (a : Any, b : List[Any]) => count += 1\n            case (a : Any, b : Any) => count += 0\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case _ : Int => count = 0\n            case _ : Double => count = 0\n            case _ : String => count = 0\n            case _ : List[Any] => count = 1\n            case _ : Tuple2[Any, Any] => count = findLists(Input._1) + findLists(Input._2)\n            case _ : Tuple3[Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3)\n            case _ : Tuple4[Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4)\n            case _ : Tuple5[Any, Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5)\n            case _ : Tuple6[Any, Any, Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5) + findLists(Input._6)\n            case _ : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5) + findLists(Input._6) + findLists(Input._7)\n            case _ : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5) + findLists(Input._6) + findLists(Input._7) + findL",
    "        Input match {\n            case Nil => 0\n            case x :: xs => findLists(xs) + 1\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => find",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists(_)).sum\n            case (x : Tuple2[Any, Any]) => findLists(x._1) + findLists(x._2)\n            case (x : Tuple3[Any, Any, Any]) => findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case (x : Tuple4[Any, Any, Any, Any]) => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case (x : Tuple5[Any, Any, Any, Any, Any]) => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case (x : Tuple6[Any, Any, Any, Any, Any, Any]) => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case (x : Tuple7[Any, Any, Any, Any, Any, Any, Any]) => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case (x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any]) => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case (x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any]) =>",
    "        var count = 0\n        Input match {\n            case _ : List[Any] => count += 1\n            case _ : Tuple2[Any, Any] => count += findLists(Input._1) + findLists(Input._2)\n            case _ =>\n        }\n        count",
    "        var count = 0\n        Input match {\n            case Nil => count\n            case (x : List[_]) :: tail => count += 1; count += findLists(tail)\n            case (x : Tuple2[_, _]) :: tail => count += findLists(x); count += findLists(tail)\n            case (x : Tuple3[_, _, _]) :: tail => count += findLists(x); count += findLists(tail)\n            case (x : Tuple4[_, _, _, _]) :: tail => count += findLists(x); count += findLists(tail)\n            case (x : Tuple5[_, _, _, _, _]) :: tail => count += findLists(x); count += findLists(tail)\n            case (x : Tuple6[_, _, _, _, _, _]) :: tail => count += findLists(x); count += findLists(tail)\n            case (x : Tuple7[_, _, _, _, _, _, _]) :: tail => count += findLists(x); count += findLists(tail)\n            case (x : Tuple8[_, _, _, _, _, _, _, _]) :: tail => count += findLists(x); count += findLists(tail)\n            case (x : Tuple9[_, _, _, _, _, _, _, _, _]) :: tail => count += findLists(x); count += findLists(tail)\n            case (x : Tuple10[_, _, _, _, _, _, _, _, _, _]) :: tail => count += findLists(x); count += findLists(tail)\n            case (x : Tuple11[_, _, _, _, _, _, _, _, _, _, _]) :: tail => count += findLists(x); count += findLists(tail)\n            case (x : Tuple12[_, _, _, _, _, _, _, _, _, _, _, _]) :: tail => count += findLists(x); count += findLists(tail)\n            case (x : Tuple13",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case l : List[Any] => count += 1\n            case t : Tuple2[Any, Any] => count += findLists(t._1) + findLists(t._2)\n            case _ => count\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case (x : List[Any]) => count += 1\n            case (x : Any, y : Any) => count += findLists(x) + findLists(y)\n            case _ => count\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => count\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (x : List[Any]) => 1\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case _ => 0\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) +",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case Input : List[Any] => count += 1\n            case Input : Tuple2[Any, Any] => count += findLists(Input._1) + findLists(Input._2)\n            case _ => count += 0\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Any => {\n                count += 0\n            }\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => count += 1\n            case t : Tuple2[Any, Any] => count += findLists(t._1) + findLists(t._2)\n            case t : Tuple3[Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3)\n            case t : Tuple4[Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4)\n            case t : Tuple5[Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5)\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6)\n            case t : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7)\n            case t : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7) + findLists(t._8)\n            case t : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case x : Tuple3[Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n            }\n            case x : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n            }\n            case x : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n            }\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n            }\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n                count += findLists(x._7)\n",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ =>\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => {\n                return 0\n            }\n        }\n        return count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case _ => count = count + 0\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => count += 1\n            case t : Tuple2[Any, Any] => count += findLists(t._1) + findLists(t._2)\n            case t : Tuple3[Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3)\n            case t : Tuple4[Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4)\n            case t : Tuple5[Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5)\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6)\n            case t : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7)\n            case t : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7) + findLists(t._8)\n            case t : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => count += 1\n            case t : Tuple2[Any, Any] => count += findLists(t._1) + findLists(t._2)\n            case t : Tuple3[Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3)\n            case t : Tuple4[Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4)\n            case t : Tuple5[Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5)\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6)\n            case t : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7)\n            case t : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7) + findLists(t._8)\n            case t : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case (a, b, c) => findLists(a) + findLists(b) + findLists(c)\n            case (a, b, c, d) => findLists(a) + findLists(b) + findLists(c) + findLists(d)\n            case (a, b, c, d, e) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e)\n            case (a, b, c, d, e, f) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f)\n            case (a, b, c, d, e, f, g) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g)\n            case (a, b, c, d, e, f, g, h) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h)\n            case (a, b, c, d, e, f, g, h, i) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h) + findLists(i)\n            case (a, b, c, d, e, f, g, h, i, j) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case _ => 0\n        }",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case (a, b, c) => findLists(a) + findLists(b) + findLists(c)\n            case (a, b, c, d) => findLists(a) + findLists(b) + findLists(c) + findLists(d)\n            case (a, b, c, d, e) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e)\n            case (a, b, c, d, e, f) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f)\n            case (a, b, c, d, e, f, g) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g)\n            case (a, b, c, d, e, f, g, h) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h)\n            case (a, b, c, d, e, f, g, h, i) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h) + findLists(i)\n            case (a, b, c, d, e, f, g, h, i, j) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => {\n                count += 0\n            }\n        }\n        return count",
    "        Input match {\n            case x : List[Any] => x.map(findLists(_)).sum + 1\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        Input match {\n            case (x : List[Any]) => 1 + findLists(x)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case (x : Any) => findLists(x)\n            case _ => 0\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case (a, b) => {\n                count += findLists(a)\n                count += findLists(b)\n            }\n            case (a, b, c) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n            }\n            case (a, b, c, d) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n            }\n            case (a, b, c, d, e) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n                count += findLists(e)\n            }\n            case (a, b, c, d, e, f) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n                count += findLists(e)\n                count += findLists(f)\n            }\n            case (a, b, c, d, e, f, g) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n                count += findLists(e)\n                count += findLists(f)\n                count += findLists(g)\n            }\n            case (a, b, c, d, e, f, g, h) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n                count += findLists(e)\n                count += findLists(f)\n                count += findLists(g)\n                count += findLists(h)\n            }\n            case (a, b, c, d, e, f,",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = 1\n            case x : Tuple2[Any, Any] => count = findLists(x._1) + findLists(x._2)\n            case _ => count = 0\n        }\n        return count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any",
    "        Input match {\n            case Nil => 0\n            case x :: xs => findLists(x) + findLists(xs)\n            case x : List[_] => 1 + findLists(x)\n            case _ => 0\n        }",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists(_)).sum\n            case (x : Any) => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case Input : List[Any] => Input.map(findLists).sum + 1\n            case Input : Tuple2[Any, Any] => findLists(Input._1) + findLists(Input._2)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    count += findLists(i)\n                }\n                count += 1\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => count\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9",
    "        var count : Long = 0\n        Input match {\n            case Input : List[Any] => {\n                for (i <- Input) {\n                    count += findLists(i)\n                }\n            }\n            case Input : Tuple2[Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n            }\n            case Input : Tuple3[Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n            }\n            case Input : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n                count += findLists(Input._4)\n            }\n            case Input : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n                count += findLists(Input._4)\n                count += findLists(Input._5)\n            }\n            case Input : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n                count += findLists(Input._4)\n                count += findLists(Input._5)\n                count += findLists(Input._6)\n            }\n            case Input : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n                count += findLists(Input._4)\n                count += findLists(Input._5)\n                count += findLists(Input._6)\n                count += findLists(Input._7)\n            }\n",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case (a, b, c) => findLists(a) + findLists(b) + findLists(c)\n            case (a, b, c, d) => findLists(a) + findLists(b) + findLists(c) + findLists(d)\n            case (a, b, c, d, e) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e)\n            case (a, b, c, d, e, f) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f)\n            case (a, b, c, d, e, f, g) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g)\n            case (a, b, c, d, e, f, g, h) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h)\n            case (a, b, c, d, e, f, g, h, i) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h) + findLists(i)\n            case (a, b, c, d, e, f, g, h, i, j) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h",
    "        Input match {\n            case (x : List[Any]) => 1 + findLists(x)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case _ =>\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case a : List[Any] => count = count + 1\n            case a : Tuple2[Any, Any] => count = count + findLists(a._1) + findLists(a._2)\n            case a : Tuple3[Any, Any, Any] => count = count + findLists(a._1) + findLists(a._2) + findLists(a._3)\n            case a : Tuple4[Any, Any, Any, Any] => count = count + findLists(a._1) + findLists(a._2) + findLists(a._3) + findLists(a._4)\n            case a : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(a._1) + findLists(a._2) + findLists(a._3) + findLists(a._4) + findLists(a._5)\n            case a : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(a._1) + findLists(a._2) + findLists(a._3) + findLists(a._4) + findLists(a._5) + findLists(a._6)\n            case a : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(a._1) + findLists(a._2) + findLists(a._3) + findLists(a._4) + findLists(a._5) + findLists(a._6) + findLists(a._7)\n            case a : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(a._1) + findLists(a._2) + findLists(a._3) + findLists(a._4) + findLists(a._5) + findLists(a._6) + findLists(a._7) + findLists(a._8)\n            case a : Tuple9[Any",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists).sum\n            case (x : Any) => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case (x : List[Any]) => count += 1\n            case (x : Any, y : Any) => count += findLists(x) + findLists(y)\n            case _ => count\n        }\n        count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => findLists(x) + findLists(y)\n            case (x : List[Any], y : Any) => findLists(x) + findLists(y)\n            case (x : Any, y : List[Any]) => findLists(x) + findLists(y)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case x : List[Any] => 1\n            case x : Any => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (a : List[Any], b : List[Any]) => 2\n            case (a : List[Any], b : Any) => 1\n            case (a : Any, b : List[Any]) => 1\n            case (a : Any, b : Any) => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any",
    "        var count : Long = 0\n        Input match {\n            case (x : List[Any]) => count += 1\n            case (x : List[Any], y : List[Any]) => count += 2\n            case (x : List[Any], y : List[Any], z : List[Any]) => count += 3\n            case (x : List[Any], y : List[Any], z : List[Any], a : List[Any]) => count += 4\n            case (x : List[Any], y : List[Any], z : List[Any], a : List[Any], b : List[Any]) => count += 5\n            case (x : List[Any], y : List[Any], z : List[Any], a : List[Any], b : List[Any], c : List[Any]) => count += 6\n            case (x : List[Any], y : List[Any], z : List[Any], a : List[Any], b : List[Any], c : List[Any], d : List[Any]) => count += 7\n            case (x : List[Any], y : List[Any], z : List[Any], a : List[Any], b : List[Any], c : List[Any], d : List[Any], e : List[Any]) => count += 8\n            case (x : List[Any], y : List[Any], z : List[Any], a : List[Any], b : List[Any], c : List[Any], d : List[Any], e : List[Any], f : List[Any]) => count += 9\n            case (x : List[Any], y : List[Any], z : List[Any], a : List[Any], b : List[Any], c : List[Any], d : List[Any], e : List[Any], f : List[Any], g : List[Any]) => count += 10\n            case (x : List[Any], y : List[Any], z : List[Any], a : List[Any], b : List[Any], c : List[Any], d : List[Any], e : List[Any], f : List[Any], g : List[Any], h : List[Any]) => count += 11\n            case (x : List[Any], y : List[Any",
    "        Input match {\n            case Nil => 0\n            case x :: xs => findLists(xs) + 1\n            case (x : List[_]) :: xs => findLists(x) + findLists(xs)\n            case (x : Tuple2[_, _]) :: xs => findLists(x) + findLists(xs)\n            case (x : Tuple3[_, _, _]) :: xs => findLists(x) + findLists(xs)\n            case (x : Tuple4[_, _, _, _]) :: xs => findLists(x) + findLists(xs)\n            case (x : Tuple5[_, _, _, _, _]) :: xs => findLists(x) + findLists(xs)\n            case (x : Tuple6[_, _, _, _, _, _]) :: xs => findLists(x) + findLists(xs)\n            case (x : Tuple7[_, _, _, _, _, _, _]) :: xs => findLists(x) + findLists(xs)\n            case (x : Tuple8[_, _, _, _, _, _, _, _]) :: xs => findLists(x) + findLists(xs)\n            case (x : Tuple9[_, _, _, _, _, _, _, _, _]) :: xs => findLists(x) + findLists(xs)\n            case (x : Tuple10[_, _, _, _, _, _, _, _, _, _]) :: xs => findLists(x) + findLists(xs)\n            case (x : Tuple11[_, _, _, _, _, _, _, _, _, _, _]) :: xs => findLists(x) + findLists(xs)\n            case (x : Tuple12[_, _, _, _, _, _, _, _, _, _, _, _]) :: xs => findLists(x) + findLists(xs)\n            case (x : Tuple13[_, _, _, _, _,",
    "        var count : Long = 0\n        Input match {\n            case Input : List[Any] => {\n                for (i <- 0 until Input.length) {\n                    count += findLists(Input(i))\n                }\n                count += 1\n            }\n            case Input : Array[Any] => {\n                for (i <- 0 until Input.length) {\n                    count += findLists(Input(i))\n                }\n                count += 1\n            }\n            case Input : Tuple2[Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n            }\n            case Input : Tuple3[Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n            }\n            case Input : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n                count += findLists(Input._4)\n            }\n            case Input : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n                count += findLists(Input._4)\n                count += findLists(Input._5)\n            }\n            case Input : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n                count += findLists(Input._4)\n                count += findLists(Input._5)\n                count += findLists(Input._6)\n            }\n            case Input : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findL",
    "        var count = 0\n        Input match {\n            case (x: List[Any]) => count += 1\n            case (x: Any, y: Any) => count += findLists(x) + findLists(y)\n            case _ => count\n        }\n        count",
    "        Input match {\n            case Nil => 0\n            case (x:List[_]) :: xs => 1 + findLists(xs)\n            case _ :: xs => findLists(xs)\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count = count + 1 + x.map(findLists).sum\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case _ => count = count + 0\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    count += findLists(i)\n                }\n                count + 1\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => 0\n        }",
    "        Input match {\n            case Input : List[Any] => Input.map(findLists(_)).sum + 1\n            case Input : Tuple2[Any, Any] => findLists(Input._1) + findLists(Input._2)\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => {}\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case (a, b) => {\n                count += findLists(a)\n                count += findLists(b)\n            }\n            case (a, b, c) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n            }\n            case (a, b, c, d) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n            }\n            case (a, b, c, d, e) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n                count += findLists(e)\n            }\n            case (a, b, c, d, e, f) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n                count += findLists(e)\n                count += findLists(f)\n            }\n            case (a, b, c, d, e, f, g) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n                count += findLists(e)\n                count += findLists(f)\n                count += findLists(g)\n            }\n            case (a, b, c, d, e, f, g, h) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n                count += findLists(e)\n                count += findLists(f)\n                count += findLists(g)\n                count += findLists(h)\n            }\n            case (a, b, c, d, e, f, g,",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => {\n                count += 0\n            }\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case Nil => count\n            case x :: xs => {\n                count = count + 1\n                count = count + findLists(xs)\n            }\n            case _ => count\n        }\n        count",
    "        Input match {\n            case (x: List[Any]) => 1 + x.map(findLists).sum\n            case (x: Any) => x.asInstanceOf[Product].productIterator.map(findLists).sum\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case (a, b) => {\n                count += findLists(a)\n                count += findLists(b)\n            }\n            case (a, b, c) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n            }\n            case (a, b, c, d) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n            }\n            case (a, b, c, d, e) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n                count += findLists(e)\n            }\n            case (a, b, c, d, e, f) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n                count += findLists(e)\n                count += findLists(f)\n            }\n            case (a, b, c, d, e, f, g) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n                count += findLists(e)\n                count += findLists(f)\n                count += findLists(g)\n            }\n            case (a, b, c, d, e, f, g, h) => {\n                count += findLists(a)\n                count += findLists(b)\n                count += findLists(c)\n                count += findLists(d)\n                count += findLists(e)\n                count += findLists(f)\n                count += findLists(g)\n                count += findLists(h)\n            }\n            case (a, b, c, d, e, f, g,",
    "        var count : Long = 0\n        Input match {\n            case (a, b) => count = count + findLists(a) + findLists(b)\n            case (a, b, c) => count = count + findLists(a) + findLists(b) + findLists(c)\n            case (a, b, c, d) => count = count + findLists(a) + findLists(b) + findLists(c) + findLists(d)\n            case (a, b, c, d, e) => count = count + findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e)\n            case (a, b, c, d, e, f) => count = count + findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f)\n            case (a, b, c, d, e, f, g) => count = count + findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g)\n            case (a, b, c, d, e, f, g, h) => count = count + findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h)\n            case (a, b, c, d, e, f, g, h, i) => count = count + findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h) + findLists(i)\n            case (a, b, c, d, e, f, g, h, i, j) => count = count + findLists(a) + findLists",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => findLists(x) + findLists(y)\n            case (x : List[Any], y : Any) => findLists(x) + findLists(y)\n            case (x : Any, y : List[Any]) => findLists(x) + findLists(y)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case x : List[Any] => 1\n            case x : Any => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (a : List[Any], b : List[Any]) => 2\n            case (a : List[Any], b : Any) => 1\n            case (a : Any, b : List[Any]) => 1\n            case (a : Any, b : Any) => 0\n        }",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists(_)).sum\n            case (x : Any) => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case _ => count = count\n        }\n        return count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) +",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case _ => 0\n        }",
    "        var count = 0L\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => {}\n        }\n        return count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists(_)).sum\n            case (x : Any) => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case (a, b, c) => findLists(a) + findLists(b) + findLists(c)\n            case (a, b, c, d) => findLists(a) + findLists(b) + findLists(c) + findLists(d)\n            case (a, b, c, d, e) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e)\n            case (a, b, c, d, e, f) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f)\n            case (a, b, c, d, e, f, g) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g)\n            case (a, b, c, d, e, f, g, h) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h)\n            case (a, b, c, d, e, f, g, h, i) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h) + findLists(i)\n            case (a, b, c, d, e, f, g, h, i, j) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h",
    "        Input match {\n            case x : List[Any] => x.map(findLists).sum + 1\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count += 0\n        }\n        return count",
    "        Input match {\n            case x: List[Any] => 1 + x.map(findLists).sum\n            case x: Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case _ =>\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case x : Tuple3[Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n            }\n            case x : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n            }\n            case x : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n            }\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n            }\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n                count += findLists(x._7",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ =>\n        }\n        count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists(_)).sum\n            case (x : Any) => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    count += findLists(i)\n                }\n                count += 1\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => count\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        return count",
    "        Input match {\n            case (x : List[Any]) => 1 + findLists(x)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case _ => 0\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1 + findLists(x.head) + findLists(x.tail)\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case _ => count = count\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case x : Tuple3[Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n            }\n            case x : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n            }\n            case x : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n            }\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n            }\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n                count += findLists(x._7",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => {}\n        }\n        count",
    "        var count = 0\n        Input match {\n            case l : List[Any] => {\n                count += 1\n                for (i <- l) {\n                    count += findLists(i)\n                }\n            }\n            case _ =>\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        return count",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists(_)).sum\n            case (x : Any) => x.asInstanceOf[List[Any]].map(findLists(_)).sum\n        }",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count = 1\n            case x : Tuple2[Any, Any] => count = findLists(x._1) + findLists(x._2)\n            case _ => count = 0\n        }\n        count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case x : Tuple3[Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n            }\n            case x : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n            }\n            case x : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n            }\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n            }\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n                count += findLists(x._7",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case (x : List[Any]) => count += 1\n            case (x : Any, y : Any) => count += findLists(x) + findLists(y)\n            case _ =>\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case list : List[Any] => count += 1\n            case tuple : Tuple2[Any, Any] => count += findLists(tuple._1) + findLists(tuple._2)\n            case tuple : Tuple3[Any, Any, Any] => count += findLists(tuple._1) + findLists(tuple._2) + findLists(tuple._3)\n            case tuple : Tuple4[Any, Any, Any, Any] => count += findLists(tuple._1) + findLists(tuple._2) + findLists(tuple._3) + findLists(tuple._4)\n            case tuple : Tuple5[Any, Any, Any, Any, Any] => count += findLists(tuple._1) + findLists(tuple._2) + findLists(tuple._3) + findLists(tuple._4) + findLists(tuple._5)\n            case tuple : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(tuple._1) + findLists(tuple._2) + findLists(tuple._3) + findLists(tuple._4) + findLists(tuple._5) + findLists(tuple._6)\n            case tuple : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(tuple._1) + findLists(tuple._2) + findLists(tuple._3) + findLists(tuple._4) + findLists(tuple._5) + findLists(tuple._6) + findLists(tuple._7)\n            case tuple : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(tuple._1) + findLists(tuple._2) + findLists(tuple._3) + findLists(tuple._4) + findLists(tuple._5) + findLists(tuple._6) + findLists(tuple._7",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => {}\n        }\n        count",
    "        Input match {\n            case Nil => 0\n            case (x : List[Any]) :: xs => 1 + findLists(xs)\n            case x :: xs => findLists(xs)\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case Nil => 0\n            case (x:List[_]) :: xs => 1 + findLists(xs)\n            case _ :: xs => findLists(xs)\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case _ => count = count + 0\n        }\n        return count",
    "        Input match {\n            case (x, y) => findLists(x) + findLists(y)\n            case x : List[_] => 1\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => {\n                for (x <- l) {\n                    count += findLists(x)\n                }\n                count += 1\n            }\n            case t : Tuple2[Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n            }\n            case t : Tuple3[Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n            }\n            case t : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n                count += findLists(t._4)\n            }\n            case t : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n                count += findLists(t._4)\n                count += findLists(t._5)\n            }\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n                count += findLists(t._4)\n                count += findLists(t._5)\n                count += findLists(t._6)\n            }\n            case t : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n                count += findLists(t._4)\n                count += findLists(t._5)\n                count += findLists(t._6)\n                count += findLists(t._7",
    "        Input match {\n            case Input : List[Any] => Input.map(findLists(_)).sum + 1\n            case Input : Tuple2[Any, Any] => findLists(Input._1) + findLists(Input._2)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => findLists(x) + findLists(y)\n            case (x : List[Any], y : Any) => findLists(x) + findLists(y)\n            case (x : Any, y : List[Any]) => findLists(x) + findLists(y)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case x : List[Any] => 1\n            case x : Any => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x:List[Any] => count = 1 + x.map(findLists).sum\n            case x:Any => count = 0\n        }\n        count"
  ]
}