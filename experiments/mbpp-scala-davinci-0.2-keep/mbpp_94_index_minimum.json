{
  "name": "mbpp_94_index_minimum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    def indexMinimum(test_list : List[Either[String, Long]]) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(indexMinimum((List[Either[String, Long]]((\"Rash\", 143l), (\"Manjeet\", 200l), (\"Varsha\", 100l)))).equals((\"Varsha\")));\n    assert(indexMinimum((List[Either[String, Long]]((\"Yash\", 185l), (\"Dawood\", 125l), (\"Sanya\", 175l)))).equals((\"Dawood\")));\n    assert(indexMinimum((List[Either[String, Long]]((\"Sai\", 345l), (\"Salman\", 145l), (\"Ayesha\", 96l)))).equals((\"Ayesha\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (test_list(i).right.get < min_value) {\n                        min_index = i\n                        min_value = test_list(i).right.get\n                    }\n                }\n                case Right(x) => {\n                    if (test_list(i).right.get < min_value) {\n                        min_index = i\n                        min_value = test_list(i).right.get\n                    }\n                }\n            }\n        }\n        test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (min_value > x.length) {\n                        min_index = i\n                        min_value = x.length\n                    }\n                }\n                case Right(x) => {\n                    if (min_value > x) {\n                        min_index = i\n                        min_value = x\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }",
    "        var min = Long.MaxValue\n        var min_index = -1\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(s) => {\n                    if (min == Long.MaxValue) {\n                        min = 0\n                        min_index = i\n                    }\n                }\n                case Right(l) => {\n                    if (l < min) {\n                        min = l\n                        min_index = i\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(s) => s\n            case Right(l) => \"error\"\n        }",
    "        var min_index = 0\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < test_list(min_index).right.get) {\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = -1\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index : Long = Long.MaxValue\n        var min_value : String = \"\"\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min_index) {\n                    min_index = test_list(i).right.get\n                    min_value = test_list(i).left.get\n                }\n            }\n        }\n        return min_value",
    "        var min = Long.MaxValue\n        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min) {\n                min = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        val min = test_list.map(_.right.get).min\n        test_list.filter(_.right.get == min).head.left.get",
    "        var min = Long.MaxValue\n        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min) {\n                min = test_list(i).right.get\n                min_index = i\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = test_list(0).right.get\n        for (i <- 1 until test_list.size) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            val value = test_list(i) match {\n                case Left(x) => Long.MaxValue\n                case Right(x) => x\n            }\n            if (value < min_value) {\n                min_index = i\n                min_value = value\n            }\n        }\n        test_list(min_index) match {\n            case Left(x) => x\n            case Right(x) => \"\"\n        }",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = test_list(0).right.get\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        if (test_list.isEmpty) {\n            return \"\"\n        }\n        var min_index = 0\n        var min_value = test_list(0).right.get\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (test_list(i).right.get < min_value) {\n                        min_index = i\n                        min_value = test_list(i).right.get\n                    }\n                }\n                case Right(x) => {\n                    if (test_list(i).right.get < min_value) {\n                        min_index = i\n                        min_value = test_list(i).right.get\n                    }\n                }\n            }\n        }\n        test_list(min_index).left.get",
    "        val min = test_list.map(x => x.right.get).min\n        test_list.filter(x => x.right.get == min).head.left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min) {\n                    min = test_list(i).right.get\n                    min_index = i\n                }\n            }\n        }\n        test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        var min_index : Long = Long.MaxValue\n        var min_index_value : String = \"\"\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min_index) {\n                    min_index = test_list(i).right.get\n                    min_index_value = test_list(i).left.get\n                }\n            }\n        }\n        return min_index_value",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        test_list.foldLeft((\"\", Long.MaxValue))((a, b) => {\n            if (b.isRight) {\n                if (b.right.get < a._2) (b.left.get, b.right.get)\n                else a\n            } else a\n        })._1",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (x < min_value) {\n                        min_value = x\n                        min_index = i\n                    }\n                }\n                case Right(x) => {\n                    if (x < min_value) {\n                        min_value = x\n                        min_index = i\n                    }\n                }\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = test_list(0).right.get\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(s) => {\n                    if (s.length < min) {\n                        min = s.length\n                        min_index = i\n                    }\n                }\n                case Right(l) => {\n                    if (l < min) {\n                        min = l\n                        min_index = i\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.getOrElse(Long.MaxValue) < min_value) {\n                min_index = i\n                min_value = test_list(i).right.getOrElse(Long.MaxValue)\n            }\n        }\n        test_list(min_index).left.getOrElse(\"\")",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_value = Long.MaxValue\n        var min_index = -1\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (min_index == -1) {\n                        min_index = i\n                    }\n                }\n                case Right(x) => {\n                    if (x < min_value) {\n                        min_value = x\n                        min_index = i\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(x) => x\n            case Right(x) => \"\"\n        }",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = test_list(0).right.get\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min) {\n                min = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = test_list(0).right.get\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var index = 0\n        var i = 0\n        for (t <- test_list) {\n            t match {\n                case Left(s) => {\n                    if (i < min) {\n                        min = i\n                        index = i\n                    }\n                }\n                case Right(l) => {\n                    if (l < min) {\n                        min = l\n                        index = i\n                    }\n                }\n            }\n            i += 1\n        }\n        test_list(index) match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }",
    "        val min = test_list.map(x => x.right.get).min\n        test_list.filter(x => x.right.get == min).head.left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = test_list(0).right.get\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min) {\n                min = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = test_list(0).right.get\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = test_list(0).right.get\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        val min = test_list.map(x => x.right.get).min\n        test_list.filter(x => x.right.get == min).head.left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min) {\n                min = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = -1\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min) {\n                min = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        val min = test_list.map(_.right.get).min\n        test_list.filter(_.right.get == min).head.left.get",
    "        val filtered_list = test_list.filter(x => x.isRight)\n        val mapped_list = filtered_list.map(x => x.right.get)\n        val min_index = mapped_list.indexOf(mapped_list.min)\n        test_list(min_index).left.get",
    "        var min_index = 0\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < test_list(min_index).right.get) {\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_value = Long.MaxValue\n        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = -1\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min) {\n                    min = test_list(i).right.get\n                    min_index = i\n                }\n            }\n        }\n        return test_list(min_index).left.get",
    "        val min_index = test_list.map(_.right.get).zipWithIndex.min._2\n        test_list(min_index).left.get",
    "        val min = test_list.map(x => x.right.get).min\n        test_list.filter(x => x.right.get == min).head.left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index : Long = Long.MaxValue\n        var min_value : String = \"\"\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isLeft) {\n                if (test_list(i).left.get.length < min_index) {\n                    min_index = test_list(i).left.get.length\n                    min_value = test_list(i).left.get\n                }\n            }\n        }\n        return min_value",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min) {\n                min = test_list(i).right.get\n                min_index = i\n            }\n        }\n        return test_list(min_index).left.get",
    "        val min = test_list.map(x => x.right.get).min\n        test_list.filter(x => x.right.get == min).head.left.get",
    "        var min = Long.MaxValue\n        var min_index = -1\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min) {\n                min = test_list(i).right.get\n                min_index = i\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = -1\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(value) => {\n                    if (min_index == -1) {\n                        min_index = i\n                        min_value = value.length\n                    } else {\n                        if (value.length < min_value) {\n                            min_index = i\n                            min_value = value.length\n                        }\n                    }\n                }\n                case Right(value) => {\n                    if (min_index == -1) {\n                        min_index = i\n                        min_value = value\n                    } else {\n                        if (value < min_value) {\n                            min_index = i\n                            min_value = value\n                        }\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(value) => value\n            case Right(value) => value.toString\n        }",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        val list = test_list.filter(_.isRight).map(_.right.get)\n        val min = list.min\n        val index = list.indexOf(min)\n        test_list(index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        test_list.foldLeft((\"\", Long.MaxValue))((acc, x) => {\n            x match {\n                case Left(s) => {\n                    if (acc._2 > 0) {\n                        (s, acc._2)\n                    } else {\n                        acc\n                    }\n                }\n                case Right(l) => {\n                    if (acc._2 > l) {\n                        (acc._1, l)\n                    } else {\n                        acc\n                    }\n                }\n            }\n        })._1",
    "        var min_index : Long = Long.MaxValue\n        var min_index_value : String = \"\"\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min_index) {\n                    min_index = test_list(i).right.get\n                    min_index_value = test_list(i).left.get\n                }\n            }\n        }\n        return min_index_value",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = -1\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min) {\n                min = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min) {\n                min = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < test_list(min_index).right.get) {\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = test_list(0).right.get\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(s) => {\n                    if (min_value > 0) {\n                        min_index = i\n                        min_value = 0\n                    }\n                }\n                case Right(l) => {\n                    if (l < min_value) {\n                        min_index = i\n                        min_value = l\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(s) => s\n            case Right(l) => \"error\"\n        }",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.getOrElse(Long.MaxValue) < min_value) {\n                min_index = i\n                min_value = test_list(i).right.getOrElse(Long.MaxValue)\n            }\n        }\n        test_list(min_index).left.getOrElse(\"\")",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = test_list(0).right.get\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index : Long = Long.MaxValue\n        var min_index_value : String = \"\"\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(value) => {\n                    if (test_list(i).right.get < min_index) {\n                        min_index = test_list(i).right.get\n                        min_index_value = value\n                    }\n                }\n                case Right(value) => {}\n            }\n        }\n        return min_index_value",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (x < min_value) {\n                        min_index = i\n                        min_value = x\n                    }\n                }\n                case Right(x) => {\n                    if (x < min_value) {\n                        min_index = i\n                        min_value = x\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(value) => {\n                    if (min_value > 0) {\n                        min_index = i\n                        min_value = 0\n                    }\n                }\n                case Right(value) => {\n                    if (value < min_value) {\n                        min_index = i\n                        min_value = value\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(value) => value\n            case Right(value) => value.toString\n        }",
    "        var min = Long.MaxValue\n        var min_index = -1\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min) {\n                    min = test_list(i).right.get\n                    min_index = i\n                }\n            }\n        }\n        if (min_index == -1) {\n            return \"None\"\n        }\n        else {\n            return test_list(min_index).left.get\n        }",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        val min = test_list.map(_.right.get).min\n        test_list.filter(_.right.get == min).head.left.get",
    "        val min_index = test_list.map(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        }).zipWithIndex.minBy(_._1)._2\n        test_list(min_index) match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        val min_index = test_list.map(_.right.get).zipWithIndex.min._2\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = test_list(0).right.get\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < test_list(min_index).right.get) {\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        val test_list_right = test_list.filter(_.isRight).map(_.right.get)\n        val min_index = test_list_right.indexOf(test_list_right.min)\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = -1\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min) {\n                    min = test_list(i).right.get\n                    min_index = i\n                }\n            }\n        }\n        if (min_index == -1) {\n            return \"No values in list\"\n        }\n        return test_list(min_index).left.get",
    "        var min_index : Long = Long.MaxValue\n        var min_index_value : String = \"\"\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min_index) {\n                    min_index = test_list(i).right.get\n                    min_index_value = test_list(i).left.get\n                }\n            }\n        }\n        return min_index_value",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (min_value > x.length) {\n                        min_index = i\n                        min_value = x.length\n                    }\n                }\n                case Right(x) => {\n                    if (min_value > x) {\n                        min_index = i\n                        min_value = x\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }",
    "        var min_index : Long = Long.MaxValue\n        var min_value : String = \"\"\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min_index) {\n                    min_index = test_list(i).right.get\n                    min_value = test_list(i).left.get\n                }\n            }\n        }\n        return min_value",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        val min_index = test_list.indexOf(test_list.minBy(_.right.get))\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (test_list(i).right.get < min_value) {\n                        min_index = i\n                        min_value = test_list(i).right.get\n                    }\n                }\n                case Right(x) => {\n                    if (test_list(i).right.get < min_value) {\n                        min_index = i\n                        min_value = test_list(i).right.get\n                    }\n                }\n            }\n        }\n        return test_list(min_index).left.get",
    "        val min = test_list.map(x => x.right.get).min\n        test_list.filter(x => x.right.get == min).head.left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        val min = test_list.map(_.right.get).min\n        test_list.filter(_.right.get == min).head.left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (min_value > x.length) {\n                        min_value = x.length\n                        min_index = i\n                    }\n                }\n                case Right(x) => {\n                    if (min_value > x) {\n                        min_value = x\n                        min_index = i\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (min_value > x.length) {\n                        min_index = i\n                        min_value = x.length\n                    }\n                }\n                case Right(x) => {\n                    if (min_value > x) {\n                        min_index = i\n                        min_value = x\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        val min_index = test_list.foldLeft(0)((acc, x) => if (x.isRight && x.right.get < test_list(acc).right.get) test_list.indexOf(x) else acc)\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        if (test_list.isEmpty) {\n            \"List is empty\"\n        } else {\n            val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n            test_list(min_index).left.get\n        }",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = test_list(0).right.get\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        val min = test_list.map(_.right.get).min\n        test_list.filter(_.right.get == min).head.left.get",
    "        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < test_list(min_index).right.get) {\n                min_index = i\n            }\n        }\n        return test_list(min_index).left.get",
    "        val min = test_list.map(x => x.right.get).min\n        test_list.filter(x => x.right.get == min).map(x => x.left.get).head",
    "        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < test_list(min_index).right.get) {\n                min_index = i\n            }\n        }\n        return test_list(min_index).left.get",
    "        val min_index = test_list.map(_.right.get).zipWithIndex.min._2\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        val min = test_list.map(x => x match {\n            case Left(a) => a\n            case Right(b) => b\n        }).min\n        test_list.filter(x => x match {\n            case Left(a) => a\n            case Right(b) => b\n        } == min).head.left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        val min = test_list.map(x => x.right.get).min\n        test_list.filter(x => x.right.get == min).head.left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < test_list(min_index).right.get) {\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        val min = test_list.map(_.right.get).min\n        test_list.filter(_.right.get == min).head.left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = -1\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min) {\n                    min = test_list(i).right.get\n                    min_index = i\n                }\n            }\n        }\n        if (min_index == -1) {\n            return \"No minimum\"\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var minimum = Long.MaxValue\n        var index = 0\n        var i = 0\n        for (e <- test_list) {\n            e match {\n                case Left(s) => {\n                    if (minimum > test_list(i).right.get) {\n                        minimum = test_list(i).right.get\n                        index = i\n                    }\n                }\n                case Right(l) => {\n                    if (minimum > l) {\n                        minimum = l\n                        index = i\n                    }\n                }\n            }\n            i += 1\n        }\n        test_list(index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (min_value > x.length) {\n                        min_index = i\n                        min_value = x.length\n                    }\n                }\n                case Right(x) => {\n                    if (min_value > x) {\n                        min_index = i\n                        min_value = x\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }",
    "        val list = test_list.filter(_.isLeft).map(_.left.get)\n        val min = test_list.filter(_.isRight).map(_.right.get).min\n        list(test_list.filter(_.isRight).map(_.right.get).indexOf(min))",
    "        var min = Long.MaxValue\n        var min_index = -1\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min) {\n                    min = test_list(i).right.get\n                    min_index = i\n                }\n            }\n        }\n        if (min_index == -1) {\n            return \"No minimum found\"\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(s) => {\n                    if (min_value > 0) {\n                        min_index = i\n                        min_value = 0\n                    }\n                }\n                case Right(l) => {\n                    if (l < min_value) {\n                        min_index = i\n                        min_value = l\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        val min = test_list.map(x => x.right.get).min\n        test_list.filter(x => x.right.get == min).head.left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index : Int = 0\n        var min_value : Long = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            val value = test_list(i) match {\n                case Left(x) => Long.MaxValue\n                case Right(x) => x\n            }\n            if (value < min_value) {\n                min_value = value\n                min_index = i\n            }\n        }\n        test_list(min_index) match {\n            case Left(x) => x\n            case Right(x) => \"\"\n        }",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (test_list(i).right.get < min_value) {\n                        min_index = i\n                        min_value = test_list(i).right.get\n                    }\n                }\n                case Right(x) => {\n                    if (test_list(i).right.get < min_value) {\n                        min_index = i\n                        min_value = test_list(i).right.get\n                    }\n                }\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get"
  ]
}